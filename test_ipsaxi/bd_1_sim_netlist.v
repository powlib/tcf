// Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2017.4 (win64) Build 2086221 Fri Dec 15 20:55:39 MST 2017
// Date        : Sat Jan 12 16:48:01 2019
// Host        : MININT-EE5P02Q running 64-bit major release  (build 9200)
// Command     : write_verilog ./bd_1_sim_netlist.v -force -include_xilinx_libs
// Design      : bd_1
// Purpose     : This is a Verilog netlist of the current design or from a specific cell of the design. The output is an
//               IEEE 1364-2001 compliant Verilog HDL file that contains netlist information obtained from the input
//               design files.
// Device      : xc7a100tcsg324-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CORE_GENERATION_INFO = "bd_1,IP_Integrator,{x_ipVendor=xilinx.com,x_ipLibrary=BlockDiagram,x_ipName=bd_1,x_ipVersion=1.00.a,x_ipLanguage=VERILOG,numBlks=15,numReposBlks=10,numNonXlnxBlks=0,numHierBlks=5,maxHierDepth=0,numSysgenBlks=0,numHlsBlks=0,numHdlrefBlks=0,numPkgbdBlks=0,bdsource=USER,synth_mode=OOC_per_BD}" *) (* HW_HANDOFF = "bd_1.hwdef" *) 
(* STRUCTURAL_NETLIST = "yes" *)
module bd_1
   (M00_AXI_0_araddr,
    M00_AXI_0_arburst,
    M00_AXI_0_arcache,
    M00_AXI_0_arid,
    M00_AXI_0_arlen,
    M00_AXI_0_arlock,
    M00_AXI_0_arprot,
    M00_AXI_0_arqos,
    M00_AXI_0_arready,
    M00_AXI_0_arregion,
    M00_AXI_0_arsize,
    M00_AXI_0_arvalid,
    M00_AXI_0_awaddr,
    M00_AXI_0_awburst,
    M00_AXI_0_awcache,
    M00_AXI_0_awid,
    M00_AXI_0_awlen,
    M00_AXI_0_awlock,
    M00_AXI_0_awprot,
    M00_AXI_0_awqos,
    M00_AXI_0_awready,
    M00_AXI_0_awregion,
    M00_AXI_0_awsize,
    M00_AXI_0_awvalid,
    M00_AXI_0_bid,
    M00_AXI_0_bready,
    M00_AXI_0_bresp,
    M00_AXI_0_bvalid,
    M00_AXI_0_rdata,
    M00_AXI_0_rid,
    M00_AXI_0_rlast,
    M00_AXI_0_rready,
    M00_AXI_0_rresp,
    M00_AXI_0_rvalid,
    M00_AXI_0_wdata,
    M00_AXI_0_wlast,
    M00_AXI_0_wready,
    M00_AXI_0_wstrb,
    M00_AXI_0_wvalid,
    M01_AXI_0_araddr,
    M01_AXI_0_arburst,
    M01_AXI_0_arcache,
    M01_AXI_0_arlen,
    M01_AXI_0_arlock,
    M01_AXI_0_arprot,
    M01_AXI_0_arqos,
    M01_AXI_0_arready,
    M01_AXI_0_arregion,
    M01_AXI_0_arsize,
    M01_AXI_0_arvalid,
    M01_AXI_0_awaddr,
    M01_AXI_0_awburst,
    M01_AXI_0_awcache,
    M01_AXI_0_awlen,
    M01_AXI_0_awlock,
    M01_AXI_0_awprot,
    M01_AXI_0_awqos,
    M01_AXI_0_awready,
    M01_AXI_0_awregion,
    M01_AXI_0_awsize,
    M01_AXI_0_awvalid,
    M01_AXI_0_bready,
    M01_AXI_0_bresp,
    M01_AXI_0_bvalid,
    M01_AXI_0_rdata,
    M01_AXI_0_rlast,
    M01_AXI_0_rready,
    M01_AXI_0_rresp,
    M01_AXI_0_rvalid,
    M01_AXI_0_wdata,
    M01_AXI_0_wlast,
    M01_AXI_0_wready,
    M01_AXI_0_wstrb,
    M01_AXI_0_wvalid,
    S00_AXI_0_araddr,
    S00_AXI_0_arburst,
    S00_AXI_0_arcache,
    S00_AXI_0_arlen,
    S00_AXI_0_arlock,
    S00_AXI_0_arprot,
    S00_AXI_0_arqos,
    S00_AXI_0_arready,
    S00_AXI_0_arregion,
    S00_AXI_0_arsize,
    S00_AXI_0_arvalid,
    S00_AXI_0_awaddr,
    S00_AXI_0_awburst,
    S00_AXI_0_awcache,
    S00_AXI_0_awlen,
    S00_AXI_0_awlock,
    S00_AXI_0_awprot,
    S00_AXI_0_awqos,
    S00_AXI_0_awready,
    S00_AXI_0_awregion,
    S00_AXI_0_awsize,
    S00_AXI_0_awvalid,
    S00_AXI_0_bready,
    S00_AXI_0_bresp,
    S00_AXI_0_bvalid,
    S00_AXI_0_rdata,
    S00_AXI_0_rlast,
    S00_AXI_0_rready,
    S00_AXI_0_rresp,
    S00_AXI_0_rvalid,
    S00_AXI_0_wdata,
    S00_AXI_0_wlast,
    S00_AXI_0_wready,
    S00_AXI_0_wstrb,
    S00_AXI_0_wvalid,
    S01_AXI_0_araddr,
    S01_AXI_0_arburst,
    S01_AXI_0_arcache,
    S01_AXI_0_arlen,
    S01_AXI_0_arlock,
    S01_AXI_0_arprot,
    S01_AXI_0_arqos,
    S01_AXI_0_arready,
    S01_AXI_0_arregion,
    S01_AXI_0_arsize,
    S01_AXI_0_arvalid,
    S01_AXI_0_awaddr,
    S01_AXI_0_awburst,
    S01_AXI_0_awcache,
    S01_AXI_0_awlen,
    S01_AXI_0_awlock,
    S01_AXI_0_awprot,
    S01_AXI_0_awqos,
    S01_AXI_0_awready,
    S01_AXI_0_awregion,
    S01_AXI_0_awsize,
    S01_AXI_0_awvalid,
    S01_AXI_0_bready,
    S01_AXI_0_bresp,
    S01_AXI_0_bvalid,
    S01_AXI_0_rdata,
    S01_AXI_0_rlast,
    S01_AXI_0_rready,
    S01_AXI_0_rresp,
    S01_AXI_0_rvalid,
    S01_AXI_0_wdata,
    S01_AXI_0_wlast,
    S01_AXI_0_wready,
    S01_AXI_0_wstrb,
    S01_AXI_0_wvalid,
    clk,
    rst);
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M00_AXI_0, ADDR_WIDTH 32, ARUSER_WIDTH 0, AWUSER_WIDTH 0, BUSER_WIDTH 0, CLK_DOMAIN bd_1_clk, DATA_WIDTH 64, FREQ_HZ 100000000, HAS_BRESP 1, HAS_BURST 1, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 0, HAS_RRESP 1, HAS_WSTRB 1, ID_WIDTH 1, MAX_BURST_LENGTH 256, NUM_READ_OUTSTANDING 2, NUM_READ_THREADS 1, NUM_WRITE_OUTSTANDING 2, NUM_WRITE_THREADS 1, PHASE 0.000, PROTOCOL AXI4, READ_WRITE_MODE READ_WRITE, RUSER_BITS_PER_BYTE 0, RUSER_WIDTH 0, SUPPORTS_NARROW_BURST 1, WUSER_BITS_PER_BYTE 0, WUSER_WIDTH 0" *) output [31:0]M00_AXI_0_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARBURST" *) output [1:0]M00_AXI_0_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARCACHE" *) output [3:0]M00_AXI_0_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARID" *) output [0:0]M00_AXI_0_arid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARLEN" *) output [7:0]M00_AXI_0_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARLOCK" *) output [0:0]M00_AXI_0_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARPROT" *) output [2:0]M00_AXI_0_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARQOS" *) output [3:0]M00_AXI_0_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARREADY" *) input M00_AXI_0_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARREGION" *) output [3:0]M00_AXI_0_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARSIZE" *) output [2:0]M00_AXI_0_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 ARVALID" *) output M00_AXI_0_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWADDR" *) output [31:0]M00_AXI_0_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWBURST" *) output [1:0]M00_AXI_0_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWCACHE" *) output [3:0]M00_AXI_0_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWID" *) output [0:0]M00_AXI_0_awid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWLEN" *) output [7:0]M00_AXI_0_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWLOCK" *) output [0:0]M00_AXI_0_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWPROT" *) output [2:0]M00_AXI_0_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWQOS" *) output [3:0]M00_AXI_0_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWREADY" *) input M00_AXI_0_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWREGION" *) output [3:0]M00_AXI_0_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWSIZE" *) output [2:0]M00_AXI_0_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 AWVALID" *) output M00_AXI_0_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 BID" *) input [0:0]M00_AXI_0_bid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 BREADY" *) output M00_AXI_0_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 BRESP" *) input [1:0]M00_AXI_0_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 BVALID" *) input M00_AXI_0_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 RDATA" *) input [63:0]M00_AXI_0_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 RID" *) input [0:0]M00_AXI_0_rid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 RLAST" *) input M00_AXI_0_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 RREADY" *) output M00_AXI_0_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 RRESP" *) input [1:0]M00_AXI_0_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 RVALID" *) input M00_AXI_0_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 WDATA" *) output [63:0]M00_AXI_0_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 WLAST" *) output M00_AXI_0_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 WREADY" *) input M00_AXI_0_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 WSTRB" *) output [7:0]M00_AXI_0_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI_0 WVALID" *) output M00_AXI_0_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M01_AXI_0, ADDR_WIDTH 32, ARUSER_WIDTH 0, AWUSER_WIDTH 0, BUSER_WIDTH 0, CLK_DOMAIN bd_1_clk, DATA_WIDTH 32, FREQ_HZ 100000000, HAS_BRESP 1, HAS_BURST 1, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 1, HAS_RRESP 1, HAS_WSTRB 1, ID_WIDTH 0, MAX_BURST_LENGTH 256, NUM_READ_OUTSTANDING 2, NUM_READ_THREADS 1, NUM_WRITE_OUTSTANDING 2, NUM_WRITE_THREADS 1, PHASE 0.000, PROTOCOL AXI4, READ_WRITE_MODE READ_WRITE, RUSER_BITS_PER_BYTE 0, RUSER_WIDTH 0, SUPPORTS_NARROW_BURST 1, WUSER_BITS_PER_BYTE 0, WUSER_WIDTH 0" *) output [31:0]M01_AXI_0_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARBURST" *) output [1:0]M01_AXI_0_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARCACHE" *) output [3:0]M01_AXI_0_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARLEN" *) output [7:0]M01_AXI_0_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARLOCK" *) output [0:0]M01_AXI_0_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARPROT" *) output [2:0]M01_AXI_0_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARQOS" *) output [3:0]M01_AXI_0_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARREADY" *) input M01_AXI_0_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARREGION" *) output [3:0]M01_AXI_0_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARSIZE" *) output [2:0]M01_AXI_0_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 ARVALID" *) output M01_AXI_0_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWADDR" *) output [31:0]M01_AXI_0_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWBURST" *) output [1:0]M01_AXI_0_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWCACHE" *) output [3:0]M01_AXI_0_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWLEN" *) output [7:0]M01_AXI_0_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWLOCK" *) output [0:0]M01_AXI_0_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWPROT" *) output [2:0]M01_AXI_0_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWQOS" *) output [3:0]M01_AXI_0_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWREADY" *) input M01_AXI_0_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWREGION" *) output [3:0]M01_AXI_0_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWSIZE" *) output [2:0]M01_AXI_0_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 AWVALID" *) output M01_AXI_0_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 BREADY" *) output M01_AXI_0_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 BRESP" *) input [1:0]M01_AXI_0_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 BVALID" *) input M01_AXI_0_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 RDATA" *) input [31:0]M01_AXI_0_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 RLAST" *) input M01_AXI_0_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 RREADY" *) output M01_AXI_0_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 RRESP" *) input [1:0]M01_AXI_0_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 RVALID" *) input M01_AXI_0_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 WDATA" *) output [31:0]M01_AXI_0_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 WLAST" *) output M01_AXI_0_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 WREADY" *) input M01_AXI_0_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 WSTRB" *) output [3:0]M01_AXI_0_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M01_AXI_0 WVALID" *) output M01_AXI_0_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S00_AXI_0, ADDR_WIDTH 32, ARUSER_WIDTH 0, AWUSER_WIDTH 0, BUSER_WIDTH 0, CLK_DOMAIN bd_1_clk, DATA_WIDTH 64, FREQ_HZ 100000000, HAS_BRESP 1, HAS_BURST 1, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 0, HAS_RRESP 1, HAS_WSTRB 1, ID_WIDTH 0, MAX_BURST_LENGTH 256, NUM_READ_OUTSTANDING 2, NUM_READ_THREADS 1, NUM_WRITE_OUTSTANDING 2, NUM_WRITE_THREADS 1, PHASE 0.000, PROTOCOL AXI4, READ_WRITE_MODE READ_WRITE, RUSER_BITS_PER_BYTE 0, RUSER_WIDTH 0, SUPPORTS_NARROW_BURST 1, WUSER_BITS_PER_BYTE 0, WUSER_WIDTH 0" *) input [31:0]S00_AXI_0_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARBURST" *) input [1:0]S00_AXI_0_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARCACHE" *) input [3:0]S00_AXI_0_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARLEN" *) input [7:0]S00_AXI_0_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARLOCK" *) input [0:0]S00_AXI_0_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARPROT" *) input [2:0]S00_AXI_0_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARQOS" *) input [3:0]S00_AXI_0_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARREADY" *) output S00_AXI_0_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARREGION" *) input [3:0]S00_AXI_0_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARSIZE" *) input [2:0]S00_AXI_0_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 ARVALID" *) input S00_AXI_0_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWADDR" *) input [31:0]S00_AXI_0_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWBURST" *) input [1:0]S00_AXI_0_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWCACHE" *) input [3:0]S00_AXI_0_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWLEN" *) input [7:0]S00_AXI_0_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWLOCK" *) input [0:0]S00_AXI_0_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWPROT" *) input [2:0]S00_AXI_0_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWQOS" *) input [3:0]S00_AXI_0_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWREADY" *) output S00_AXI_0_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWREGION" *) input [3:0]S00_AXI_0_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWSIZE" *) input [2:0]S00_AXI_0_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 AWVALID" *) input S00_AXI_0_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 BREADY" *) input S00_AXI_0_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 BRESP" *) output [1:0]S00_AXI_0_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 BVALID" *) output S00_AXI_0_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 RDATA" *) output [63:0]S00_AXI_0_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 RLAST" *) output S00_AXI_0_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 RREADY" *) input S00_AXI_0_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 RRESP" *) output [1:0]S00_AXI_0_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 RVALID" *) output S00_AXI_0_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 WDATA" *) input [63:0]S00_AXI_0_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 WLAST" *) input S00_AXI_0_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 WREADY" *) output S00_AXI_0_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 WSTRB" *) input [7:0]S00_AXI_0_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI_0 WVALID" *) input S00_AXI_0_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S01_AXI_0, ADDR_WIDTH 32, ARUSER_WIDTH 0, AWUSER_WIDTH 0, BUSER_WIDTH 0, CLK_DOMAIN bd_1_clk, DATA_WIDTH 32, FREQ_HZ 100000000, HAS_BRESP 1, HAS_BURST 1, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 0, HAS_RRESP 1, HAS_WSTRB 1, ID_WIDTH 0, MAX_BURST_LENGTH 256, NUM_READ_OUTSTANDING 2, NUM_READ_THREADS 1, NUM_WRITE_OUTSTANDING 2, NUM_WRITE_THREADS 1, PHASE 0.000, PROTOCOL AXI4, READ_WRITE_MODE READ_WRITE, RUSER_BITS_PER_BYTE 0, RUSER_WIDTH 0, SUPPORTS_NARROW_BURST 1, WUSER_BITS_PER_BYTE 0, WUSER_WIDTH 0" *) input [31:0]S01_AXI_0_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARBURST" *) input [1:0]S01_AXI_0_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARCACHE" *) input [3:0]S01_AXI_0_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARLEN" *) input [7:0]S01_AXI_0_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARLOCK" *) input [0:0]S01_AXI_0_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARPROT" *) input [2:0]S01_AXI_0_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARQOS" *) input [3:0]S01_AXI_0_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARREADY" *) output S01_AXI_0_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARREGION" *) input [3:0]S01_AXI_0_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARSIZE" *) input [2:0]S01_AXI_0_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 ARVALID" *) input S01_AXI_0_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWADDR" *) input [31:0]S01_AXI_0_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWBURST" *) input [1:0]S01_AXI_0_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWCACHE" *) input [3:0]S01_AXI_0_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWLEN" *) input [7:0]S01_AXI_0_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWLOCK" *) input [0:0]S01_AXI_0_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWPROT" *) input [2:0]S01_AXI_0_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWQOS" *) input [3:0]S01_AXI_0_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWREADY" *) output S01_AXI_0_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWREGION" *) input [3:0]S01_AXI_0_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWSIZE" *) input [2:0]S01_AXI_0_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 AWVALID" *) input S01_AXI_0_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 BREADY" *) input S01_AXI_0_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 BRESP" *) output [1:0]S01_AXI_0_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 BVALID" *) output S01_AXI_0_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 RDATA" *) output [31:0]S01_AXI_0_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 RLAST" *) output S01_AXI_0_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 RREADY" *) input S01_AXI_0_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 RRESP" *) output [1:0]S01_AXI_0_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 RVALID" *) output S01_AXI_0_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 WDATA" *) input [31:0]S01_AXI_0_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 WLAST" *) input S01_AXI_0_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 WREADY" *) output S01_AXI_0_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 WSTRB" *) input [3:0]S01_AXI_0_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S01_AXI_0 WVALID" *) input S01_AXI_0_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.CLK, ASSOCIATED_BUSIF S00_AXI_0:M00_AXI_0:S01_AXI_0:M01_AXI_0, ASSOCIATED_RESET rst, CLK_DOMAIN bd_1_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.RST RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.RST, POLARITY ACTIVE_HIGH" *) input rst;

  wire \<const0> ;
  wire \<const1> ;
  wire [31:0]M00_AXI_0_araddr;
  wire [1:0]M00_AXI_0_arburst;
  wire [3:0]M00_AXI_0_arcache;
  wire [0:0]M00_AXI_0_arid;
  wire [7:0]M00_AXI_0_arlen;
  wire [0:0]M00_AXI_0_arlock;
  wire [2:0]M00_AXI_0_arprot;
  wire [3:0]M00_AXI_0_arqos;
  wire M00_AXI_0_arready;
  wire [3:0]M00_AXI_0_arregion;
  wire [2:0]M00_AXI_0_arsize;
  wire M00_AXI_0_arvalid;
  wire [31:0]M00_AXI_0_awaddr;
  wire [1:0]M00_AXI_0_awburst;
  wire [3:0]M00_AXI_0_awcache;
  wire [0:0]M00_AXI_0_awid;
  wire [7:0]M00_AXI_0_awlen;
  wire [0:0]M00_AXI_0_awlock;
  wire [2:0]M00_AXI_0_awprot;
  wire [3:0]M00_AXI_0_awqos;
  wire M00_AXI_0_awready;
  wire [3:0]M00_AXI_0_awregion;
  wire [2:0]M00_AXI_0_awsize;
  wire M00_AXI_0_awvalid;
  wire [0:0]M00_AXI_0_bid;
  wire M00_AXI_0_bready;
  wire [1:0]M00_AXI_0_bresp;
  wire M00_AXI_0_bvalid;
  wire [63:0]M00_AXI_0_rdata;
  wire [0:0]M00_AXI_0_rid;
  wire M00_AXI_0_rlast;
  wire M00_AXI_0_rready;
  wire [1:0]M00_AXI_0_rresp;
  wire M00_AXI_0_rvalid;
  wire [63:0]M00_AXI_0_wdata;
  wire M00_AXI_0_wlast;
  wire M00_AXI_0_wready;
  wire [7:0]M00_AXI_0_wstrb;
  wire M00_AXI_0_wvalid;
  wire [31:0]M01_AXI_0_araddr;
  wire [1:0]M01_AXI_0_arburst;
  wire [3:0]M01_AXI_0_arcache;
  wire [7:0]M01_AXI_0_arlen;
  wire [0:0]M01_AXI_0_arlock;
  wire [2:0]M01_AXI_0_arprot;
  wire [3:0]M01_AXI_0_arqos;
  wire M01_AXI_0_arready;
  wire [3:0]M01_AXI_0_arregion;
  wire [2:0]M01_AXI_0_arsize;
  wire M01_AXI_0_arvalid;
  wire [31:0]M01_AXI_0_awaddr;
  wire [1:0]M01_AXI_0_awburst;
  wire [3:0]M01_AXI_0_awcache;
  wire [7:0]M01_AXI_0_awlen;
  wire [0:0]M01_AXI_0_awlock;
  wire [2:0]M01_AXI_0_awprot;
  wire [3:0]M01_AXI_0_awqos;
  wire M01_AXI_0_awready;
  wire [3:0]M01_AXI_0_awregion;
  wire [2:0]M01_AXI_0_awsize;
  wire M01_AXI_0_awvalid;
  wire M01_AXI_0_bready;
  wire [1:0]M01_AXI_0_bresp;
  wire M01_AXI_0_bvalid;
  wire [31:0]M01_AXI_0_rdata;
  wire M01_AXI_0_rlast;
  wire M01_AXI_0_rready;
  wire [1:0]M01_AXI_0_rresp;
  wire M01_AXI_0_rvalid;
  wire [31:0]M01_AXI_0_wdata;
  wire M01_AXI_0_wlast;
  wire M01_AXI_0_wready;
  wire [3:0]M01_AXI_0_wstrb;
  wire M01_AXI_0_wvalid;
  wire [31:0]S00_AXI_0_araddr;
  wire [1:0]S00_AXI_0_arburst;
  wire [3:0]S00_AXI_0_arcache;
  wire [7:0]S00_AXI_0_arlen;
  wire [0:0]S00_AXI_0_arlock;
  wire [2:0]S00_AXI_0_arprot;
  wire [3:0]S00_AXI_0_arqos;
  wire S00_AXI_0_arready;
  wire [3:0]S00_AXI_0_arregion;
  wire [2:0]S00_AXI_0_arsize;
  wire S00_AXI_0_arvalid;
  wire [31:0]S00_AXI_0_awaddr;
  wire [1:0]S00_AXI_0_awburst;
  wire [3:0]S00_AXI_0_awcache;
  wire [7:0]S00_AXI_0_awlen;
  wire [0:0]S00_AXI_0_awlock;
  wire [2:0]S00_AXI_0_awprot;
  wire [3:0]S00_AXI_0_awqos;
  wire S00_AXI_0_awready;
  wire [3:0]S00_AXI_0_awregion;
  wire [2:0]S00_AXI_0_awsize;
  wire S00_AXI_0_awvalid;
  wire S00_AXI_0_bready;
  wire [1:0]S00_AXI_0_bresp;
  wire S00_AXI_0_bvalid;
  wire [63:0]S00_AXI_0_rdata;
  wire S00_AXI_0_rlast;
  wire S00_AXI_0_rready;
  wire [1:0]S00_AXI_0_rresp;
  wire S00_AXI_0_rvalid;
  wire [63:0]S00_AXI_0_wdata;
  wire S00_AXI_0_wlast;
  wire S00_AXI_0_wready;
  wire [7:0]S00_AXI_0_wstrb;
  wire S00_AXI_0_wvalid;
  wire [31:0]S01_AXI_0_araddr;
  wire [1:0]S01_AXI_0_arburst;
  wire [3:0]S01_AXI_0_arcache;
  wire [7:0]S01_AXI_0_arlen;
  wire [0:0]S01_AXI_0_arlock;
  wire [2:0]S01_AXI_0_arprot;
  wire [3:0]S01_AXI_0_arqos;
  wire S01_AXI_0_arready;
  wire [3:0]S01_AXI_0_arregion;
  wire [2:0]S01_AXI_0_arsize;
  wire S01_AXI_0_arvalid;
  wire [31:0]S01_AXI_0_awaddr;
  wire [1:0]S01_AXI_0_awburst;
  wire [3:0]S01_AXI_0_awcache;
  wire [7:0]S01_AXI_0_awlen;
  wire [0:0]S01_AXI_0_awlock;
  wire [2:0]S01_AXI_0_awprot;
  wire [3:0]S01_AXI_0_awqos;
  wire S01_AXI_0_awready;
  wire [3:0]S01_AXI_0_awregion;
  wire [2:0]S01_AXI_0_awsize;
  wire S01_AXI_0_awvalid;
  wire S01_AXI_0_bready;
  wire [1:0]S01_AXI_0_bresp;
  wire S01_AXI_0_bvalid;
  wire [31:0]S01_AXI_0_rdata;
  wire S01_AXI_0_rlast;
  wire S01_AXI_0_rready;
  wire [1:0]S01_AXI_0_rresp;
  wire S01_AXI_0_rvalid;
  wire [31:0]S01_AXI_0_wdata;
  wire S01_AXI_0_wlast;
  wire S01_AXI_0_wready;
  wire [3:0]S01_AXI_0_wstrb;
  wire S01_AXI_0_wvalid;
  wire clk;
  wire proc_sys_reset_0_interconnect_aresetn;
  wire proc_sys_reset_0_peripheral_aresetn;
  wire rst;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_1_bd_1_axi_interconnect_0_0 axi_interconnect_0
       (.ACLK(clk),
        .ARESETN(proc_sys_reset_0_interconnect_aresetn),
        .M00_ACLK(clk),
        .M00_ARESETN(proc_sys_reset_0_peripheral_aresetn),
        .M00_AXI_araddr(M00_AXI_0_araddr),
        .M00_AXI_arburst(M00_AXI_0_arburst),
        .M00_AXI_arcache(M00_AXI_0_arcache),
        .M00_AXI_arid(M00_AXI_0_arid),
        .M00_AXI_arlen(M00_AXI_0_arlen),
        .M00_AXI_arlock(M00_AXI_0_arlock),
        .M00_AXI_arprot(M00_AXI_0_arprot),
        .M00_AXI_arqos(M00_AXI_0_arqos),
        .M00_AXI_arready(M00_AXI_0_arready),
        .M00_AXI_arregion(M00_AXI_0_arregion),
        .M00_AXI_arsize(M00_AXI_0_arsize),
        .M00_AXI_arvalid(M00_AXI_0_arvalid),
        .M00_AXI_awaddr(M00_AXI_0_awaddr),
        .M00_AXI_awburst(M00_AXI_0_awburst),
        .M00_AXI_awcache(M00_AXI_0_awcache),
        .M00_AXI_awid(M00_AXI_0_awid),
        .M00_AXI_awlen(M00_AXI_0_awlen),
        .M00_AXI_awlock(M00_AXI_0_awlock),
        .M00_AXI_awprot(M00_AXI_0_awprot),
        .M00_AXI_awqos(M00_AXI_0_awqos),
        .M00_AXI_awready(M00_AXI_0_awready),
        .M00_AXI_awregion(M00_AXI_0_awregion),
        .M00_AXI_awsize(M00_AXI_0_awsize),
        .M00_AXI_awvalid(M00_AXI_0_awvalid),
        .M00_AXI_bid(M00_AXI_0_bid),
        .M00_AXI_bready(M00_AXI_0_bready),
        .M00_AXI_bresp(M00_AXI_0_bresp),
        .M00_AXI_bvalid(M00_AXI_0_bvalid),
        .M00_AXI_rdata(M00_AXI_0_rdata),
        .M00_AXI_rid(M00_AXI_0_rid),
        .M00_AXI_rlast(M00_AXI_0_rlast),
        .M00_AXI_rready(M00_AXI_0_rready),
        .M00_AXI_rresp(M00_AXI_0_rresp),
        .M00_AXI_rvalid(M00_AXI_0_rvalid),
        .M00_AXI_wdata(M00_AXI_0_wdata),
        .M00_AXI_wlast(M00_AXI_0_wlast),
        .M00_AXI_wready(M00_AXI_0_wready),
        .M00_AXI_wstrb(M00_AXI_0_wstrb),
        .M00_AXI_wvalid(M00_AXI_0_wvalid),
        .M01_ACLK(clk),
        .M01_ARESETN(proc_sys_reset_0_peripheral_aresetn),
        .M01_AXI_araddr(M01_AXI_0_araddr),
        .M01_AXI_arburst(M01_AXI_0_arburst),
        .M01_AXI_arcache(M01_AXI_0_arcache),
        .M01_AXI_arlen(M01_AXI_0_arlen),
        .M01_AXI_arlock(M01_AXI_0_arlock),
        .M01_AXI_arprot(M01_AXI_0_arprot),
        .M01_AXI_arqos(M01_AXI_0_arqos),
        .M01_AXI_arready(M01_AXI_0_arready),
        .M01_AXI_arregion(M01_AXI_0_arregion),
        .M01_AXI_arsize(M01_AXI_0_arsize),
        .M01_AXI_arvalid(M01_AXI_0_arvalid),
        .M01_AXI_awaddr(M01_AXI_0_awaddr),
        .M01_AXI_awburst(M01_AXI_0_awburst),
        .M01_AXI_awcache(M01_AXI_0_awcache),
        .M01_AXI_awlen(M01_AXI_0_awlen),
        .M01_AXI_awlock(M01_AXI_0_awlock),
        .M01_AXI_awprot(M01_AXI_0_awprot),
        .M01_AXI_awqos(M01_AXI_0_awqos),
        .M01_AXI_awready(M01_AXI_0_awready),
        .M01_AXI_awregion(M01_AXI_0_awregion),
        .M01_AXI_awsize(M01_AXI_0_awsize),
        .M01_AXI_awvalid(M01_AXI_0_awvalid),
        .M01_AXI_bready(M01_AXI_0_bready),
        .M01_AXI_bresp(M01_AXI_0_bresp),
        .M01_AXI_bvalid(M01_AXI_0_bvalid),
        .M01_AXI_rdata(M01_AXI_0_rdata),
        .M01_AXI_rlast(M01_AXI_0_rlast),
        .M01_AXI_rready(M01_AXI_0_rready),
        .M01_AXI_rresp(M01_AXI_0_rresp),
        .M01_AXI_rvalid(M01_AXI_0_rvalid),
        .M01_AXI_wdata(M01_AXI_0_wdata),
        .M01_AXI_wlast(M01_AXI_0_wlast),
        .M01_AXI_wready(M01_AXI_0_wready),
        .M01_AXI_wstrb(M01_AXI_0_wstrb),
        .M01_AXI_wvalid(M01_AXI_0_wvalid),
        .S00_ACLK(clk),
        .S00_ARESETN(proc_sys_reset_0_peripheral_aresetn),
        .S00_AXI_araddr(S00_AXI_0_araddr),
        .S00_AXI_arburst(S00_AXI_0_arburst),
        .S00_AXI_arcache(S00_AXI_0_arcache),
        .S00_AXI_arlen(S00_AXI_0_arlen),
        .S00_AXI_arlock(S00_AXI_0_arlock),
        .S00_AXI_arprot(S00_AXI_0_arprot),
        .S00_AXI_arqos(S00_AXI_0_arqos),
        .S00_AXI_arready(S00_AXI_0_arready),
        .S00_AXI_arregion(S00_AXI_0_arregion),
        .S00_AXI_arsize(S00_AXI_0_arsize),
        .S00_AXI_arvalid(S00_AXI_0_arvalid),
        .S00_AXI_awaddr(S00_AXI_0_awaddr),
        .S00_AXI_awburst(S00_AXI_0_awburst),
        .S00_AXI_awcache(S00_AXI_0_awcache),
        .S00_AXI_awlen(S00_AXI_0_awlen),
        .S00_AXI_awlock(S00_AXI_0_awlock),
        .S00_AXI_awprot(S00_AXI_0_awprot),
        .S00_AXI_awqos(S00_AXI_0_awqos),
        .S00_AXI_awready(S00_AXI_0_awready),
        .S00_AXI_awregion(S00_AXI_0_awregion),
        .S00_AXI_awsize(S00_AXI_0_awsize),
        .S00_AXI_awvalid(S00_AXI_0_awvalid),
        .S00_AXI_bready(S00_AXI_0_bready),
        .S00_AXI_bresp(S00_AXI_0_bresp),
        .S00_AXI_bvalid(S00_AXI_0_bvalid),
        .S00_AXI_rdata(S00_AXI_0_rdata),
        .S00_AXI_rlast(S00_AXI_0_rlast),
        .S00_AXI_rready(S00_AXI_0_rready),
        .S00_AXI_rresp(S00_AXI_0_rresp),
        .S00_AXI_rvalid(S00_AXI_0_rvalid),
        .S00_AXI_wdata(S00_AXI_0_wdata),
        .S00_AXI_wlast(S00_AXI_0_wlast),
        .S00_AXI_wready(S00_AXI_0_wready),
        .S00_AXI_wstrb(S00_AXI_0_wstrb),
        .S00_AXI_wvalid(S00_AXI_0_wvalid),
        .S01_ACLK(clk),
        .S01_ARESETN(proc_sys_reset_0_peripheral_aresetn),
        .S01_AXI_araddr(S01_AXI_0_araddr),
        .S01_AXI_arburst(S01_AXI_0_arburst),
        .S01_AXI_arcache(S01_AXI_0_arcache),
        .S01_AXI_arlen(S01_AXI_0_arlen),
        .S01_AXI_arlock(S01_AXI_0_arlock),
        .S01_AXI_arprot(S01_AXI_0_arprot),
        .S01_AXI_arqos(S01_AXI_0_arqos),
        .S01_AXI_arready(S01_AXI_0_arready),
        .S01_AXI_arregion(S01_AXI_0_arregion),
        .S01_AXI_arsize(S01_AXI_0_arsize),
        .S01_AXI_arvalid(S01_AXI_0_arvalid),
        .S01_AXI_awaddr(S01_AXI_0_awaddr),
        .S01_AXI_awburst(S01_AXI_0_awburst),
        .S01_AXI_awcache(S01_AXI_0_awcache),
        .S01_AXI_awlen(S01_AXI_0_awlen),
        .S01_AXI_awlock(S01_AXI_0_awlock),
        .S01_AXI_awprot(S01_AXI_0_awprot),
        .S01_AXI_awqos(S01_AXI_0_awqos),
        .S01_AXI_awready(S01_AXI_0_awready),
        .S01_AXI_awregion(S01_AXI_0_awregion),
        .S01_AXI_awsize(S01_AXI_0_awsize),
        .S01_AXI_awvalid(S01_AXI_0_awvalid),
        .S01_AXI_bready(S01_AXI_0_bready),
        .S01_AXI_bresp(S01_AXI_0_bresp),
        .S01_AXI_bvalid(S01_AXI_0_bvalid),
        .S01_AXI_rdata(S01_AXI_0_rdata),
        .S01_AXI_rlast(S01_AXI_0_rlast),
        .S01_AXI_rready(S01_AXI_0_rready),
        .S01_AXI_rresp(S01_AXI_0_rresp),
        .S01_AXI_rvalid(S01_AXI_0_rvalid),
        .S01_AXI_wdata(S01_AXI_0_wdata),
        .S01_AXI_wlast(S01_AXI_0_wlast),
        .S01_AXI_wready(S01_AXI_0_wready),
        .S01_AXI_wstrb(S01_AXI_0_wstrb),
        .S01_AXI_wvalid(S01_AXI_0_wvalid));
  (* CHECK_LICENSE_TYPE = "bd_1_proc_sys_reset_0_0,proc_sys_reset,{}" *) 
  (* CORE_GENERATION_INFO = "bd_1_proc_sys_reset_0_0,proc_sys_reset,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=proc_sys_reset,x_ipVersion=5.0,x_ipCoreRevision=12,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_EXT_RST_WIDTH=4,C_AUX_RST_WIDTH=4,C_EXT_RESET_HIGH=1,C_AUX_RESET_HIGH=0,C_NUM_BUS_RST=1,C_NUM_PERP_RST=1,C_NUM_INTERCONNECT_ARESETN=1,C_NUM_PERP_ARESETN=1}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "proc_sys_reset,Vivado 2017.4" *) 
  bd_1_bd_1_proc_sys_reset_0_0 proc_sys_reset_0
       (.aux_reset_in(\<const1> ),
        .dcm_locked(\<const1> ),
        .ext_reset_in(rst),
        .interconnect_aresetn(proc_sys_reset_0_interconnect_aresetn),
        .mb_debug_sys_rst(\<const0> ),
        .peripheral_aresetn(proc_sys_reset_0_peripheral_aresetn),
        .slowest_sync_clk(clk));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_addr_arbiter" *) 
module bd_1_axi_crossbar_v2_1_16_addr_arbiter
   (SR,
    \gen_arbiter.last_rr_hot_reg[1]_0 ,
    \gen_arbiter.any_grant_reg_0 ,
    \gen_arbiter.m_mesg_i_reg[0]_0 ,
    \gen_master_slots[1].r_issuing_cnt_reg[9] ,
    \gen_master_slots[1].r_issuing_cnt_reg[8] ,
    \gen_master_slots[0].r_issuing_cnt_reg[1] ,
    \gen_master_slots[0].r_issuing_cnt_reg[0] ,
    \gen_arbiter.last_rr_hot_reg[0]_0 ,
    \gen_axi.s_axi_rid_i ,
    Q,
    \gen_axi.s_axi_rlast_i0 ,
    \S_AXI_AQOS_Q_reg[3] ,
    aa_mi_arready__1,
    \gen_arbiter.last_rr_hot_reg[1]_1 ,
    \gen_arbiter.last_rr_hot_reg[0]_1 ,
    \gen_arbiter.m_target_hot_i_reg[2]_0 ,
    \gen_arbiter.m_target_hot_i_reg[2]_1 ,
    \gen_arbiter.m_target_hot_i_reg[1]_0 ,
    \gen_arbiter.m_target_hot_i_reg[1]_1 ,
    \gen_arbiter.m_target_hot_i_reg[0]_0 ,
    \gen_arbiter.m_target_hot_i_reg[0]_1 ,
    sel_3,
    sel_4,
    target_mi_enc,
    \gen_arbiter.qual_reg_reg[1]_0 ,
    sel_3_0,
    sel_4_1,
    target_mi_enc_2,
    \gen_arbiter.qual_reg_reg[0]_0 ,
    m_axi_arvalid,
    aclk,
    \gen_arbiter.any_grant_reg_1 ,
    m_axi_arready,
    r_cmd_pop_1__1,
    r_issuing_cnt,
    r_cmd_pop_0__1,
    grant_hot0,
    \gen_axi.s_axi_arready_i_reg ,
    \gen_axi.read_cs_reg[0] ,
    \gen_axi.read_cnt_reg[4] ,
    aresetn_d,
    st_aa_arvalid_qual,
    m_valid_i_reg,
    m_valid_i_reg_0,
    s_axi_arvalid,
    s_axi_araddr,
    s_axi_arqos,
    s_axi_arcache,
    s_axi_arburst,
    s_axi_arprot,
    s_axi_arlock,
    s_axi_arsize,
    s_axi_arlen,
    D);
  output [0:0]SR;
  output \gen_arbiter.last_rr_hot_reg[1]_0 ;
  output \gen_arbiter.any_grant_reg_0 ;
  output \gen_arbiter.m_mesg_i_reg[0]_0 ;
  output \gen_master_slots[1].r_issuing_cnt_reg[9] ;
  output \gen_master_slots[1].r_issuing_cnt_reg[8] ;
  output \gen_master_slots[0].r_issuing_cnt_reg[1] ;
  output \gen_master_slots[0].r_issuing_cnt_reg[0] ;
  output \gen_arbiter.last_rr_hot_reg[0]_0 ;
  output \gen_axi.s_axi_rid_i ;
  output [0:0]Q;
  output \gen_axi.s_axi_rlast_i0 ;
  output [57:0]\S_AXI_AQOS_Q_reg[3] ;
  output aa_mi_arready__1;
  output \gen_arbiter.last_rr_hot_reg[1]_1 ;
  output \gen_arbiter.last_rr_hot_reg[0]_1 ;
  output \gen_arbiter.m_target_hot_i_reg[2]_0 ;
  output \gen_arbiter.m_target_hot_i_reg[2]_1 ;
  output \gen_arbiter.m_target_hot_i_reg[1]_0 ;
  output \gen_arbiter.m_target_hot_i_reg[1]_1 ;
  output \gen_arbiter.m_target_hot_i_reg[0]_0 ;
  output \gen_arbiter.m_target_hot_i_reg[0]_1 ;
  output sel_3;
  output sel_4;
  output target_mi_enc;
  output \gen_arbiter.qual_reg_reg[1]_0 ;
  output sel_3_0;
  output sel_4_1;
  output target_mi_enc_2;
  output \gen_arbiter.qual_reg_reg[0]_0 ;
  output [1:0]m_axi_arvalid;
  input aclk;
  input \gen_arbiter.any_grant_reg_1 ;
  input [1:0]m_axi_arready;
  input r_cmd_pop_1__1;
  input [3:0]r_issuing_cnt;
  input r_cmd_pop_0__1;
  input grant_hot0;
  input \gen_axi.s_axi_arready_i_reg ;
  input \gen_axi.read_cs_reg[0] ;
  input \gen_axi.read_cnt_reg[4] ;
  input aresetn_d;
  input [1:0]st_aa_arvalid_qual;
  input m_valid_i_reg;
  input m_valid_i_reg_0;
  input [1:0]s_axi_arvalid;
  input [63:0]s_axi_araddr;
  input [7:0]s_axi_arqos;
  input [7:0]s_axi_arcache;
  input [3:0]s_axi_arburst;
  input [5:0]s_axi_arprot;
  input [1:0]s_axi_arlock;
  input [5:0]s_axi_arsize;
  input [15:0]s_axi_arlen;
  input [1:0]D;

  wire \<const0> ;
  wire \<const1> ;
  wire [1:0]D;
  wire [0:0]Q;
  wire [0:0]SR;
  wire [57:0]\S_AXI_AQOS_Q_reg[3] ;
  wire aa_mi_arready__1;
  wire [1:0]aa_mi_artarget_hot;
  wire aclk;
  wire aresetn_d;
  wire \gen_arbiter.any_grant_i_1__0_n_0 ;
  wire \gen_arbiter.any_grant_reg_0 ;
  wire \gen_arbiter.any_grant_reg_1 ;
  wire \gen_arbiter.grant_hot[0]_i_1__0_n_0 ;
  wire \gen_arbiter.grant_hot[1]_i_1__0_n_0 ;
  wire \gen_arbiter.grant_hot[1]_i_2__0_n_0 ;
  wire \gen_arbiter.grant_hot_reg_n_0_[0] ;
  wire \gen_arbiter.grant_hot_reg_n_0_[1] ;
  wire \gen_arbiter.last_rr_hot[0]_i_2_n_0 ;
  wire \gen_arbiter.last_rr_hot_reg[0]_0 ;
  wire \gen_arbiter.last_rr_hot_reg[0]_1 ;
  wire \gen_arbiter.last_rr_hot_reg[1]_0 ;
  wire \gen_arbiter.last_rr_hot_reg[1]_1 ;
  wire \gen_arbiter.last_rr_hot_reg_n_0_[0] ;
  wire \gen_arbiter.m_grant_enc_i[0]_i_3__0_n_0 ;
  wire \gen_arbiter.m_grant_enc_i[0]_i_8__0_n_0 ;
  wire \gen_arbiter.m_grant_enc_i_reg_n_0_[0] ;
  wire \gen_arbiter.m_mesg_i_reg[0]_0 ;
  wire \gen_arbiter.m_target_hot_i_reg[0]_0 ;
  wire \gen_arbiter.m_target_hot_i_reg[0]_1 ;
  wire \gen_arbiter.m_target_hot_i_reg[1]_0 ;
  wire \gen_arbiter.m_target_hot_i_reg[1]_1 ;
  wire \gen_arbiter.m_target_hot_i_reg[2]_0 ;
  wire \gen_arbiter.m_target_hot_i_reg[2]_1 ;
  wire \gen_arbiter.qual_reg_reg[0]_0 ;
  wire \gen_arbiter.qual_reg_reg[1]_0 ;
  wire \gen_arbiter.s_ready_i[0]_i_1__0_n_0 ;
  wire \gen_arbiter.s_ready_i[1]_i_1__0_n_0 ;
  wire \gen_axi.read_cnt_reg[4] ;
  wire \gen_axi.read_cs_reg[0] ;
  wire \gen_axi.s_axi_arready_i_reg ;
  wire \gen_axi.s_axi_rid_i ;
  wire \gen_axi.s_axi_rlast_i0 ;
  wire \gen_axi.s_axi_rlast_i_i_5_n_0 ;
  wire \gen_master_slots[0].r_issuing_cnt_reg[0] ;
  wire \gen_master_slots[0].r_issuing_cnt_reg[1] ;
  wire \gen_master_slots[1].r_issuing_cnt_reg[8] ;
  wire \gen_master_slots[1].r_issuing_cnt_reg[9] ;
  wire grant_hot;
  wire grant_hot0;
  wire [1:0]m_axi_arready;
  wire [1:0]m_axi_arvalid;
  wire [62:1]m_mesg_mux;
  wire [2:0]m_target_hot_mux;
  wire m_valid_i_reg;
  wire m_valid_i_reg_0;
  wire p_0_in9_in;
  wire p_1_in;
  wire p_2_in;
  wire [1:0]qual_reg;
  wire r_cmd_pop_0__1;
  wire r_cmd_pop_1__1;
  wire [3:0]r_issuing_cnt;
  wire [63:0]s_axi_araddr;
  wire [3:0]s_axi_arburst;
  wire [7:0]s_axi_arcache;
  wire [15:0]s_axi_arlen;
  wire [1:0]s_axi_arlock;
  wire [5:0]s_axi_arprot;
  wire [7:0]s_axi_arqos;
  wire [5:0]s_axi_arsize;
  wire [1:0]s_axi_arvalid;
  wire sel_3;
  wire sel_3_0;
  wire sel_4;
  wire sel_4_1;
  wire [1:0]st_aa_arvalid_qual;
  wire target_mi_enc;
  wire target_mi_enc_2;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h00000000FF00FFE0)) 
    \gen_arbiter.any_grant_i_1__0 
       (.I0(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .I1(\gen_arbiter.last_rr_hot_reg[0]_0 ),
        .I2(grant_hot0),
        .I3(\gen_arbiter.any_grant_reg_0 ),
        .I4(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I5(\gen_arbiter.grant_hot[1]_i_2__0_n_0 ),
        .O(\gen_arbiter.any_grant_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.any_grant_reg 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.any_grant_i_1__0_n_0 ),
        .Q(\gen_arbiter.any_grant_reg_0 ),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'h00E2)) 
    \gen_arbiter.grant_hot[0]_i_1__0 
       (.I0(\gen_arbiter.grant_hot_reg_n_0_[0] ),
        .I1(grant_hot),
        .I2(\gen_arbiter.last_rr_hot_reg[0]_0 ),
        .I3(\gen_arbiter.grant_hot[1]_i_2__0_n_0 ),
        .O(\gen_arbiter.grant_hot[0]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h00E2)) 
    \gen_arbiter.grant_hot[1]_i_1__0 
       (.I0(\gen_arbiter.grant_hot_reg_n_0_[1] ),
        .I1(grant_hot),
        .I2(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .I3(\gen_arbiter.grant_hot[1]_i_2__0_n_0 ),
        .O(\gen_arbiter.grant_hot[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h8F)) 
    \gen_arbiter.grant_hot[1]_i_2__0 
       (.I0(aa_mi_arready__1),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(aresetn_d),
        .O(\gen_arbiter.grant_hot[1]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.grant_hot_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.grant_hot[0]_i_1__0_n_0 ),
        .Q(\gen_arbiter.grant_hot_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.grant_hot_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.grant_hot[1]_i_1__0_n_0 ),
        .Q(\gen_arbiter.grant_hot_reg_n_0_[1] ),
        .R(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFF8AAA00000000)) 
    \gen_arbiter.last_rr_hot[0]_i_1__0 
       (.I0(\gen_arbiter.last_rr_hot_reg_n_0_[0] ),
        .I1(\gen_arbiter.last_rr_hot_reg[0]_1 ),
        .I2(qual_reg[1]),
        .I3(s_axi_arvalid[1]),
        .I4(p_2_in),
        .I5(\gen_arbiter.last_rr_hot[0]_i_2_n_0 ),
        .O(\gen_arbiter.last_rr_hot_reg[0]_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \gen_arbiter.last_rr_hot[0]_i_2 
       (.I0(s_axi_arvalid[0]),
        .I1(qual_reg[0]),
        .I2(\gen_arbiter.last_rr_hot_reg[1]_1 ),
        .O(\gen_arbiter.last_rr_hot[0]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.last_rr_hot_reg[0] 
       (.C(aclk),
        .CE(grant_hot),
        .D(\gen_arbiter.last_rr_hot_reg[0]_0 ),
        .Q(\gen_arbiter.last_rr_hot_reg_n_0_[0] ),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gen_arbiter.last_rr_hot_reg[1] 
       (.C(aclk),
        .CE(grant_hot),
        .D(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .Q(p_2_in),
        .S(SR));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \gen_arbiter.m_grant_enc_i[0]_i_12__0 
       (.I0(sel_3_0),
        .I1(s_axi_araddr[17]),
        .I2(s_axi_araddr[16]),
        .I3(s_axi_araddr[19]),
        .I4(s_axi_araddr[18]),
        .I5(sel_4_1),
        .O(target_mi_enc_2));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \gen_arbiter.m_grant_enc_i[0]_i_16__0 
       (.I0(sel_3),
        .I1(s_axi_araddr[49]),
        .I2(s_axi_araddr[48]),
        .I3(s_axi_araddr[51]),
        .I4(s_axi_araddr[50]),
        .I5(sel_4),
        .O(target_mi_enc));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \gen_arbiter.m_grant_enc_i[0]_i_17__0 
       (.I0(s_axi_araddr[18]),
        .I1(s_axi_araddr[19]),
        .O(\gen_arbiter.qual_reg_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \gen_arbiter.m_grant_enc_i[0]_i_18__0 
       (.I0(s_axi_araddr[50]),
        .I1(s_axi_araddr[51]),
        .O(\gen_arbiter.qual_reg_reg[1]_0 ));
  LUT6 #(
    .INIT(64'h00000000AA808080)) 
    \gen_arbiter.m_grant_enc_i[0]_i_1__0 
       (.I0(\gen_arbiter.m_grant_enc_i[0]_i_3__0_n_0 ),
        .I1(st_aa_arvalid_qual[0]),
        .I2(m_valid_i_reg),
        .I3(st_aa_arvalid_qual[1]),
        .I4(m_valid_i_reg_0),
        .I5(\gen_arbiter.m_grant_enc_i[0]_i_8__0_n_0 ),
        .O(grant_hot));
  LUT6 #(
    .INIT(64'hFFFF8AAA00000000)) 
    \gen_arbiter.m_grant_enc_i[0]_i_2__0 
       (.I0(p_2_in),
        .I1(\gen_arbiter.last_rr_hot_reg[1]_1 ),
        .I2(qual_reg[0]),
        .I3(s_axi_arvalid[0]),
        .I4(\gen_arbiter.last_rr_hot_reg_n_0_[0] ),
        .I5(p_0_in9_in),
        .O(\gen_arbiter.last_rr_hot_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \gen_arbiter.m_grant_enc_i[0]_i_3__0 
       (.I0(\gen_arbiter.any_grant_reg_0 ),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .O(\gen_arbiter.m_grant_enc_i[0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h5555055577773777)) 
    \gen_arbiter.m_grant_enc_i[0]_i_8__0 
       (.I0(p_0_in9_in),
        .I1(\gen_arbiter.last_rr_hot_reg_n_0_[0] ),
        .I2(s_axi_arvalid[0]),
        .I3(qual_reg[0]),
        .I4(\gen_arbiter.last_rr_hot_reg[1]_1 ),
        .I5(p_2_in),
        .O(\gen_arbiter.m_grant_enc_i[0]_i_8__0_n_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \gen_arbiter.m_grant_enc_i[0]_i_9__0 
       (.I0(s_axi_arvalid[1]),
        .I1(qual_reg[1]),
        .I2(\gen_arbiter.last_rr_hot_reg[0]_1 ),
        .O(p_0_in9_in));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_grant_enc_i_reg[0] 
       (.C(aclk),
        .CE(grant_hot),
        .D(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .Q(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .R(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_arbiter.m_mesg_i[0]_i_1 
       (.I0(aresetn_d),
        .O(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_arbiter.m_mesg_i[0]_i_1__0 
       (.I0(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .O(p_1_in));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[10]_i_1__0 
       (.I0(s_axi_araddr[41]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[9]),
        .O(m_mesg_mux[10]));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[11]_i_1__0 
       (.I0(s_axi_araddr[42]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[10]),
        .O(m_mesg_mux[11]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[12]_i_1__0 
       (.I0(s_axi_araddr[43]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[11]),
        .O(m_mesg_mux[12]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[13]_i_1__0 
       (.I0(s_axi_araddr[44]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[12]),
        .O(m_mesg_mux[13]));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[14]_i_1__0 
       (.I0(s_axi_araddr[45]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[13]),
        .O(m_mesg_mux[14]));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[15]_i_1__0 
       (.I0(s_axi_araddr[46]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[14]),
        .O(m_mesg_mux[15]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[16]_i_1__0 
       (.I0(s_axi_araddr[47]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[15]),
        .O(m_mesg_mux[16]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[17]_i_1__0 
       (.I0(s_axi_araddr[48]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[16]),
        .O(m_mesg_mux[17]));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[18]_i_1__0 
       (.I0(s_axi_araddr[49]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[17]),
        .O(m_mesg_mux[18]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[19]_i_1__0 
       (.I0(s_axi_araddr[50]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[18]),
        .O(m_mesg_mux[19]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[1]_i_1__0 
       (.I0(s_axi_araddr[32]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[0]),
        .O(m_mesg_mux[1]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[20]_i_1__0 
       (.I0(s_axi_araddr[51]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[19]),
        .O(m_mesg_mux[20]));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[21]_i_1__0 
       (.I0(s_axi_araddr[52]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[20]),
        .O(m_mesg_mux[21]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[22]_i_1__0 
       (.I0(s_axi_araddr[53]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[21]),
        .O(m_mesg_mux[22]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[23]_i_1__0 
       (.I0(s_axi_araddr[54]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[22]),
        .O(m_mesg_mux[23]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[24]_i_1__0 
       (.I0(s_axi_araddr[55]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[23]),
        .O(m_mesg_mux[24]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[25]_i_1__0 
       (.I0(s_axi_araddr[56]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[24]),
        .O(m_mesg_mux[25]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[26]_i_1__0 
       (.I0(s_axi_araddr[57]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[25]),
        .O(m_mesg_mux[26]));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[27]_i_1__0 
       (.I0(s_axi_araddr[58]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[26]),
        .O(m_mesg_mux[27]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[28]_i_1__0 
       (.I0(s_axi_araddr[59]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[27]),
        .O(m_mesg_mux[28]));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[29]_i_1__0 
       (.I0(s_axi_araddr[60]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[28]),
        .O(m_mesg_mux[29]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[2]_i_1__0 
       (.I0(s_axi_araddr[33]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[1]),
        .O(m_mesg_mux[2]));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[30]_i_1__0 
       (.I0(s_axi_araddr[61]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[29]),
        .O(m_mesg_mux[30]));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[31]_i_1__0 
       (.I0(s_axi_araddr[62]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[30]),
        .O(m_mesg_mux[31]));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[32]_i_1__0 
       (.I0(s_axi_araddr[63]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[31]),
        .O(m_mesg_mux[32]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[33]_i_1__0 
       (.I0(s_axi_arlen[8]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arlen[0]),
        .O(m_mesg_mux[33]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[34]_i_1__0 
       (.I0(s_axi_arlen[9]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arlen[1]),
        .O(m_mesg_mux[34]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[35]_i_1__0 
       (.I0(s_axi_arlen[10]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arlen[2]),
        .O(m_mesg_mux[35]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[36]_i_1__0 
       (.I0(s_axi_arlen[11]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arlen[3]),
        .O(m_mesg_mux[36]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[37]_i_1__0 
       (.I0(s_axi_arlen[12]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arlen[4]),
        .O(m_mesg_mux[37]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[38]_i_1__0 
       (.I0(s_axi_arlen[13]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arlen[5]),
        .O(m_mesg_mux[38]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[39]_i_1__0 
       (.I0(s_axi_arlen[14]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arlen[6]),
        .O(m_mesg_mux[39]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[3]_i_1__0 
       (.I0(s_axi_araddr[34]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[2]),
        .O(m_mesg_mux[3]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[40]_i_1__0 
       (.I0(s_axi_arlen[15]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arlen[7]),
        .O(m_mesg_mux[40]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[41]_i_1__0 
       (.I0(s_axi_arsize[3]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arsize[0]),
        .O(m_mesg_mux[41]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[42]_i_1__0 
       (.I0(s_axi_arsize[4]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arsize[1]),
        .O(m_mesg_mux[42]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[43]_i_1__0 
       (.I0(s_axi_arsize[5]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arsize[2]),
        .O(m_mesg_mux[43]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[44]_i_1__0 
       (.I0(s_axi_arlock[1]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arlock[0]),
        .O(m_mesg_mux[44]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[46]_i_1__0 
       (.I0(s_axi_arprot[3]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arprot[0]),
        .O(m_mesg_mux[46]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[47]_i_1__0 
       (.I0(s_axi_arprot[4]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arprot[1]),
        .O(m_mesg_mux[47]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[48]_i_1__0 
       (.I0(s_axi_arprot[5]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arprot[2]),
        .O(m_mesg_mux[48]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[4]_i_1__0 
       (.I0(s_axi_araddr[35]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[3]),
        .O(m_mesg_mux[4]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[53]_i_1__0 
       (.I0(s_axi_arburst[2]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arburst[0]),
        .O(m_mesg_mux[53]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[54]_i_1__0 
       (.I0(s_axi_arburst[3]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arburst[1]),
        .O(m_mesg_mux[54]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[55]_i_1__0 
       (.I0(s_axi_arcache[4]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arcache[0]),
        .O(m_mesg_mux[55]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[56]_i_1__0 
       (.I0(s_axi_arcache[5]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arcache[1]),
        .O(m_mesg_mux[56]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[57]_i_1__0 
       (.I0(s_axi_arcache[6]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arcache[2]),
        .O(m_mesg_mux[57]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[58]_i_1__0 
       (.I0(s_axi_arcache[7]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arcache[3]),
        .O(m_mesg_mux[58]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[59]_i_1__0 
       (.I0(s_axi_arqos[4]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arqos[0]),
        .O(m_mesg_mux[59]));
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[5]_i_1__0 
       (.I0(s_axi_araddr[36]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[4]),
        .O(m_mesg_mux[5]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[60]_i_1__0 
       (.I0(s_axi_arqos[5]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arqos[1]),
        .O(m_mesg_mux[60]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[61]_i_1__0 
       (.I0(s_axi_arqos[6]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arqos[2]),
        .O(m_mesg_mux[61]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[62]_i_1__0 
       (.I0(s_axi_arqos[7]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_arqos[3]),
        .O(m_mesg_mux[62]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[6]_i_1__0 
       (.I0(s_axi_araddr[37]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[5]),
        .O(m_mesg_mux[6]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[7]_i_1__0 
       (.I0(s_axi_araddr[38]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[6]),
        .O(m_mesg_mux[7]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[8]_i_1__0 
       (.I0(s_axi_araddr[39]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[7]),
        .O(m_mesg_mux[8]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[9]_i_1__0 
       (.I0(s_axi_araddr[40]),
        .I1(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .I2(s_axi_araddr[8]),
        .O(m_mesg_mux[9]));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[0] 
       (.C(aclk),
        .CE(p_1_in),
        .D(\gen_arbiter.m_grant_enc_i_reg_n_0_[0] ),
        .Q(\S_AXI_AQOS_Q_reg[3] [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[10] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[10]),
        .Q(\S_AXI_AQOS_Q_reg[3] [10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[11] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[11]),
        .Q(\S_AXI_AQOS_Q_reg[3] [11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[12] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[12]),
        .Q(\S_AXI_AQOS_Q_reg[3] [12]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[13] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[13]),
        .Q(\S_AXI_AQOS_Q_reg[3] [13]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[14] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[14]),
        .Q(\S_AXI_AQOS_Q_reg[3] [14]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[15] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[15]),
        .Q(\S_AXI_AQOS_Q_reg[3] [15]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[16] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[16]),
        .Q(\S_AXI_AQOS_Q_reg[3] [16]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[17] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[17]),
        .Q(\S_AXI_AQOS_Q_reg[3] [17]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[18] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[18]),
        .Q(\S_AXI_AQOS_Q_reg[3] [18]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[19] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[19]),
        .Q(\S_AXI_AQOS_Q_reg[3] [19]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[1] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[1]),
        .Q(\S_AXI_AQOS_Q_reg[3] [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[20] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[20]),
        .Q(\S_AXI_AQOS_Q_reg[3] [20]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[21] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[21]),
        .Q(\S_AXI_AQOS_Q_reg[3] [21]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[22] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[22]),
        .Q(\S_AXI_AQOS_Q_reg[3] [22]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[23] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[23]),
        .Q(\S_AXI_AQOS_Q_reg[3] [23]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[24] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[24]),
        .Q(\S_AXI_AQOS_Q_reg[3] [24]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[25] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[25]),
        .Q(\S_AXI_AQOS_Q_reg[3] [25]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[26] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[26]),
        .Q(\S_AXI_AQOS_Q_reg[3] [26]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[27] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[27]),
        .Q(\S_AXI_AQOS_Q_reg[3] [27]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[28] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[28]),
        .Q(\S_AXI_AQOS_Q_reg[3] [28]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[29] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[29]),
        .Q(\S_AXI_AQOS_Q_reg[3] [29]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[2] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[2]),
        .Q(\S_AXI_AQOS_Q_reg[3] [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[30] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[30]),
        .Q(\S_AXI_AQOS_Q_reg[3] [30]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[31] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[31]),
        .Q(\S_AXI_AQOS_Q_reg[3] [31]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[32] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[32]),
        .Q(\S_AXI_AQOS_Q_reg[3] [32]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[33] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[33]),
        .Q(\S_AXI_AQOS_Q_reg[3] [33]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[34] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[34]),
        .Q(\S_AXI_AQOS_Q_reg[3] [34]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[35] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[35]),
        .Q(\S_AXI_AQOS_Q_reg[3] [35]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[36] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[36]),
        .Q(\S_AXI_AQOS_Q_reg[3] [36]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[37] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[37]),
        .Q(\S_AXI_AQOS_Q_reg[3] [37]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[38] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[38]),
        .Q(\S_AXI_AQOS_Q_reg[3] [38]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[39] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[39]),
        .Q(\S_AXI_AQOS_Q_reg[3] [39]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[3] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[3]),
        .Q(\S_AXI_AQOS_Q_reg[3] [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[40] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[40]),
        .Q(\S_AXI_AQOS_Q_reg[3] [40]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[41] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[41]),
        .Q(\S_AXI_AQOS_Q_reg[3] [41]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[42] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[42]),
        .Q(\S_AXI_AQOS_Q_reg[3] [42]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[43] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[43]),
        .Q(\S_AXI_AQOS_Q_reg[3] [43]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[44] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[44]),
        .Q(\S_AXI_AQOS_Q_reg[3] [44]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[46] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[46]),
        .Q(\S_AXI_AQOS_Q_reg[3] [45]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[47] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[47]),
        .Q(\S_AXI_AQOS_Q_reg[3] [46]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[48] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[48]),
        .Q(\S_AXI_AQOS_Q_reg[3] [47]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[4] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[4]),
        .Q(\S_AXI_AQOS_Q_reg[3] [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[53] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[53]),
        .Q(\S_AXI_AQOS_Q_reg[3] [48]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[54] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[54]),
        .Q(\S_AXI_AQOS_Q_reg[3] [49]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[55] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[55]),
        .Q(\S_AXI_AQOS_Q_reg[3] [50]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[56] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[56]),
        .Q(\S_AXI_AQOS_Q_reg[3] [51]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[57] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[57]),
        .Q(\S_AXI_AQOS_Q_reg[3] [52]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[58] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[58]),
        .Q(\S_AXI_AQOS_Q_reg[3] [53]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[59] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[59]),
        .Q(\S_AXI_AQOS_Q_reg[3] [54]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[5] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[5]),
        .Q(\S_AXI_AQOS_Q_reg[3] [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[60] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[60]),
        .Q(\S_AXI_AQOS_Q_reg[3] [55]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[61] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[61]),
        .Q(\S_AXI_AQOS_Q_reg[3] [56]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[62] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[62]),
        .Q(\S_AXI_AQOS_Q_reg[3] [57]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[6] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[6]),
        .Q(\S_AXI_AQOS_Q_reg[3] [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[7] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[7]),
        .Q(\S_AXI_AQOS_Q_reg[3] [7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[8] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[8]),
        .Q(\S_AXI_AQOS_Q_reg[3] [8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[9] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[9]),
        .Q(\S_AXI_AQOS_Q_reg[3] [9]),
        .R(SR));
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_target_hot_i[0]_i_1__0 
       (.I0(\gen_arbiter.m_target_hot_i_reg[0]_0 ),
        .I1(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .I2(\gen_arbiter.m_target_hot_i_reg[0]_1 ),
        .O(m_target_hot_mux[0]));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \gen_arbiter.m_target_hot_i[0]_i_2__0 
       (.I0(sel_3),
        .I1(s_axi_araddr[49]),
        .I2(s_axi_araddr[48]),
        .I3(s_axi_araddr[51]),
        .I4(s_axi_araddr[50]),
        .I5(sel_4),
        .O(\gen_arbiter.m_target_hot_i_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \gen_arbiter.m_target_hot_i[0]_i_3__0 
       (.I0(sel_3_0),
        .I1(s_axi_araddr[17]),
        .I2(s_axi_araddr[16]),
        .I3(s_axi_araddr[19]),
        .I4(s_axi_araddr[18]),
        .I5(sel_4_1),
        .O(\gen_arbiter.m_target_hot_i_reg[0]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_target_hot_i[1]_i_1__0 
       (.I0(\gen_arbiter.m_target_hot_i_reg[1]_0 ),
        .I1(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .I2(\gen_arbiter.m_target_hot_i_reg[1]_1 ),
        .O(m_target_hot_mux[1]));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \gen_arbiter.m_target_hot_i[1]_i_2 
       (.I0(sel_4),
        .I1(s_axi_araddr[50]),
        .I2(s_axi_araddr[51]),
        .I3(s_axi_araddr[48]),
        .I4(s_axi_araddr[49]),
        .I5(sel_3),
        .O(\gen_arbiter.m_target_hot_i_reg[1]_0 ));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \gen_arbiter.m_target_hot_i[1]_i_3 
       (.I0(sel_4_1),
        .I1(s_axi_araddr[18]),
        .I2(s_axi_araddr[19]),
        .I3(s_axi_araddr[16]),
        .I4(s_axi_araddr[17]),
        .I5(sel_3_0),
        .O(\gen_arbiter.m_target_hot_i_reg[1]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \gen_arbiter.m_target_hot_i[2]_i_1__0 
       (.I0(\gen_arbiter.m_target_hot_i_reg[2]_0 ),
        .I1(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .I2(\gen_arbiter.m_target_hot_i_reg[2]_1 ),
        .O(m_target_hot_mux[2]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'h00020000)) 
    \gen_arbiter.m_target_hot_i[2]_i_2__0 
       (.I0(sel_4),
        .I1(s_axi_araddr[50]),
        .I2(s_axi_araddr[51]),
        .I3(s_axi_araddr[49]),
        .I4(sel_3),
        .O(\gen_arbiter.m_target_hot_i_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h00020000)) 
    \gen_arbiter.m_target_hot_i[2]_i_3__0 
       (.I0(sel_4_1),
        .I1(s_axi_araddr[18]),
        .I2(s_axi_araddr[19]),
        .I3(s_axi_araddr[17]),
        .I4(sel_3_0),
        .O(\gen_arbiter.m_target_hot_i_reg[2]_1 ));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    \gen_arbiter.m_target_hot_i[2]_i_4 
       (.I0(s_axi_araddr[60]),
        .I1(s_axi_araddr[61]),
        .I2(s_axi_araddr[58]),
        .I3(s_axi_araddr[59]),
        .I4(s_axi_araddr[63]),
        .I5(s_axi_araddr[62]),
        .O(sel_4));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \gen_arbiter.m_target_hot_i[2]_i_5 
       (.I0(s_axi_araddr[55]),
        .I1(s_axi_araddr[54]),
        .I2(s_axi_araddr[53]),
        .I3(s_axi_araddr[52]),
        .I4(s_axi_araddr[57]),
        .I5(s_axi_araddr[56]),
        .O(sel_3));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    \gen_arbiter.m_target_hot_i[2]_i_6 
       (.I0(s_axi_araddr[28]),
        .I1(s_axi_araddr[29]),
        .I2(s_axi_araddr[26]),
        .I3(s_axi_araddr[27]),
        .I4(s_axi_araddr[31]),
        .I5(s_axi_araddr[30]),
        .O(sel_4_1));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \gen_arbiter.m_target_hot_i[2]_i_7 
       (.I0(s_axi_araddr[23]),
        .I1(s_axi_araddr[22]),
        .I2(s_axi_araddr[21]),
        .I3(s_axi_araddr[20]),
        .I4(s_axi_araddr[25]),
        .I5(s_axi_araddr[24]),
        .O(sel_3_0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_target_hot_i_reg[0] 
       (.C(aclk),
        .CE(grant_hot),
        .D(m_target_hot_mux[0]),
        .Q(aa_mi_artarget_hot[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_target_hot_i_reg[1] 
       (.C(aclk),
        .CE(grant_hot),
        .D(m_target_hot_mux[1]),
        .Q(aa_mi_artarget_hot[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_target_hot_i_reg[2] 
       (.C(aclk),
        .CE(grant_hot),
        .D(m_target_hot_mux[2]),
        .Q(Q),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \gen_arbiter.m_valid_i_i_2__0 
       (.I0(aa_mi_artarget_hot[0]),
        .I1(m_axi_arready[0]),
        .I2(aa_mi_artarget_hot[1]),
        .I3(m_axi_arready[1]),
        .I4(\gen_axi.s_axi_arready_i_reg ),
        .I5(Q),
        .O(aa_mi_arready__1));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_valid_i_reg 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.any_grant_reg_1 ),
        .Q(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.qual_reg_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(D[0]),
        .Q(qual_reg[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.qual_reg_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(D[1]),
        .Q(qual_reg[1]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \gen_arbiter.s_ready_i[0]_i_1__0 
       (.I0(\gen_arbiter.grant_hot_reg_n_0_[0] ),
        .I1(aresetn_d),
        .I2(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I3(\gen_arbiter.any_grant_reg_0 ),
        .O(\gen_arbiter.s_ready_i[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \gen_arbiter.s_ready_i[1]_i_1__0 
       (.I0(\gen_arbiter.grant_hot_reg_n_0_[1] ),
        .I1(aresetn_d),
        .I2(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I3(\gen_arbiter.any_grant_reg_0 ),
        .O(\gen_arbiter.s_ready_i[1]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.s_ready_i_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.s_ready_i[0]_i_1__0_n_0 ),
        .Q(\gen_arbiter.last_rr_hot_reg[1]_1 ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.s_ready_i_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.s_ready_i[1]_i_1__0_n_0 ),
        .Q(\gen_arbiter.last_rr_hot_reg[0]_1 ),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    \gen_axi.s_axi_arready_i_i_2 
       (.I0(Q),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(\gen_axi.s_axi_arready_i_reg ),
        .I3(\gen_axi.read_cs_reg[0] ),
        .O(\gen_axi.s_axi_rid_i ));
  LUT5 #(
    .INIT(32'hAA03AA00)) 
    \gen_axi.s_axi_rlast_i_i_2 
       (.I0(\gen_axi.read_cnt_reg[4] ),
        .I1(\S_AXI_AQOS_Q_reg[3] [34]),
        .I2(\S_AXI_AQOS_Q_reg[3] [33]),
        .I3(\gen_axi.read_cs_reg[0] ),
        .I4(\gen_axi.s_axi_rlast_i_i_5_n_0 ),
        .O(\gen_axi.s_axi_rlast_i0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \gen_axi.s_axi_rlast_i_i_5 
       (.I0(\S_AXI_AQOS_Q_reg[3] [35]),
        .I1(\S_AXI_AQOS_Q_reg[3] [36]),
        .I2(\S_AXI_AQOS_Q_reg[3] [37]),
        .I3(\S_AXI_AQOS_Q_reg[3] [38]),
        .I4(\S_AXI_AQOS_Q_reg[3] [40]),
        .I5(\S_AXI_AQOS_Q_reg[3] [39]),
        .O(\gen_axi.s_axi_rlast_i_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hC333333338888888)) 
    \gen_master_slots[0].r_issuing_cnt[0]_i_1 
       (.I0(r_issuing_cnt[1]),
        .I1(r_cmd_pop_0__1),
        .I2(aa_mi_artarget_hot[0]),
        .I3(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I4(m_axi_arready[0]),
        .I5(r_issuing_cnt[0]),
        .O(\gen_master_slots[0].r_issuing_cnt_reg[0] ));
  LUT6 #(
    .INIT(64'hFF7F80FF00800000)) 
    \gen_master_slots[0].r_issuing_cnt[1]_i_1 
       (.I0(m_axi_arready[0]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(aa_mi_artarget_hot[0]),
        .I3(r_cmd_pop_0__1),
        .I4(r_issuing_cnt[0]),
        .I5(r_issuing_cnt[1]),
        .O(\gen_master_slots[0].r_issuing_cnt_reg[1] ));
  LUT6 #(
    .INIT(64'hC333333338888888)) 
    \gen_master_slots[1].r_issuing_cnt[8]_i_1 
       (.I0(r_issuing_cnt[3]),
        .I1(r_cmd_pop_1__1),
        .I2(aa_mi_artarget_hot[1]),
        .I3(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I4(m_axi_arready[1]),
        .I5(r_issuing_cnt[2]),
        .O(\gen_master_slots[1].r_issuing_cnt_reg[8] ));
  LUT6 #(
    .INIT(64'hFF7F80FF00800000)) 
    \gen_master_slots[1].r_issuing_cnt[9]_i_1 
       (.I0(m_axi_arready[1]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(aa_mi_artarget_hot[1]),
        .I3(r_cmd_pop_1__1),
        .I4(r_issuing_cnt[2]),
        .I5(r_issuing_cnt[3]),
        .O(\gen_master_slots[1].r_issuing_cnt_reg[9] ));
  LUT2 #(
    .INIT(4'h8)) 
    \m_axi_arvalid[0]_INST_0 
       (.I0(aa_mi_artarget_hot[0]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .O(m_axi_arvalid[0]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axi_arvalid[1]_INST_0 
       (.I0(aa_mi_artarget_hot[1]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .O(m_axi_arvalid[1]));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_addr_arbiter" *) 
module bd_1_axi_crossbar_v2_1_16_addr_arbiter_41
   (\gen_arbiter.m_mesg_i_reg[0]_0 ,
    \gen_arbiter.last_rr_hot_reg[1]_0 ,
    \gen_arbiter.any_grant_reg_0 ,
    \FSM_onehot_state_reg[0] ,
    D,
    Q,
    \gen_master_slots[1].w_issuing_cnt_reg[9] ,
    \gen_master_slots[0].w_issuing_cnt_reg[1] ,
    \gen_arbiter.last_rr_hot_reg[0]_0 ,
    m_axi_awvalid,
    \gen_axi.write_cs01_out ,
    \m_ready_d_reg[0] ,
    aa_sa_awready,
    mi_awready_mux__1,
    s_ready_i0__1,
    \gen_arbiter.m_target_hot_i_reg[2]_0 ,
    \gen_arbiter.m_target_hot_i_reg[2]_1 ,
    \gen_arbiter.m_target_hot_i_reg[0]_0 ,
    \gen_arbiter.m_target_hot_i_reg[0]_1 ,
    \m_ready_d_reg[0]_0 ,
    \m_ready_d_reg[0]_1 ,
    sel_3,
    sel_4,
    target_mi_enc,
    \gen_arbiter.qual_reg_reg[1]_0 ,
    sel_3_0,
    sel_4_1,
    target_mi_enc_2,
    \gen_arbiter.qual_reg_reg[0]_0 ,
    sa_wm_awvalid,
    \S_AXI_AQOS_Q_reg[3] ,
    SR,
    aclk,
    \gen_arbiter.any_grant_reg_1 ,
    m_aready__1,
    m_ready_d,
    out0,
    m_axi_awready,
    \m_ready_d_reg[1] ,
    w_cmd_pop_1__0,
    w_issuing_cnt,
    w_cmd_pop_0__0,
    grant_hot0,
    \m_ready_d_reg[1]_0 ,
    mi_awready_2,
    aresetn_d,
    st_aa_awvalid_qual,
    \gen_master_slots[2].w_issuing_cnt_reg[16] ,
    \gen_master_slots[2].w_issuing_cnt_reg[16]_0 ,
    \m_payload_i_reg[18] ,
    \m_payload_i_reg[18]_0 ,
    \m_ready_d_reg[0]_2 ,
    s_axi_awvalid,
    \m_ready_d_reg[0]_3 ,
    s_axi_awaddr,
    s_axi_awqos,
    s_axi_awcache,
    s_axi_awburst,
    s_axi_awprot,
    s_axi_awlock,
    s_axi_awsize,
    s_axi_awlen,
    \m_ready_d_reg[0]_4 );
  output \gen_arbiter.m_mesg_i_reg[0]_0 ;
  output \gen_arbiter.last_rr_hot_reg[1]_0 ;
  output \gen_arbiter.any_grant_reg_0 ;
  output \FSM_onehot_state_reg[0] ;
  output [1:0]D;
  output [2:0]Q;
  output \gen_master_slots[1].w_issuing_cnt_reg[9] ;
  output \gen_master_slots[0].w_issuing_cnt_reg[1] ;
  output \gen_arbiter.last_rr_hot_reg[0]_0 ;
  output [1:0]m_axi_awvalid;
  output \gen_axi.write_cs01_out ;
  output \m_ready_d_reg[0] ;
  output aa_sa_awready;
  output mi_awready_mux__1;
  output [0:0]s_ready_i0__1;
  output \gen_arbiter.m_target_hot_i_reg[2]_0 ;
  output \gen_arbiter.m_target_hot_i_reg[2]_1 ;
  output \gen_arbiter.m_target_hot_i_reg[0]_0 ;
  output \gen_arbiter.m_target_hot_i_reg[0]_1 ;
  output \m_ready_d_reg[0]_0 ;
  output \m_ready_d_reg[0]_1 ;
  output sel_3;
  output sel_4;
  output target_mi_enc;
  output \gen_arbiter.qual_reg_reg[1]_0 ;
  output sel_3_0;
  output sel_4_1;
  output target_mi_enc_2;
  output \gen_arbiter.qual_reg_reg[0]_0 ;
  output [2:0]sa_wm_awvalid;
  output [57:0]\S_AXI_AQOS_Q_reg[3] ;
  input [0:0]SR;
  input aclk;
  input \gen_arbiter.any_grant_reg_1 ;
  input m_aready__1;
  input [0:0]m_ready_d;
  input [1:0]out0;
  input [1:0]m_axi_awready;
  input \m_ready_d_reg[1] ;
  input w_cmd_pop_1__0;
  input [3:0]w_issuing_cnt;
  input w_cmd_pop_0__0;
  input grant_hot0;
  input \m_ready_d_reg[1]_0 ;
  input mi_awready_2;
  input aresetn_d;
  input [1:0]st_aa_awvalid_qual;
  input \gen_master_slots[2].w_issuing_cnt_reg[16] ;
  input \gen_master_slots[2].w_issuing_cnt_reg[16]_0 ;
  input \m_payload_i_reg[18] ;
  input \m_payload_i_reg[18]_0 ;
  input \m_ready_d_reg[0]_2 ;
  input [1:0]s_axi_awvalid;
  input \m_ready_d_reg[0]_3 ;
  input [63:0]s_axi_awaddr;
  input [7:0]s_axi_awqos;
  input [7:0]s_axi_awcache;
  input [3:0]s_axi_awburst;
  input [5:0]s_axi_awprot;
  input [1:0]s_axi_awlock;
  input [5:0]s_axi_awsize;
  input [15:0]s_axi_awlen;
  input [1:0]\m_ready_d_reg[0]_4 ;

  wire \<const0> ;
  wire \<const1> ;
  wire [1:0]D;
  wire \FSM_onehot_state_reg[0] ;
  wire [2:0]Q;
  wire [0:0]SR;
  wire [57:0]\S_AXI_AQOS_Q_reg[3] ;
  wire aa_sa_awready;
  wire aclk;
  wire aresetn_d;
  wire \gen_arbiter.any_grant_i_1_n_0 ;
  wire \gen_arbiter.any_grant_reg_0 ;
  wire \gen_arbiter.any_grant_reg_1 ;
  wire \gen_arbiter.grant_hot[0]_i_1_n_0 ;
  wire \gen_arbiter.grant_hot[1]_i_1_n_0 ;
  wire \gen_arbiter.grant_hot[1]_i_2_n_0 ;
  wire \gen_arbiter.grant_hot_reg_n_0_[0] ;
  wire \gen_arbiter.grant_hot_reg_n_0_[1] ;
  wire \gen_arbiter.last_rr_hot_reg[0]_0 ;
  wire \gen_arbiter.last_rr_hot_reg[1]_0 ;
  wire \gen_arbiter.last_rr_hot_reg_n_0_[0] ;
  wire \gen_arbiter.m_grant_enc_i[0]_i_3_n_0 ;
  wire \gen_arbiter.m_grant_enc_i[0]_i_8_n_0 ;
  wire \gen_arbiter.m_grant_enc_i[0]_i_9_n_0 ;
  wire \gen_arbiter.m_mesg_i_reg[0]_0 ;
  wire \gen_arbiter.m_target_hot_i_reg[0]_0 ;
  wire \gen_arbiter.m_target_hot_i_reg[0]_1 ;
  wire \gen_arbiter.m_target_hot_i_reg[2]_0 ;
  wire \gen_arbiter.m_target_hot_i_reg[2]_1 ;
  wire \gen_arbiter.qual_reg_reg[0]_0 ;
  wire \gen_arbiter.qual_reg_reg[1]_0 ;
  wire \gen_arbiter.s_ready_i[0]_i_1_n_0 ;
  wire \gen_arbiter.s_ready_i[1]_i_1_n_0 ;
  wire \gen_axi.write_cs01_out ;
  wire \gen_master_slots[0].w_issuing_cnt_reg[1] ;
  wire \gen_master_slots[1].w_issuing_cnt_reg[9] ;
  wire \gen_master_slots[2].w_issuing_cnt_reg[16] ;
  wire \gen_master_slots[2].w_issuing_cnt_reg[16]_0 ;
  wire grant_hot;
  wire grant_hot0;
  wire m_aready__1;
  wire [1:0]m_axi_awready;
  wire [1:0]m_axi_awvalid;
  wire [62:1]m_mesg_mux;
  wire \m_payload_i_reg[18] ;
  wire \m_payload_i_reg[18]_0 ;
  wire [0:0]m_ready_d;
  wire \m_ready_d_reg[0] ;
  wire \m_ready_d_reg[0]_0 ;
  wire \m_ready_d_reg[0]_1 ;
  wire \m_ready_d_reg[0]_2 ;
  wire \m_ready_d_reg[0]_3 ;
  wire [1:0]\m_ready_d_reg[0]_4 ;
  wire \m_ready_d_reg[1] ;
  wire \m_ready_d_reg[1]_0 ;
  wire [2:0]m_target_hot_mux;
  wire mi_awready_2;
  wire mi_awready_mux__1;
  wire [1:0]out0;
  wire p_0_in9_in;
  wire p_1_in;
  wire p_2_in;
  wire [1:0]qual_reg;
  wire [63:0]s_axi_awaddr;
  wire [3:0]s_axi_awburst;
  wire [7:0]s_axi_awcache;
  wire [15:0]s_axi_awlen;
  wire [1:0]s_axi_awlock;
  wire [5:0]s_axi_awprot;
  wire [7:0]s_axi_awqos;
  wire [5:0]s_axi_awsize;
  wire [1:0]s_axi_awvalid;
  wire [0:0]s_ready_i0__1;
  wire [2:0]sa_wm_awvalid;
  wire sel_3;
  wire sel_3_0;
  wire sel_4;
  wire sel_4_1;
  wire [1:0]st_aa_awvalid_qual;
  wire target_mi_enc;
  wire target_mi_enc_2;
  wire w_cmd_pop_0__0;
  wire w_cmd_pop_1__0;
  wire [3:0]w_issuing_cnt;

  LUT6 #(
    .INIT(64'h00008AAA00000000)) 
    \FSM_onehot_state[0]_i_1__0 
       (.I0(m_aready__1),
        .I1(m_ready_d),
        .I2(\FSM_onehot_state_reg[0] ),
        .I3(Q[2]),
        .I4(out0[1]),
        .I5(out0[0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h0000000075550000)) 
    \FSM_onehot_state[3]_i_2__0 
       (.I0(m_aready__1),
        .I1(m_ready_d),
        .I2(\FSM_onehot_state_reg[0] ),
        .I3(Q[2]),
        .I4(out0[0]),
        .I5(out0[1]),
        .O(D[1]));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h00000000FF00FFE0)) 
    \gen_arbiter.any_grant_i_1 
       (.I0(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .I1(\gen_arbiter.last_rr_hot_reg[0]_0 ),
        .I2(grant_hot0),
        .I3(\gen_arbiter.any_grant_reg_0 ),
        .I4(\FSM_onehot_state_reg[0] ),
        .I5(\gen_arbiter.grant_hot[1]_i_2_n_0 ),
        .O(\gen_arbiter.any_grant_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.any_grant_reg 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.any_grant_i_1_n_0 ),
        .Q(\gen_arbiter.any_grant_reg_0 ),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'h00E2)) 
    \gen_arbiter.grant_hot[0]_i_1 
       (.I0(\gen_arbiter.grant_hot_reg_n_0_[0] ),
        .I1(grant_hot),
        .I2(\gen_arbiter.last_rr_hot_reg[0]_0 ),
        .I3(\gen_arbiter.grant_hot[1]_i_2_n_0 ),
        .O(\gen_arbiter.grant_hot[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'h00E2)) 
    \gen_arbiter.grant_hot[1]_i_1 
       (.I0(\gen_arbiter.grant_hot_reg_n_0_[1] ),
        .I1(grant_hot),
        .I2(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .I3(\gen_arbiter.grant_hot[1]_i_2_n_0 ),
        .O(\gen_arbiter.grant_hot[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h8F)) 
    \gen_arbiter.grant_hot[1]_i_2 
       (.I0(aa_sa_awready),
        .I1(\FSM_onehot_state_reg[0] ),
        .I2(aresetn_d),
        .O(\gen_arbiter.grant_hot[1]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.grant_hot_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.grant_hot[0]_i_1_n_0 ),
        .Q(\gen_arbiter.grant_hot_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.grant_hot_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.grant_hot[1]_i_1_n_0 ),
        .Q(\gen_arbiter.grant_hot_reg_n_0_[1] ),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'hF200)) 
    \gen_arbiter.last_rr_hot[0]_i_1 
       (.I0(\gen_arbiter.last_rr_hot_reg_n_0_[0] ),
        .I1(p_0_in9_in),
        .I2(p_2_in),
        .I3(\gen_arbiter.m_grant_enc_i[0]_i_9_n_0 ),
        .O(\gen_arbiter.last_rr_hot_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.last_rr_hot_reg[0] 
       (.C(aclk),
        .CE(grant_hot),
        .D(\gen_arbiter.last_rr_hot_reg[0]_0 ),
        .Q(\gen_arbiter.last_rr_hot_reg_n_0_[0] ),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \gen_arbiter.last_rr_hot_reg[1] 
       (.C(aclk),
        .CE(grant_hot),
        .D(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .Q(p_2_in),
        .S(SR));
  LUT6 #(
    .INIT(64'h00000000AA808080)) 
    \gen_arbiter.m_grant_enc_i[0]_i_1 
       (.I0(\gen_arbiter.m_grant_enc_i[0]_i_3_n_0 ),
        .I1(st_aa_awvalid_qual[0]),
        .I2(\gen_master_slots[2].w_issuing_cnt_reg[16] ),
        .I3(st_aa_awvalid_qual[1]),
        .I4(\gen_master_slots[2].w_issuing_cnt_reg[16]_0 ),
        .I5(\gen_arbiter.m_grant_enc_i[0]_i_8_n_0 ),
        .O(grant_hot));
  LUT4 #(
    .INIT(16'h0400)) 
    \gen_arbiter.m_grant_enc_i[0]_i_10 
       (.I0(\m_ready_d_reg[0]_0 ),
        .I1(qual_reg[1]),
        .I2(\m_ready_d_reg[0]_2 ),
        .I3(s_axi_awvalid[1]),
        .O(p_0_in9_in));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \gen_arbiter.m_grant_enc_i[0]_i_13 
       (.I0(sel_3_0),
        .I1(s_axi_awaddr[17]),
        .I2(s_axi_awaddr[16]),
        .I3(s_axi_awaddr[19]),
        .I4(s_axi_awaddr[18]),
        .I5(sel_4_1),
        .O(target_mi_enc_2));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \gen_arbiter.m_grant_enc_i[0]_i_17 
       (.I0(sel_3),
        .I1(s_axi_awaddr[49]),
        .I2(s_axi_awaddr[48]),
        .I3(s_axi_awaddr[51]),
        .I4(s_axi_awaddr[50]),
        .I5(sel_4),
        .O(target_mi_enc));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \gen_arbiter.m_grant_enc_i[0]_i_18 
       (.I0(s_axi_awaddr[18]),
        .I1(s_axi_awaddr[19]),
        .O(\gen_arbiter.qual_reg_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \gen_arbiter.m_grant_enc_i[0]_i_19 
       (.I0(s_axi_awaddr[50]),
        .I1(s_axi_awaddr[51]),
        .O(\gen_arbiter.qual_reg_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'hF200)) 
    \gen_arbiter.m_grant_enc_i[0]_i_2 
       (.I0(p_2_in),
        .I1(\gen_arbiter.m_grant_enc_i[0]_i_9_n_0 ),
        .I2(\gen_arbiter.last_rr_hot_reg_n_0_[0] ),
        .I3(p_0_in9_in),
        .O(\gen_arbiter.last_rr_hot_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \gen_arbiter.m_grant_enc_i[0]_i_3 
       (.I0(\gen_arbiter.any_grant_reg_0 ),
        .I1(\FSM_onehot_state_reg[0] ),
        .O(\gen_arbiter.m_grant_enc_i[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \gen_arbiter.m_grant_enc_i[0]_i_8 
       (.I0(\gen_arbiter.last_rr_hot_reg[0]_0 ),
        .I1(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .O(\gen_arbiter.m_grant_enc_i[0]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h0400)) 
    \gen_arbiter.m_grant_enc_i[0]_i_9 
       (.I0(\m_ready_d_reg[0]_1 ),
        .I1(qual_reg[0]),
        .I2(\m_ready_d_reg[0]_3 ),
        .I3(s_axi_awvalid[0]),
        .O(\gen_arbiter.m_grant_enc_i[0]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_grant_enc_i_reg[0] 
       (.C(aclk),
        .CE(grant_hot),
        .D(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .Q(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .R(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_arbiter.m_mesg_i[0]_i_2 
       (.I0(\FSM_onehot_state_reg[0] ),
        .O(p_1_in));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[10]_i_1 
       (.I0(s_axi_awaddr[41]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[9]),
        .O(m_mesg_mux[10]));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[11]_i_1 
       (.I0(s_axi_awaddr[42]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[10]),
        .O(m_mesg_mux[11]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[12]_i_1 
       (.I0(s_axi_awaddr[43]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[11]),
        .O(m_mesg_mux[12]));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[13]_i_1 
       (.I0(s_axi_awaddr[44]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[12]),
        .O(m_mesg_mux[13]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[14]_i_1 
       (.I0(s_axi_awaddr[45]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[13]),
        .O(m_mesg_mux[14]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[15]_i_1 
       (.I0(s_axi_awaddr[46]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[14]),
        .O(m_mesg_mux[15]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[16]_i_1 
       (.I0(s_axi_awaddr[47]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[15]),
        .O(m_mesg_mux[16]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[17]_i_1 
       (.I0(s_axi_awaddr[48]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[16]),
        .O(m_mesg_mux[17]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[18]_i_1 
       (.I0(s_axi_awaddr[49]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[17]),
        .O(m_mesg_mux[18]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[19]_i_1 
       (.I0(s_axi_awaddr[50]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[18]),
        .O(m_mesg_mux[19]));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[1]_i_1 
       (.I0(s_axi_awaddr[32]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[0]),
        .O(m_mesg_mux[1]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[20]_i_1 
       (.I0(s_axi_awaddr[51]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[19]),
        .O(m_mesg_mux[20]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[21]_i_1 
       (.I0(s_axi_awaddr[52]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[20]),
        .O(m_mesg_mux[21]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[22]_i_1 
       (.I0(s_axi_awaddr[53]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[21]),
        .O(m_mesg_mux[22]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[23]_i_1 
       (.I0(s_axi_awaddr[54]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[22]),
        .O(m_mesg_mux[23]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[24]_i_1 
       (.I0(s_axi_awaddr[55]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[23]),
        .O(m_mesg_mux[24]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[25]_i_1 
       (.I0(s_axi_awaddr[56]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[24]),
        .O(m_mesg_mux[25]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[26]_i_1 
       (.I0(s_axi_awaddr[57]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[25]),
        .O(m_mesg_mux[26]));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[27]_i_1 
       (.I0(s_axi_awaddr[58]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[26]),
        .O(m_mesg_mux[27]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[28]_i_1 
       (.I0(s_axi_awaddr[59]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[27]),
        .O(m_mesg_mux[28]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[29]_i_1 
       (.I0(s_axi_awaddr[60]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[28]),
        .O(m_mesg_mux[29]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[2]_i_1 
       (.I0(s_axi_awaddr[33]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[1]),
        .O(m_mesg_mux[2]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[30]_i_1 
       (.I0(s_axi_awaddr[61]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[29]),
        .O(m_mesg_mux[30]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[31]_i_1 
       (.I0(s_axi_awaddr[62]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[30]),
        .O(m_mesg_mux[31]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[32]_i_1 
       (.I0(s_axi_awaddr[63]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[31]),
        .O(m_mesg_mux[32]));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[33]_i_1 
       (.I0(s_axi_awlen[8]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awlen[0]),
        .O(m_mesg_mux[33]));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[34]_i_1 
       (.I0(s_axi_awlen[9]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awlen[1]),
        .O(m_mesg_mux[34]));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[35]_i_1 
       (.I0(s_axi_awlen[10]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awlen[2]),
        .O(m_mesg_mux[35]));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[36]_i_1 
       (.I0(s_axi_awlen[11]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awlen[3]),
        .O(m_mesg_mux[36]));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[37]_i_1 
       (.I0(s_axi_awlen[12]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awlen[4]),
        .O(m_mesg_mux[37]));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[38]_i_1 
       (.I0(s_axi_awlen[13]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awlen[5]),
        .O(m_mesg_mux[38]));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[39]_i_1 
       (.I0(s_axi_awlen[14]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awlen[6]),
        .O(m_mesg_mux[39]));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[3]_i_1 
       (.I0(s_axi_awaddr[34]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[2]),
        .O(m_mesg_mux[3]));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[40]_i_1 
       (.I0(s_axi_awlen[15]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awlen[7]),
        .O(m_mesg_mux[40]));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[41]_i_1 
       (.I0(s_axi_awsize[3]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awsize[0]),
        .O(m_mesg_mux[41]));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[42]_i_1 
       (.I0(s_axi_awsize[4]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awsize[1]),
        .O(m_mesg_mux[42]));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[43]_i_1 
       (.I0(s_axi_awsize[5]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awsize[2]),
        .O(m_mesg_mux[43]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[44]_i_1 
       (.I0(s_axi_awlock[1]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awlock[0]),
        .O(m_mesg_mux[44]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[46]_i_1 
       (.I0(s_axi_awprot[3]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awprot[0]),
        .O(m_mesg_mux[46]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[47]_i_1 
       (.I0(s_axi_awprot[4]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awprot[1]),
        .O(m_mesg_mux[47]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[48]_i_1 
       (.I0(s_axi_awprot[5]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awprot[2]),
        .O(m_mesg_mux[48]));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[4]_i_1 
       (.I0(s_axi_awaddr[35]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[3]),
        .O(m_mesg_mux[4]));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[53]_i_1 
       (.I0(s_axi_awburst[2]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awburst[0]),
        .O(m_mesg_mux[53]));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[54]_i_1 
       (.I0(s_axi_awburst[3]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awburst[1]),
        .O(m_mesg_mux[54]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[55]_i_1 
       (.I0(s_axi_awcache[4]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awcache[0]),
        .O(m_mesg_mux[55]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[56]_i_1 
       (.I0(s_axi_awcache[5]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awcache[1]),
        .O(m_mesg_mux[56]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[57]_i_1 
       (.I0(s_axi_awcache[6]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awcache[2]),
        .O(m_mesg_mux[57]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[58]_i_1 
       (.I0(s_axi_awcache[7]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awcache[3]),
        .O(m_mesg_mux[58]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[59]_i_1 
       (.I0(s_axi_awqos[4]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awqos[0]),
        .O(m_mesg_mux[59]));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[5]_i_1 
       (.I0(s_axi_awaddr[36]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[4]),
        .O(m_mesg_mux[5]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[60]_i_1 
       (.I0(s_axi_awqos[5]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awqos[1]),
        .O(m_mesg_mux[60]));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[61]_i_1 
       (.I0(s_axi_awqos[6]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awqos[2]),
        .O(m_mesg_mux[61]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[62]_i_1 
       (.I0(s_axi_awqos[7]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awqos[3]),
        .O(m_mesg_mux[62]));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[6]_i_1 
       (.I0(s_axi_awaddr[37]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[5]),
        .O(m_mesg_mux[6]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[7]_i_1 
       (.I0(s_axi_awaddr[38]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[6]),
        .O(m_mesg_mux[7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[8]_i_1 
       (.I0(s_axi_awaddr[39]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[7]),
        .O(m_mesg_mux[8]));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_mesg_i[9]_i_1 
       (.I0(s_axi_awaddr[40]),
        .I1(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .I2(s_axi_awaddr[8]),
        .O(m_mesg_mux[9]));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[0] 
       (.C(aclk),
        .CE(p_1_in),
        .D(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .Q(\S_AXI_AQOS_Q_reg[3] [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[10] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[10]),
        .Q(\S_AXI_AQOS_Q_reg[3] [10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[11] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[11]),
        .Q(\S_AXI_AQOS_Q_reg[3] [11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[12] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[12]),
        .Q(\S_AXI_AQOS_Q_reg[3] [12]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[13] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[13]),
        .Q(\S_AXI_AQOS_Q_reg[3] [13]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[14] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[14]),
        .Q(\S_AXI_AQOS_Q_reg[3] [14]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[15] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[15]),
        .Q(\S_AXI_AQOS_Q_reg[3] [15]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[16] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[16]),
        .Q(\S_AXI_AQOS_Q_reg[3] [16]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[17] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[17]),
        .Q(\S_AXI_AQOS_Q_reg[3] [17]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[18] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[18]),
        .Q(\S_AXI_AQOS_Q_reg[3] [18]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[19] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[19]),
        .Q(\S_AXI_AQOS_Q_reg[3] [19]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[1] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[1]),
        .Q(\S_AXI_AQOS_Q_reg[3] [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[20] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[20]),
        .Q(\S_AXI_AQOS_Q_reg[3] [20]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[21] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[21]),
        .Q(\S_AXI_AQOS_Q_reg[3] [21]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[22] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[22]),
        .Q(\S_AXI_AQOS_Q_reg[3] [22]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[23] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[23]),
        .Q(\S_AXI_AQOS_Q_reg[3] [23]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[24] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[24]),
        .Q(\S_AXI_AQOS_Q_reg[3] [24]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[25] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[25]),
        .Q(\S_AXI_AQOS_Q_reg[3] [25]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[26] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[26]),
        .Q(\S_AXI_AQOS_Q_reg[3] [26]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[27] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[27]),
        .Q(\S_AXI_AQOS_Q_reg[3] [27]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[28] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[28]),
        .Q(\S_AXI_AQOS_Q_reg[3] [28]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[29] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[29]),
        .Q(\S_AXI_AQOS_Q_reg[3] [29]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[2] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[2]),
        .Q(\S_AXI_AQOS_Q_reg[3] [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[30] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[30]),
        .Q(\S_AXI_AQOS_Q_reg[3] [30]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[31] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[31]),
        .Q(\S_AXI_AQOS_Q_reg[3] [31]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[32] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[32]),
        .Q(\S_AXI_AQOS_Q_reg[3] [32]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[33] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[33]),
        .Q(\S_AXI_AQOS_Q_reg[3] [33]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[34] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[34]),
        .Q(\S_AXI_AQOS_Q_reg[3] [34]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[35] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[35]),
        .Q(\S_AXI_AQOS_Q_reg[3] [35]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[36] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[36]),
        .Q(\S_AXI_AQOS_Q_reg[3] [36]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[37] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[37]),
        .Q(\S_AXI_AQOS_Q_reg[3] [37]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[38] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[38]),
        .Q(\S_AXI_AQOS_Q_reg[3] [38]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[39] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[39]),
        .Q(\S_AXI_AQOS_Q_reg[3] [39]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[3] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[3]),
        .Q(\S_AXI_AQOS_Q_reg[3] [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[40] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[40]),
        .Q(\S_AXI_AQOS_Q_reg[3] [40]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[41] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[41]),
        .Q(\S_AXI_AQOS_Q_reg[3] [41]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[42] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[42]),
        .Q(\S_AXI_AQOS_Q_reg[3] [42]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[43] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[43]),
        .Q(\S_AXI_AQOS_Q_reg[3] [43]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[44] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[44]),
        .Q(\S_AXI_AQOS_Q_reg[3] [44]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[46] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[46]),
        .Q(\S_AXI_AQOS_Q_reg[3] [45]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[47] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[47]),
        .Q(\S_AXI_AQOS_Q_reg[3] [46]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[48] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[48]),
        .Q(\S_AXI_AQOS_Q_reg[3] [47]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[4] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[4]),
        .Q(\S_AXI_AQOS_Q_reg[3] [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[53] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[53]),
        .Q(\S_AXI_AQOS_Q_reg[3] [48]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[54] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[54]),
        .Q(\S_AXI_AQOS_Q_reg[3] [49]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[55] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[55]),
        .Q(\S_AXI_AQOS_Q_reg[3] [50]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[56] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[56]),
        .Q(\S_AXI_AQOS_Q_reg[3] [51]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[57] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[57]),
        .Q(\S_AXI_AQOS_Q_reg[3] [52]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[58] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[58]),
        .Q(\S_AXI_AQOS_Q_reg[3] [53]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[59] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[59]),
        .Q(\S_AXI_AQOS_Q_reg[3] [54]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[5] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[5]),
        .Q(\S_AXI_AQOS_Q_reg[3] [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[60] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[60]),
        .Q(\S_AXI_AQOS_Q_reg[3] [55]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[61] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[61]),
        .Q(\S_AXI_AQOS_Q_reg[3] [56]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[62] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[62]),
        .Q(\S_AXI_AQOS_Q_reg[3] [57]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[6] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[6]),
        .Q(\S_AXI_AQOS_Q_reg[3] [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[7] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[7]),
        .Q(\S_AXI_AQOS_Q_reg[3] [7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[8] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[8]),
        .Q(\S_AXI_AQOS_Q_reg[3] [8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_mesg_i_reg[9] 
       (.C(aclk),
        .CE(p_1_in),
        .D(m_mesg_mux[9]),
        .Q(\S_AXI_AQOS_Q_reg[3] [9]),
        .R(SR));
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_target_hot_i[0]_i_1 
       (.I0(\gen_arbiter.m_target_hot_i_reg[0]_0 ),
        .I1(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .I2(\gen_arbiter.m_target_hot_i_reg[0]_1 ),
        .O(m_target_hot_mux[0]));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \gen_arbiter.m_target_hot_i[0]_i_2 
       (.I0(sel_3),
        .I1(s_axi_awaddr[49]),
        .I2(s_axi_awaddr[48]),
        .I3(s_axi_awaddr[51]),
        .I4(s_axi_awaddr[50]),
        .I5(sel_4),
        .O(\gen_arbiter.m_target_hot_i_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \gen_arbiter.m_target_hot_i[0]_i_3 
       (.I0(sel_3_0),
        .I1(s_axi_awaddr[17]),
        .I2(s_axi_awaddr[16]),
        .I3(s_axi_awaddr[19]),
        .I4(s_axi_awaddr[18]),
        .I5(sel_4_1),
        .O(\gen_arbiter.m_target_hot_i_reg[0]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_arbiter.m_target_hot_i[1]_i_1 
       (.I0(\m_payload_i_reg[18] ),
        .I1(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .I2(\m_payload_i_reg[18]_0 ),
        .O(m_target_hot_mux[1]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \gen_arbiter.m_target_hot_i[2]_i_1 
       (.I0(\gen_arbiter.m_target_hot_i_reg[2]_0 ),
        .I1(\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .I2(\gen_arbiter.m_target_hot_i_reg[2]_1 ),
        .O(m_target_hot_mux[2]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT5 #(
    .INIT(32'h00020000)) 
    \gen_arbiter.m_target_hot_i[2]_i_2 
       (.I0(sel_4),
        .I1(s_axi_awaddr[50]),
        .I2(s_axi_awaddr[51]),
        .I3(s_axi_awaddr[49]),
        .I4(sel_3),
        .O(\gen_arbiter.m_target_hot_i_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'h00020000)) 
    \gen_arbiter.m_target_hot_i[2]_i_3 
       (.I0(sel_4_1),
        .I1(s_axi_awaddr[18]),
        .I2(s_axi_awaddr[19]),
        .I3(s_axi_awaddr[17]),
        .I4(sel_3_0),
        .O(\gen_arbiter.m_target_hot_i_reg[2]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_target_hot_i_reg[0] 
       (.C(aclk),
        .CE(grant_hot),
        .D(m_target_hot_mux[0]),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_target_hot_i_reg[1] 
       (.C(aclk),
        .CE(grant_hot),
        .D(m_target_hot_mux[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_target_hot_i_reg[2] 
       (.C(aclk),
        .CE(grant_hot),
        .D(m_target_hot_mux[2]),
        .Q(Q[2]),
        .R(SR));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEEE0)) 
    \gen_arbiter.m_valid_i_i_2 
       (.I0(\m_ready_d_reg[1]_0 ),
        .I1(mi_awready_mux__1),
        .I2(m_ready_d),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(aa_sa_awready));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.m_valid_i_reg 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.any_grant_reg_1 ),
        .Q(\FSM_onehot_state_reg[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.qual_reg_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d_reg[0]_4 [0]),
        .Q(qual_reg[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.qual_reg_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d_reg[0]_4 [1]),
        .Q(qual_reg[1]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \gen_arbiter.s_ready_i[0]_i_1 
       (.I0(\gen_arbiter.grant_hot_reg_n_0_[0] ),
        .I1(aresetn_d),
        .I2(\FSM_onehot_state_reg[0] ),
        .I3(\gen_arbiter.any_grant_reg_0 ),
        .O(\gen_arbiter.s_ready_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \gen_arbiter.s_ready_i[1]_i_1 
       (.I0(\gen_arbiter.grant_hot_reg_n_0_[1] ),
        .I1(aresetn_d),
        .I2(\FSM_onehot_state_reg[0] ),
        .I3(\gen_arbiter.any_grant_reg_0 ),
        .O(\gen_arbiter.s_ready_i[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.s_ready_i_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.s_ready_i[0]_i_1_n_0 ),
        .Q(\m_ready_d_reg[0]_1 ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_arbiter.s_ready_i_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.s_ready_i[1]_i_1_n_0 ),
        .Q(\m_ready_d_reg[0]_0 ),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    \gen_axi.write_cs[0]_i_2 
       (.I0(mi_awready_2),
        .I1(Q[2]),
        .I2(\FSM_onehot_state_reg[0] ),
        .I3(\m_ready_d_reg[1]_0 ),
        .O(\gen_axi.write_cs01_out ));
  LUT6 #(
    .INIT(64'hFFF708FF00080000)) 
    \gen_master_slots[0].w_issuing_cnt[1]_i_1 
       (.I0(m_axi_awready[0]),
        .I1(Q[0]),
        .I2(\m_ready_d_reg[1] ),
        .I3(w_cmd_pop_0__0),
        .I4(w_issuing_cnt[0]),
        .I5(w_issuing_cnt[1]),
        .O(\gen_master_slots[0].w_issuing_cnt_reg[1] ));
  LUT6 #(
    .INIT(64'hFFF708FF00080000)) 
    \gen_master_slots[1].w_issuing_cnt[9]_i_1 
       (.I0(m_axi_awready[1]),
        .I1(Q[1]),
        .I2(\m_ready_d_reg[1] ),
        .I3(w_cmd_pop_1__0),
        .I4(w_issuing_cnt[2]),
        .I5(w_issuing_cnt[3]),
        .O(\gen_master_slots[1].w_issuing_cnt_reg[9] ));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_4 
       (.I0(s_axi_awaddr[60]),
        .I1(s_axi_awaddr[61]),
        .I2(s_axi_awaddr[58]),
        .I3(s_axi_awaddr[59]),
        .I4(s_axi_awaddr[63]),
        .I5(s_axi_awaddr[62]),
        .O(sel_4));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_4__0 
       (.I0(s_axi_awaddr[28]),
        .I1(s_axi_awaddr[29]),
        .I2(s_axi_awaddr[26]),
        .I3(s_axi_awaddr[27]),
        .I4(s_axi_awaddr[31]),
        .I5(s_axi_awaddr[30]),
        .O(sel_4_1));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_5 
       (.I0(s_axi_awaddr[55]),
        .I1(s_axi_awaddr[54]),
        .I2(s_axi_awaddr[53]),
        .I3(s_axi_awaddr[52]),
        .I4(s_axi_awaddr[57]),
        .I5(s_axi_awaddr[56]),
        .O(sel_3));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_5__0 
       (.I0(s_axi_awaddr[23]),
        .I1(s_axi_awaddr[22]),
        .I2(s_axi_awaddr[21]),
        .I3(s_axi_awaddr[20]),
        .I4(s_axi_awaddr[25]),
        .I5(s_axi_awaddr[24]),
        .O(sel_3_0));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'h08)) 
    i__i_2
       (.I0(Q[1]),
        .I1(\FSM_onehot_state_reg[0] ),
        .I2(m_ready_d),
        .O(sa_wm_awvalid[1]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'h08)) 
    i__i_2__0
       (.I0(Q[0]),
        .I1(\FSM_onehot_state_reg[0] ),
        .I2(m_ready_d),
        .O(sa_wm_awvalid[0]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \m_axi_awvalid[0]_INST_0 
       (.I0(Q[0]),
        .I1(\FSM_onehot_state_reg[0] ),
        .I2(\m_ready_d_reg[1]_0 ),
        .O(m_axi_awvalid[0]));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \m_axi_awvalid[1]_INST_0 
       (.I0(Q[1]),
        .I1(\FSM_onehot_state_reg[0] ),
        .I2(\m_ready_d_reg[1]_0 ),
        .O(m_axi_awvalid[1]));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_ready_d[0]_i_2 
       (.I0(aa_sa_awready),
        .I1(aresetn_d),
        .O(\m_ready_d_reg[0] ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \m_ready_d[1]_i_2 
       (.I0(Q[0]),
        .I1(m_axi_awready[0]),
        .I2(Q[1]),
        .I3(m_axi_awready[1]),
        .I4(mi_awready_2),
        .I5(Q[2]),
        .O(mi_awready_mux__1));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \m_ready_d[1]_i_3 
       (.I0(m_ready_d),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .O(s_ready_i0__1));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT3 #(
    .INIT(8'h08)) 
    m_valid_i_i_2__2
       (.I0(Q[2]),
        .I1(\FSM_onehot_state_reg[0] ),
        .I2(m_ready_d),
        .O(sa_wm_awvalid[2]));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_axi_crossbar" *) 
module bd_1_axi_crossbar_v2_1_16_axi_crossbar
   (M_AXI_RREADY,
    Q,
    \gen_arbiter.last_rr_hot_reg[0] ,
    \gen_arbiter.last_rr_hot_reg[1] ,
    \S_AXI_AQOS_Q_reg[3] ,
    s_axi_awready,
    m_axi_bready,
    m_axi_awvalid,
    s_axi_bvalid,
    s_axi_bresp,
    s_axi_rresp,
    s_axi_rdata,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_wready,
    m_axi_wvalid,
    m_axi_wlast,
    m_axi_wstrb,
    m_axi_wdata,
    m_axi_arvalid,
    m_axi_bvalid,
    m_axi_rvalid,
    aclk,
    s_axi_wvalid,
    s_axi_wlast,
    s_axi_awvalid,
    m_axi_bid,
    m_axi_bresp,
    m_axi_rid,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    m_axi_awready,
    m_axi_arready,
    aresetn,
    s_axi_awaddr,
    s_axi_bready,
    s_axi_arvalid,
    s_axi_araddr,
    s_axi_rready,
    m_axi_wready,
    s_axi_awqos,
    s_axi_awcache,
    s_axi_awburst,
    s_axi_awprot,
    s_axi_awlock,
    s_axi_awsize,
    s_axi_awlen,
    s_axi_arqos,
    s_axi_arcache,
    s_axi_arburst,
    s_axi_arprot,
    s_axi_arlock,
    s_axi_arsize,
    s_axi_arlen,
    s_axi_wstrb,
    s_axi_wdata);
  output [1:0]M_AXI_RREADY;
  output [57:0]Q;
  output \gen_arbiter.last_rr_hot_reg[0] ;
  output \gen_arbiter.last_rr_hot_reg[1] ;
  output [57:0]\S_AXI_AQOS_Q_reg[3] ;
  output [1:0]s_axi_awready;
  output [1:0]m_axi_bready;
  output [1:0]m_axi_awvalid;
  output [1:0]s_axi_bvalid;
  output [3:0]s_axi_bresp;
  output [3:0]s_axi_rresp;
  output [127:0]s_axi_rdata;
  output [1:0]s_axi_rlast;
  output [1:0]s_axi_rvalid;
  output [1:0]s_axi_wready;
  output [1:0]m_axi_wvalid;
  output [1:0]m_axi_wlast;
  output [15:0]m_axi_wstrb;
  output [127:0]m_axi_wdata;
  output [1:0]m_axi_arvalid;
  input [1:0]m_axi_bvalid;
  input [1:0]m_axi_rvalid;
  input aclk;
  input [1:0]s_axi_wvalid;
  input [1:0]s_axi_wlast;
  input [1:0]s_axi_awvalid;
  input [1:0]m_axi_bid;
  input [3:0]m_axi_bresp;
  input [1:0]m_axi_rid;
  input [1:0]m_axi_rlast;
  input [3:0]m_axi_rresp;
  input [127:0]m_axi_rdata;
  input [1:0]m_axi_awready;
  input [1:0]m_axi_arready;
  input aresetn;
  input [63:0]s_axi_awaddr;
  input [1:0]s_axi_bready;
  input [1:0]s_axi_arvalid;
  input [63:0]s_axi_araddr;
  input [1:0]s_axi_rready;
  input [1:0]m_axi_wready;
  input [7:0]s_axi_awqos;
  input [7:0]s_axi_awcache;
  input [3:0]s_axi_awburst;
  input [5:0]s_axi_awprot;
  input [1:0]s_axi_awlock;
  input [5:0]s_axi_awsize;
  input [15:0]s_axi_awlen;
  input [7:0]s_axi_arqos;
  input [7:0]s_axi_arcache;
  input [3:0]s_axi_arburst;
  input [5:0]s_axi_arprot;
  input [1:0]s_axi_arlock;
  input [5:0]s_axi_arsize;
  input [15:0]s_axi_arlen;
  input [15:0]s_axi_wstrb;
  input [127:0]s_axi_wdata;

  wire [1:0]M_AXI_RREADY;
  wire [57:0]Q;
  wire [57:0]\S_AXI_AQOS_Q_reg[3] ;
  wire aa_mi_arready__1;
  wire [2:2]aa_mi_artarget_hot;
  wire aa_mi_arvalid;
  wire [2:2]aa_mi_awtarget_hot;
  wire aa_sa_awready;
  wire aa_sa_awvalid;
  wire aa_wm_awgrant_enc;
  wire aclk;
  wire aresetn;
  wire \aresetn_d[1]_i_1_n_0 ;
  wire \gen_arbiter.last_rr_hot_reg[0] ;
  wire \gen_arbiter.last_rr_hot_reg[1] ;
  wire \gen_arbiter.m_valid_i_i_1__0_n_0 ;
  wire \gen_arbiter.m_valid_i_i_1_n_0 ;
  wire \gen_axi.read_cs[0]_i_1_n_0 ;
  wire \gen_axi.s_axi_awready_i_i_1_n_0 ;
  wire \gen_axi.s_axi_bid_i[0]_i_1_n_0 ;
  wire \gen_axi.s_axi_bvalid_i_i_1_n_0 ;
  wire \gen_axi.s_axi_rid_i[0]_i_1_n_0 ;
  wire \gen_axi.s_axi_rlast_i_i_1_n_0 ;
  wire \gen_axi.s_axi_wready_i_i_1_n_0 ;
  wire [1:1]\gen_decerr_slave.decerr_slave_inst/gen_axi.read_cnt_reg ;
  wire \gen_decerr_slave.decerr_slave_inst/gen_axi.s_axi_rid_i ;
  wire \gen_decerr_slave.decerr_slave_inst/gen_axi.s_axi_rlast_i0 ;
  wire \gen_decerr_slave.decerr_slave_inst/gen_axi.s_axi_rlast_i__0 ;
  wire [1:0]\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs ;
  wire \gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs01_out ;
  wire \gen_master_slots[0].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/load_s1 ;
  wire \gen_master_slots[0].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/storage_data2 ;
  wire \gen_master_slots[0].gen_mi_write.wdata_mux_w/m_select_enc ;
  wire \gen_master_slots[1].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/load_s1 ;
  wire \gen_master_slots[1].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/storage_data2 ;
  wire \gen_master_slots[1].gen_mi_write.wdata_mux_w/m_select_enc ;
  wire [1:1]\gen_master_slots[1].reg_slice_mi/p_0_in ;
  wire \gen_master_slots[1].reg_slice_mi/p_1_in ;
  wire \gen_master_slots[2].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/load_s1 ;
  wire \gen_master_slots[2].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/storage_data2 ;
  wire \gen_master_slots[2].gen_mi_write.wdata_mux_w/m_select_enc ;
  wire \gen_master_slots[2].r_issuing_cnt[16]_i_1_n_0 ;
  wire \gen_master_slots[2].w_issuing_cnt[16]_i_1_n_0 ;
  wire \gen_samd.crossbar_samd_n_179 ;
  wire \gen_samd.crossbar_samd_n_181 ;
  wire \gen_samd.crossbar_samd_n_183 ;
  wire \gen_samd.crossbar_samd_n_188 ;
  wire \gen_samd.crossbar_samd_n_189 ;
  wire \gen_samd.crossbar_samd_n_197 ;
  wire \gen_samd.crossbar_samd_n_198 ;
  wire \gen_samd.crossbar_samd_n_215 ;
  wire \gen_samd.crossbar_samd_n_216 ;
  wire \gen_samd.crossbar_samd_n_22 ;
  wire \gen_samd.crossbar_samd_n_24 ;
  wire \gen_samd.crossbar_samd_n_362 ;
  wire \gen_samd.crossbar_samd_n_363 ;
  wire \gen_samd.crossbar_samd_n_47 ;
  wire \gen_samd.crossbar_samd_n_49 ;
  wire \gen_samd.crossbar_samd_n_54 ;
  wire \gen_samd.crossbar_samd_n_55 ;
  wire \gen_single_thread.active_target_enc[0]_i_1__0_n_0 ;
  wire \gen_single_thread.active_target_enc[0]_i_1__1_n_0 ;
  wire \gen_single_thread.active_target_enc[0]_i_1__2_n_0 ;
  wire \gen_single_thread.active_target_enc[0]_i_1_n_0 ;
  wire \gen_single_thread.active_target_enc[1]_i_1__0_n_0 ;
  wire \gen_single_thread.active_target_enc[1]_i_1__1_n_0 ;
  wire \gen_single_thread.active_target_enc[1]_i_1__2_n_0 ;
  wire \gen_single_thread.active_target_enc[1]_i_1_n_0 ;
  wire \gen_single_thread.active_target_hot[0]_i_1__0_n_0 ;
  wire \gen_single_thread.active_target_hot[0]_i_1__1_n_0 ;
  wire \gen_single_thread.active_target_hot[0]_i_1__2_n_0 ;
  wire \gen_single_thread.active_target_hot[0]_i_1_n_0 ;
  wire [1:0]\gen_slave_slots[0].gen_si_read.si_transactor_ar/gen_single_thread.active_target_enc ;
  wire [0:0]\gen_slave_slots[0].gen_si_read.si_transactor_ar/gen_single_thread.active_target_hot ;
  wire \gen_slave_slots[0].gen_si_read.si_transactor_ar/match ;
  wire [1:0]\gen_slave_slots[0].gen_si_write.si_transactor_aw/gen_single_thread.active_target_enc ;
  wire [0:0]\gen_slave_slots[0].gen_si_write.si_transactor_aw/gen_single_thread.active_target_hot ;
  wire \gen_slave_slots[0].gen_si_write.si_transactor_aw/match ;
  wire [1:0]\gen_slave_slots[0].gen_si_write.splitter_aw_si/m_ready_d ;
  wire \gen_slave_slots[0].gen_si_write.wdata_router_w/wrouter_aw_fifo/storage_data11 ;
  wire [1:0]\gen_slave_slots[1].gen_si_read.si_transactor_ar/gen_single_thread.active_target_enc ;
  wire [0:0]\gen_slave_slots[1].gen_si_read.si_transactor_ar/gen_single_thread.active_target_hot ;
  wire \gen_slave_slots[1].gen_si_read.si_transactor_ar/match ;
  wire [1:0]\gen_slave_slots[1].gen_si_write.si_transactor_aw/gen_single_thread.active_target_enc ;
  wire [0:0]\gen_slave_slots[1].gen_si_write.si_transactor_aw/gen_single_thread.active_target_hot ;
  wire \gen_slave_slots[1].gen_si_write.si_transactor_aw/match ;
  wire [1:0]\gen_slave_slots[1].gen_si_write.splitter_aw_si/m_ready_d ;
  wire \gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/areset_d1 ;
  wire \gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/storage_data11 ;
  wire [1:0]m_axi_arready;
  wire [1:0]m_axi_arvalid;
  wire [1:0]m_axi_awready;
  wire [1:0]m_axi_awvalid;
  wire [1:0]m_axi_bid;
  wire [1:0]m_axi_bready;
  wire [3:0]m_axi_bresp;
  wire [1:0]m_axi_bvalid;
  wire [127:0]m_axi_rdata;
  wire [1:0]m_axi_rid;
  wire [1:0]m_axi_rlast;
  wire [3:0]m_axi_rresp;
  wire [1:0]m_axi_rvalid;
  wire [127:0]m_axi_wdata;
  wire [1:0]m_axi_wlast;
  wire [1:0]m_axi_wready;
  wire [15:0]m_axi_wstrb;
  wire [1:0]m_axi_wvalid;
  wire \m_payload_i[2]_i_1__1_n_0 ;
  wire m_valid_i_i_1__5_n_0;
  wire mi_arready_2;
  wire mi_awready_2;
  wire mi_bready_2;
  wire mi_rready_2;
  wire p_14_in;
  wire p_15_in;
  wire p_17_in;
  wire p_20_in;
  wire p_21_in;
  wire p_24_in;
  wire r_cmd_pop_2__1;
  wire [16:16]r_issuing_cnt;
  wire [63:0]s_axi_araddr;
  wire [3:0]s_axi_arburst;
  wire [7:0]s_axi_arcache;
  wire [15:0]s_axi_arlen;
  wire [1:0]s_axi_arlock;
  wire [5:0]s_axi_arprot;
  wire [7:0]s_axi_arqos;
  wire [5:0]s_axi_arsize;
  wire [1:0]s_axi_arvalid;
  wire [63:0]s_axi_awaddr;
  wire [3:0]s_axi_awburst;
  wire [7:0]s_axi_awcache;
  wire [15:0]s_axi_awlen;
  wire [1:0]s_axi_awlock;
  wire [5:0]s_axi_awprot;
  wire [7:0]s_axi_awqos;
  wire [1:0]s_axi_awready;
  wire [5:0]s_axi_awsize;
  wire [1:0]s_axi_awvalid;
  wire [1:0]s_axi_bready;
  wire [3:0]s_axi_bresp;
  wire [1:0]s_axi_bvalid;
  wire [127:0]s_axi_rdata;
  wire [1:0]s_axi_rlast;
  wire [1:0]s_axi_rready;
  wire [3:0]s_axi_rresp;
  wire [1:0]s_axi_rvalid;
  wire [127:0]s_axi_wdata;
  wire [1:0]s_axi_wlast;
  wire [1:0]s_axi_wready;
  wire [15:0]s_axi_wstrb;
  wire [1:0]s_axi_wvalid;
  wire s_ready_i_i_1__0__0_n_0;
  wire s_ready_i_i_1__4_n_0;
  wire [1:1]\splitter_aw_mi/m_ready_d ;
  wire [1:0]ss_aa_awready;
  wire ss_wr_awready_0;
  wire ss_wr_awready_1;
  wire [3:0]st_aa_artarget_hot;
  wire [0:0]st_aa_awtarget_enc_0;
  wire [0:0]st_aa_awtarget_enc_2;
  wire [3:0]st_aa_awtarget_hot;
  wire [2:2]st_mr_bid;
  wire [2:2]st_mr_bvalid;
  wire \storage_data1[0]_i_1__0_n_0 ;
  wire \storage_data1[0]_i_1__1_n_0 ;
  wire \storage_data1[0]_i_1_n_0 ;
  wire w_cmd_pop_2__0;
  wire [16:16]w_issuing_cnt;
  wire wm_mr_wlast_2;
  wire wm_mr_wvalid_2;

  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \aresetn_d[1]_i_1 
       (.I0(\gen_master_slots[1].reg_slice_mi/p_0_in ),
        .I1(aresetn),
        .O(\aresetn_d[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h5C)) 
    \gen_arbiter.m_valid_i_i_1 
       (.I0(aa_sa_awready),
        .I1(\gen_samd.crossbar_samd_n_22 ),
        .I2(aa_sa_awvalid),
        .O(\gen_arbiter.m_valid_i_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h5C)) 
    \gen_arbiter.m_valid_i_i_1__0 
       (.I0(aa_mi_arready__1),
        .I1(\gen_samd.crossbar_samd_n_24 ),
        .I2(aa_mi_arvalid),
        .O(\gen_arbiter.m_valid_i_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0B0B0B0B0B0B0)) 
    \gen_axi.read_cs[0]_i_1 
       (.I0(\gen_decerr_slave.decerr_slave_inst/gen_axi.s_axi_rlast_i__0 ),
        .I1(mi_rready_2),
        .I2(p_15_in),
        .I3(mi_arready_2),
        .I4(aa_mi_arvalid),
        .I5(aa_mi_artarget_hot),
        .O(\gen_axi.read_cs[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFF500C5)) 
    \gen_axi.s_axi_awready_i_i_1 
       (.I0(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs01_out ),
        .I1(mi_bready_2),
        .I2(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs [1]),
        .I3(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs [0]),
        .I4(mi_awready_2),
        .O(\gen_axi.s_axi_awready_i_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEFF0200)) 
    \gen_axi.s_axi_bid_i[0]_i_1 
       (.I0(Q[0]),
        .I1(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs [1]),
        .I2(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs [0]),
        .I3(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs01_out ),
        .I4(p_24_in),
        .O(\gen_axi.s_axi_bid_i[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFF7F800)) 
    \gen_axi.s_axi_bvalid_i_i_1 
       (.I0(mi_bready_2),
        .I1(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs [1]),
        .I2(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs [0]),
        .I3(\gen_samd.crossbar_samd_n_49 ),
        .I4(p_21_in),
        .O(\gen_axi.s_axi_bvalid_i_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \gen_axi.s_axi_rid_i[0]_i_1 
       (.I0(\S_AXI_AQOS_Q_reg[3] [0]),
        .I1(aa_mi_artarget_hot),
        .I2(aa_mi_arvalid),
        .I3(mi_arready_2),
        .I4(p_15_in),
        .I5(p_20_in),
        .O(\gen_axi.s_axi_rid_i[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAFBFFAAAA0800)) 
    \gen_axi.s_axi_rlast_i_i_1 
       (.I0(\gen_decerr_slave.decerr_slave_inst/gen_axi.s_axi_rlast_i0 ),
        .I1(\gen_samd.crossbar_samd_n_197 ),
        .I2(\gen_decerr_slave.decerr_slave_inst/gen_axi.read_cnt_reg ),
        .I3(\gen_samd.crossbar_samd_n_198 ),
        .I4(\gen_decerr_slave.decerr_slave_inst/gen_axi.s_axi_rid_i ),
        .I5(p_17_in),
        .O(\gen_axi.s_axi_rlast_i_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF77FF000000F0)) 
    \gen_axi.s_axi_wready_i_i_1 
       (.I0(wm_mr_wvalid_2),
        .I1(wm_mr_wlast_2),
        .I2(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs01_out ),
        .I3(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs [0]),
        .I4(\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs [1]),
        .I5(p_14_in),
        .O(\gen_axi.s_axi_wready_i_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h807F0080)) 
    \gen_master_slots[2].r_issuing_cnt[16]_i_1 
       (.I0(aa_mi_artarget_hot),
        .I1(aa_mi_arvalid),
        .I2(mi_arready_2),
        .I3(r_cmd_pop_2__1),
        .I4(r_issuing_cnt),
        .O(\gen_master_slots[2].r_issuing_cnt[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4000BFFF00004000)) 
    \gen_master_slots[2].w_issuing_cnt[16]_i_1 
       (.I0(\splitter_aw_mi/m_ready_d ),
        .I1(aa_sa_awvalid),
        .I2(aa_mi_awtarget_hot),
        .I3(mi_awready_2),
        .I4(w_cmd_pop_2__0),
        .I5(w_issuing_cnt),
        .O(\gen_master_slots[2].w_issuing_cnt[16]_i_1_n_0 ));
  bd_1_axi_crossbar_v2_1_16_crossbar \gen_samd.crossbar_samd 
       (.\FSM_onehot_state_reg[3] (\storage_data1[0]_i_1_n_0 ),
        .\FSM_onehot_state_reg[3]_0 (\storage_data1[0]_i_1__0_n_0 ),
        .\FSM_onehot_state_reg[3]_1 (\storage_data1[0]_i_1__1_n_0 ),
        .Q(aa_mi_awtarget_hot),
        .\S_AXI_AQOS_Q_reg[3] (Q),
        .\S_AXI_AQOS_Q_reg[3]_0 (\S_AXI_AQOS_Q_reg[3] ),
        .aa_mi_arready__1(aa_mi_arready__1),
        .aa_mi_arvalid(aa_mi_arvalid),
        .aa_sa_awready(aa_sa_awready),
        .aa_sa_awvalid(aa_sa_awvalid),
        .aa_wm_awgrant_enc(aa_wm_awgrant_enc),
        .aclk(aclk),
        .areset_d1(\gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/areset_d1 ),
        .areset_d1_reg(s_ready_i_i_1__4_n_0),
        .areset_d1_reg_0(s_ready_i_i_1__0__0_n_0),
        .aresetn(aresetn),
        .\aresetn_d_reg[0] (\aresetn_d[1]_i_1_n_0 ),
        .\aresetn_d_reg[1] (m_valid_i_i_1__5_n_0),
        .\gen_arbiter.any_grant_reg (\gen_samd.crossbar_samd_n_22 ),
        .\gen_arbiter.any_grant_reg_0 (\gen_samd.crossbar_samd_n_24 ),
        .\gen_arbiter.any_grant_reg_1 (\gen_arbiter.m_valid_i_i_1_n_0 ),
        .\gen_arbiter.any_grant_reg_2 (\gen_arbiter.m_valid_i_i_1__0_n_0 ),
        .\gen_arbiter.last_rr_hot_reg[0] (\gen_arbiter.last_rr_hot_reg[0] ),
        .\gen_arbiter.last_rr_hot_reg[1] (\gen_arbiter.last_rr_hot_reg[1] ),
        .\gen_arbiter.m_mesg_i_reg[0] (\gen_axi.s_axi_bid_i[0]_i_1_n_0 ),
        .\gen_arbiter.m_mesg_i_reg[0]_0 (\gen_axi.s_axi_rid_i[0]_i_1_n_0 ),
        .\gen_arbiter.m_target_hot_i_reg[1] (\gen_samd.crossbar_samd_n_215 ),
        .\gen_arbiter.m_target_hot_i_reg[1]_0 (\gen_samd.crossbar_samd_n_216 ),
        .\gen_arbiter.m_target_hot_i_reg[2] (\gen_master_slots[2].r_issuing_cnt[16]_i_1_n_0 ),
        .\gen_arbiter.s_ready_i_reg[0] (\gen_single_thread.active_target_hot[0]_i_1__2_n_0 ),
        .\gen_arbiter.s_ready_i_reg[0]_0 (\gen_single_thread.active_target_enc[0]_i_1__2_n_0 ),
        .\gen_arbiter.s_ready_i_reg[0]_1 (\gen_single_thread.active_target_enc[1]_i_1__2_n_0 ),
        .\gen_arbiter.s_ready_i_reg[1] (\gen_single_thread.active_target_hot[0]_i_1__1_n_0 ),
        .\gen_arbiter.s_ready_i_reg[1]_0 (\gen_single_thread.active_target_enc[0]_i_1__1_n_0 ),
        .\gen_arbiter.s_ready_i_reg[1]_1 (\gen_single_thread.active_target_enc[1]_i_1__1_n_0 ),
        .\gen_axi.read_cnt_reg[0] (aa_mi_artarget_hot),
        .\gen_axi.read_cnt_reg[1] (\gen_axi.s_axi_rlast_i_i_1_n_0 ),
        .\gen_axi.read_cnt_reg[3] (\gen_decerr_slave.decerr_slave_inst/gen_axi.read_cnt_reg ),
        .\gen_axi.s_axi_rid_i (\gen_decerr_slave.decerr_slave_inst/gen_axi.s_axi_rid_i ),
        .\gen_axi.s_axi_rlast_i0 (\gen_decerr_slave.decerr_slave_inst/gen_axi.s_axi_rlast_i0 ),
        .\gen_axi.s_axi_rlast_i__0 (\gen_decerr_slave.decerr_slave_inst/gen_axi.s_axi_rlast_i__0 ),
        .\gen_axi.s_axi_rlast_i_reg (\gen_samd.crossbar_samd_n_197 ),
        .\gen_axi.s_axi_rlast_i_reg_0 (\gen_samd.crossbar_samd_n_198 ),
        .\gen_axi.write_cs (\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs ),
        .\gen_axi.write_cs01_out (\gen_decerr_slave.decerr_slave_inst/gen_axi.write_cs01_out ),
        .\gen_axi.write_cs_reg[0] (\gen_axi.s_axi_wready_i_i_1_n_0 ),
        .\gen_axi.write_cs_reg[1] (\gen_samd.crossbar_samd_n_49 ),
        .\gen_master_slots[2].r_issuing_cnt_reg[16]_0 (r_issuing_cnt),
        .\gen_master_slots[2].w_issuing_cnt_reg[16]_0 (w_issuing_cnt),
        .\gen_single_thread.active_target_enc (\gen_slave_slots[0].gen_si_read.si_transactor_ar/gen_single_thread.active_target_enc ),
        .\gen_single_thread.active_target_enc_3 (\gen_slave_slots[0].gen_si_write.si_transactor_aw/gen_single_thread.active_target_enc ),
        .\gen_single_thread.active_target_enc_5 (\gen_slave_slots[1].gen_si_read.si_transactor_ar/gen_single_thread.active_target_enc ),
        .\gen_single_thread.active_target_enc_7 (\gen_slave_slots[1].gen_si_write.si_transactor_aw/gen_single_thread.active_target_enc ),
        .\gen_single_thread.active_target_hot (\gen_slave_slots[0].gen_si_read.si_transactor_ar/gen_single_thread.active_target_hot ),
        .\gen_single_thread.active_target_hot_2 (\gen_slave_slots[0].gen_si_write.si_transactor_aw/gen_single_thread.active_target_hot ),
        .\gen_single_thread.active_target_hot_4 (\gen_slave_slots[1].gen_si_read.si_transactor_ar/gen_single_thread.active_target_hot ),
        .\gen_single_thread.active_target_hot_6 (\gen_slave_slots[1].gen_si_write.si_transactor_aw/gen_single_thread.active_target_hot ),
        .load_s1(\gen_master_slots[0].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/load_s1 ),
        .load_s1_15(\gen_master_slots[2].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/load_s1 ),
        .load_s1_16(\gen_master_slots[1].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/load_s1 ),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bid(m_axi_bid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rid(m_axi_rid),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wvalid(m_axi_wvalid),
        .\m_payload_i_reg[2] (st_mr_bid),
        .\m_payload_i_reg[2]_0 (\m_payload_i[2]_i_1__1_n_0 ),
        .m_ready_d(\gen_slave_slots[0].gen_si_write.splitter_aw_si/m_ready_d ),
        .m_ready_d_11(\gen_slave_slots[1].gen_si_write.splitter_aw_si/m_ready_d ),
        .\m_ready_d_reg[1] (\splitter_aw_mi/m_ready_d ),
        .\m_ready_d_reg[1]_0 (\gen_single_thread.active_target_hot[0]_i_1__0_n_0 ),
        .\m_ready_d_reg[1]_1 (\gen_single_thread.active_target_enc[0]_i_1__0_n_0 ),
        .\m_ready_d_reg[1]_2 (\gen_single_thread.active_target_enc[1]_i_1__0_n_0 ),
        .\m_ready_d_reg[1]_3 (\gen_single_thread.active_target_hot[0]_i_1_n_0 ),
        .\m_ready_d_reg[1]_4 (\gen_single_thread.active_target_enc[0]_i_1_n_0 ),
        .\m_ready_d_reg[1]_5 (\gen_single_thread.active_target_enc[1]_i_1_n_0 ),
        .\m_ready_d_reg[1]_6 (\gen_master_slots[2].w_issuing_cnt[16]_i_1_n_0 ),
        .m_select_enc(\gen_master_slots[0].gen_mi_write.wdata_mux_w/m_select_enc ),
        .m_select_enc_8(\gen_master_slots[1].gen_mi_write.wdata_mux_w/m_select_enc ),
        .m_select_enc_9(\gen_master_slots[2].gen_mi_write.wdata_mux_w/m_select_enc ),
        .m_valid_i_reg(\gen_samd.crossbar_samd_n_55 ),
        .m_valid_i_reg_0(\gen_samd.crossbar_samd_n_179 ),
        .m_valid_i_reg_1(\gen_samd.crossbar_samd_n_181 ),
        .m_valid_i_reg_2(\gen_samd.crossbar_samd_n_183 ),
        .m_valid_i_reg_3(\gen_samd.crossbar_samd_n_188 ),
        .m_valid_i_reg_4(\gen_samd.crossbar_samd_n_189 ),
        .match(\gen_slave_slots[1].gen_si_write.si_transactor_aw/match ),
        .match_12(\gen_slave_slots[0].gen_si_write.si_transactor_aw/match ),
        .match_13(\gen_slave_slots[1].gen_si_read.si_transactor_ar/match ),
        .match_14(\gen_slave_slots[0].gen_si_read.si_transactor_ar/match ),
        .mi_arready_2(mi_arready_2),
        .mi_awready_2(mi_awready_2),
        .mi_bready_2(mi_bready_2),
        .mi_rready_2(mi_rready_2),
        .out0(\gen_samd.crossbar_samd_n_54 ),
        .p_0_in(\gen_master_slots[1].reg_slice_mi/p_0_in ),
        .p_14_in(p_14_in),
        .p_15_in(p_15_in),
        .p_17_in(p_17_in),
        .p_1_in(\gen_master_slots[1].reg_slice_mi/p_1_in ),
        .p_20_in(p_20_in),
        .p_21_in(p_21_in),
        .p_24_in(p_24_in),
        .r_cmd_pop_2__1(r_cmd_pop_2__1),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arburst(s_axi_arburst),
        .s_axi_arcache(s_axi_arcache),
        .s_axi_arlen(s_axi_arlen),
        .s_axi_arlock(s_axi_arlock),
        .s_axi_arprot(s_axi_arprot),
        .s_axi_arqos(s_axi_arqos),
        .s_axi_arsize(s_axi_arsize),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awburst(s_axi_awburst),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awlock(s_axi_awlock),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awready(s_axi_awready),
        .s_axi_awsize(s_axi_awsize),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .s_ready_i_reg(st_mr_bvalid),
        .s_ready_i_reg_0(\gen_samd.crossbar_samd_n_47 ),
        .s_ready_i_reg_1(\gen_samd.crossbar_samd_n_362 ),
        .s_ready_i_reg_2(\gen_samd.crossbar_samd_n_363 ),
        .s_ready_i_reg_3(\gen_axi.s_axi_awready_i_i_1_n_0 ),
        .s_ready_i_reg_4(\gen_axi.s_axi_bvalid_i_i_1_n_0 ),
        .s_ready_i_reg_5(\gen_axi.read_cs[0]_i_1_n_0 ),
        .\skid_buffer_reg[0] (M_AXI_RREADY[0]),
        .\skid_buffer_reg[0]_0 (M_AXI_RREADY[1]),
        .ss_aa_awready(ss_aa_awready),
        .ss_wr_awready_0(ss_wr_awready_0),
        .ss_wr_awready_1(ss_wr_awready_1),
        .st_aa_artarget_hot({st_aa_artarget_hot[3],st_aa_artarget_hot[0]}),
        .st_aa_awtarget_enc_0(st_aa_awtarget_enc_0),
        .st_aa_awtarget_enc_2(st_aa_awtarget_enc_2),
        .st_aa_awtarget_hot({st_aa_awtarget_hot[3],st_aa_awtarget_hot[0]}),
        .storage_data11(\gen_slave_slots[0].gen_si_write.wdata_router_w/wrouter_aw_fifo/storage_data11 ),
        .storage_data11_10(\gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/storage_data11 ),
        .storage_data2(\gen_master_slots[0].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/storage_data2 ),
        .storage_data2_0(\gen_master_slots[1].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/storage_data2 ),
        .storage_data2_1(\gen_master_slots[2].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/storage_data2 ),
        .w_cmd_pop_2__0(w_cmd_pop_2__0),
        .wm_mr_wlast_2(wm_mr_wlast_2),
        .wm_mr_wvalid_2(wm_mr_wvalid_2));
  LUT6 #(
    .INIT(64'hABABABFFA8A8A800)) 
    \gen_single_thread.active_target_enc[0]_i_1 
       (.I0(st_aa_awtarget_enc_2),
        .I1(\gen_slave_slots[1].gen_si_write.splitter_aw_si/m_ready_d [1]),
        .I2(ss_wr_awready_1),
        .I3(\gen_slave_slots[1].gen_si_write.splitter_aw_si/m_ready_d [0]),
        .I4(ss_aa_awready[1]),
        .I5(\gen_slave_slots[1].gen_si_write.si_transactor_aw/gen_single_thread.active_target_enc [0]),
        .O(\gen_single_thread.active_target_enc[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hABABABFFA8A8A800)) 
    \gen_single_thread.active_target_enc[0]_i_1__0 
       (.I0(st_aa_awtarget_enc_0),
        .I1(\gen_slave_slots[0].gen_si_write.splitter_aw_si/m_ready_d [1]),
        .I2(ss_wr_awready_0),
        .I3(\gen_slave_slots[0].gen_si_write.splitter_aw_si/m_ready_d [0]),
        .I4(ss_aa_awready[0]),
        .I5(\gen_slave_slots[0].gen_si_write.si_transactor_aw/gen_single_thread.active_target_enc [0]),
        .O(\gen_single_thread.active_target_enc[0]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_single_thread.active_target_enc[0]_i_1__1 
       (.I0(\gen_samd.crossbar_samd_n_215 ),
        .I1(\gen_arbiter.last_rr_hot_reg[0] ),
        .I2(\gen_slave_slots[1].gen_si_read.si_transactor_ar/gen_single_thread.active_target_enc [0]),
        .O(\gen_single_thread.active_target_enc[0]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_single_thread.active_target_enc[0]_i_1__2 
       (.I0(\gen_samd.crossbar_samd_n_216 ),
        .I1(\gen_arbiter.last_rr_hot_reg[1] ),
        .I2(\gen_slave_slots[0].gen_si_read.si_transactor_ar/gen_single_thread.active_target_enc [0]),
        .O(\gen_single_thread.active_target_enc[0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h575757FF54545400)) 
    \gen_single_thread.active_target_enc[1]_i_1 
       (.I0(\gen_slave_slots[1].gen_si_write.si_transactor_aw/match ),
        .I1(\gen_slave_slots[1].gen_si_write.splitter_aw_si/m_ready_d [1]),
        .I2(ss_wr_awready_1),
        .I3(\gen_slave_slots[1].gen_si_write.splitter_aw_si/m_ready_d [0]),
        .I4(ss_aa_awready[1]),
        .I5(\gen_slave_slots[1].gen_si_write.si_transactor_aw/gen_single_thread.active_target_enc [1]),
        .O(\gen_single_thread.active_target_enc[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h575757FF54545400)) 
    \gen_single_thread.active_target_enc[1]_i_1__0 
       (.I0(\gen_slave_slots[0].gen_si_write.si_transactor_aw/match ),
        .I1(\gen_slave_slots[0].gen_si_write.splitter_aw_si/m_ready_d [1]),
        .I2(ss_wr_awready_0),
        .I3(\gen_slave_slots[0].gen_si_write.splitter_aw_si/m_ready_d [0]),
        .I4(ss_aa_awready[0]),
        .I5(\gen_slave_slots[0].gen_si_write.si_transactor_aw/gen_single_thread.active_target_enc [1]),
        .O(\gen_single_thread.active_target_enc[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \gen_single_thread.active_target_enc[1]_i_1__1 
       (.I0(\gen_slave_slots[1].gen_si_read.si_transactor_ar/match ),
        .I1(\gen_arbiter.last_rr_hot_reg[0] ),
        .I2(\gen_slave_slots[1].gen_si_read.si_transactor_ar/gen_single_thread.active_target_enc [1]),
        .O(\gen_single_thread.active_target_enc[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \gen_single_thread.active_target_enc[1]_i_1__2 
       (.I0(\gen_slave_slots[0].gen_si_read.si_transactor_ar/match ),
        .I1(\gen_arbiter.last_rr_hot_reg[1] ),
        .I2(\gen_slave_slots[0].gen_si_read.si_transactor_ar/gen_single_thread.active_target_enc [1]),
        .O(\gen_single_thread.active_target_enc[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hABABABFFA8A8A800)) 
    \gen_single_thread.active_target_hot[0]_i_1 
       (.I0(st_aa_awtarget_hot[3]),
        .I1(\gen_slave_slots[1].gen_si_write.splitter_aw_si/m_ready_d [1]),
        .I2(ss_wr_awready_1),
        .I3(\gen_slave_slots[1].gen_si_write.splitter_aw_si/m_ready_d [0]),
        .I4(ss_aa_awready[1]),
        .I5(\gen_slave_slots[1].gen_si_write.si_transactor_aw/gen_single_thread.active_target_hot ),
        .O(\gen_single_thread.active_target_hot[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hABABABFFA8A8A800)) 
    \gen_single_thread.active_target_hot[0]_i_1__0 
       (.I0(st_aa_awtarget_hot[0]),
        .I1(\gen_slave_slots[0].gen_si_write.splitter_aw_si/m_ready_d [1]),
        .I2(ss_wr_awready_0),
        .I3(\gen_slave_slots[0].gen_si_write.splitter_aw_si/m_ready_d [0]),
        .I4(ss_aa_awready[0]),
        .I5(\gen_slave_slots[0].gen_si_write.si_transactor_aw/gen_single_thread.active_target_hot ),
        .O(\gen_single_thread.active_target_hot[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_single_thread.active_target_hot[0]_i_1__1 
       (.I0(st_aa_artarget_hot[3]),
        .I1(\gen_arbiter.last_rr_hot_reg[0] ),
        .I2(\gen_slave_slots[1].gen_si_read.si_transactor_ar/gen_single_thread.active_target_hot ),
        .O(\gen_single_thread.active_target_hot[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_single_thread.active_target_hot[0]_i_1__2 
       (.I0(st_aa_artarget_hot[0]),
        .I1(\gen_arbiter.last_rr_hot_reg[1] ),
        .I2(\gen_slave_slots[0].gen_si_read.si_transactor_ar/gen_single_thread.active_target_hot ),
        .O(\gen_single_thread.active_target_hot[0]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[2]_i_1__1 
       (.I0(st_mr_bid),
        .I1(st_mr_bvalid),
        .I2(p_24_in),
        .O(\m_payload_i[2]_i_1__1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    m_valid_i_i_1__5
       (.I0(\gen_samd.crossbar_samd_n_47 ),
        .O(m_valid_i_i_1__5_n_0));
  LUT6 #(
    .INIT(64'hFFFFABFFFFFFAAAA)) 
    s_ready_i_i_1__0__0
       (.I0(\gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/areset_d1 ),
        .I1(\gen_samd.crossbar_samd_n_181 ),
        .I2(\gen_samd.crossbar_samd_n_189 ),
        .I3(\gen_samd.crossbar_samd_n_363 ),
        .I4(\gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/storage_data11 ),
        .I5(ss_wr_awready_1),
        .O(s_ready_i_i_1__0__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT1 #(
    .INIT(2'h1)) 
    s_ready_i_i_1__1__0
       (.I0(\gen_master_slots[1].reg_slice_mi/p_0_in ),
        .O(\gen_master_slots[1].reg_slice_mi/p_1_in ));
  LUT6 #(
    .INIT(64'hFFFFABFFFFFFAAAA)) 
    s_ready_i_i_1__4
       (.I0(\gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/areset_d1 ),
        .I1(\gen_samd.crossbar_samd_n_179 ),
        .I2(\gen_samd.crossbar_samd_n_188 ),
        .I3(\gen_samd.crossbar_samd_n_362 ),
        .I4(\gen_slave_slots[0].gen_si_write.wdata_router_w/wrouter_aw_fifo/storage_data11 ),
        .I5(ss_wr_awready_0),
        .O(s_ready_i_i_1__4_n_0));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \storage_data1[0]_i_1 
       (.I0(\gen_master_slots[0].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/storage_data2 ),
        .I1(\gen_samd.crossbar_samd_n_54 ),
        .I2(aa_wm_awgrant_enc),
        .I3(\gen_master_slots[0].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/load_s1 ),
        .I4(\gen_master_slots[0].gen_mi_write.wdata_mux_w/m_select_enc ),
        .O(\storage_data1[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \storage_data1[0]_i_1__0 
       (.I0(\gen_master_slots[1].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/storage_data2 ),
        .I1(\gen_samd.crossbar_samd_n_55 ),
        .I2(aa_wm_awgrant_enc),
        .I3(\gen_master_slots[1].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/load_s1 ),
        .I4(\gen_master_slots[1].gen_mi_write.wdata_mux_w/m_select_enc ),
        .O(\storage_data1[0]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \storage_data1[0]_i_1__1 
       (.I0(\gen_master_slots[2].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/storage_data2 ),
        .I1(\gen_samd.crossbar_samd_n_183 ),
        .I2(aa_wm_awgrant_enc),
        .I3(\gen_master_slots[2].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/load_s1 ),
        .I4(\gen_master_slots[2].gen_mi_write.wdata_mux_w/m_select_enc ),
        .O(\storage_data1[0]_i_1__1_n_0 ));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_crossbar" *) 
module bd_1_axi_crossbar_v2_1_16_crossbar
   (aa_wm_awgrant_enc,
    st_aa_awtarget_enc_0,
    st_aa_awtarget_enc_2,
    storage_data2,
    s_ready_i_reg,
    m_axi_bready,
    \skid_buffer_reg[0] ,
    storage_data2_0,
    \skid_buffer_reg[0]_0 ,
    storage_data2_1,
    mi_bready_2,
    mi_rready_2,
    areset_d1,
    mi_awready_2,
    p_14_in,
    p_24_in,
    p_21_in,
    p_15_in,
    mi_arready_2,
    p_20_in,
    p_17_in,
    \gen_arbiter.any_grant_reg ,
    aa_sa_awvalid,
    \gen_arbiter.any_grant_reg_0 ,
    aa_mi_arvalid,
    \gen_single_thread.active_target_hot ,
    \gen_single_thread.active_target_enc ,
    \gen_single_thread.active_target_hot_2 ,
    \gen_single_thread.active_target_enc_3 ,
    ss_wr_awready_0,
    \gen_single_thread.active_target_hot_4 ,
    \gen_single_thread.active_target_enc_5 ,
    \gen_single_thread.active_target_hot_6 ,
    \gen_single_thread.active_target_enc_7 ,
    ss_wr_awready_1,
    m_select_enc,
    m_select_enc_8,
    m_select_enc_9,
    \m_payload_i_reg[2] ,
    \gen_master_slots[2].w_issuing_cnt_reg[16]_0 ,
    \gen_master_slots[2].r_issuing_cnt_reg[16]_0 ,
    p_0_in,
    s_ready_i_reg_0,
    \gen_axi.write_cs01_out ,
    \gen_axi.write_cs_reg[1] ,
    \gen_axi.write_cs ,
    \m_ready_d_reg[1] ,
    Q,
    out0,
    m_valid_i_reg,
    ss_aa_awready,
    \S_AXI_AQOS_Q_reg[3] ,
    \gen_arbiter.last_rr_hot_reg[0] ,
    \gen_arbiter.last_rr_hot_reg[1] ,
    \S_AXI_AQOS_Q_reg[3]_0 ,
    \gen_axi.read_cnt_reg[0] ,
    s_axi_awready,
    m_valid_i_reg_0,
    storage_data11,
    m_valid_i_reg_1,
    storage_data11_10,
    m_valid_i_reg_2,
    m_ready_d,
    m_ready_d_11,
    m_valid_i_reg_3,
    m_valid_i_reg_4,
    \gen_axi.read_cnt_reg[3] ,
    \gen_axi.s_axi_rlast_i__0 ,
    \gen_axi.s_axi_rid_i ,
    m_axi_awvalid,
    aa_sa_awready,
    \gen_axi.s_axi_rlast_i0 ,
    \gen_axi.s_axi_rlast_i_reg ,
    \gen_axi.s_axi_rlast_i_reg_0 ,
    st_aa_awtarget_hot,
    match,
    match_12,
    s_axi_bvalid,
    s_axi_bresp,
    w_cmd_pop_2__0,
    aa_mi_arready__1,
    st_aa_artarget_hot,
    match_13,
    match_14,
    \gen_arbiter.m_target_hot_i_reg[1] ,
    \gen_arbiter.m_target_hot_i_reg[1]_0 ,
    s_axi_rresp,
    s_axi_rdata,
    s_axi_rlast,
    s_axi_rvalid,
    r_cmd_pop_2__1,
    s_axi_wready,
    load_s1,
    m_axi_wvalid,
    wm_mr_wvalid_2,
    load_s1_15,
    load_s1_16,
    s_ready_i_reg_1,
    s_ready_i_reg_2,
    m_axi_wlast,
    wm_mr_wlast_2,
    m_axi_wstrb,
    m_axi_wdata,
    m_axi_arvalid,
    aclk,
    \aresetn_d_reg[1] ,
    p_1_in,
    aresetn,
    s_ready_i_reg_3,
    \gen_axi.write_cs_reg[0] ,
    \gen_arbiter.m_mesg_i_reg[0] ,
    s_ready_i_reg_4,
    s_ready_i_reg_5,
    \gen_arbiter.m_mesg_i_reg[0]_0 ,
    \gen_axi.read_cnt_reg[1] ,
    \gen_arbiter.any_grant_reg_1 ,
    \gen_arbiter.any_grant_reg_2 ,
    \gen_arbiter.s_ready_i_reg[0] ,
    \gen_arbiter.s_ready_i_reg[0]_0 ,
    \gen_arbiter.s_ready_i_reg[0]_1 ,
    \m_ready_d_reg[1]_0 ,
    \m_ready_d_reg[1]_1 ,
    \m_ready_d_reg[1]_2 ,
    areset_d1_reg,
    \gen_arbiter.s_ready_i_reg[1] ,
    \gen_arbiter.s_ready_i_reg[1]_0 ,
    \gen_arbiter.s_ready_i_reg[1]_1 ,
    \m_ready_d_reg[1]_3 ,
    \m_ready_d_reg[1]_4 ,
    \m_ready_d_reg[1]_5 ,
    areset_d1_reg_0,
    \FSM_onehot_state_reg[3] ,
    \FSM_onehot_state_reg[3]_0 ,
    \FSM_onehot_state_reg[3]_1 ,
    \m_payload_i_reg[2]_0 ,
    \m_ready_d_reg[1]_6 ,
    \gen_arbiter.m_target_hot_i_reg[2] ,
    \aresetn_d_reg[0] ,
    m_axi_bvalid,
    m_axi_rvalid,
    m_axi_bid,
    m_axi_bresp,
    m_axi_rid,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    m_axi_awready,
    m_axi_arready,
    s_axi_awvalid,
    s_axi_wvalid,
    s_axi_wlast,
    s_axi_awaddr,
    s_axi_bready,
    s_axi_arvalid,
    s_axi_araddr,
    s_axi_rready,
    m_axi_wready,
    s_axi_awqos,
    s_axi_awcache,
    s_axi_awburst,
    s_axi_awprot,
    s_axi_awlock,
    s_axi_awsize,
    s_axi_awlen,
    s_axi_arqos,
    s_axi_arcache,
    s_axi_arburst,
    s_axi_arprot,
    s_axi_arlock,
    s_axi_arsize,
    s_axi_arlen,
    s_axi_wstrb,
    s_axi_wdata);
  output aa_wm_awgrant_enc;
  output [0:0]st_aa_awtarget_enc_0;
  output [0:0]st_aa_awtarget_enc_2;
  output storage_data2;
  output [0:0]s_ready_i_reg;
  output [1:0]m_axi_bready;
  output \skid_buffer_reg[0] ;
  output storage_data2_0;
  output \skid_buffer_reg[0]_0 ;
  output storage_data2_1;
  output mi_bready_2;
  output mi_rready_2;
  output areset_d1;
  output mi_awready_2;
  output p_14_in;
  output p_24_in;
  output p_21_in;
  output p_15_in;
  output mi_arready_2;
  output p_20_in;
  output p_17_in;
  output \gen_arbiter.any_grant_reg ;
  output aa_sa_awvalid;
  output \gen_arbiter.any_grant_reg_0 ;
  output aa_mi_arvalid;
  output [0:0]\gen_single_thread.active_target_hot ;
  output [1:0]\gen_single_thread.active_target_enc ;
  output [0:0]\gen_single_thread.active_target_hot_2 ;
  output [1:0]\gen_single_thread.active_target_enc_3 ;
  output ss_wr_awready_0;
  output [0:0]\gen_single_thread.active_target_hot_4 ;
  output [1:0]\gen_single_thread.active_target_enc_5 ;
  output [0:0]\gen_single_thread.active_target_hot_6 ;
  output [1:0]\gen_single_thread.active_target_enc_7 ;
  output ss_wr_awready_1;
  output m_select_enc;
  output m_select_enc_8;
  output m_select_enc_9;
  output [0:0]\m_payload_i_reg[2] ;
  output [0:0]\gen_master_slots[2].w_issuing_cnt_reg[16]_0 ;
  output [0:0]\gen_master_slots[2].r_issuing_cnt_reg[16]_0 ;
  output [0:0]p_0_in;
  output s_ready_i_reg_0;
  output \gen_axi.write_cs01_out ;
  output \gen_axi.write_cs_reg[1] ;
  output [1:0]\gen_axi.write_cs ;
  output [0:0]\m_ready_d_reg[1] ;
  output [0:0]Q;
  output [0:0]out0;
  output [0:0]m_valid_i_reg;
  output [1:0]ss_aa_awready;
  output [57:0]\S_AXI_AQOS_Q_reg[3] ;
  output \gen_arbiter.last_rr_hot_reg[0] ;
  output \gen_arbiter.last_rr_hot_reg[1] ;
  output [57:0]\S_AXI_AQOS_Q_reg[3]_0 ;
  output [0:0]\gen_axi.read_cnt_reg[0] ;
  output [1:0]s_axi_awready;
  output m_valid_i_reg_0;
  output storage_data11;
  output m_valid_i_reg_1;
  output storage_data11_10;
  output [0:0]m_valid_i_reg_2;
  output [1:0]m_ready_d;
  output [1:0]m_ready_d_11;
  output m_valid_i_reg_3;
  output m_valid_i_reg_4;
  output [0:0]\gen_axi.read_cnt_reg[3] ;
  output \gen_axi.s_axi_rlast_i__0 ;
  output \gen_axi.s_axi_rid_i ;
  output [1:0]m_axi_awvalid;
  output aa_sa_awready;
  output \gen_axi.s_axi_rlast_i0 ;
  output \gen_axi.s_axi_rlast_i_reg ;
  output \gen_axi.s_axi_rlast_i_reg_0 ;
  output [1:0]st_aa_awtarget_hot;
  output match;
  output match_12;
  output [1:0]s_axi_bvalid;
  output [3:0]s_axi_bresp;
  output w_cmd_pop_2__0;
  output aa_mi_arready__1;
  output [1:0]st_aa_artarget_hot;
  output match_13;
  output match_14;
  output \gen_arbiter.m_target_hot_i_reg[1] ;
  output \gen_arbiter.m_target_hot_i_reg[1]_0 ;
  output [3:0]s_axi_rresp;
  output [127:0]s_axi_rdata;
  output [1:0]s_axi_rlast;
  output [1:0]s_axi_rvalid;
  output r_cmd_pop_2__1;
  output [1:0]s_axi_wready;
  output load_s1;
  output [1:0]m_axi_wvalid;
  output wm_mr_wvalid_2;
  output load_s1_15;
  output load_s1_16;
  output s_ready_i_reg_1;
  output s_ready_i_reg_2;
  output [1:0]m_axi_wlast;
  output wm_mr_wlast_2;
  output [15:0]m_axi_wstrb;
  output [127:0]m_axi_wdata;
  output [1:0]m_axi_arvalid;
  input aclk;
  input \aresetn_d_reg[1] ;
  input p_1_in;
  input aresetn;
  input s_ready_i_reg_3;
  input \gen_axi.write_cs_reg[0] ;
  input \gen_arbiter.m_mesg_i_reg[0] ;
  input s_ready_i_reg_4;
  input s_ready_i_reg_5;
  input \gen_arbiter.m_mesg_i_reg[0]_0 ;
  input \gen_axi.read_cnt_reg[1] ;
  input \gen_arbiter.any_grant_reg_1 ;
  input \gen_arbiter.any_grant_reg_2 ;
  input \gen_arbiter.s_ready_i_reg[0] ;
  input \gen_arbiter.s_ready_i_reg[0]_0 ;
  input \gen_arbiter.s_ready_i_reg[0]_1 ;
  input \m_ready_d_reg[1]_0 ;
  input \m_ready_d_reg[1]_1 ;
  input \m_ready_d_reg[1]_2 ;
  input areset_d1_reg;
  input \gen_arbiter.s_ready_i_reg[1] ;
  input \gen_arbiter.s_ready_i_reg[1]_0 ;
  input \gen_arbiter.s_ready_i_reg[1]_1 ;
  input \m_ready_d_reg[1]_3 ;
  input \m_ready_d_reg[1]_4 ;
  input \m_ready_d_reg[1]_5 ;
  input areset_d1_reg_0;
  input \FSM_onehot_state_reg[3] ;
  input \FSM_onehot_state_reg[3]_0 ;
  input \FSM_onehot_state_reg[3]_1 ;
  input \m_payload_i_reg[2]_0 ;
  input \m_ready_d_reg[1]_6 ;
  input \gen_arbiter.m_target_hot_i_reg[2] ;
  input \aresetn_d_reg[0] ;
  input [1:0]m_axi_bvalid;
  input [1:0]m_axi_rvalid;
  input [1:0]m_axi_bid;
  input [3:0]m_axi_bresp;
  input [1:0]m_axi_rid;
  input [1:0]m_axi_rlast;
  input [3:0]m_axi_rresp;
  input [127:0]m_axi_rdata;
  input [1:0]m_axi_awready;
  input [1:0]m_axi_arready;
  input [1:0]s_axi_awvalid;
  input [1:0]s_axi_wvalid;
  input [1:0]s_axi_wlast;
  input [63:0]s_axi_awaddr;
  input [1:0]s_axi_bready;
  input [1:0]s_axi_arvalid;
  input [63:0]s_axi_araddr;
  input [1:0]s_axi_rready;
  input [1:0]m_axi_wready;
  input [7:0]s_axi_awqos;
  input [7:0]s_axi_awcache;
  input [3:0]s_axi_awburst;
  input [5:0]s_axi_awprot;
  input [1:0]s_axi_awlock;
  input [5:0]s_axi_awsize;
  input [15:0]s_axi_awlen;
  input [7:0]s_axi_arqos;
  input [7:0]s_axi_arcache;
  input [3:0]s_axi_arburst;
  input [5:0]s_axi_arprot;
  input [1:0]s_axi_arlock;
  input [5:0]s_axi_arsize;
  input [15:0]s_axi_arlen;
  input [15:0]s_axi_wstrb;
  input [127:0]s_axi_wdata;

  wire \<const0> ;
  wire \<const1> ;
  wire \FSM_onehot_state_reg[3] ;
  wire \FSM_onehot_state_reg[3]_0 ;
  wire \FSM_onehot_state_reg[3]_1 ;
  wire [0:0]Q;
  wire [57:0]\S_AXI_AQOS_Q_reg[3] ;
  wire [57:0]\S_AXI_AQOS_Q_reg[3]_0 ;
  wire aa_mi_arready__1;
  wire aa_mi_arvalid;
  wire [1:0]aa_mi_awtarget_hot;
  wire aa_sa_awready;
  wire aa_sa_awvalid;
  wire aa_wm_awgrant_enc;
  wire aclk;
  wire addr_arbiter_ar_n_1;
  wire addr_arbiter_ar_n_4;
  wire addr_arbiter_ar_n_5;
  wire addr_arbiter_ar_n_6;
  wire addr_arbiter_ar_n_7;
  wire addr_arbiter_ar_n_8;
  wire addr_arbiter_ar_n_82;
  wire addr_arbiter_ar_n_86;
  wire addr_arbiter_aw_n_1;
  wire addr_arbiter_aw_n_10;
  wire addr_arbiter_aw_n_11;
  wire addr_arbiter_aw_n_15;
  wire addr_arbiter_aw_n_28;
  wire addr_arbiter_aw_n_32;
  wire addr_arbiter_aw_n_4;
  wire addr_arbiter_aw_n_5;
  wire addr_arbiter_aw_n_9;
  wire areset_d1;
  wire areset_d1_reg;
  wire areset_d1_reg_0;
  wire aresetn;
  wire aresetn_d;
  wire \aresetn_d_reg[0] ;
  wire \aresetn_d_reg[1] ;
  wire [5:3]bready_carry;
  wire \gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3 ;
  wire \gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_2 ;
  wire \gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_5 ;
  wire \gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_8 ;
  wire \gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4 ;
  wire \gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_1 ;
  wire \gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_4 ;
  wire \gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_7 ;
  wire \gen_arbiter.any_grant_reg ;
  wire \gen_arbiter.any_grant_reg_0 ;
  wire \gen_arbiter.any_grant_reg_1 ;
  wire \gen_arbiter.any_grant_reg_2 ;
  wire \gen_arbiter.last_rr_hot_reg[0] ;
  wire \gen_arbiter.last_rr_hot_reg[1] ;
  wire \gen_arbiter.m_mesg_i_reg[0] ;
  wire \gen_arbiter.m_mesg_i_reg[0]_0 ;
  wire \gen_arbiter.m_target_hot_i_reg[1] ;
  wire \gen_arbiter.m_target_hot_i_reg[1]_0 ;
  wire \gen_arbiter.m_target_hot_i_reg[2] ;
  wire \gen_arbiter.s_ready_i_reg[0] ;
  wire \gen_arbiter.s_ready_i_reg[0]_0 ;
  wire \gen_arbiter.s_ready_i_reg[0]_1 ;
  wire \gen_arbiter.s_ready_i_reg[1] ;
  wire \gen_arbiter.s_ready_i_reg[1]_0 ;
  wire \gen_arbiter.s_ready_i_reg[1]_1 ;
  wire [0:0]\gen_axi.read_cnt_reg[0] ;
  wire \gen_axi.read_cnt_reg[1] ;
  wire [0:0]\gen_axi.read_cnt_reg[3] ;
  wire \gen_axi.s_axi_rid_i ;
  wire \gen_axi.s_axi_rlast_i0 ;
  wire \gen_axi.s_axi_rlast_i__0 ;
  wire \gen_axi.s_axi_rlast_i_reg ;
  wire \gen_axi.s_axi_rlast_i_reg_0 ;
  wire [1:0]\gen_axi.write_cs ;
  wire \gen_axi.write_cs01_out ;
  wire \gen_axi.write_cs_reg[0] ;
  wire \gen_axi.write_cs_reg[1] ;
  wire \gen_decerr_slave.decerr_slave_inst_n_15 ;
  wire \gen_master_slots[0].reg_slice_mi_n_12 ;
  wire \gen_master_slots[0].reg_slice_mi_n_13 ;
  wire \gen_master_slots[0].reg_slice_mi_n_4 ;
  wire \gen_master_slots[0].reg_slice_mi_n_6 ;
  wire \gen_master_slots[0].reg_slice_mi_n_7 ;
  wire \gen_master_slots[1].reg_slice_mi_n_5 ;
  wire [0:0]\gen_master_slots[2].r_issuing_cnt_reg[16]_0 ;
  wire \gen_master_slots[2].reg_slice_mi_n_10 ;
  wire \gen_master_slots[2].reg_slice_mi_n_12 ;
  wire \gen_master_slots[2].reg_slice_mi_n_16 ;
  wire \gen_master_slots[2].reg_slice_mi_n_6 ;
  wire \gen_master_slots[2].reg_slice_mi_n_8 ;
  wire [0:0]\gen_master_slots[2].w_issuing_cnt_reg[16]_0 ;
  wire [1:0]\gen_single_thread.active_target_enc ;
  wire [1:0]\gen_single_thread.active_target_enc_3 ;
  wire [1:0]\gen_single_thread.active_target_enc_5 ;
  wire [1:0]\gen_single_thread.active_target_enc_7 ;
  wire [0:0]\gen_single_thread.active_target_hot ;
  wire [0:0]\gen_single_thread.active_target_hot_2 ;
  wire [0:0]\gen_single_thread.active_target_hot_4 ;
  wire [0:0]\gen_single_thread.active_target_hot_6 ;
  wire \gen_slave_slots[0].gen_si_write.splitter_aw_si_n_3 ;
  wire \gen_slave_slots[0].gen_si_write.splitter_aw_si_n_4 ;
  wire \gen_slave_slots[0].gen_si_write.wdata_router_w_n_7 ;
  wire \gen_slave_slots[0].gen_si_write.wdata_router_w_n_8 ;
  wire \gen_slave_slots[0].gen_si_write.wdata_router_w_n_9 ;
  wire \gen_slave_slots[1].gen_si_write.splitter_aw_si_n_3 ;
  wire \gen_slave_slots[1].gen_si_write.splitter_aw_si_n_4 ;
  wire \gen_wmux.wmux_aw_fifo/p_0_in6_in ;
  wire \gen_wmux.wmux_aw_fifo/p_7_in ;
  wire grant_hot0;
  wire grant_hot0_10;
  wire load_s1;
  wire load_s1_15;
  wire load_s1_16;
  wire m_aready__1;
  wire m_avalid;
  wire m_avalid_11;
  wire m_avalid_12;
  wire [1:0]m_axi_arready;
  wire [1:0]m_axi_arvalid;
  wire [1:0]m_axi_awready;
  wire [1:0]m_axi_awvalid;
  wire [1:0]m_axi_bid;
  wire [1:0]m_axi_bready;
  wire [3:0]m_axi_bresp;
  wire [1:0]m_axi_bvalid;
  wire [127:0]m_axi_rdata;
  wire [1:0]m_axi_rid;
  wire [1:0]m_axi_rlast;
  wire [3:0]m_axi_rresp;
  wire [1:0]m_axi_rvalid;
  wire [127:0]m_axi_wdata;
  wire [1:0]m_axi_wlast;
  wire [1:0]m_axi_wready;
  wire [15:0]m_axi_wstrb;
  wire [1:0]m_axi_wvalid;
  wire [0:0]\m_payload_i_reg[2] ;
  wire \m_payload_i_reg[2]_0 ;
  wire [1:0]m_ready_d;
  wire [1:0]m_ready_d_11;
  wire [0:0]m_ready_d_15;
  wire [0:0]\m_ready_d_reg[1] ;
  wire \m_ready_d_reg[1]_0 ;
  wire \m_ready_d_reg[1]_1 ;
  wire \m_ready_d_reg[1]_2 ;
  wire \m_ready_d_reg[1]_3 ;
  wire \m_ready_d_reg[1]_4 ;
  wire \m_ready_d_reg[1]_5 ;
  wire \m_ready_d_reg[1]_6 ;
  wire m_select_enc;
  wire m_select_enc_8;
  wire m_select_enc_9;
  wire [0:0]m_valid_i_reg;
  wire m_valid_i_reg_0;
  wire m_valid_i_reg_1;
  wire [0:0]m_valid_i_reg_2;
  wire m_valid_i_reg_3;
  wire m_valid_i_reg_4;
  wire match;
  wire match_12;
  wire match_13;
  wire match_14;
  wire mi_arready_2;
  wire mi_awready_2;
  wire mi_awready_mux__1;
  wire mi_bready_2;
  wire mi_rready_2;
  wire [0:0]out0;
  wire [0:0]p_0_in;
  wire p_14_in;
  wire p_15_in;
  wire p_17_in;
  wire p_1_in;
  wire p_20_in;
  wire p_21_in;
  wire p_24_in;
  wire p_2_in;
  wire r_cmd_pop_0__1;
  wire r_cmd_pop_1__1;
  wire r_cmd_pop_2__1;
  wire [9:0]r_issuing_cnt;
  wire reset;
  wire [5:3]rready_carry;
  wire [63:0]s_axi_araddr;
  wire [3:0]s_axi_arburst;
  wire [7:0]s_axi_arcache;
  wire [15:0]s_axi_arlen;
  wire [1:0]s_axi_arlock;
  wire [5:0]s_axi_arprot;
  wire [7:0]s_axi_arqos;
  wire [5:0]s_axi_arsize;
  wire [1:0]s_axi_arvalid;
  wire [63:0]s_axi_awaddr;
  wire [3:0]s_axi_awburst;
  wire [7:0]s_axi_awcache;
  wire [15:0]s_axi_awlen;
  wire [1:0]s_axi_awlock;
  wire [5:0]s_axi_awprot;
  wire [7:0]s_axi_awqos;
  wire [1:0]s_axi_awready;
  wire [5:0]s_axi_awsize;
  wire [1:0]s_axi_awvalid;
  wire [1:0]s_axi_bready;
  wire [3:0]s_axi_bresp;
  wire [1:0]s_axi_bvalid;
  wire [127:0]s_axi_rdata;
  wire [1:0]s_axi_rlast;
  wire [1:0]s_axi_rready;
  wire [3:0]s_axi_rresp;
  wire [1:0]s_axi_rvalid;
  wire [127:0]s_axi_wdata;
  wire [1:0]s_axi_wlast;
  wire [1:0]s_axi_wready;
  wire [15:0]s_axi_wstrb;
  wire [1:0]s_axi_wvalid;
  wire [0:0]s_ready_i0__1;
  wire [0:0]s_ready_i_reg;
  wire s_ready_i_reg_0;
  wire s_ready_i_reg_1;
  wire s_ready_i_reg_2;
  wire s_ready_i_reg_3;
  wire s_ready_i_reg_4;
  wire s_ready_i_reg_5;
  wire [2:0]sa_wm_awvalid;
  wire \skid_buffer_reg[0] ;
  wire \skid_buffer_reg[0]_0 ;
  wire splitter_aw_mi_n_0;
  wire [1:0]ss_aa_awready;
  wire ss_wr_awready_0;
  wire ss_wr_awready_1;
  wire ss_wr_awvalid_0;
  wire ss_wr_awvalid_1;
  wire [1:0]st_aa_artarget_hot;
  wire [1:0]st_aa_arvalid_qual;
  wire [0:0]st_aa_awtarget_enc_0;
  wire [0:0]st_aa_awtarget_enc_2;
  wire [1:0]st_aa_awtarget_hot;
  wire [1:0]st_aa_awvalid_qual;
  wire [1:0]st_mr_bid;
  wire [4:0]st_mr_bmesg;
  wire [1:0]st_mr_bvalid;
  wire [2:0]st_mr_rid;
  wire [2:0]st_mr_rlast;
  wire [133:0]st_mr_rmesg;
  wire [2:0]st_mr_rvalid;
  wire storage_data11;
  wire storage_data11_10;
  wire storage_data2;
  wire storage_data2_0;
  wire storage_data2_1;
  wire target_mi_enc;
  wire target_mi_enc_0;
  wire target_mi_enc_3;
  wire target_mi_enc_6;
  wire [2:0]valid_qual_i3__2;
  wire [2:0]valid_qual_i3__2_9;
  wire w_cmd_pop_0__0;
  wire w_cmd_pop_1__0;
  wire w_cmd_pop_2__0;
  wire [9:0]w_issuing_cnt;
  wire wm_mr_wlast_2;
  wire wm_mr_wvalid_2;
  wire \wrouter_aw_fifo/p_0_in8_in ;
  wire \wrouter_aw_fifo/p_0_in8_in_13 ;
  wire \wrouter_aw_fifo/p_9_in ;
  wire \wrouter_aw_fifo/p_9_in_14 ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_1_axi_crossbar_v2_1_16_addr_arbiter addr_arbiter_ar
       (.D({\gen_master_slots[0].reg_slice_mi_n_12 ,\gen_master_slots[0].reg_slice_mi_n_13 }),
        .Q(\gen_axi.read_cnt_reg[0] ),
        .SR(reset),
        .\S_AXI_AQOS_Q_reg[3] (\S_AXI_AQOS_Q_reg[3]_0 ),
        .aa_mi_arready__1(aa_mi_arready__1),
        .aclk(aclk),
        .aresetn_d(aresetn_d),
        .\gen_arbiter.any_grant_reg_0 (\gen_arbiter.any_grant_reg_0 ),
        .\gen_arbiter.any_grant_reg_1 (\gen_arbiter.any_grant_reg_2 ),
        .\gen_arbiter.last_rr_hot_reg[0]_0 (addr_arbiter_ar_n_8),
        .\gen_arbiter.last_rr_hot_reg[0]_1 (\gen_arbiter.last_rr_hot_reg[0] ),
        .\gen_arbiter.last_rr_hot_reg[1]_0 (addr_arbiter_ar_n_1),
        .\gen_arbiter.last_rr_hot_reg[1]_1 (\gen_arbiter.last_rr_hot_reg[1] ),
        .\gen_arbiter.m_mesg_i_reg[0]_0 (aa_mi_arvalid),
        .\gen_arbiter.m_target_hot_i_reg[0]_0 (st_aa_artarget_hot[1]),
        .\gen_arbiter.m_target_hot_i_reg[0]_1 (st_aa_artarget_hot[0]),
        .\gen_arbiter.m_target_hot_i_reg[1]_0 (\gen_arbiter.m_target_hot_i_reg[1] ),
        .\gen_arbiter.m_target_hot_i_reg[1]_1 (\gen_arbiter.m_target_hot_i_reg[1]_0 ),
        .\gen_arbiter.m_target_hot_i_reg[2]_0 (match_13),
        .\gen_arbiter.m_target_hot_i_reg[2]_1 (match_14),
        .\gen_arbiter.qual_reg_reg[0]_0 (addr_arbiter_ar_n_86),
        .\gen_arbiter.qual_reg_reg[1]_0 (addr_arbiter_ar_n_82),
        .\gen_axi.read_cnt_reg[4] (\gen_axi.s_axi_rlast_i__0 ),
        .\gen_axi.read_cs_reg[0] (p_15_in),
        .\gen_axi.s_axi_arready_i_reg (mi_arready_2),
        .\gen_axi.s_axi_rid_i (\gen_axi.s_axi_rid_i ),
        .\gen_axi.s_axi_rlast_i0 (\gen_axi.s_axi_rlast_i0 ),
        .\gen_master_slots[0].r_issuing_cnt_reg[0] (addr_arbiter_ar_n_7),
        .\gen_master_slots[0].r_issuing_cnt_reg[1] (addr_arbiter_ar_n_6),
        .\gen_master_slots[1].r_issuing_cnt_reg[8] (addr_arbiter_ar_n_5),
        .\gen_master_slots[1].r_issuing_cnt_reg[9] (addr_arbiter_ar_n_4),
        .grant_hot0(grant_hot0),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .m_valid_i_reg(\gen_master_slots[2].reg_slice_mi_n_10 ),
        .m_valid_i_reg_0(\gen_master_slots[2].reg_slice_mi_n_12 ),
        .r_cmd_pop_0__1(r_cmd_pop_0__1),
        .r_cmd_pop_1__1(r_cmd_pop_1__1),
        .r_issuing_cnt({r_issuing_cnt[9:8],r_issuing_cnt[1:0]}),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arburst(s_axi_arburst),
        .s_axi_arcache(s_axi_arcache),
        .s_axi_arlen(s_axi_arlen),
        .s_axi_arlock(s_axi_arlock),
        .s_axi_arprot(s_axi_arprot),
        .s_axi_arqos(s_axi_arqos),
        .s_axi_arsize(s_axi_arsize),
        .s_axi_arvalid(s_axi_arvalid),
        .sel_3(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_2 ),
        .sel_3_0(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3 ),
        .sel_4(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_1 ),
        .sel_4_1(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4 ),
        .st_aa_arvalid_qual(st_aa_arvalid_qual),
        .target_mi_enc(target_mi_enc_0),
        .target_mi_enc_2(target_mi_enc));
  bd_1_axi_crossbar_v2_1_16_addr_arbiter_41 addr_arbiter_aw
       (.D({addr_arbiter_aw_n_4,addr_arbiter_aw_n_5}),
        .\FSM_onehot_state_reg[0] (aa_sa_awvalid),
        .Q({Q,aa_mi_awtarget_hot}),
        .SR(reset),
        .\S_AXI_AQOS_Q_reg[3] (\S_AXI_AQOS_Q_reg[3] ),
        .aa_sa_awready(aa_sa_awready),
        .aclk(aclk),
        .aresetn_d(aresetn_d),
        .\gen_arbiter.any_grant_reg_0 (\gen_arbiter.any_grant_reg ),
        .\gen_arbiter.any_grant_reg_1 (\gen_arbiter.any_grant_reg_1 ),
        .\gen_arbiter.last_rr_hot_reg[0]_0 (addr_arbiter_aw_n_11),
        .\gen_arbiter.last_rr_hot_reg[1]_0 (addr_arbiter_aw_n_1),
        .\gen_arbiter.m_mesg_i_reg[0]_0 (aa_wm_awgrant_enc),
        .\gen_arbiter.m_target_hot_i_reg[0]_0 (st_aa_awtarget_hot[1]),
        .\gen_arbiter.m_target_hot_i_reg[0]_1 (st_aa_awtarget_hot[0]),
        .\gen_arbiter.m_target_hot_i_reg[2]_0 (match),
        .\gen_arbiter.m_target_hot_i_reg[2]_1 (match_12),
        .\gen_arbiter.qual_reg_reg[0]_0 (addr_arbiter_aw_n_32),
        .\gen_arbiter.qual_reg_reg[1]_0 (addr_arbiter_aw_n_28),
        .\gen_axi.write_cs01_out (\gen_axi.write_cs01_out ),
        .\gen_master_slots[0].w_issuing_cnt_reg[1] (addr_arbiter_aw_n_10),
        .\gen_master_slots[1].w_issuing_cnt_reg[9] (addr_arbiter_aw_n_9),
        .\gen_master_slots[2].w_issuing_cnt_reg[16] (\gen_master_slots[2].reg_slice_mi_n_6 ),
        .\gen_master_slots[2].w_issuing_cnt_reg[16]_0 (\gen_master_slots[2].reg_slice_mi_n_8 ),
        .grant_hot0(grant_hot0_10),
        .m_aready__1(m_aready__1),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .\m_payload_i_reg[18] (st_aa_awtarget_enc_2),
        .\m_payload_i_reg[18]_0 (st_aa_awtarget_enc_0),
        .m_ready_d(m_ready_d_15),
        .\m_ready_d_reg[0] (addr_arbiter_aw_n_15),
        .\m_ready_d_reg[0]_0 (ss_aa_awready[1]),
        .\m_ready_d_reg[0]_1 (ss_aa_awready[0]),
        .\m_ready_d_reg[0]_2 (m_ready_d_11[0]),
        .\m_ready_d_reg[0]_3 (m_ready_d[0]),
        .\m_ready_d_reg[0]_4 ({\gen_master_slots[0].reg_slice_mi_n_6 ,\gen_master_slots[0].reg_slice_mi_n_7 }),
        .\m_ready_d_reg[1] (splitter_aw_mi_n_0),
        .\m_ready_d_reg[1]_0 (\m_ready_d_reg[1] ),
        .mi_awready_2(mi_awready_2),
        .mi_awready_mux__1(mi_awready_mux__1),
        .out0({\gen_wmux.wmux_aw_fifo/p_7_in ,\gen_wmux.wmux_aw_fifo/p_0_in6_in }),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awburst(s_axi_awburst),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awlock(s_axi_awlock),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awsize(s_axi_awsize),
        .s_axi_awvalid(s_axi_awvalid),
        .s_ready_i0__1(s_ready_i0__1),
        .sa_wm_awvalid(sa_wm_awvalid),
        .sel_3(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_8 ),
        .sel_3_0(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_5 ),
        .sel_4(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_7 ),
        .sel_4_1(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_4 ),
        .st_aa_awvalid_qual(st_aa_awvalid_qual),
        .target_mi_enc(target_mi_enc_6),
        .target_mi_enc_2(target_mi_enc_3),
        .w_cmd_pop_0__0(w_cmd_pop_0__0),
        .w_cmd_pop_1__0(w_cmd_pop_1__0),
        .w_issuing_cnt({w_issuing_cnt[9:8],w_issuing_cnt[1:0]}));
  FDRE #(
    .INIT(1'b0)) 
    aresetn_d_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(aresetn),
        .Q(aresetn_d),
        .R(\<const0> ));
  bd_1_axi_crossbar_v2_1_16_decerr_slave \gen_decerr_slave.decerr_slave_inst 
       (.Q(\gen_axi.read_cnt_reg[3] ),
        .SR(reset),
        .aa_mi_arvalid(aa_mi_arvalid),
        .aclk(aclk),
        .aresetn_d(aresetn_d),
        .bready_carry(bready_carry[5]),
        .\gen_arbiter.m_mesg_i_reg[0] (\gen_arbiter.m_mesg_i_reg[0] ),
        .\gen_arbiter.m_mesg_i_reg[0]_0 (\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .\gen_arbiter.m_mesg_i_reg[40] (\S_AXI_AQOS_Q_reg[3]_0 [40:33]),
        .\gen_arbiter.m_target_hot_i_reg[2] (\gen_axi.read_cnt_reg[0] ),
        .\gen_axi.read_cnt_reg[0]_0 (p_15_in),
        .\gen_axi.read_cnt_reg[0]_1 (mi_arready_2),
        .\gen_axi.read_cnt_reg[0]_2 (\gen_axi.s_axi_rlast_i__0 ),
        .\gen_axi.read_cnt_reg[1]_0 (\gen_axi.read_cnt_reg[1] ),
        .\gen_axi.s_axi_rid_i (\gen_axi.s_axi_rid_i ),
        .\gen_axi.s_axi_rlast_i_reg_0 (\gen_axi.s_axi_rlast_i_reg ),
        .\gen_axi.s_axi_rlast_i_reg_1 (\gen_axi.s_axi_rlast_i_reg_0 ),
        .\gen_axi.s_axi_wready_i_reg_0 (p_14_in),
        .\gen_axi.write_cs (\gen_axi.write_cs ),
        .\gen_axi.write_cs01_out (\gen_axi.write_cs01_out ),
        .\gen_axi.write_cs_reg[0]_0 (\gen_axi.write_cs_reg[0] ),
        .\gen_axi.write_cs_reg[1]_0 (\gen_axi.write_cs_reg[1] ),
        .m_aready__1(m_aready__1),
        .m_valid_i_reg(\gen_decerr_slave.decerr_slave_inst_n_15 ),
        .mi_awready_2(mi_awready_2),
        .mi_bready_2(mi_bready_2),
        .p_17_in(p_17_in),
        .p_20_in(p_20_in),
        .p_21_in(p_21_in),
        .p_24_in(p_24_in),
        .s_axi_wlast(s_axi_wlast),
        .s_ready_i_reg(s_ready_i_reg_3),
        .s_ready_i_reg_0(s_ready_i_reg_4),
        .s_ready_i_reg_1(s_ready_i_reg_5),
        .s_ready_i_reg_2(mi_rready_2),
        .\storage_data1_reg[0] (m_select_enc_9),
        .wm_mr_wvalid_2(wm_mr_wvalid_2));
  bd_1_axi_crossbar_v2_1_16_wdata_mux \gen_master_slots[0].gen_mi_write.wdata_mux_w 
       (.\FSM_onehot_state_reg[3] (\FSM_onehot_state_reg[3] ),
        .Q(aa_mi_awtarget_hot[0]),
        .SR(reset),
        .SS(areset_d1),
        .aclk(aclk),
        .\gen_arbiter.m_grant_enc_i_reg[0] (aa_wm_awgrant_enc),
        .\gen_arbiter.m_valid_i_reg (aa_sa_awvalid),
        .load_s1(load_s1),
        .m_avalid(m_avalid),
        .m_axi_wdata(m_axi_wdata[63:0]),
        .m_axi_wlast(m_axi_wlast[0]),
        .m_axi_wready(m_axi_wready[0]),
        .m_axi_wstrb(m_axi_wstrb[7:0]),
        .m_axi_wvalid(m_axi_wvalid[0]),
        .m_ready_d(m_ready_d_15),
        .out0(out0),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .sa_wm_awvalid(sa_wm_awvalid[0]),
        .\skid_buffer_reg[72] (m_select_enc),
        .storage_data2(storage_data2));
  FDRE #(
    .INIT(1'b0)) 
    \gen_master_slots[0].r_issuing_cnt_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(addr_arbiter_ar_n_7),
        .Q(r_issuing_cnt[0]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_master_slots[0].r_issuing_cnt_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(addr_arbiter_ar_n_6),
        .Q(r_issuing_cnt[1]),
        .R(reset));
  bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized3 \gen_master_slots[0].reg_slice_mi 
       (.D({\gen_master_slots[0].reg_slice_mi_n_12 ,\gen_master_slots[0].reg_slice_mi_n_13 }),
        .Q(aa_mi_awtarget_hot[0]),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\aresetn_d_reg[1] ),
        .\aresetn_d_reg[1]_0 (s_ready_i_reg_0),
        .bready_carry(bready_carry[3]),
        .\gen_arbiter.last_rr_hot_reg[0] (addr_arbiter_aw_n_11),
        .\gen_arbiter.last_rr_hot_reg[0]_0 (addr_arbiter_ar_n_8),
        .\gen_arbiter.last_rr_hot_reg[1] (addr_arbiter_aw_n_1),
        .\gen_arbiter.last_rr_hot_reg[1]_0 (addr_arbiter_ar_n_1),
        .\gen_arbiter.qual_reg_reg[1] ({\gen_master_slots[0].reg_slice_mi_n_6 ,\gen_master_slots[0].reg_slice_mi_n_7 }),
        .\gen_master_slots[0].w_issuing_cnt_reg[0] (\gen_master_slots[0].reg_slice_mi_n_4 ),
        .\gen_master_slots[2].w_issuing_cnt_reg[16] (valid_qual_i3__2_9[2:1]),
        .\gen_single_thread.active_target_hot_reg[0] (\gen_single_thread.active_target_hot_2 ),
        .\gen_single_thread.active_target_hot_reg[0]_0 (\gen_single_thread.active_target_hot_6 ),
        .\gen_single_thread.active_target_hot_reg[0]_1 (\gen_single_thread.active_target_hot ),
        .\gen_single_thread.active_target_hot_reg[0]_2 (\gen_single_thread.active_target_hot_4 ),
        .grant_hot0(grant_hot0_10),
        .grant_hot0_0(grant_hot0),
        .m_axi_awready(m_axi_awready[0]),
        .m_axi_bid(m_axi_bid[0]),
        .m_axi_bready(m_axi_bready[0]),
        .m_axi_bresp(m_axi_bresp[1:0]),
        .m_axi_bvalid(m_axi_bvalid[0]),
        .m_axi_rdata(m_axi_rdata[63:0]),
        .m_axi_rid(m_axi_rid[0]),
        .m_axi_rlast(m_axi_rlast[0]),
        .m_axi_rresp(m_axi_rresp[1:0]),
        .m_axi_rvalid(m_axi_rvalid[0]),
        .\m_payload_i_reg[0] ({st_mr_rid[0],st_mr_rlast[0],st_mr_rmesg[1:0],st_mr_rmesg[66:3]}),
        .\m_payload_i_reg[18] (st_aa_awtarget_enc_2),
        .\m_payload_i_reg[18]_0 (match),
        .\m_payload_i_reg[18]_1 (st_aa_awtarget_enc_0),
        .\m_payload_i_reg[18]_2 (match_12),
        .\m_payload_i_reg[18]_3 (\gen_arbiter.m_target_hot_i_reg[1] ),
        .\m_payload_i_reg[18]_4 (\gen_arbiter.m_target_hot_i_reg[1]_0 ),
        .\m_ready_d_reg[0] (m_ready_d_11[0]),
        .\m_ready_d_reg[0]_0 (m_ready_d[0]),
        .\m_ready_d_reg[1] (splitter_aw_mi_n_0),
        .m_valid_i_reg(valid_qual_i3__2[2:1]),
        .match_13(match_13),
        .match_14(match_14),
        .p_1_in(p_1_in),
        .r_cmd_pop_0__1(r_cmd_pop_0__1),
        .r_issuing_cnt(r_issuing_cnt[1:0]),
        .rready_carry(rready_carry[3]),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_rready(s_axi_rready),
        .\skid_buffer_reg[0] (\skid_buffer_reg[0] ),
        .st_aa_artarget_hot(st_aa_artarget_hot),
        .st_aa_arvalid_qual(st_aa_arvalid_qual),
        .st_aa_awtarget_hot(st_aa_awtarget_hot),
        .st_aa_awvalid_qual(st_aa_awvalid_qual),
        .st_mr_bid(st_mr_bid[0]),
        .st_mr_bmesg(st_mr_bmesg[1:0]),
        .st_mr_bvalid(st_mr_bvalid[0]),
        .st_mr_rvalid(st_mr_rvalid[0]),
        .valid_qual_i3__2(valid_qual_i3__2_9[0]),
        .valid_qual_i3__2_1(valid_qual_i3__2[0]),
        .w_cmd_pop_0__0(w_cmd_pop_0__0),
        .w_issuing_cnt(w_issuing_cnt[1:0]));
  FDRE #(
    .INIT(1'b0)) 
    \gen_master_slots[0].w_issuing_cnt_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_master_slots[0].reg_slice_mi_n_4 ),
        .Q(w_issuing_cnt[0]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_master_slots[0].w_issuing_cnt_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(addr_arbiter_aw_n_10),
        .Q(w_issuing_cnt[1]),
        .R(reset));
  bd_1_axi_crossbar_v2_1_16_wdata_mux_42 \gen_master_slots[1].gen_mi_write.wdata_mux_w 
       (.\FSM_onehot_state_reg[3] (\FSM_onehot_state_reg[3]_0 ),
        .Q(aa_mi_awtarget_hot[1]),
        .SR(reset),
        .SS(areset_d1),
        .aclk(aclk),
        .\gen_arbiter.m_grant_enc_i_reg[0] (aa_wm_awgrant_enc),
        .\gen_arbiter.m_valid_i_reg (aa_sa_awvalid),
        .load_s1_16(load_s1_16),
        .m_avalid(m_avalid_11),
        .m_axi_wdata(m_axi_wdata[127:64]),
        .m_axi_wlast(m_axi_wlast[1]),
        .m_axi_wready(m_axi_wready[1]),
        .m_axi_wstrb(m_axi_wstrb[15:8]),
        .m_axi_wvalid(m_axi_wvalid[1]),
        .m_ready_d(m_ready_d_15),
        .out0(m_valid_i_reg),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .sa_wm_awvalid(sa_wm_awvalid[1]),
        .\skid_buffer_reg[72] (m_select_enc_8),
        .storage_data2_0(storage_data2_0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_master_slots[1].r_issuing_cnt_reg[8] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(addr_arbiter_ar_n_5),
        .Q(r_issuing_cnt[8]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_master_slots[1].r_issuing_cnt_reg[9] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(addr_arbiter_ar_n_4),
        .Q(r_issuing_cnt[9]),
        .R(reset));
  bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized3_43 \gen_master_slots[1].reg_slice_mi 
       (.Q(aa_mi_awtarget_hot[1]),
        .aclk(aclk),
        .aresetn(aresetn),
        .\aresetn_d_reg[1] (\aresetn_d_reg[1] ),
        .\aresetn_d_reg[1]_0 (s_ready_i_reg_0),
        .bready_carry(bready_carry[4]),
        .\gen_arbiter.m_grant_enc_i_reg[0] (valid_qual_i3__2_9[1]),
        .\gen_arbiter.m_grant_enc_i_reg[0]_0 (valid_qual_i3__2[1]),
        .\gen_master_slots[1].w_issuing_cnt_reg[8] (\gen_master_slots[1].reg_slice_mi_n_5 ),
        .\gen_single_thread.active_target_enc_reg[0] (\gen_single_thread.active_target_enc_3 [0]),
        .\gen_single_thread.active_target_enc_reg[0]_0 (\gen_single_thread.active_target_enc_7 [0]),
        .\gen_single_thread.active_target_enc_reg[0]_1 (\gen_single_thread.active_target_enc [0]),
        .\gen_single_thread.active_target_enc_reg[0]_2 (\gen_single_thread.active_target_enc_5 [0]),
        .m_axi_awready(m_axi_awready[1]),
        .m_axi_bid(m_axi_bid[1]),
        .m_axi_bready(m_axi_bready[1]),
        .m_axi_bresp(m_axi_bresp[3:2]),
        .m_axi_bvalid(m_axi_bvalid[1]),
        .m_axi_rdata(m_axi_rdata[127:64]),
        .m_axi_rid(m_axi_rid[1]),
        .m_axi_rlast(m_axi_rlast[1]),
        .m_axi_rresp(m_axi_rresp[3:2]),
        .m_axi_rvalid(m_axi_rvalid[1]),
        .\m_payload_i_reg[0] ({st_mr_rid[1],st_mr_rlast[1],st_mr_rmesg[68:67],st_mr_rmesg[133:70]}),
        .\m_ready_d_reg[1] (splitter_aw_mi_n_0),
        .m_valid_i_reg(\gen_master_slots[2].reg_slice_mi_n_16 ),
        .p_0_in(p_0_in),
        .p_1_in(p_1_in),
        .p_2_in(p_2_in),
        .r_cmd_pop_1__1(r_cmd_pop_1__1),
        .r_issuing_cnt(r_issuing_cnt[9:8]),
        .rready_carry(rready_carry[4]),
        .s_axi_bready(s_axi_bready),
        .s_axi_rlast(s_axi_rlast[0]),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid[0]),
        .\skid_buffer_reg[0] (\skid_buffer_reg[0]_0 ),
        .st_mr_bid(st_mr_bid[1]),
        .st_mr_bmesg(st_mr_bmesg[4:3]),
        .st_mr_bvalid(st_mr_bvalid[1]),
        .st_mr_rvalid(st_mr_rvalid[1]),
        .w_cmd_pop_1__0(w_cmd_pop_1__0),
        .w_issuing_cnt(w_issuing_cnt[9:8]));
  FDRE #(
    .INIT(1'b0)) 
    \gen_master_slots[1].w_issuing_cnt_reg[8] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_master_slots[1].reg_slice_mi_n_5 ),
        .Q(w_issuing_cnt[8]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \gen_master_slots[1].w_issuing_cnt_reg[9] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(addr_arbiter_aw_n_9),
        .Q(w_issuing_cnt[9]),
        .R(reset));
  bd_1_axi_crossbar_v2_1_16_wdata_mux__parameterized0 \gen_master_slots[2].gen_mi_write.wdata_mux_w 
       (.D({addr_arbiter_aw_n_4,addr_arbiter_aw_n_5}),
        .\FSM_onehot_state_reg[3] (\FSM_onehot_state_reg[3]_1 ),
        .Q(Q),
        .SR(reset),
        .SS(areset_d1),
        .aclk(aclk),
        .\gen_arbiter.m_grant_enc_i_reg[0] (aa_wm_awgrant_enc),
        .\gen_arbiter.m_valid_i_reg (aa_sa_awvalid),
        .load_s1_15(load_s1_15),
        .m_aready__1(m_aready__1),
        .m_avalid(m_avalid_12),
        .m_ready_d(m_ready_d_15),
        .out0({\gen_wmux.wmux_aw_fifo/p_7_in ,\gen_wmux.wmux_aw_fifo/p_0_in6_in ,m_valid_i_reg_2}),
        .s_axi_wlast(s_axi_wlast),
        .sa_wm_awvalid(sa_wm_awvalid[2]),
        .\storage_data1_reg[0] (m_select_enc_9),
        .storage_data2_1(storage_data2_1),
        .wm_mr_wlast_2(wm_mr_wlast_2));
  FDRE #(
    .INIT(1'b0)) 
    \gen_master_slots[2].r_issuing_cnt_reg[16] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.m_target_hot_i_reg[2] ),
        .Q(\gen_master_slots[2].r_issuing_cnt_reg[16]_0 ),
        .R(reset));
  bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized3_44 \gen_master_slots[2].reg_slice_mi 
       (.aclk(aclk),
        .\aresetn_d_reg[0] (\aresetn_d_reg[0] ),
        .\aresetn_d_reg[1] (\aresetn_d_reg[1] ),
        .bready_carry(bready_carry[5]),
        .\gen_arbiter.last_rr_hot_reg[0] (addr_arbiter_aw_n_11),
        .\gen_arbiter.last_rr_hot_reg[0]_0 (addr_arbiter_ar_n_8),
        .\gen_arbiter.last_rr_hot_reg[1] (addr_arbiter_aw_n_1),
        .\gen_arbiter.last_rr_hot_reg[1]_0 (addr_arbiter_ar_n_1),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_master_slots[2].reg_slice_mi_n_6 ),
        .\gen_arbiter.m_grant_enc_i_reg[0]_0 (valid_qual_i3__2_9[2]),
        .\gen_arbiter.m_grant_enc_i_reg[0]_1 (\gen_master_slots[2].reg_slice_mi_n_8 ),
        .\gen_arbiter.m_grant_enc_i_reg[0]_2 (\gen_master_slots[2].reg_slice_mi_n_10 ),
        .\gen_arbiter.m_grant_enc_i_reg[0]_3 (valid_qual_i3__2[2]),
        .\gen_arbiter.m_grant_enc_i_reg[0]_4 (\gen_master_slots[2].reg_slice_mi_n_12 ),
        .\gen_axi.read_cs_reg[0] (p_15_in),
        .\gen_axi.s_axi_bvalid_i_reg (\gen_decerr_slave.decerr_slave_inst_n_15 ),
        .\gen_master_slots[2].r_issuing_cnt_reg[16] (\gen_master_slots[2].r_issuing_cnt_reg[16]_0 ),
        .\gen_master_slots[2].w_issuing_cnt_reg[16] (\gen_master_slots[2].w_issuing_cnt_reg[16]_0 ),
        .\gen_single_thread.active_target_enc_reg[1] (\gen_single_thread.active_target_enc_3 [1]),
        .\gen_single_thread.active_target_enc_reg[1]_0 (\gen_single_thread.active_target_enc_7 [1]),
        .\gen_single_thread.active_target_enc_reg[1]_1 (\gen_single_thread.active_target_enc [1]),
        .\gen_single_thread.active_target_enc_reg[1]_2 (\gen_single_thread.active_target_enc_5 [1]),
        .\gen_single_thread.active_target_hot_reg[0] (\gen_single_thread.active_target_hot ),
        .\m_payload_i_reg[2] (\m_payload_i_reg[2] ),
        .\m_payload_i_reg[2]_0 (\m_payload_i_reg[2]_0 ),
        .\m_payload_i_reg[67] (mi_rready_2),
        .\m_payload_i_reg[67]_0 (st_mr_rid[0]),
        .m_valid_i_reg(st_mr_rvalid[0]),
        .mi_bready_2(mi_bready_2),
        .p_17_in(p_17_in),
        .p_1_in(p_1_in),
        .p_20_in(p_20_in),
        .p_21_in(p_21_in),
        .r_cmd_pop_2__1(r_cmd_pop_2__1),
        .rready_carry(rready_carry[5]),
        .s_axi_bready(s_axi_bready),
        .s_axi_rready(s_axi_rready),
        .s_ready_i_reg(s_ready_i_reg),
        .s_ready_i_reg_0(s_ready_i_reg_0),
        .s_ready_i_reg_1(\gen_master_slots[2].reg_slice_mi_n_16 ),
        .st_aa_artarget_hot(st_aa_artarget_hot),
        .st_aa_awtarget_hot(st_aa_awtarget_hot),
        .st_mr_rid(st_mr_rid[2]),
        .st_mr_rlast(st_mr_rlast[2]),
        .st_mr_rvalid(st_mr_rvalid[2]),
        .target_mi_enc(target_mi_enc_3),
        .target_mi_enc_0(target_mi_enc_6),
        .target_mi_enc_1(target_mi_enc),
        .target_mi_enc_3(target_mi_enc_0),
        .valid_qual_i3__2(valid_qual_i3__2_9[1:0]),
        .valid_qual_i3__2_2(valid_qual_i3__2[1:0]),
        .w_cmd_pop_2__0(w_cmd_pop_2__0));
  FDRE #(
    .INIT(1'b0)) 
    \gen_master_slots[2].w_issuing_cnt_reg[16] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d_reg[1]_6 ),
        .Q(\gen_master_slots[2].w_issuing_cnt_reg[16]_0 ),
        .R(reset));
  bd_1_axi_crossbar_v2_1_16_si_transactor \gen_slave_slots[0].gen_si_read.si_transactor_ar 
       (.SR(reset),
        .aclk(aclk),
        .\gen_arbiter.s_ready_i_reg[0] (\gen_arbiter.s_ready_i_reg[0] ),
        .\gen_arbiter.s_ready_i_reg[0]_0 (\gen_arbiter.s_ready_i_reg[0]_0 ),
        .\gen_arbiter.s_ready_i_reg[0]_1 (\gen_arbiter.s_ready_i_reg[0]_1 ),
        .\gen_arbiter.s_ready_i_reg[0]_2 (\gen_arbiter.last_rr_hot_reg[1] ),
        .\m_payload_i_reg[0] (\gen_single_thread.active_target_hot ),
        .\m_payload_i_reg[18] (addr_arbiter_ar_n_86),
        .match_14(match_14),
        .p_2_in(p_2_in),
        .s_axi_araddr(s_axi_araddr[17:16]),
        .s_axi_rdata(s_axi_rdata[63:0]),
        .s_axi_rlast(s_axi_rlast[0]),
        .s_axi_rresp(s_axi_rresp[1:0]),
        .sel_3(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3 ),
        .sel_4(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4 ),
        .\skid_buffer_reg[66] (\gen_single_thread.active_target_enc [0]),
        .\skid_buffer_reg[66]_0 (\gen_single_thread.active_target_enc [1]),
        .st_aa_arvalid_qual(st_aa_arvalid_qual[0]),
        .st_mr_rlast(st_mr_rlast),
        .st_mr_rmesg({st_mr_rmesg[133:70],st_mr_rmesg[68:3],st_mr_rmesg[1:0]}));
  bd_1_axi_crossbar_v2_1_16_si_transactor__parameterized0 \gen_slave_slots[0].gen_si_write.si_transactor_aw 
       (.SR(reset),
        .aclk(aclk),
        .\gen_single_thread.active_target_enc_reg[0]_0 (\gen_single_thread.active_target_enc_3 [0]),
        .\gen_single_thread.active_target_enc_reg[1]_0 (\gen_single_thread.active_target_enc_3 [1]),
        .\gen_single_thread.active_target_hot_reg[0]_0 (\gen_single_thread.active_target_hot_2 ),
        .\m_payload_i_reg[18] (match_12),
        .\m_payload_i_reg[18]_0 (addr_arbiter_aw_n_32),
        .\m_payload_i_reg[2] (\m_payload_i_reg[2] ),
        .\m_ready_d_reg[1] (\m_ready_d_reg[1]_0 ),
        .\m_ready_d_reg[1]_0 (\m_ready_d_reg[1]_1 ),
        .\m_ready_d_reg[1]_1 (\m_ready_d_reg[1]_2 ),
        .m_valid_i_reg(s_ready_i_reg),
        .s_axi_awaddr(s_axi_awaddr[17:16]),
        .s_axi_awready(s_axi_awready[0]),
        .s_axi_bready(s_axi_bready[0]),
        .s_axi_bresp(s_axi_bresp[1:0]),
        .s_axi_bvalid(s_axi_bvalid[0]),
        .sel_3(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_5 ),
        .sel_4(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_4 ),
        .st_aa_awvalid_qual(st_aa_awvalid_qual[0]),
        .st_mr_bid(st_mr_bid),
        .st_mr_bmesg({st_mr_bmesg[4:3],st_mr_bmesg[1:0]}),
        .st_mr_bvalid(st_mr_bvalid));
  bd_1_axi_crossbar_v2_1_16_splitter \gen_slave_slots[0].gen_si_write.splitter_aw_si 
       (.aclk(aclk),
        .aresetn_d(aresetn_d),
        .\gen_arbiter.s_ready_i_reg[0] (ss_aa_awready[0]),
        .\m_ready_d_reg[0]_0 (m_ready_d[1]),
        .\m_ready_d_reg[0]_1 (m_ready_d[0]),
        .out0({\wrouter_aw_fifo/p_9_in ,\wrouter_aw_fifo/p_0_in8_in }),
        .s_axi_awready(s_axi_awready[0]),
        .s_axi_awvalid(s_axi_awvalid[0]),
        .s_ready_i_reg(ss_wr_awready_0),
        .ss_wr_awvalid_0(ss_wr_awvalid_0),
        .\storage_data1_reg[0] (\gen_slave_slots[0].gen_si_write.splitter_aw_si_n_3 ),
        .\storage_data1_reg[0]_0 (\gen_slave_slots[0].gen_si_write.splitter_aw_si_n_4 ));
  bd_1_axi_crossbar_v2_1_16_wdata_router \gen_slave_slots[0].gen_si_write.wdata_router_w 
       (.SR(reset),
        .SS(areset_d1),
        .aclk(aclk),
        .areset_d1_reg(areset_d1_reg),
        .\gen_arbiter.m_target_hot_i_reg[1] (st_aa_awtarget_enc_0),
        .\gen_axi.s_axi_wready_i_reg (\gen_slave_slots[0].gen_si_write.wdata_router_w_n_8 ),
        .\gen_rep[0].fifoaddr_reg[0] (ss_wr_awready_0),
        .m_avalid(m_avalid_11),
        .m_avalid_0(m_avalid),
        .m_avalid_1(m_avalid_12),
        .m_axi_wready(m_axi_wready),
        .\m_payload_i_reg[18] (match_12),
        .\m_ready_d_reg[1] (m_ready_d[1]),
        .\m_ready_d_reg[1]_0 (\gen_slave_slots[0].gen_si_write.splitter_aw_si_n_4 ),
        .\m_ready_d_reg[1]_1 (\gen_slave_slots[0].gen_si_write.splitter_aw_si_n_3 ),
        .m_valid_i_reg(m_valid_i_reg_3),
        .m_valid_i_reg_0(m_valid_i_reg_0),
        .out0({\wrouter_aw_fifo/p_9_in ,\wrouter_aw_fifo/p_0_in8_in }),
        .p_14_in(p_14_in),
        .s_axi_awaddr(s_axi_awaddr[19:16]),
        .s_axi_awvalid(s_axi_awvalid[0]),
        .s_axi_wlast(s_axi_wlast[0]),
        .s_axi_wready(s_axi_wready[0]),
        .s_axi_wvalid(s_axi_wvalid[0]),
        .s_ready_i_reg(\gen_slave_slots[0].gen_si_write.wdata_router_w_n_7 ),
        .s_ready_i_reg_0(\gen_slave_slots[0].gen_si_write.wdata_router_w_n_9 ),
        .s_ready_i_reg_1(s_ready_i_reg_1),
        .sel_3(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_5 ),
        .sel_4(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_4 ),
        .ss_wr_awvalid_0(ss_wr_awvalid_0),
        .storage_data11(storage_data11),
        .\storage_data1_reg[0] (m_select_enc_8),
        .\storage_data1_reg[0]_0 (m_select_enc),
        .\storage_data1_reg[0]_1 (m_select_enc_9));
  bd_1_axi_crossbar_v2_1_16_si_transactor__parameterized1 \gen_slave_slots[1].gen_si_read.si_transactor_ar 
       (.SR(reset),
        .aclk(aclk),
        .\gen_arbiter.s_ready_i_reg[1] (\gen_arbiter.s_ready_i_reg[1] ),
        .\gen_arbiter.s_ready_i_reg[1]_0 (\gen_arbiter.s_ready_i_reg[1]_0 ),
        .\gen_arbiter.s_ready_i_reg[1]_1 (\gen_arbiter.s_ready_i_reg[1]_1 ),
        .\gen_arbiter.s_ready_i_reg[1]_2 (\gen_arbiter.last_rr_hot_reg[0] ),
        .\gen_single_thread.active_target_enc (\gen_single_thread.active_target_enc ),
        .\gen_single_thread.active_target_hot_reg[0]_0 (\gen_single_thread.active_target_hot ),
        .\m_payload_i_reg[0] (\gen_single_thread.active_target_hot_4 ),
        .\m_payload_i_reg[18] (addr_arbiter_ar_n_82),
        .match_13(match_13),
        .rready_carry(rready_carry),
        .s_axi_araddr(s_axi_araddr[49:48]),
        .s_axi_rdata(s_axi_rdata[127:64]),
        .s_axi_rlast(s_axi_rlast[1]),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp[3:2]),
        .s_axi_rvalid(s_axi_rvalid[1]),
        .sel_3(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_2 ),
        .sel_4(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_1 ),
        .\skid_buffer_reg[66] (\gen_single_thread.active_target_enc_5 [0]),
        .\skid_buffer_reg[66]_0 (\gen_single_thread.active_target_enc_5 [1]),
        .st_aa_arvalid_qual(st_aa_arvalid_qual[1]),
        .st_mr_rid(st_mr_rid),
        .st_mr_rlast(st_mr_rlast),
        .st_mr_rmesg({st_mr_rmesg[133:70],st_mr_rmesg[68:3],st_mr_rmesg[1:0]}),
        .st_mr_rvalid(st_mr_rvalid));
  bd_1_axi_crossbar_v2_1_16_si_transactor__parameterized2 \gen_slave_slots[1].gen_si_write.si_transactor_aw 
       (.SR(reset),
        .aclk(aclk),
        .bready_carry(bready_carry),
        .\gen_single_thread.active_target_enc_3 (\gen_single_thread.active_target_enc_3 ),
        .\gen_single_thread.active_target_enc_reg[0]_0 (\gen_single_thread.active_target_enc_7 [0]),
        .\gen_single_thread.active_target_enc_reg[1]_0 (\gen_single_thread.active_target_enc_7 [1]),
        .\gen_single_thread.active_target_hot_2 (\gen_single_thread.active_target_hot_2 ),
        .\gen_single_thread.active_target_hot_reg[0]_0 (\gen_single_thread.active_target_hot_6 ),
        .\m_payload_i_reg[18] (match),
        .\m_payload_i_reg[18]_0 (addr_arbiter_aw_n_28),
        .\m_payload_i_reg[2] (\m_payload_i_reg[2] ),
        .\m_ready_d_reg[1] (\m_ready_d_reg[1]_3 ),
        .\m_ready_d_reg[1]_0 (\m_ready_d_reg[1]_4 ),
        .\m_ready_d_reg[1]_1 (\m_ready_d_reg[1]_5 ),
        .m_valid_i_reg(s_ready_i_reg),
        .s_axi_awaddr(s_axi_awaddr[49:48]),
        .s_axi_awready(s_axi_awready[1]),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp[3:2]),
        .s_axi_bvalid(s_axi_bvalid[1]),
        .sel_3(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_8 ),
        .sel_4(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_7 ),
        .st_aa_awvalid_qual(st_aa_awvalid_qual[1]),
        .st_mr_bid(st_mr_bid),
        .st_mr_bmesg({st_mr_bmesg[4:3],st_mr_bmesg[1:0]}),
        .st_mr_bvalid(st_mr_bvalid));
  bd_1_axi_crossbar_v2_1_16_splitter_45 \gen_slave_slots[1].gen_si_write.splitter_aw_si 
       (.aclk(aclk),
        .aresetn_d(aresetn_d),
        .\gen_arbiter.s_ready_i_reg[1] (ss_aa_awready[1]),
        .\m_ready_d_reg[0]_0 (m_ready_d_11[1]),
        .\m_ready_d_reg[0]_1 (m_ready_d_11[0]),
        .out0({\wrouter_aw_fifo/p_9_in_14 ,\wrouter_aw_fifo/p_0_in8_in_13 }),
        .s_axi_awready(s_axi_awready[1]),
        .s_axi_awvalid(s_axi_awvalid[1]),
        .s_ready_i_reg(ss_wr_awready_1),
        .ss_wr_awvalid_1(ss_wr_awvalid_1),
        .\storage_data1_reg[0] (\gen_slave_slots[1].gen_si_write.splitter_aw_si_n_3 ),
        .\storage_data1_reg[0]_0 (\gen_slave_slots[1].gen_si_write.splitter_aw_si_n_4 ));
  bd_1_axi_crossbar_v2_1_16_wdata_router_46 \gen_slave_slots[1].gen_si_write.wdata_router_w 
       (.SR(reset),
        .SS(areset_d1),
        .aclk(aclk),
        .areset_d1_reg(areset_d1_reg_0),
        .\gen_arbiter.m_target_hot_i_reg[1] (st_aa_awtarget_enc_2),
        .\gen_rep[0].fifoaddr_reg[0] (ss_wr_awready_1),
        .m_avalid(m_avalid),
        .m_avalid_0(m_avalid_12),
        .m_avalid_1(m_avalid_11),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .\m_payload_i_reg[18] (match),
        .\m_ready_d_reg[1] (m_ready_d_11[1]),
        .\m_ready_d_reg[1]_0 (\gen_slave_slots[1].gen_si_write.splitter_aw_si_n_4 ),
        .\m_ready_d_reg[1]_1 (\gen_slave_slots[1].gen_si_write.splitter_aw_si_n_3 ),
        .m_valid_i_reg(m_valid_i_reg_4),
        .m_valid_i_reg_0(m_valid_i_reg_1),
        .out0({\wrouter_aw_fifo/p_9_in_14 ,\wrouter_aw_fifo/p_0_in8_in_13 }),
        .p_14_in(p_14_in),
        .s_axi_awaddr(s_axi_awaddr[51:48]),
        .s_axi_awvalid(s_axi_awvalid[1]),
        .s_axi_wlast(s_axi_wlast[1]),
        .s_axi_wready(s_axi_wready[1]),
        .s_axi_wvalid(s_axi_wvalid[1]),
        .s_ready_i_reg(s_ready_i_reg_2),
        .sel_3(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_3_8 ),
        .sel_4(\gen_addr_decoder.addr_decoder_inst/gen_target[1].gen_region[0].gen_comparator_static.gen_addr_range.addr_decode_comparator/sel_4_7 ),
        .ss_wr_awvalid_1(ss_wr_awvalid_1),
        .storage_data11_10(storage_data11_10),
        .\storage_data1_reg[0] (m_select_enc),
        .\storage_data1_reg[0]_0 (\gen_slave_slots[0].gen_si_write.wdata_router_w_n_7 ),
        .\storage_data1_reg[0]_1 (m_select_enc_9),
        .\storage_data1_reg[0]_2 (m_select_enc_8),
        .\storage_data1_reg[0]_3 (\gen_slave_slots[0].gen_si_write.wdata_router_w_n_9 ),
        .\storage_data1_reg[1] (\gen_slave_slots[0].gen_si_write.wdata_router_w_n_8 ),
        .wm_mr_wvalid_2(wm_mr_wvalid_2));
  bd_1_axi_crossbar_v2_1_16_splitter_47 splitter_aw_mi
       (.Q({Q,aa_mi_awtarget_hot}),
        .aclk(aclk),
        .aresetn_d(aresetn_d),
        .aresetn_d_reg(addr_arbiter_aw_n_15),
        .\gen_arbiter.m_valid_i_reg (aa_sa_awvalid),
        .\gen_master_slots[1].w_issuing_cnt_reg[8] (splitter_aw_mi_n_0),
        .m_ready_d(m_ready_d_15),
        .\m_ready_d_reg[1]_0 (\m_ready_d_reg[1] ),
        .mi_awready_mux__1(mi_awready_mux__1),
        .s_ready_i0__1(s_ready_i0__1));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_decerr_slave" *) 
module bd_1_axi_crossbar_v2_1_16_decerr_slave
   (mi_awready_2,
    \gen_axi.s_axi_wready_i_reg_0 ,
    p_24_in,
    p_21_in,
    \gen_axi.read_cnt_reg[0]_0 ,
    \gen_axi.read_cnt_reg[0]_1 ,
    p_20_in,
    p_17_in,
    \gen_axi.write_cs_reg[1]_0 ,
    \gen_axi.write_cs ,
    \gen_axi.read_cnt_reg[0]_2 ,
    Q,
    \gen_axi.s_axi_rlast_i_reg_0 ,
    \gen_axi.s_axi_rlast_i_reg_1 ,
    m_valid_i_reg,
    m_aready__1,
    SR,
    s_ready_i_reg,
    aclk,
    \gen_axi.write_cs_reg[0]_0 ,
    \gen_arbiter.m_mesg_i_reg[0] ,
    s_ready_i_reg_0,
    s_ready_i_reg_1,
    \gen_arbiter.m_mesg_i_reg[0]_0 ,
    \gen_axi.read_cnt_reg[1]_0 ,
    \gen_axi.write_cs01_out ,
    mi_bready_2,
    s_ready_i_reg_2,
    aresetn_d,
    \gen_axi.s_axi_rid_i ,
    aa_mi_arvalid,
    \gen_arbiter.m_target_hot_i_reg[2] ,
    \gen_arbiter.m_mesg_i_reg[40] ,
    bready_carry,
    s_axi_wlast,
    \storage_data1_reg[0] ,
    wm_mr_wvalid_2);
  output mi_awready_2;
  output \gen_axi.s_axi_wready_i_reg_0 ;
  output p_24_in;
  output p_21_in;
  output \gen_axi.read_cnt_reg[0]_0 ;
  output \gen_axi.read_cnt_reg[0]_1 ;
  output p_20_in;
  output p_17_in;
  output \gen_axi.write_cs_reg[1]_0 ;
  output [1:0]\gen_axi.write_cs ;
  output \gen_axi.read_cnt_reg[0]_2 ;
  output [0:0]Q;
  output \gen_axi.s_axi_rlast_i_reg_0 ;
  output \gen_axi.s_axi_rlast_i_reg_1 ;
  output m_valid_i_reg;
  output m_aready__1;
  input [0:0]SR;
  input s_ready_i_reg;
  input aclk;
  input \gen_axi.write_cs_reg[0]_0 ;
  input \gen_arbiter.m_mesg_i_reg[0] ;
  input s_ready_i_reg_0;
  input s_ready_i_reg_1;
  input \gen_arbiter.m_mesg_i_reg[0]_0 ;
  input \gen_axi.read_cnt_reg[1]_0 ;
  input \gen_axi.write_cs01_out ;
  input mi_bready_2;
  input s_ready_i_reg_2;
  input aresetn_d;
  input \gen_axi.s_axi_rid_i ;
  input aa_mi_arvalid;
  input [0:0]\gen_arbiter.m_target_hot_i_reg[2] ;
  input [7:0]\gen_arbiter.m_mesg_i_reg[40] ;
  input [0:0]bready_carry;
  input [1:0]s_axi_wlast;
  input \storage_data1_reg[0] ;
  input wm_mr_wvalid_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]Q;
  wire [0:0]SR;
  wire aa_mi_arvalid;
  wire aclk;
  wire aresetn_d;
  wire [0:0]bready_carry;
  wire \gen_arbiter.m_mesg_i_reg[0] ;
  wire \gen_arbiter.m_mesg_i_reg[0]_0 ;
  wire [7:0]\gen_arbiter.m_mesg_i_reg[40] ;
  wire [0:0]\gen_arbiter.m_target_hot_i_reg[2] ;
  wire \gen_axi.read_cnt[4]_i_2_n_0 ;
  wire \gen_axi.read_cnt[5]_i_2_n_0 ;
  wire \gen_axi.read_cnt[7]_i_1_n_0 ;
  wire \gen_axi.read_cnt[7]_i_4_n_0 ;
  wire \gen_axi.read_cnt[7]_i_5_n_0 ;
  wire [7:2]\gen_axi.read_cnt_reg ;
  wire \gen_axi.read_cnt_reg[0]_0 ;
  wire \gen_axi.read_cnt_reg[0]_1 ;
  wire \gen_axi.read_cnt_reg[0]_2 ;
  wire \gen_axi.read_cnt_reg[1]_0 ;
  wire [0:0]\gen_axi.read_cnt_reg__0 ;
  wire \gen_axi.s_axi_arready_i_i_1_n_0 ;
  wire \gen_axi.s_axi_rid_i ;
  wire \gen_axi.s_axi_rlast_i_reg_0 ;
  wire \gen_axi.s_axi_rlast_i_reg_1 ;
  wire \gen_axi.s_axi_wready_i_reg_0 ;
  wire [1:0]\gen_axi.write_cs ;
  wire \gen_axi.write_cs01_out ;
  wire \gen_axi.write_cs[0]_i_1_n_0 ;
  wire \gen_axi.write_cs[1]_i_1_n_0 ;
  wire \gen_axi.write_cs_reg[0]_0 ;
  wire \gen_axi.write_cs_reg[1]_0 ;
  wire m_aready__1;
  wire m_valid_i_reg;
  wire mi_awready_2;
  wire mi_bready_2;
  wire [7:0]p_0_in__0;
  wire p_17_in;
  wire p_20_in;
  wire p_21_in;
  wire p_24_in;
  wire [1:0]s_axi_wlast;
  wire s_ready_i_reg;
  wire s_ready_i_reg_0;
  wire s_ready_i_reg_1;
  wire s_ready_i_reg_2;
  wire \storage_data1_reg[0] ;
  wire wm_mr_wvalid_2;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \gen_axi.read_cnt[0]_i_1 
       (.I0(\gen_axi.read_cnt_reg__0 ),
        .I1(\gen_axi.read_cnt_reg[0]_0 ),
        .I2(\gen_arbiter.m_mesg_i_reg[40] [0]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'hE22E)) 
    \gen_axi.read_cnt[1]_i_1 
       (.I0(\gen_arbiter.m_mesg_i_reg[40] [1]),
        .I1(\gen_axi.read_cnt_reg[0]_0 ),
        .I2(\gen_axi.read_cnt_reg__0 ),
        .I3(Q),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT5 #(
    .INIT(32'hFCAA03AA)) 
    \gen_axi.read_cnt[2]_i_1 
       (.I0(\gen_arbiter.m_mesg_i_reg[40] [2]),
        .I1(Q),
        .I2(\gen_axi.read_cnt_reg__0 ),
        .I3(\gen_axi.read_cnt_reg[0]_0 ),
        .I4(\gen_axi.read_cnt_reg [2]),
        .O(p_0_in__0[2]));
  LUT6 #(
    .INIT(64'hFFFCAAAA0003AAAA)) 
    \gen_axi.read_cnt[3]_i_1 
       (.I0(\gen_arbiter.m_mesg_i_reg[40] [3]),
        .I1(\gen_axi.read_cnt_reg__0 ),
        .I2(Q),
        .I3(\gen_axi.read_cnt_reg [2]),
        .I4(\gen_axi.read_cnt_reg[0]_0 ),
        .I5(\gen_axi.read_cnt_reg [3]),
        .O(p_0_in__0[3]));
  LUT6 #(
    .INIT(64'hFFFCAAAA0003AAAA)) 
    \gen_axi.read_cnt[4]_i_1 
       (.I0(\gen_arbiter.m_mesg_i_reg[40] [4]),
        .I1(\gen_axi.read_cnt_reg [2]),
        .I2(\gen_axi.read_cnt[4]_i_2_n_0 ),
        .I3(\gen_axi.read_cnt_reg [3]),
        .I4(\gen_axi.read_cnt_reg[0]_0 ),
        .I5(\gen_axi.read_cnt_reg [4]),
        .O(p_0_in__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \gen_axi.read_cnt[4]_i_2 
       (.I0(Q),
        .I1(\gen_axi.read_cnt_reg__0 ),
        .O(\gen_axi.read_cnt[4]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hCA3A)) 
    \gen_axi.read_cnt[5]_i_1 
       (.I0(\gen_arbiter.m_mesg_i_reg[40] [5]),
        .I1(\gen_axi.read_cnt[5]_i_2_n_0 ),
        .I2(\gen_axi.read_cnt_reg[0]_0 ),
        .I3(\gen_axi.read_cnt_reg [5]),
        .O(p_0_in__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \gen_axi.read_cnt[5]_i_2 
       (.I0(\gen_axi.read_cnt_reg [3]),
        .I1(\gen_axi.read_cnt_reg__0 ),
        .I2(Q),
        .I3(\gen_axi.read_cnt_reg [2]),
        .I4(\gen_axi.read_cnt_reg [4]),
        .O(\gen_axi.read_cnt[5]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hCA3A)) 
    \gen_axi.read_cnt[6]_i_1 
       (.I0(\gen_arbiter.m_mesg_i_reg[40] [6]),
        .I1(\gen_axi.read_cnt[7]_i_4_n_0 ),
        .I2(\gen_axi.read_cnt_reg[0]_0 ),
        .I3(\gen_axi.read_cnt_reg [6]),
        .O(p_0_in__0[6]));
  LUT6 #(
    .INIT(64'h8F80808080808080)) 
    \gen_axi.read_cnt[7]_i_1 
       (.I0(\gen_axi.read_cnt_reg[0]_2 ),
        .I1(s_ready_i_reg_2),
        .I2(\gen_axi.read_cnt_reg[0]_0 ),
        .I3(\gen_axi.read_cnt_reg[0]_1 ),
        .I4(aa_mi_arvalid),
        .I5(\gen_arbiter.m_target_hot_i_reg[2] ),
        .O(\gen_axi.read_cnt[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'hFCAA03AA)) 
    \gen_axi.read_cnt[7]_i_2 
       (.I0(\gen_arbiter.m_mesg_i_reg[40] [7]),
        .I1(\gen_axi.read_cnt[7]_i_4_n_0 ),
        .I2(\gen_axi.read_cnt_reg [6]),
        .I3(\gen_axi.read_cnt_reg[0]_0 ),
        .I4(\gen_axi.read_cnt_reg [7]),
        .O(p_0_in__0[7]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFFFF)) 
    \gen_axi.read_cnt[7]_i_3 
       (.I0(\gen_axi.read_cnt_reg [4]),
        .I1(\gen_axi.read_cnt_reg [5]),
        .I2(\gen_axi.read_cnt_reg [2]),
        .I3(\gen_axi.read_cnt_reg [3]),
        .I4(\gen_axi.read_cnt[7]_i_5_n_0 ),
        .I5(\gen_axi.read_cnt[4]_i_2_n_0 ),
        .O(\gen_axi.read_cnt_reg[0]_2 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \gen_axi.read_cnt[7]_i_4 
       (.I0(\gen_axi.read_cnt_reg [4]),
        .I1(\gen_axi.read_cnt_reg [2]),
        .I2(Q),
        .I3(\gen_axi.read_cnt_reg__0 ),
        .I4(\gen_axi.read_cnt_reg [3]),
        .I5(\gen_axi.read_cnt_reg [5]),
        .O(\gen_axi.read_cnt[7]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \gen_axi.read_cnt[7]_i_5 
       (.I0(\gen_axi.read_cnt_reg [6]),
        .I1(\gen_axi.read_cnt_reg [7]),
        .O(\gen_axi.read_cnt[7]_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.read_cnt_reg[0] 
       (.C(aclk),
        .CE(\gen_axi.read_cnt[7]_i_1_n_0 ),
        .D(p_0_in__0[0]),
        .Q(\gen_axi.read_cnt_reg__0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.read_cnt_reg[1] 
       (.C(aclk),
        .CE(\gen_axi.read_cnt[7]_i_1_n_0 ),
        .D(p_0_in__0[1]),
        .Q(Q),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.read_cnt_reg[2] 
       (.C(aclk),
        .CE(\gen_axi.read_cnt[7]_i_1_n_0 ),
        .D(p_0_in__0[2]),
        .Q(\gen_axi.read_cnt_reg [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.read_cnt_reg[3] 
       (.C(aclk),
        .CE(\gen_axi.read_cnt[7]_i_1_n_0 ),
        .D(p_0_in__0[3]),
        .Q(\gen_axi.read_cnt_reg [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.read_cnt_reg[4] 
       (.C(aclk),
        .CE(\gen_axi.read_cnt[7]_i_1_n_0 ),
        .D(p_0_in__0[4]),
        .Q(\gen_axi.read_cnt_reg [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.read_cnt_reg[5] 
       (.C(aclk),
        .CE(\gen_axi.read_cnt[7]_i_1_n_0 ),
        .D(p_0_in__0[5]),
        .Q(\gen_axi.read_cnt_reg [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.read_cnt_reg[6] 
       (.C(aclk),
        .CE(\gen_axi.read_cnt[7]_i_1_n_0 ),
        .D(p_0_in__0[6]),
        .Q(\gen_axi.read_cnt_reg [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.read_cnt_reg[7] 
       (.C(aclk),
        .CE(\gen_axi.read_cnt[7]_i_1_n_0 ),
        .D(p_0_in__0[7]),
        .Q(\gen_axi.read_cnt_reg [7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.read_cs_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_reg_1),
        .Q(\gen_axi.read_cnt_reg[0]_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'h00000000BFBB0000)) 
    \gen_axi.s_axi_arready_i_i_1 
       (.I0(\gen_axi.read_cnt_reg[0]_1 ),
        .I1(\gen_axi.read_cnt_reg[0]_0 ),
        .I2(\gen_axi.read_cnt_reg[0]_2 ),
        .I3(s_ready_i_reg_2),
        .I4(aresetn_d),
        .I5(\gen_axi.s_axi_rid_i ),
        .O(\gen_axi.s_axi_arready_i_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.s_axi_arready_i_reg 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_axi.s_axi_arready_i_i_1_n_0 ),
        .Q(\gen_axi.read_cnt_reg[0]_1 ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.s_axi_awready_i_reg 
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_reg),
        .Q(mi_awready_2),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.s_axi_bid_i_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.m_mesg_i_reg[0] ),
        .Q(p_24_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.s_axi_bvalid_i_reg 
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_reg_0),
        .Q(p_21_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.s_axi_rid_i_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.m_mesg_i_reg[0]_0 ),
        .Q(p_20_in),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \gen_axi.s_axi_rlast_i_i_3 
       (.I0(\gen_axi.read_cnt_reg [2]),
        .I1(\gen_axi.read_cnt_reg [3]),
        .O(\gen_axi.s_axi_rlast_i_reg_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \gen_axi.s_axi_rlast_i_i_4 
       (.I0(\gen_axi.read_cnt_reg [4]),
        .I1(\gen_axi.read_cnt_reg [5]),
        .I2(\gen_axi.read_cnt_reg [6]),
        .I3(\gen_axi.read_cnt_reg [7]),
        .I4(s_ready_i_reg_2),
        .I5(\gen_axi.read_cnt_reg[0]_0 ),
        .O(\gen_axi.s_axi_rlast_i_reg_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.s_axi_rlast_i_reg 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_axi.read_cnt_reg[1]_0 ),
        .Q(p_17_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.s_axi_wready_i_reg 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_axi.write_cs_reg[0]_0 ),
        .Q(\gen_axi.s_axi_wready_i_reg_0 ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT4 #(
    .INIT(16'h303A)) 
    \gen_axi.write_cs[0]_i_1 
       (.I0(\gen_axi.write_cs01_out ),
        .I1(\gen_axi.write_cs_reg[1]_0 ),
        .I2(\gen_axi.write_cs [0]),
        .I3(\gen_axi.write_cs [1]),
        .O(\gen_axi.write_cs[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT4 #(
    .INIT(16'hC8F8)) 
    \gen_axi.write_cs[1]_i_1 
       (.I0(\gen_axi.write_cs_reg[1]_0 ),
        .I1(\gen_axi.write_cs [0]),
        .I2(\gen_axi.write_cs [1]),
        .I3(mi_bready_2),
        .O(\gen_axi.write_cs[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h45400000)) 
    \gen_axi.write_cs[1]_i_2 
       (.I0(\gen_axi.write_cs [1]),
        .I1(s_axi_wlast[1]),
        .I2(\storage_data1_reg[0] ),
        .I3(s_axi_wlast[0]),
        .I4(wm_mr_wvalid_2),
        .O(\gen_axi.write_cs_reg[1]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.write_cs_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_axi.write_cs[0]_i_1_n_0 ),
        .Q(\gen_axi.write_cs [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_axi.write_cs_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_axi.write_cs[1]_i_1_n_0 ),
        .Q(\gen_axi.write_cs [1]),
        .R(SR));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_1
       (.I0(p_21_in),
        .I1(mi_bready_2),
        .I2(bready_carry),
        .O(m_valid_i_reg));
  LUT5 #(
    .INIT(32'h8A800000)) 
    m_valid_i_i_1__4
       (.I0(\gen_axi.s_axi_wready_i_reg_0 ),
        .I1(s_axi_wlast[1]),
        .I2(\storage_data1_reg[0] ),
        .I3(s_axi_wlast[0]),
        .I4(wm_mr_wvalid_2),
        .O(m_aready__1));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_si_transactor" *) 
module bd_1_axi_crossbar_v2_1_16_si_transactor
   (\m_payload_i_reg[0] ,
    \skid_buffer_reg[66] ,
    \skid_buffer_reg[66]_0 ,
    st_aa_arvalid_qual,
    s_axi_rresp,
    s_axi_rdata,
    s_axi_rlast,
    SR,
    \gen_arbiter.s_ready_i_reg[0] ,
    aclk,
    \gen_arbiter.s_ready_i_reg[0]_0 ,
    \gen_arbiter.s_ready_i_reg[0]_1 ,
    p_2_in,
    match_14,
    sel_3,
    s_axi_araddr,
    \m_payload_i_reg[18] ,
    sel_4,
    st_mr_rmesg,
    st_mr_rlast,
    \gen_arbiter.s_ready_i_reg[0]_2 );
  output \m_payload_i_reg[0] ;
  output \skid_buffer_reg[66] ;
  output \skid_buffer_reg[66]_0 ;
  output [0:0]st_aa_arvalid_qual;
  output [1:0]s_axi_rresp;
  output [63:0]s_axi_rdata;
  output [0:0]s_axi_rlast;
  input [0:0]SR;
  input \gen_arbiter.s_ready_i_reg[0] ;
  input aclk;
  input \gen_arbiter.s_ready_i_reg[0]_0 ;
  input \gen_arbiter.s_ready_i_reg[0]_1 ;
  input p_2_in;
  input match_14;
  input sel_3;
  input [1:0]s_axi_araddr;
  input \m_payload_i_reg[18] ;
  input sel_4;
  input [131:0]st_mr_rmesg;
  input [2:0]st_mr_rlast;
  input \gen_arbiter.s_ready_i_reg[0]_2 ;

  wire \<const1> ;
  wire [0:0]SR;
  wire aclk;
  wire \gen_arbiter.m_grant_enc_i[0]_i_10__0_n_0 ;
  wire \gen_arbiter.s_ready_i_reg[0] ;
  wire \gen_arbiter.s_ready_i_reg[0]_0 ;
  wire \gen_arbiter.s_ready_i_reg[0]_1 ;
  wire \gen_arbiter.s_ready_i_reg[0]_2 ;
  wire [1:0]\gen_single_thread.accept_cnt ;
  wire \gen_single_thread.accept_cnt[0]_i_1_n_0 ;
  wire \gen_single_thread.accept_cnt[1]_i_1_n_0 ;
  wire \m_payload_i_reg[0] ;
  wire \m_payload_i_reg[18] ;
  wire match_14;
  wire p_2_in;
  wire [1:0]s_axi_araddr;
  wire [63:0]s_axi_rdata;
  wire [0:0]s_axi_rlast;
  wire [1:0]s_axi_rresp;
  wire sel_3;
  wire sel_4;
  wire \skid_buffer_reg[66] ;
  wire \skid_buffer_reg[66]_0 ;
  wire [0:0]st_aa_arvalid_qual;
  wire [2:0]st_mr_rlast;
  wire [131:0]st_mr_rmesg;

  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h20000000DFFFFFFF)) 
    \gen_arbiter.m_grant_enc_i[0]_i_10__0 
       (.I0(sel_3),
        .I1(s_axi_araddr[1]),
        .I2(s_axi_araddr[0]),
        .I3(\m_payload_i_reg[18] ),
        .I4(sel_4),
        .I5(\skid_buffer_reg[66] ),
        .O(\gen_arbiter.m_grant_enc_i[0]_i_10__0_n_0 ));
  LUT6 #(
    .INIT(64'h0505FD05FD050505)) 
    \gen_arbiter.m_grant_enc_i[0]_i_4__0 
       (.I0(\gen_single_thread.accept_cnt [1]),
        .I1(p_2_in),
        .I2(\gen_single_thread.accept_cnt [0]),
        .I3(\gen_arbiter.m_grant_enc_i[0]_i_10__0_n_0 ),
        .I4(\skid_buffer_reg[66]_0 ),
        .I5(match_14),
        .O(st_aa_arvalid_qual));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT4 #(
    .INIT(16'h9962)) 
    \gen_single_thread.accept_cnt[0]_i_1 
       (.I0(\gen_arbiter.s_ready_i_reg[0]_2 ),
        .I1(p_2_in),
        .I2(\gen_single_thread.accept_cnt [1]),
        .I3(\gen_single_thread.accept_cnt [0]),
        .O(\gen_single_thread.accept_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT4 #(
    .INIT(16'hA68A)) 
    \gen_single_thread.accept_cnt[1]_i_1 
       (.I0(\gen_single_thread.accept_cnt [1]),
        .I1(\gen_single_thread.accept_cnt [0]),
        .I2(p_2_in),
        .I3(\gen_arbiter.s_ready_i_reg[0]_2 ),
        .O(\gen_single_thread.accept_cnt[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.accept_cnt_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_single_thread.accept_cnt[0]_i_1_n_0 ),
        .Q(\gen_single_thread.accept_cnt [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.accept_cnt_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_single_thread.accept_cnt[1]_i_1_n_0 ),
        .Q(\gen_single_thread.accept_cnt [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_enc_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.s_ready_i_reg[0]_0 ),
        .Q(\skid_buffer_reg[66] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_enc_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.s_ready_i_reg[0]_1 ),
        .Q(\skid_buffer_reg[66]_0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_hot_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.s_ready_i_reg[0] ),
        .Q(\m_payload_i_reg[0] ),
        .R(SR));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[0]_INST_0 
       (.I0(st_mr_rmesg[68]),
        .I1(st_mr_rmesg[2]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[0]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[10]_INST_0 
       (.I0(st_mr_rmesg[78]),
        .I1(st_mr_rmesg[12]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[10]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[11]_INST_0 
       (.I0(st_mr_rmesg[79]),
        .I1(st_mr_rmesg[13]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[11]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[12]_INST_0 
       (.I0(st_mr_rmesg[80]),
        .I1(st_mr_rmesg[14]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[12]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[13]_INST_0 
       (.I0(st_mr_rmesg[81]),
        .I1(st_mr_rmesg[15]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[13]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[14]_INST_0 
       (.I0(st_mr_rmesg[82]),
        .I1(st_mr_rmesg[16]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[14]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[15]_INST_0 
       (.I0(st_mr_rmesg[83]),
        .I1(st_mr_rmesg[17]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[15]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[16]_INST_0 
       (.I0(st_mr_rmesg[84]),
        .I1(st_mr_rmesg[18]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[16]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[17]_INST_0 
       (.I0(st_mr_rmesg[85]),
        .I1(st_mr_rmesg[19]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[17]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[18]_INST_0 
       (.I0(st_mr_rmesg[86]),
        .I1(st_mr_rmesg[20]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[18]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[19]_INST_0 
       (.I0(st_mr_rmesg[87]),
        .I1(st_mr_rmesg[21]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[19]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[1]_INST_0 
       (.I0(st_mr_rmesg[69]),
        .I1(st_mr_rmesg[3]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[1]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[20]_INST_0 
       (.I0(st_mr_rmesg[88]),
        .I1(st_mr_rmesg[22]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[20]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[21]_INST_0 
       (.I0(st_mr_rmesg[89]),
        .I1(st_mr_rmesg[23]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[21]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[22]_INST_0 
       (.I0(st_mr_rmesg[90]),
        .I1(st_mr_rmesg[24]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[22]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[23]_INST_0 
       (.I0(st_mr_rmesg[91]),
        .I1(st_mr_rmesg[25]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[23]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[24]_INST_0 
       (.I0(st_mr_rmesg[92]),
        .I1(st_mr_rmesg[26]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[24]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[25]_INST_0 
       (.I0(st_mr_rmesg[93]),
        .I1(st_mr_rmesg[27]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[25]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[26]_INST_0 
       (.I0(st_mr_rmesg[94]),
        .I1(st_mr_rmesg[28]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[26]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[27]_INST_0 
       (.I0(st_mr_rmesg[95]),
        .I1(st_mr_rmesg[29]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[27]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[28]_INST_0 
       (.I0(st_mr_rmesg[96]),
        .I1(st_mr_rmesg[30]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[28]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[29]_INST_0 
       (.I0(st_mr_rmesg[97]),
        .I1(st_mr_rmesg[31]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[29]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[2]_INST_0 
       (.I0(st_mr_rmesg[70]),
        .I1(st_mr_rmesg[4]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[2]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[30]_INST_0 
       (.I0(st_mr_rmesg[98]),
        .I1(st_mr_rmesg[32]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[30]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[31]_INST_0 
       (.I0(st_mr_rmesg[99]),
        .I1(st_mr_rmesg[33]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[31]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[32]_INST_0 
       (.I0(st_mr_rmesg[100]),
        .I1(st_mr_rmesg[34]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[32]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[33]_INST_0 
       (.I0(st_mr_rmesg[101]),
        .I1(st_mr_rmesg[35]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[33]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[34]_INST_0 
       (.I0(st_mr_rmesg[102]),
        .I1(st_mr_rmesg[36]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[34]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[35]_INST_0 
       (.I0(st_mr_rmesg[103]),
        .I1(st_mr_rmesg[37]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[35]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[36]_INST_0 
       (.I0(st_mr_rmesg[104]),
        .I1(st_mr_rmesg[38]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[36]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[37]_INST_0 
       (.I0(st_mr_rmesg[105]),
        .I1(st_mr_rmesg[39]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[37]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[38]_INST_0 
       (.I0(st_mr_rmesg[106]),
        .I1(st_mr_rmesg[40]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[38]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[39]_INST_0 
       (.I0(st_mr_rmesg[107]),
        .I1(st_mr_rmesg[41]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[39]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[3]_INST_0 
       (.I0(st_mr_rmesg[71]),
        .I1(st_mr_rmesg[5]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[3]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[40]_INST_0 
       (.I0(st_mr_rmesg[108]),
        .I1(st_mr_rmesg[42]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[40]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[41]_INST_0 
       (.I0(st_mr_rmesg[109]),
        .I1(st_mr_rmesg[43]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[41]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[42]_INST_0 
       (.I0(st_mr_rmesg[110]),
        .I1(st_mr_rmesg[44]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[42]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[43]_INST_0 
       (.I0(st_mr_rmesg[111]),
        .I1(st_mr_rmesg[45]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[43]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[44]_INST_0 
       (.I0(st_mr_rmesg[112]),
        .I1(st_mr_rmesg[46]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[44]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[45]_INST_0 
       (.I0(st_mr_rmesg[113]),
        .I1(st_mr_rmesg[47]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[45]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[46]_INST_0 
       (.I0(st_mr_rmesg[114]),
        .I1(st_mr_rmesg[48]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[46]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[47]_INST_0 
       (.I0(st_mr_rmesg[115]),
        .I1(st_mr_rmesg[49]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[47]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[48]_INST_0 
       (.I0(st_mr_rmesg[116]),
        .I1(st_mr_rmesg[50]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[48]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[49]_INST_0 
       (.I0(st_mr_rmesg[117]),
        .I1(st_mr_rmesg[51]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[49]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[4]_INST_0 
       (.I0(st_mr_rmesg[72]),
        .I1(st_mr_rmesg[6]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[4]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[50]_INST_0 
       (.I0(st_mr_rmesg[118]),
        .I1(st_mr_rmesg[52]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[50]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[51]_INST_0 
       (.I0(st_mr_rmesg[119]),
        .I1(st_mr_rmesg[53]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[51]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[52]_INST_0 
       (.I0(st_mr_rmesg[120]),
        .I1(st_mr_rmesg[54]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[52]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[53]_INST_0 
       (.I0(st_mr_rmesg[121]),
        .I1(st_mr_rmesg[55]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[53]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[54]_INST_0 
       (.I0(st_mr_rmesg[122]),
        .I1(st_mr_rmesg[56]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[54]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[55]_INST_0 
       (.I0(st_mr_rmesg[123]),
        .I1(st_mr_rmesg[57]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[55]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[56]_INST_0 
       (.I0(st_mr_rmesg[124]),
        .I1(st_mr_rmesg[58]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[56]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[57]_INST_0 
       (.I0(st_mr_rmesg[125]),
        .I1(st_mr_rmesg[59]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[57]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[58]_INST_0 
       (.I0(st_mr_rmesg[126]),
        .I1(st_mr_rmesg[60]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[58]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[59]_INST_0 
       (.I0(st_mr_rmesg[127]),
        .I1(st_mr_rmesg[61]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[59]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[5]_INST_0 
       (.I0(st_mr_rmesg[73]),
        .I1(st_mr_rmesg[7]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[5]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[60]_INST_0 
       (.I0(st_mr_rmesg[128]),
        .I1(st_mr_rmesg[62]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[60]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[61]_INST_0 
       (.I0(st_mr_rmesg[129]),
        .I1(st_mr_rmesg[63]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[61]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[62]_INST_0 
       (.I0(st_mr_rmesg[130]),
        .I1(st_mr_rmesg[64]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[62]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[63]_INST_0 
       (.I0(st_mr_rmesg[131]),
        .I1(st_mr_rmesg[65]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[63]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[6]_INST_0 
       (.I0(st_mr_rmesg[74]),
        .I1(st_mr_rmesg[8]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[6]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[7]_INST_0 
       (.I0(st_mr_rmesg[75]),
        .I1(st_mr_rmesg[9]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[7]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[8]_INST_0 
       (.I0(st_mr_rmesg[76]),
        .I1(st_mr_rmesg[10]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[8]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[9]_INST_0 
       (.I0(st_mr_rmesg[77]),
        .I1(st_mr_rmesg[11]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[9]));
  LUT5 #(
    .INIT(32'h00AACCF0)) 
    \s_axi_rlast[0]_INST_0 
       (.I0(st_mr_rlast[2]),
        .I1(st_mr_rlast[1]),
        .I2(st_mr_rlast[0]),
        .I3(\skid_buffer_reg[66] ),
        .I4(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rlast));
  LUT4 #(
    .INIT(16'h0FAC)) 
    \s_axi_rresp[0]_INST_0 
       (.I0(st_mr_rmesg[66]),
        .I1(st_mr_rmesg[0]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rresp[0]));
  LUT4 #(
    .INIT(16'h0FAC)) 
    \s_axi_rresp[1]_INST_0 
       (.I0(st_mr_rmesg[67]),
        .I1(st_mr_rmesg[1]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rresp[1]));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_si_transactor" *) 
module bd_1_axi_crossbar_v2_1_16_si_transactor__parameterized0
   (\gen_single_thread.active_target_hot_reg[0]_0 ,
    \gen_single_thread.active_target_enc_reg[0]_0 ,
    \gen_single_thread.active_target_enc_reg[1]_0 ,
    st_aa_awvalid_qual,
    s_axi_bvalid,
    s_axi_bresp,
    SR,
    \m_ready_d_reg[1] ,
    aclk,
    \m_ready_d_reg[1]_0 ,
    \m_ready_d_reg[1]_1 ,
    \m_payload_i_reg[18] ,
    sel_3,
    s_axi_awaddr,
    \m_payload_i_reg[18]_0 ,
    sel_4,
    s_axi_bready,
    st_mr_bid,
    st_mr_bvalid,
    m_valid_i_reg,
    \m_payload_i_reg[2] ,
    st_mr_bmesg,
    s_axi_awready);
  output \gen_single_thread.active_target_hot_reg[0]_0 ;
  output \gen_single_thread.active_target_enc_reg[0]_0 ;
  output \gen_single_thread.active_target_enc_reg[1]_0 ;
  output [0:0]st_aa_awvalid_qual;
  output [0:0]s_axi_bvalid;
  output [1:0]s_axi_bresp;
  input [0:0]SR;
  input \m_ready_d_reg[1] ;
  input aclk;
  input \m_ready_d_reg[1]_0 ;
  input \m_ready_d_reg[1]_1 ;
  input \m_payload_i_reg[18] ;
  input sel_3;
  input [1:0]s_axi_awaddr;
  input \m_payload_i_reg[18]_0 ;
  input sel_4;
  input [0:0]s_axi_bready;
  input [1:0]st_mr_bid;
  input [1:0]st_mr_bvalid;
  input [0:0]m_valid_i_reg;
  input \m_payload_i_reg[2] ;
  input [3:0]st_mr_bmesg;
  input [0:0]s_axi_awready;

  wire \<const1> ;
  wire [0:0]SR;
  wire aclk;
  wire \gen_arbiter.m_grant_enc_i[0]_i_11_n_0 ;
  wire [1:0]\gen_single_thread.accept_cnt ;
  wire \gen_single_thread.accept_cnt[0]_i_1__0_n_0 ;
  wire \gen_single_thread.accept_cnt[1]_i_1__0_n_0 ;
  wire \gen_single_thread.active_target_enc_reg[0]_0 ;
  wire \gen_single_thread.active_target_enc_reg[1]_0 ;
  wire \gen_single_thread.active_target_hot_reg[0]_0 ;
  wire \m_payload_i_reg[18] ;
  wire \m_payload_i_reg[18]_0 ;
  wire \m_payload_i_reg[2] ;
  wire \m_ready_d_reg[1] ;
  wire \m_ready_d_reg[1]_0 ;
  wire \m_ready_d_reg[1]_1 ;
  wire [0:0]m_valid_i_reg;
  wire p_2_in;
  wire [1:0]s_axi_awaddr;
  wire [0:0]s_axi_awready;
  wire [0:0]s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire [0:0]s_axi_bvalid;
  wire \s_axi_bvalid[0]_INST_0_i_1_n_0 ;
  wire sel_3;
  wire sel_4;
  wire [0:0]st_aa_awvalid_qual;
  wire [1:0]st_mr_bid;
  wire [3:0]st_mr_bmesg;
  wire [1:0]st_mr_bvalid;

  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h20000000DFFFFFFF)) 
    \gen_arbiter.m_grant_enc_i[0]_i_11 
       (.I0(sel_3),
        .I1(s_axi_awaddr[1]),
        .I2(s_axi_awaddr[0]),
        .I3(\m_payload_i_reg[18]_0 ),
        .I4(sel_4),
        .I5(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .O(\gen_arbiter.m_grant_enc_i[0]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h0505FD05FD050505)) 
    \gen_arbiter.m_grant_enc_i[0]_i_4 
       (.I0(\gen_single_thread.accept_cnt [1]),
        .I1(p_2_in),
        .I2(\gen_single_thread.accept_cnt [0]),
        .I3(\gen_arbiter.m_grant_enc_i[0]_i_11_n_0 ),
        .I4(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .I5(\m_payload_i_reg[18] ),
        .O(st_aa_awvalid_qual));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT4 #(
    .INIT(16'h9962)) 
    \gen_single_thread.accept_cnt[0]_i_1__0 
       (.I0(s_axi_awready),
        .I1(p_2_in),
        .I2(\gen_single_thread.accept_cnt [1]),
        .I3(\gen_single_thread.accept_cnt [0]),
        .O(\gen_single_thread.accept_cnt[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT4 #(
    .INIT(16'hA68A)) 
    \gen_single_thread.accept_cnt[1]_i_1__0 
       (.I0(\gen_single_thread.accept_cnt [1]),
        .I1(\gen_single_thread.accept_cnt [0]),
        .I2(p_2_in),
        .I3(s_axi_awready),
        .O(\gen_single_thread.accept_cnt[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h2222AAAA02000000)) 
    \gen_single_thread.accept_cnt[1]_i_2__0 
       (.I0(s_axi_bready),
        .I1(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .I2(st_mr_bid[1]),
        .I3(st_mr_bvalid[1]),
        .I4(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .I5(\s_axi_bvalid[0]_INST_0_i_1_n_0 ),
        .O(p_2_in));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.accept_cnt_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_single_thread.accept_cnt[0]_i_1__0_n_0 ),
        .Q(\gen_single_thread.accept_cnt [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.accept_cnt_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_single_thread.accept_cnt[1]_i_1__0_n_0 ),
        .Q(\gen_single_thread.accept_cnt [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_enc_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d_reg[1]_0 ),
        .Q(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_enc_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d_reg[1]_1 ),
        .Q(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_hot_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d_reg[1] ),
        .Q(\gen_single_thread.active_target_hot_reg[0]_0 ),
        .R(SR));
  LUT4 #(
    .INIT(16'h0FAC)) 
    \s_axi_bresp[0]_INST_0 
       (.I0(st_mr_bmesg[2]),
        .I1(st_mr_bmesg[0]),
        .I2(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .I3(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .O(s_axi_bresp[0]));
  LUT4 #(
    .INIT(16'h0FAC)) 
    \s_axi_bresp[1]_INST_0 
       (.I0(st_mr_bmesg[3]),
        .I1(st_mr_bmesg[1]),
        .I2(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .I3(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .O(s_axi_bresp[1]));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \s_axi_bvalid[0]_INST_0 
       (.I0(\s_axi_bvalid[0]_INST_0_i_1_n_0 ),
        .I1(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .I2(st_mr_bvalid[1]),
        .I3(st_mr_bid[1]),
        .O(s_axi_bvalid));
  LUT6 #(
    .INIT(64'h08080808FF080808)) 
    \s_axi_bvalid[0]_INST_0_i_1 
       (.I0(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .I1(m_valid_i_reg),
        .I2(\m_payload_i_reg[2] ),
        .I3(\gen_single_thread.active_target_hot_reg[0]_0 ),
        .I4(st_mr_bvalid[0]),
        .I5(st_mr_bid[0]),
        .O(\s_axi_bvalid[0]_INST_0_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_si_transactor" *) 
module bd_1_axi_crossbar_v2_1_16_si_transactor__parameterized1
   (\m_payload_i_reg[0] ,
    \skid_buffer_reg[66] ,
    \skid_buffer_reg[66]_0 ,
    st_aa_arvalid_qual,
    s_axi_rresp,
    s_axi_rdata,
    s_axi_rlast,
    s_axi_rvalid,
    rready_carry,
    SR,
    \gen_arbiter.s_ready_i_reg[1] ,
    aclk,
    \gen_arbiter.s_ready_i_reg[1]_0 ,
    \gen_arbiter.s_ready_i_reg[1]_1 ,
    match_13,
    sel_3,
    s_axi_araddr,
    \m_payload_i_reg[18] ,
    sel_4,
    st_mr_rmesg,
    s_axi_rready,
    st_mr_rvalid,
    st_mr_rid,
    st_mr_rlast,
    \gen_single_thread.active_target_enc ,
    \gen_single_thread.active_target_hot_reg[0]_0 ,
    \gen_arbiter.s_ready_i_reg[1]_2 );
  output \m_payload_i_reg[0] ;
  output \skid_buffer_reg[66] ;
  output \skid_buffer_reg[66]_0 ;
  output [0:0]st_aa_arvalid_qual;
  output [1:0]s_axi_rresp;
  output [63:0]s_axi_rdata;
  output [0:0]s_axi_rlast;
  output [0:0]s_axi_rvalid;
  output [2:0]rready_carry;
  input [0:0]SR;
  input \gen_arbiter.s_ready_i_reg[1] ;
  input aclk;
  input \gen_arbiter.s_ready_i_reg[1]_0 ;
  input \gen_arbiter.s_ready_i_reg[1]_1 ;
  input match_13;
  input sel_3;
  input [1:0]s_axi_araddr;
  input \m_payload_i_reg[18] ;
  input sel_4;
  input [131:0]st_mr_rmesg;
  input [1:0]s_axi_rready;
  input [2:0]st_mr_rvalid;
  input [2:0]st_mr_rid;
  input [2:0]st_mr_rlast;
  input [1:0]\gen_single_thread.active_target_enc ;
  input \gen_single_thread.active_target_hot_reg[0]_0 ;
  input \gen_arbiter.s_ready_i_reg[1]_2 ;

  wire \<const1> ;
  wire [0:0]SR;
  wire aclk;
  wire \gen_arbiter.m_grant_enc_i[0]_i_15__0_n_0 ;
  wire \gen_arbiter.s_ready_i_reg[1] ;
  wire \gen_arbiter.s_ready_i_reg[1]_0 ;
  wire \gen_arbiter.s_ready_i_reg[1]_1 ;
  wire \gen_arbiter.s_ready_i_reg[1]_2 ;
  wire [1:0]\gen_single_thread.accept_cnt ;
  wire \gen_single_thread.accept_cnt[0]_i_1__1_n_0 ;
  wire \gen_single_thread.accept_cnt[1]_i_1__1_n_0 ;
  wire [1:0]\gen_single_thread.active_target_enc ;
  wire \gen_single_thread.active_target_hot_reg[0]_0 ;
  wire \m_payload_i_reg[0] ;
  wire \m_payload_i_reg[18] ;
  wire match_13;
  wire p_2_in;
  wire [2:0]rready_carry;
  wire [1:0]s_axi_araddr;
  wire [63:0]s_axi_rdata;
  wire [0:0]s_axi_rlast;
  wire [1:0]s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire [0:0]s_axi_rvalid;
  wire \s_axi_rvalid[1]_INST_0_i_1_n_0 ;
  wire sel_3;
  wire sel_4;
  wire \skid_buffer_reg[66] ;
  wire \skid_buffer_reg[66]_0 ;
  wire [0:0]st_aa_arvalid_qual;
  wire [2:0]st_mr_rid;
  wire [2:0]st_mr_rlast;
  wire [131:0]st_mr_rmesg;
  wire [2:0]st_mr_rvalid;

  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h20000000DFFFFFFF)) 
    \gen_arbiter.m_grant_enc_i[0]_i_15__0 
       (.I0(sel_3),
        .I1(s_axi_araddr[1]),
        .I2(s_axi_araddr[0]),
        .I3(\m_payload_i_reg[18] ),
        .I4(sel_4),
        .I5(\skid_buffer_reg[66] ),
        .O(\gen_arbiter.m_grant_enc_i[0]_i_15__0_n_0 ));
  LUT6 #(
    .INIT(64'h0505FD05FD050505)) 
    \gen_arbiter.m_grant_enc_i[0]_i_6__0 
       (.I0(\gen_single_thread.accept_cnt [1]),
        .I1(p_2_in),
        .I2(\gen_single_thread.accept_cnt [0]),
        .I3(\gen_arbiter.m_grant_enc_i[0]_i_15__0_n_0 ),
        .I4(\skid_buffer_reg[66]_0 ),
        .I5(match_13),
        .O(st_aa_arvalid_qual));
  LUT5 #(
    .INIT(32'h8F808080)) 
    \gen_master_slots[0].r_issuing_cnt[1]_i_3 
       (.I0(\m_payload_i_reg[0] ),
        .I1(s_axi_rready[1]),
        .I2(st_mr_rid[0]),
        .I3(s_axi_rready[0]),
        .I4(\gen_single_thread.active_target_hot_reg[0]_0 ),
        .O(rready_carry[0]));
  LUT5 #(
    .INIT(32'h8F808080)) 
    \gen_master_slots[1].r_issuing_cnt[9]_i_3 
       (.I0(\skid_buffer_reg[66] ),
        .I1(s_axi_rready[1]),
        .I2(st_mr_rid[1]),
        .I3(s_axi_rready[0]),
        .I4(\gen_single_thread.active_target_enc [0]),
        .O(rready_carry[1]));
  LUT5 #(
    .INIT(32'h8F808080)) 
    \gen_master_slots[2].r_issuing_cnt[16]_i_3 
       (.I0(\skid_buffer_reg[66]_0 ),
        .I1(s_axi_rready[1]),
        .I2(st_mr_rid[2]),
        .I3(s_axi_rready[0]),
        .I4(\gen_single_thread.active_target_enc [1]),
        .O(rready_carry[2]));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'h9962)) 
    \gen_single_thread.accept_cnt[0]_i_1__1 
       (.I0(\gen_arbiter.s_ready_i_reg[1]_2 ),
        .I1(p_2_in),
        .I2(\gen_single_thread.accept_cnt [1]),
        .I3(\gen_single_thread.accept_cnt [0]),
        .O(\gen_single_thread.accept_cnt[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'hA68A)) 
    \gen_single_thread.accept_cnt[1]_i_1__1 
       (.I0(\gen_single_thread.accept_cnt [1]),
        .I1(\gen_single_thread.accept_cnt [0]),
        .I2(p_2_in),
        .I3(\gen_arbiter.s_ready_i_reg[1]_2 ),
        .O(\gen_single_thread.accept_cnt[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hA888888800000000)) 
    \gen_single_thread.accept_cnt[1]_i_2__1 
       (.I0(s_axi_rready[1]),
        .I1(\s_axi_rvalid[1]_INST_0_i_1_n_0 ),
        .I2(\skid_buffer_reg[66] ),
        .I3(st_mr_rvalid[1]),
        .I4(st_mr_rid[1]),
        .I5(s_axi_rlast),
        .O(p_2_in));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.accept_cnt_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_single_thread.accept_cnt[0]_i_1__1_n_0 ),
        .Q(\gen_single_thread.accept_cnt [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.accept_cnt_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_single_thread.accept_cnt[1]_i_1__1_n_0 ),
        .Q(\gen_single_thread.accept_cnt [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_enc_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.s_ready_i_reg[1]_0 ),
        .Q(\skid_buffer_reg[66] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_enc_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.s_ready_i_reg[1]_1 ),
        .Q(\skid_buffer_reg[66]_0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_hot_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_arbiter.s_ready_i_reg[1] ),
        .Q(\m_payload_i_reg[0] ),
        .R(SR));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[100]_INST_0 
       (.I0(st_mr_rmesg[104]),
        .I1(st_mr_rmesg[38]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[36]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[101]_INST_0 
       (.I0(st_mr_rmesg[105]),
        .I1(st_mr_rmesg[39]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[37]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[102]_INST_0 
       (.I0(st_mr_rmesg[106]),
        .I1(st_mr_rmesg[40]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[38]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[103]_INST_0 
       (.I0(st_mr_rmesg[107]),
        .I1(st_mr_rmesg[41]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[39]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[104]_INST_0 
       (.I0(st_mr_rmesg[108]),
        .I1(st_mr_rmesg[42]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[40]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[105]_INST_0 
       (.I0(st_mr_rmesg[109]),
        .I1(st_mr_rmesg[43]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[41]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[106]_INST_0 
       (.I0(st_mr_rmesg[110]),
        .I1(st_mr_rmesg[44]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[42]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[107]_INST_0 
       (.I0(st_mr_rmesg[111]),
        .I1(st_mr_rmesg[45]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[43]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[108]_INST_0 
       (.I0(st_mr_rmesg[112]),
        .I1(st_mr_rmesg[46]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[44]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[109]_INST_0 
       (.I0(st_mr_rmesg[113]),
        .I1(st_mr_rmesg[47]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[45]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[110]_INST_0 
       (.I0(st_mr_rmesg[114]),
        .I1(st_mr_rmesg[48]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[46]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[111]_INST_0 
       (.I0(st_mr_rmesg[115]),
        .I1(st_mr_rmesg[49]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[47]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[112]_INST_0 
       (.I0(st_mr_rmesg[116]),
        .I1(st_mr_rmesg[50]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[48]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[113]_INST_0 
       (.I0(st_mr_rmesg[117]),
        .I1(st_mr_rmesg[51]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[49]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[114]_INST_0 
       (.I0(st_mr_rmesg[118]),
        .I1(st_mr_rmesg[52]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[50]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[115]_INST_0 
       (.I0(st_mr_rmesg[119]),
        .I1(st_mr_rmesg[53]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[51]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[116]_INST_0 
       (.I0(st_mr_rmesg[120]),
        .I1(st_mr_rmesg[54]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[52]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[117]_INST_0 
       (.I0(st_mr_rmesg[121]),
        .I1(st_mr_rmesg[55]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[53]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[118]_INST_0 
       (.I0(st_mr_rmesg[122]),
        .I1(st_mr_rmesg[56]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[54]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[119]_INST_0 
       (.I0(st_mr_rmesg[123]),
        .I1(st_mr_rmesg[57]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[55]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[120]_INST_0 
       (.I0(st_mr_rmesg[124]),
        .I1(st_mr_rmesg[58]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[56]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[121]_INST_0 
       (.I0(st_mr_rmesg[125]),
        .I1(st_mr_rmesg[59]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[57]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[122]_INST_0 
       (.I0(st_mr_rmesg[126]),
        .I1(st_mr_rmesg[60]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[58]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[123]_INST_0 
       (.I0(st_mr_rmesg[127]),
        .I1(st_mr_rmesg[61]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[59]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[124]_INST_0 
       (.I0(st_mr_rmesg[128]),
        .I1(st_mr_rmesg[62]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[60]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[125]_INST_0 
       (.I0(st_mr_rmesg[129]),
        .I1(st_mr_rmesg[63]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[61]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[126]_INST_0 
       (.I0(st_mr_rmesg[130]),
        .I1(st_mr_rmesg[64]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[62]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[127]_INST_0 
       (.I0(st_mr_rmesg[131]),
        .I1(st_mr_rmesg[65]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[63]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[64]_INST_0 
       (.I0(st_mr_rmesg[68]),
        .I1(st_mr_rmesg[2]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[0]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[65]_INST_0 
       (.I0(st_mr_rmesg[69]),
        .I1(st_mr_rmesg[3]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[1]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[66]_INST_0 
       (.I0(st_mr_rmesg[70]),
        .I1(st_mr_rmesg[4]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[2]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[67]_INST_0 
       (.I0(st_mr_rmesg[71]),
        .I1(st_mr_rmesg[5]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[3]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[68]_INST_0 
       (.I0(st_mr_rmesg[72]),
        .I1(st_mr_rmesg[6]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[4]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[69]_INST_0 
       (.I0(st_mr_rmesg[73]),
        .I1(st_mr_rmesg[7]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[5]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[70]_INST_0 
       (.I0(st_mr_rmesg[74]),
        .I1(st_mr_rmesg[8]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[6]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[71]_INST_0 
       (.I0(st_mr_rmesg[75]),
        .I1(st_mr_rmesg[9]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[7]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[72]_INST_0 
       (.I0(st_mr_rmesg[76]),
        .I1(st_mr_rmesg[10]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[8]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[73]_INST_0 
       (.I0(st_mr_rmesg[77]),
        .I1(st_mr_rmesg[11]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[9]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[74]_INST_0 
       (.I0(st_mr_rmesg[78]),
        .I1(st_mr_rmesg[12]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[10]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[75]_INST_0 
       (.I0(st_mr_rmesg[79]),
        .I1(st_mr_rmesg[13]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[11]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[76]_INST_0 
       (.I0(st_mr_rmesg[80]),
        .I1(st_mr_rmesg[14]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[12]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[77]_INST_0 
       (.I0(st_mr_rmesg[81]),
        .I1(st_mr_rmesg[15]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[13]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[78]_INST_0 
       (.I0(st_mr_rmesg[82]),
        .I1(st_mr_rmesg[16]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[14]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[79]_INST_0 
       (.I0(st_mr_rmesg[83]),
        .I1(st_mr_rmesg[17]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[15]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[80]_INST_0 
       (.I0(st_mr_rmesg[84]),
        .I1(st_mr_rmesg[18]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[16]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[81]_INST_0 
       (.I0(st_mr_rmesg[85]),
        .I1(st_mr_rmesg[19]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[17]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[82]_INST_0 
       (.I0(st_mr_rmesg[86]),
        .I1(st_mr_rmesg[20]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[18]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[83]_INST_0 
       (.I0(st_mr_rmesg[87]),
        .I1(st_mr_rmesg[21]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[19]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[84]_INST_0 
       (.I0(st_mr_rmesg[88]),
        .I1(st_mr_rmesg[22]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[20]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[85]_INST_0 
       (.I0(st_mr_rmesg[89]),
        .I1(st_mr_rmesg[23]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[21]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[86]_INST_0 
       (.I0(st_mr_rmesg[90]),
        .I1(st_mr_rmesg[24]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[22]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[87]_INST_0 
       (.I0(st_mr_rmesg[91]),
        .I1(st_mr_rmesg[25]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[23]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[88]_INST_0 
       (.I0(st_mr_rmesg[92]),
        .I1(st_mr_rmesg[26]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[24]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[89]_INST_0 
       (.I0(st_mr_rmesg[93]),
        .I1(st_mr_rmesg[27]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[25]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[90]_INST_0 
       (.I0(st_mr_rmesg[94]),
        .I1(st_mr_rmesg[28]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[26]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[91]_INST_0 
       (.I0(st_mr_rmesg[95]),
        .I1(st_mr_rmesg[29]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[27]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[92]_INST_0 
       (.I0(st_mr_rmesg[96]),
        .I1(st_mr_rmesg[30]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[28]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[93]_INST_0 
       (.I0(st_mr_rmesg[97]),
        .I1(st_mr_rmesg[31]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[29]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[94]_INST_0 
       (.I0(st_mr_rmesg[98]),
        .I1(st_mr_rmesg[32]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[30]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[95]_INST_0 
       (.I0(st_mr_rmesg[99]),
        .I1(st_mr_rmesg[33]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[31]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[96]_INST_0 
       (.I0(st_mr_rmesg[100]),
        .I1(st_mr_rmesg[34]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[32]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[97]_INST_0 
       (.I0(st_mr_rmesg[101]),
        .I1(st_mr_rmesg[35]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[33]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[98]_INST_0 
       (.I0(st_mr_rmesg[102]),
        .I1(st_mr_rmesg[36]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[34]));
  LUT4 #(
    .INIT(16'h00AC)) 
    \s_axi_rdata[99]_INST_0 
       (.I0(st_mr_rmesg[103]),
        .I1(st_mr_rmesg[37]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rdata[35]));
  LUT5 #(
    .INIT(32'h00AACCF0)) 
    \s_axi_rlast[1]_INST_0 
       (.I0(st_mr_rlast[2]),
        .I1(st_mr_rlast[1]),
        .I2(st_mr_rlast[0]),
        .I3(\skid_buffer_reg[66] ),
        .I4(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rlast));
  LUT4 #(
    .INIT(16'h0FAC)) 
    \s_axi_rresp[2]_INST_0 
       (.I0(st_mr_rmesg[66]),
        .I1(st_mr_rmesg[0]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rresp[0]));
  LUT4 #(
    .INIT(16'h0FAC)) 
    \s_axi_rresp[3]_INST_0 
       (.I0(st_mr_rmesg[67]),
        .I1(st_mr_rmesg[1]),
        .I2(\skid_buffer_reg[66] ),
        .I3(\skid_buffer_reg[66]_0 ),
        .O(s_axi_rresp[1]));
  LUT4 #(
    .INIT(16'hEAAA)) 
    \s_axi_rvalid[1]_INST_0 
       (.I0(\s_axi_rvalid[1]_INST_0_i_1_n_0 ),
        .I1(\skid_buffer_reg[66] ),
        .I2(st_mr_rvalid[1]),
        .I3(st_mr_rid[1]),
        .O(s_axi_rvalid));
  LUT6 #(
    .INIT(64'hFF80808080808080)) 
    \s_axi_rvalid[1]_INST_0_i_1 
       (.I0(\skid_buffer_reg[66]_0 ),
        .I1(st_mr_rvalid[2]),
        .I2(st_mr_rid[2]),
        .I3(\m_payload_i_reg[0] ),
        .I4(st_mr_rvalid[0]),
        .I5(st_mr_rid[0]),
        .O(\s_axi_rvalid[1]_INST_0_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_si_transactor" *) 
module bd_1_axi_crossbar_v2_1_16_si_transactor__parameterized2
   (\gen_single_thread.active_target_hot_reg[0]_0 ,
    \gen_single_thread.active_target_enc_reg[0]_0 ,
    \gen_single_thread.active_target_enc_reg[1]_0 ,
    st_aa_awvalid_qual,
    s_axi_bvalid,
    s_axi_bresp,
    bready_carry,
    SR,
    \m_ready_d_reg[1] ,
    aclk,
    \m_ready_d_reg[1]_0 ,
    \m_ready_d_reg[1]_1 ,
    \m_payload_i_reg[18] ,
    sel_3,
    s_axi_awaddr,
    \m_payload_i_reg[18]_0 ,
    sel_4,
    s_axi_bready,
    st_mr_bvalid,
    st_mr_bid,
    \m_payload_i_reg[2] ,
    m_valid_i_reg,
    st_mr_bmesg,
    \gen_single_thread.active_target_enc_3 ,
    \gen_single_thread.active_target_hot_2 ,
    s_axi_awready);
  output \gen_single_thread.active_target_hot_reg[0]_0 ;
  output \gen_single_thread.active_target_enc_reg[0]_0 ;
  output \gen_single_thread.active_target_enc_reg[1]_0 ;
  output [0:0]st_aa_awvalid_qual;
  output [0:0]s_axi_bvalid;
  output [1:0]s_axi_bresp;
  output [2:0]bready_carry;
  input [0:0]SR;
  input \m_ready_d_reg[1] ;
  input aclk;
  input \m_ready_d_reg[1]_0 ;
  input \m_ready_d_reg[1]_1 ;
  input \m_payload_i_reg[18] ;
  input sel_3;
  input [1:0]s_axi_awaddr;
  input \m_payload_i_reg[18]_0 ;
  input sel_4;
  input [1:0]s_axi_bready;
  input [1:0]st_mr_bvalid;
  input [1:0]st_mr_bid;
  input \m_payload_i_reg[2] ;
  input [0:0]m_valid_i_reg;
  input [3:0]st_mr_bmesg;
  input [1:0]\gen_single_thread.active_target_enc_3 ;
  input [0:0]\gen_single_thread.active_target_hot_2 ;
  input [0:0]s_axi_awready;

  wire \<const1> ;
  wire [0:0]SR;
  wire aclk;
  wire [2:0]bready_carry;
  wire \gen_arbiter.m_grant_enc_i[0]_i_16_n_0 ;
  wire [1:0]\gen_single_thread.accept_cnt ;
  wire \gen_single_thread.accept_cnt[0]_i_1__2_n_0 ;
  wire \gen_single_thread.accept_cnt[1]_i_1__2_n_0 ;
  wire [1:0]\gen_single_thread.active_target_enc_3 ;
  wire \gen_single_thread.active_target_enc_reg[0]_0 ;
  wire \gen_single_thread.active_target_enc_reg[1]_0 ;
  wire [0:0]\gen_single_thread.active_target_hot_2 ;
  wire \gen_single_thread.active_target_hot_reg[0]_0 ;
  wire \m_payload_i_reg[18] ;
  wire \m_payload_i_reg[18]_0 ;
  wire \m_payload_i_reg[2] ;
  wire \m_ready_d_reg[1] ;
  wire \m_ready_d_reg[1]_0 ;
  wire \m_ready_d_reg[1]_1 ;
  wire [0:0]m_valid_i_reg;
  wire p_2_in;
  wire [1:0]s_axi_awaddr;
  wire [0:0]s_axi_awready;
  wire [1:0]s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire [0:0]s_axi_bvalid;
  wire \s_axi_bvalid[1]_INST_0_i_1_n_0 ;
  wire sel_3;
  wire sel_4;
  wire [0:0]st_aa_awvalid_qual;
  wire [1:0]st_mr_bid;
  wire [3:0]st_mr_bmesg;
  wire [1:0]st_mr_bvalid;

  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h20000000DFFFFFFF)) 
    \gen_arbiter.m_grant_enc_i[0]_i_16 
       (.I0(sel_3),
        .I1(s_axi_awaddr[1]),
        .I2(s_axi_awaddr[0]),
        .I3(\m_payload_i_reg[18]_0 ),
        .I4(sel_4),
        .I5(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .O(\gen_arbiter.m_grant_enc_i[0]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'h0505FD05FD050505)) 
    \gen_arbiter.m_grant_enc_i[0]_i_6 
       (.I0(\gen_single_thread.accept_cnt [1]),
        .I1(p_2_in),
        .I2(\gen_single_thread.accept_cnt [0]),
        .I3(\gen_arbiter.m_grant_enc_i[0]_i_16_n_0 ),
        .I4(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .I5(\m_payload_i_reg[18] ),
        .O(st_aa_awvalid_qual));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT4 #(
    .INIT(16'h9962)) 
    \gen_single_thread.accept_cnt[0]_i_1__2 
       (.I0(s_axi_awready),
        .I1(p_2_in),
        .I2(\gen_single_thread.accept_cnt [1]),
        .I3(\gen_single_thread.accept_cnt [0]),
        .O(\gen_single_thread.accept_cnt[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT4 #(
    .INIT(16'hA68A)) 
    \gen_single_thread.accept_cnt[1]_i_1__2 
       (.I0(\gen_single_thread.accept_cnt [1]),
        .I1(\gen_single_thread.accept_cnt [0]),
        .I2(p_2_in),
        .I3(s_axi_awready),
        .O(\gen_single_thread.accept_cnt[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h2222AAAA20000000)) 
    \gen_single_thread.accept_cnt[1]_i_2 
       (.I0(s_axi_bready[1]),
        .I1(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .I2(st_mr_bvalid[1]),
        .I3(st_mr_bid[1]),
        .I4(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .I5(\s_axi_bvalid[1]_INST_0_i_1_n_0 ),
        .O(p_2_in));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.accept_cnt_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_single_thread.accept_cnt[0]_i_1__2_n_0 ),
        .Q(\gen_single_thread.accept_cnt [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.accept_cnt_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_single_thread.accept_cnt[1]_i_1__2_n_0 ),
        .Q(\gen_single_thread.accept_cnt [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_enc_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d_reg[1]_0 ),
        .Q(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_enc_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d_reg[1]_1 ),
        .Q(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \gen_single_thread.active_target_hot_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d_reg[1] ),
        .Q(\gen_single_thread.active_target_hot_reg[0]_0 ),
        .R(SR));
  LUT5 #(
    .INIT(32'h8F808080)) 
    m_valid_i_i_2
       (.I0(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .I1(s_axi_bready[1]),
        .I2(\m_payload_i_reg[2] ),
        .I3(s_axi_bready[0]),
        .I4(\gen_single_thread.active_target_enc_3 [1]),
        .O(bready_carry[2]));
  LUT4 #(
    .INIT(16'h0FAC)) 
    \s_axi_bresp[2]_INST_0 
       (.I0(st_mr_bmesg[2]),
        .I1(st_mr_bmesg[0]),
        .I2(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .I3(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .O(s_axi_bresp[0]));
  LUT4 #(
    .INIT(16'h0FAC)) 
    \s_axi_bresp[3]_INST_0 
       (.I0(st_mr_bmesg[3]),
        .I1(st_mr_bmesg[1]),
        .I2(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .I3(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .O(s_axi_bresp[1]));
  LUT4 #(
    .INIT(16'hEAAA)) 
    \s_axi_bvalid[1]_INST_0 
       (.I0(\s_axi_bvalid[1]_INST_0_i_1_n_0 ),
        .I1(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .I2(st_mr_bid[1]),
        .I3(st_mr_bvalid[1]),
        .O(s_axi_bvalid));
  LUT6 #(
    .INIT(64'hFF80808080808080)) 
    \s_axi_bvalid[1]_INST_0_i_1 
       (.I0(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .I1(\m_payload_i_reg[2] ),
        .I2(m_valid_i_reg),
        .I3(\gen_single_thread.active_target_hot_reg[0]_0 ),
        .I4(st_mr_bid[0]),
        .I5(st_mr_bvalid[0]),
        .O(\s_axi_bvalid[1]_INST_0_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h8F808080)) 
    s_ready_i_i_2
       (.I0(\gen_single_thread.active_target_hot_reg[0]_0 ),
        .I1(s_axi_bready[1]),
        .I2(st_mr_bid[0]),
        .I3(s_axi_bready[0]),
        .I4(\gen_single_thread.active_target_hot_2 ),
        .O(bready_carry[0]));
  LUT5 #(
    .INIT(32'h8F808080)) 
    s_ready_i_i_3
       (.I0(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .I1(s_axi_bready[1]),
        .I2(st_mr_bid[1]),
        .I3(s_axi_bready[0]),
        .I4(\gen_single_thread.active_target_enc_3 [0]),
        .O(bready_carry[1]));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_splitter" *) 
module bd_1_axi_crossbar_v2_1_16_splitter
   (s_axi_awready,
    \m_ready_d_reg[0]_0 ,
    \m_ready_d_reg[0]_1 ,
    \storage_data1_reg[0] ,
    \storage_data1_reg[0]_0 ,
    ss_wr_awvalid_0,
    s_ready_i_reg,
    \gen_arbiter.s_ready_i_reg[0] ,
    s_axi_awvalid,
    out0,
    aresetn_d,
    aclk);
  output [0:0]s_axi_awready;
  output \m_ready_d_reg[0]_0 ;
  output \m_ready_d_reg[0]_1 ;
  output \storage_data1_reg[0] ;
  output \storage_data1_reg[0]_0 ;
  output ss_wr_awvalid_0;
  input s_ready_i_reg;
  input \gen_arbiter.s_ready_i_reg[0] ;
  input [0:0]s_axi_awvalid;
  input [1:0]out0;
  input aresetn_d;
  input aclk;

  wire \<const0> ;
  wire \<const1> ;
  wire aclk;
  wire aresetn_d;
  wire \gen_arbiter.s_ready_i_reg[0] ;
  wire \m_ready_d[0]_i_1_n_0 ;
  wire \m_ready_d[1]_i_1_n_0 ;
  wire \m_ready_d_reg[0]_0 ;
  wire \m_ready_d_reg[0]_1 ;
  wire [1:0]out0;
  wire [0:0]s_axi_awready;
  wire [0:0]s_axi_awvalid;
  wire s_ready_i_reg;
  wire ss_wr_awvalid_0;
  wire \storage_data1_reg[0] ;
  wire \storage_data1_reg[0]_0 ;

  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_onehot_state[2]_i_2 
       (.I0(s_axi_awvalid),
        .I1(\m_ready_d_reg[0]_0 ),
        .O(ss_wr_awvalid_0));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h000C0008000C0000)) 
    \m_ready_d[0]_i_1 
       (.I0(s_axi_awvalid),
        .I1(aresetn_d),
        .I2(\m_ready_d_reg[0]_0 ),
        .I3(s_ready_i_reg),
        .I4(\m_ready_d_reg[0]_1 ),
        .I5(\gen_arbiter.s_ready_i_reg[0] ),
        .O(\m_ready_d[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000C8C0)) 
    \m_ready_d[1]_i_1 
       (.I0(s_axi_awvalid),
        .I1(aresetn_d),
        .I2(\m_ready_d_reg[0]_0 ),
        .I3(s_ready_i_reg),
        .I4(\m_ready_d_reg[0]_1 ),
        .I5(\gen_arbiter.s_ready_i_reg[0] ),
        .O(\m_ready_d[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_ready_d_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d[0]_i_1_n_0 ),
        .Q(\m_ready_d_reg[0]_1 ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_ready_d_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d[1]_i_1_n_0 ),
        .Q(\m_ready_d_reg[0]_0 ),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT4 #(
    .INIT(16'hEEE0)) 
    \s_axi_awready[0]_INST_0 
       (.I0(\m_ready_d_reg[0]_0 ),
        .I1(s_ready_i_reg),
        .I2(\m_ready_d_reg[0]_1 ),
        .I3(\gen_arbiter.s_ready_i_reg[0] ),
        .O(s_axi_awready));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \storage_data1[1]_i_3 
       (.I0(\m_ready_d_reg[0]_0 ),
        .I1(s_axi_awvalid),
        .I2(out0[1]),
        .O(\storage_data1_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \storage_data1[1]_i_4 
       (.I0(\m_ready_d_reg[0]_0 ),
        .I1(s_axi_awvalid),
        .I2(out0[0]),
        .O(\storage_data1_reg[0] ));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_splitter" *) 
module bd_1_axi_crossbar_v2_1_16_splitter_45
   (s_axi_awready,
    \m_ready_d_reg[0]_0 ,
    \m_ready_d_reg[0]_1 ,
    \storage_data1_reg[0] ,
    \storage_data1_reg[0]_0 ,
    ss_wr_awvalid_1,
    s_ready_i_reg,
    \gen_arbiter.s_ready_i_reg[1] ,
    s_axi_awvalid,
    out0,
    aresetn_d,
    aclk);
  output [0:0]s_axi_awready;
  output \m_ready_d_reg[0]_0 ;
  output \m_ready_d_reg[0]_1 ;
  output \storage_data1_reg[0] ;
  output \storage_data1_reg[0]_0 ;
  output ss_wr_awvalid_1;
  input s_ready_i_reg;
  input \gen_arbiter.s_ready_i_reg[1] ;
  input [0:0]s_axi_awvalid;
  input [1:0]out0;
  input aresetn_d;
  input aclk;

  wire \<const0> ;
  wire \<const1> ;
  wire aclk;
  wire aresetn_d;
  wire \gen_arbiter.s_ready_i_reg[1] ;
  wire \m_ready_d[0]_i_1_n_0 ;
  wire \m_ready_d[1]_i_1_n_0 ;
  wire \m_ready_d_reg[0]_0 ;
  wire \m_ready_d_reg[0]_1 ;
  wire [1:0]out0;
  wire [0:0]s_axi_awready;
  wire [0:0]s_axi_awvalid;
  wire s_ready_i_reg;
  wire ss_wr_awvalid_1;
  wire \storage_data1_reg[0] ;
  wire \storage_data1_reg[0]_0 ;

  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_onehot_state[2]_i_2__0 
       (.I0(s_axi_awvalid),
        .I1(\m_ready_d_reg[0]_0 ),
        .O(ss_wr_awvalid_1));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h000C0008000C0000)) 
    \m_ready_d[0]_i_1 
       (.I0(s_axi_awvalid),
        .I1(aresetn_d),
        .I2(\m_ready_d_reg[0]_0 ),
        .I3(s_ready_i_reg),
        .I4(\m_ready_d_reg[0]_1 ),
        .I5(\gen_arbiter.s_ready_i_reg[1] ),
        .O(\m_ready_d[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000C8C0)) 
    \m_ready_d[1]_i_1 
       (.I0(s_axi_awvalid),
        .I1(aresetn_d),
        .I2(\m_ready_d_reg[0]_0 ),
        .I3(s_ready_i_reg),
        .I4(\m_ready_d_reg[0]_1 ),
        .I5(\gen_arbiter.s_ready_i_reg[1] ),
        .O(\m_ready_d[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_ready_d_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d[0]_i_1_n_0 ),
        .Q(\m_ready_d_reg[0]_1 ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_ready_d_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d[1]_i_1_n_0 ),
        .Q(\m_ready_d_reg[0]_0 ),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT4 #(
    .INIT(16'hEEE0)) 
    \s_axi_awready[1]_INST_0 
       (.I0(\m_ready_d_reg[0]_0 ),
        .I1(s_ready_i_reg),
        .I2(\m_ready_d_reg[0]_1 ),
        .I3(\gen_arbiter.s_ready_i_reg[1] ),
        .O(s_axi_awready));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \storage_data1[1]_i_3__0 
       (.I0(\m_ready_d_reg[0]_0 ),
        .I1(s_axi_awvalid),
        .I2(out0[1]),
        .O(\storage_data1_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \storage_data1[1]_i_4__0 
       (.I0(\m_ready_d_reg[0]_0 ),
        .I1(s_axi_awvalid),
        .I2(out0[0]),
        .O(\storage_data1_reg[0] ));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_splitter" *) 
module bd_1_axi_crossbar_v2_1_16_splitter_47
   (\gen_master_slots[1].w_issuing_cnt_reg[8] ,
    \m_ready_d_reg[1]_0 ,
    m_ready_d,
    \gen_arbiter.m_valid_i_reg ,
    aresetn_d,
    mi_awready_mux__1,
    s_ready_i0__1,
    Q,
    aresetn_d_reg,
    aclk);
  output \gen_master_slots[1].w_issuing_cnt_reg[8] ;
  output \m_ready_d_reg[1]_0 ;
  output [0:0]m_ready_d;
  input \gen_arbiter.m_valid_i_reg ;
  input aresetn_d;
  input mi_awready_mux__1;
  input [0:0]s_ready_i0__1;
  input [2:0]Q;
  input aresetn_d_reg;
  input aclk;

  wire \<const0> ;
  wire \<const1> ;
  wire [2:0]Q;
  wire aclk;
  wire aresetn_d;
  wire aresetn_d_reg;
  wire \gen_arbiter.m_valid_i_reg ;
  wire \gen_master_slots[1].w_issuing_cnt_reg[8] ;
  wire [0:0]m_ready_d;
  wire \m_ready_d[0]_i_1_n_0 ;
  wire \m_ready_d[1]_i_1_n_0 ;
  wire \m_ready_d_reg[1]_0 ;
  wire mi_awready_mux__1;
  wire [0:0]s_ready_i0__1;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \gen_master_slots[1].w_issuing_cnt[9]_i_2 
       (.I0(\m_ready_d_reg[1]_0 ),
        .I1(\gen_arbiter.m_valid_i_reg ),
        .O(\gen_master_slots[1].w_issuing_cnt_reg[8] ));
  LUT6 #(
    .INIT(64'h00000000FFFEAAAA)) 
    \m_ready_d[0]_i_1 
       (.I0(m_ready_d),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(\gen_arbiter.m_valid_i_reg ),
        .I5(aresetn_d_reg),
        .O(\m_ready_d[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT5 #(
    .INIT(32'h0000C8C0)) 
    \m_ready_d[1]_i_1 
       (.I0(\gen_arbiter.m_valid_i_reg ),
        .I1(aresetn_d),
        .I2(\m_ready_d_reg[1]_0 ),
        .I3(mi_awready_mux__1),
        .I4(s_ready_i0__1),
        .O(\m_ready_d[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_ready_d_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d[0]_i_1_n_0 ),
        .Q(m_ready_d),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_ready_d_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_ready_d[1]_i_1_n_0 ),
        .Q(\m_ready_d_reg[1]_0 ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_wdata_mux" *) 
module bd_1_axi_crossbar_v2_1_16_wdata_mux
   (storage_data2,
    m_avalid,
    \skid_buffer_reg[72] ,
    out0,
    load_s1,
    m_axi_wlast,
    m_axi_wstrb,
    m_axi_wdata,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    aclk,
    SS,
    \FSM_onehot_state_reg[3] ,
    m_ready_d,
    \gen_arbiter.m_valid_i_reg ,
    Q,
    sa_wm_awvalid,
    m_axi_wready,
    s_axi_wlast,
    m_axi_wvalid,
    s_axi_wstrb,
    s_axi_wdata,
    SR);
  output storage_data2;
  output m_avalid;
  output \skid_buffer_reg[72] ;
  output [0:0]out0;
  output load_s1;
  output [0:0]m_axi_wlast;
  output [7:0]m_axi_wstrb;
  output [63:0]m_axi_wdata;
  input \gen_arbiter.m_grant_enc_i_reg[0] ;
  input aclk;
  input [0:0]SS;
  input \FSM_onehot_state_reg[3] ;
  input [0:0]m_ready_d;
  input \gen_arbiter.m_valid_i_reg ;
  input [0:0]Q;
  input [0:0]sa_wm_awvalid;
  input [0:0]m_axi_wready;
  input [1:0]s_axi_wlast;
  input [0:0]m_axi_wvalid;
  input [15:0]s_axi_wstrb;
  input [127:0]s_axi_wdata;
  input [0:0]SR;

  wire \FSM_onehot_state_reg[3] ;
  wire [0:0]Q;
  wire [0:0]SR;
  wire [0:0]SS;
  wire aclk;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_arbiter.m_valid_i_reg ;
  wire load_s1;
  wire m_avalid;
  wire [63:0]m_axi_wdata;
  wire [0:0]m_axi_wlast;
  wire [0:0]m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire [0:0]m_axi_wvalid;
  wire [0:0]m_ready_d;
  wire [0:0]out0;
  wire [127:0]s_axi_wdata;
  wire [1:0]s_axi_wlast;
  wire [15:0]s_axi_wstrb;
  wire [0:0]sa_wm_awvalid;
  wire \skid_buffer_reg[72] ;
  wire storage_data2;

  bd_1_axi_data_fifo_v2_1_14_axic_reg_srl_fifo__parameterized0_60 \gen_wmux.wmux_aw_fifo 
       (.\FSM_onehot_state_reg[3]_0 (\FSM_onehot_state_reg[3] ),
        .Q(Q),
        .SR(SR),
        .SS(SS),
        .aclk(aclk),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_arbiter.m_grant_enc_i_reg[0] ),
        .\gen_arbiter.m_valid_i_reg (\gen_arbiter.m_valid_i_reg ),
        .load_s1(load_s1),
        .m_avalid(m_avalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wvalid(m_axi_wvalid),
        .m_ready_d(m_ready_d),
        .out0(out0),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .sa_wm_awvalid(sa_wm_awvalid),
        .\skid_buffer_reg[72] (\skid_buffer_reg[72] ),
        .storage_data2(storage_data2));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_wdata_mux" *) 
module bd_1_axi_crossbar_v2_1_16_wdata_mux_42
   (storage_data2_0,
    m_avalid,
    \skid_buffer_reg[72] ,
    out0,
    load_s1_16,
    m_axi_wlast,
    m_axi_wstrb,
    m_axi_wdata,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    aclk,
    SS,
    \FSM_onehot_state_reg[3] ,
    m_ready_d,
    \gen_arbiter.m_valid_i_reg ,
    Q,
    sa_wm_awvalid,
    m_axi_wready,
    s_axi_wlast,
    m_axi_wvalid,
    s_axi_wstrb,
    s_axi_wdata,
    SR);
  output storage_data2_0;
  output m_avalid;
  output \skid_buffer_reg[72] ;
  output [0:0]out0;
  output load_s1_16;
  output [0:0]m_axi_wlast;
  output [7:0]m_axi_wstrb;
  output [63:0]m_axi_wdata;
  input \gen_arbiter.m_grant_enc_i_reg[0] ;
  input aclk;
  input [0:0]SS;
  input \FSM_onehot_state_reg[3] ;
  input [0:0]m_ready_d;
  input \gen_arbiter.m_valid_i_reg ;
  input [0:0]Q;
  input [0:0]sa_wm_awvalid;
  input [0:0]m_axi_wready;
  input [1:0]s_axi_wlast;
  input [0:0]m_axi_wvalid;
  input [15:0]s_axi_wstrb;
  input [127:0]s_axi_wdata;
  input [0:0]SR;

  wire \FSM_onehot_state_reg[3] ;
  wire [0:0]Q;
  wire [0:0]SR;
  wire [0:0]SS;
  wire aclk;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_arbiter.m_valid_i_reg ;
  wire load_s1_16;
  wire m_avalid;
  wire [63:0]m_axi_wdata;
  wire [0:0]m_axi_wlast;
  wire [0:0]m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire [0:0]m_axi_wvalid;
  wire [0:0]m_ready_d;
  wire [0:0]out0;
  wire [127:0]s_axi_wdata;
  wire [1:0]s_axi_wlast;
  wire [15:0]s_axi_wstrb;
  wire [0:0]sa_wm_awvalid;
  wire \skid_buffer_reg[72] ;
  wire storage_data2_0;

  bd_1_axi_data_fifo_v2_1_14_axic_reg_srl_fifo__parameterized0 \gen_wmux.wmux_aw_fifo 
       (.\FSM_onehot_state_reg[3]_0 (\FSM_onehot_state_reg[3] ),
        .Q(Q),
        .SR(SR),
        .SS(SS),
        .aclk(aclk),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_arbiter.m_grant_enc_i_reg[0] ),
        .\gen_arbiter.m_valid_i_reg (\gen_arbiter.m_valid_i_reg ),
        .load_s1_16(load_s1_16),
        .m_avalid(m_avalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wvalid(m_axi_wvalid),
        .m_ready_d(m_ready_d),
        .out0(out0),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .sa_wm_awvalid(sa_wm_awvalid),
        .\skid_buffer_reg[72] (\skid_buffer_reg[72] ),
        .storage_data2_0(storage_data2_0));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_wdata_mux" *) 
module bd_1_axi_crossbar_v2_1_16_wdata_mux__parameterized0
   (storage_data2_1,
    m_avalid,
    \storage_data1_reg[0] ,
    load_s1_15,
    out0,
    wm_mr_wlast_2,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    aclk,
    SS,
    \FSM_onehot_state_reg[3] ,
    m_aready__1,
    sa_wm_awvalid,
    Q,
    \gen_arbiter.m_valid_i_reg ,
    m_ready_d,
    s_axi_wlast,
    SR,
    D);
  output storage_data2_1;
  output m_avalid;
  output \storage_data1_reg[0] ;
  output load_s1_15;
  output [2:0]out0;
  output wm_mr_wlast_2;
  input \gen_arbiter.m_grant_enc_i_reg[0] ;
  input aclk;
  input [0:0]SS;
  input \FSM_onehot_state_reg[3] ;
  input m_aready__1;
  input [0:0]sa_wm_awvalid;
  input [0:0]Q;
  input \gen_arbiter.m_valid_i_reg ;
  input [0:0]m_ready_d;
  input [1:0]s_axi_wlast;
  input [0:0]SR;
  input [1:0]D;

  wire [1:0]D;
  wire \FSM_onehot_state_reg[3] ;
  wire [0:0]Q;
  wire [0:0]SR;
  wire [0:0]SS;
  wire aclk;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_arbiter.m_valid_i_reg ;
  wire load_s1_15;
  wire m_aready__1;
  wire m_avalid;
  wire [0:0]m_ready_d;
  wire [2:0]out0;
  wire [1:0]s_axi_wlast;
  wire [0:0]sa_wm_awvalid;
  wire \storage_data1_reg[0] ;
  wire storage_data2_1;
  wire wm_mr_wlast_2;

  bd_1_axi_data_fifo_v2_1_14_axic_reg_srl_fifo__parameterized1 \gen_wmux.wmux_aw_fifo 
       (.D(D),
        .\FSM_onehot_state_reg[3]_0 (\FSM_onehot_state_reg[3] ),
        .Q(Q),
        .SR(SR),
        .SS(SS),
        .aclk(aclk),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_arbiter.m_grant_enc_i_reg[0] ),
        .\gen_arbiter.m_valid_i_reg (\gen_arbiter.m_valid_i_reg ),
        .load_s1_15(load_s1_15),
        .m_aready__1(m_aready__1),
        .m_avalid(m_avalid),
        .m_ready_d(m_ready_d),
        .out0(out0),
        .s_axi_wlast(s_axi_wlast),
        .sa_wm_awvalid(sa_wm_awvalid),
        .\storage_data1_reg[0]_0 (\storage_data1_reg[0] ),
        .storage_data2_1(storage_data2_1),
        .wm_mr_wlast_2(wm_mr_wlast_2));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_wdata_router" *) 
module bd_1_axi_crossbar_v2_1_16_wdata_router
   (\gen_arbiter.m_target_hot_i_reg[1] ,
    \gen_rep[0].fifoaddr_reg[0] ,
    s_axi_wready,
    storage_data11,
    out0,
    m_valid_i_reg,
    s_ready_i_reg,
    \gen_axi.s_axi_wready_i_reg ,
    s_ready_i_reg_0,
    m_valid_i_reg_0,
    s_ready_i_reg_1,
    aclk,
    SS,
    SR,
    areset_d1_reg,
    \m_payload_i_reg[18] ,
    sel_4,
    s_axi_awaddr,
    sel_3,
    s_axi_wlast,
    s_axi_wvalid,
    \m_ready_d_reg[1] ,
    s_axi_awvalid,
    ss_wr_awvalid_0,
    m_axi_wready,
    \storage_data1_reg[0] ,
    m_avalid,
    m_avalid_0,
    \storage_data1_reg[0]_0 ,
    m_avalid_1,
    p_14_in,
    \storage_data1_reg[0]_1 ,
    \m_ready_d_reg[1]_0 ,
    \m_ready_d_reg[1]_1 );
  output \gen_arbiter.m_target_hot_i_reg[1] ;
  output \gen_rep[0].fifoaddr_reg[0] ;
  output [0:0]s_axi_wready;
  output storage_data11;
  output [1:0]out0;
  output m_valid_i_reg;
  output s_ready_i_reg;
  output \gen_axi.s_axi_wready_i_reg ;
  output s_ready_i_reg_0;
  output m_valid_i_reg_0;
  output s_ready_i_reg_1;
  input aclk;
  input [0:0]SS;
  input [0:0]SR;
  input areset_d1_reg;
  input \m_payload_i_reg[18] ;
  input sel_4;
  input [3:0]s_axi_awaddr;
  input sel_3;
  input [0:0]s_axi_wlast;
  input [0:0]s_axi_wvalid;
  input \m_ready_d_reg[1] ;
  input [0:0]s_axi_awvalid;
  input ss_wr_awvalid_0;
  input [1:0]m_axi_wready;
  input \storage_data1_reg[0] ;
  input m_avalid;
  input m_avalid_0;
  input \storage_data1_reg[0]_0 ;
  input m_avalid_1;
  input p_14_in;
  input \storage_data1_reg[0]_1 ;
  input \m_ready_d_reg[1]_0 ;
  input \m_ready_d_reg[1]_1 ;

  wire [0:0]SR;
  wire [0:0]SS;
  wire aclk;
  wire areset_d1_reg;
  wire \gen_arbiter.m_target_hot_i_reg[1] ;
  wire \gen_axi.s_axi_wready_i_reg ;
  wire \gen_rep[0].fifoaddr_reg[0] ;
  wire m_avalid;
  wire m_avalid_0;
  wire m_avalid_1;
  wire [1:0]m_axi_wready;
  wire \m_payload_i_reg[18] ;
  wire \m_ready_d_reg[1] ;
  wire \m_ready_d_reg[1]_0 ;
  wire \m_ready_d_reg[1]_1 ;
  wire m_valid_i_reg;
  wire m_valid_i_reg_0;
  wire [1:0]out0;
  wire p_14_in;
  wire [3:0]s_axi_awaddr;
  wire [0:0]s_axi_awvalid;
  wire [0:0]s_axi_wlast;
  wire [0:0]s_axi_wready;
  wire [0:0]s_axi_wvalid;
  wire s_ready_i_reg;
  wire s_ready_i_reg_0;
  wire s_ready_i_reg_1;
  wire sel_3;
  wire sel_4;
  wire ss_wr_awvalid_0;
  wire storage_data11;
  wire \storage_data1_reg[0] ;
  wire \storage_data1_reg[0]_0 ;
  wire \storage_data1_reg[0]_1 ;

  bd_1_axi_data_fifo_v2_1_14_axic_reg_srl_fifo_49 wrouter_aw_fifo
       (.SR(SR),
        .SS(SS),
        .aclk(aclk),
        .areset_d1_reg(areset_d1_reg),
        .\gen_arbiter.m_target_hot_i_reg[1] (\gen_arbiter.m_target_hot_i_reg[1] ),
        .\gen_axi.s_axi_wready_i_reg (\gen_axi.s_axi_wready_i_reg ),
        .\gen_rep[0].fifoaddr_reg[0]_0 (\gen_rep[0].fifoaddr_reg[0] ),
        .m_avalid(m_avalid),
        .m_avalid_0(m_avalid_0),
        .m_avalid_1(m_avalid_1),
        .m_axi_wready(m_axi_wready),
        .\m_payload_i_reg[18] (\m_payload_i_reg[18] ),
        .\m_ready_d_reg[1] (\m_ready_d_reg[1] ),
        .\m_ready_d_reg[1]_0 (\m_ready_d_reg[1]_0 ),
        .\m_ready_d_reg[1]_1 (\m_ready_d_reg[1]_1 ),
        .m_valid_i_reg_0(m_valid_i_reg),
        .m_valid_i_reg_1(m_valid_i_reg_0),
        .out0(out0),
        .p_14_in(p_14_in),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wvalid(s_axi_wvalid),
        .s_ready_i_reg_0(s_ready_i_reg),
        .s_ready_i_reg_1(s_ready_i_reg_0),
        .s_ready_i_reg_2(s_ready_i_reg_1),
        .sel_3(sel_3),
        .sel_4(sel_4),
        .ss_wr_awvalid_0(ss_wr_awvalid_0),
        .storage_data11(storage_data11),
        .\storage_data1_reg[0]_0 (\storage_data1_reg[0] ),
        .\storage_data1_reg[0]_1 (\storage_data1_reg[0]_0 ),
        .\storage_data1_reg[0]_2 (\storage_data1_reg[0]_1 ));
endmodule

(* ORIG_REF_NAME = "axi_crossbar_v2_1_16_wdata_router" *) 
module bd_1_axi_crossbar_v2_1_16_wdata_router_46
   (\gen_arbiter.m_target_hot_i_reg[1] ,
    SS,
    \gen_rep[0].fifoaddr_reg[0] ,
    m_axi_wvalid,
    wm_mr_wvalid_2,
    storage_data11_10,
    out0,
    m_valid_i_reg,
    s_axi_wready,
    m_valid_i_reg_0,
    s_ready_i_reg,
    aclk,
    SR,
    areset_d1_reg,
    \m_payload_i_reg[18] ,
    sel_4,
    s_axi_awaddr,
    sel_3,
    \storage_data1_reg[0] ,
    m_avalid,
    \storage_data1_reg[0]_0 ,
    m_avalid_0,
    \storage_data1_reg[0]_1 ,
    \storage_data1_reg[1] ,
    \storage_data1_reg[0]_2 ,
    m_avalid_1,
    \storage_data1_reg[0]_3 ,
    s_axi_wlast,
    s_axi_wvalid,
    \m_ready_d_reg[1] ,
    s_axi_awvalid,
    ss_wr_awvalid_1,
    m_axi_wready,
    p_14_in,
    \m_ready_d_reg[1]_0 ,
    \m_ready_d_reg[1]_1 );
  output \gen_arbiter.m_target_hot_i_reg[1] ;
  output [0:0]SS;
  output \gen_rep[0].fifoaddr_reg[0] ;
  output [1:0]m_axi_wvalid;
  output wm_mr_wvalid_2;
  output storage_data11_10;
  output [1:0]out0;
  output m_valid_i_reg;
  output [0:0]s_axi_wready;
  output m_valid_i_reg_0;
  output s_ready_i_reg;
  input aclk;
  input [0:0]SR;
  input areset_d1_reg;
  input \m_payload_i_reg[18] ;
  input sel_4;
  input [3:0]s_axi_awaddr;
  input sel_3;
  input \storage_data1_reg[0] ;
  input m_avalid;
  input \storage_data1_reg[0]_0 ;
  input m_avalid_0;
  input \storage_data1_reg[0]_1 ;
  input \storage_data1_reg[1] ;
  input \storage_data1_reg[0]_2 ;
  input m_avalid_1;
  input \storage_data1_reg[0]_3 ;
  input [0:0]s_axi_wlast;
  input [0:0]s_axi_wvalid;
  input \m_ready_d_reg[1] ;
  input [0:0]s_axi_awvalid;
  input ss_wr_awvalid_1;
  input [1:0]m_axi_wready;
  input p_14_in;
  input \m_ready_d_reg[1]_0 ;
  input \m_ready_d_reg[1]_1 ;

  wire [0:0]SR;
  wire [0:0]SS;
  wire aclk;
  wire areset_d1_reg;
  wire \gen_arbiter.m_target_hot_i_reg[1] ;
  wire \gen_rep[0].fifoaddr_reg[0] ;
  wire m_avalid;
  wire m_avalid_0;
  wire m_avalid_1;
  wire [1:0]m_axi_wready;
  wire [1:0]m_axi_wvalid;
  wire \m_payload_i_reg[18] ;
  wire \m_ready_d_reg[1] ;
  wire \m_ready_d_reg[1]_0 ;
  wire \m_ready_d_reg[1]_1 ;
  wire m_valid_i_reg;
  wire m_valid_i_reg_0;
  wire [1:0]out0;
  wire p_14_in;
  wire [3:0]s_axi_awaddr;
  wire [0:0]s_axi_awvalid;
  wire [0:0]s_axi_wlast;
  wire [0:0]s_axi_wready;
  wire [0:0]s_axi_wvalid;
  wire s_ready_i_reg;
  wire sel_3;
  wire sel_4;
  wire ss_wr_awvalid_1;
  wire storage_data11_10;
  wire \storage_data1_reg[0] ;
  wire \storage_data1_reg[0]_0 ;
  wire \storage_data1_reg[0]_1 ;
  wire \storage_data1_reg[0]_2 ;
  wire \storage_data1_reg[0]_3 ;
  wire \storage_data1_reg[1] ;
  wire wm_mr_wvalid_2;

  bd_1_axi_data_fifo_v2_1_14_axic_reg_srl_fifo wrouter_aw_fifo
       (.SR(SS),
        .aclk(aclk),
        .areset_d1_reg_0(areset_d1_reg),
        .aresetn_d_reg(SR),
        .\gen_arbiter.m_target_hot_i_reg[1] (\gen_arbiter.m_target_hot_i_reg[1] ),
        .\gen_rep[0].fifoaddr_reg[0]_0 (\gen_rep[0].fifoaddr_reg[0] ),
        .m_avalid(m_avalid),
        .m_avalid_0(m_avalid_0),
        .m_avalid_1(m_avalid_1),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .\m_payload_i_reg[18] (\m_payload_i_reg[18] ),
        .\m_ready_d_reg[1] (\m_ready_d_reg[1] ),
        .\m_ready_d_reg[1]_0 (\m_ready_d_reg[1]_0 ),
        .\m_ready_d_reg[1]_1 (\m_ready_d_reg[1]_1 ),
        .m_valid_i_reg_0(m_valid_i_reg),
        .m_valid_i_reg_1(m_valid_i_reg_0),
        .out0(out0),
        .p_14_in(p_14_in),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wvalid(s_axi_wvalid),
        .s_ready_i_reg_0(s_ready_i_reg),
        .sel_3(sel_3),
        .sel_4(sel_4),
        .ss_wr_awvalid_1(ss_wr_awvalid_1),
        .storage_data11_10(storage_data11_10),
        .\storage_data1_reg[0]_0 (\storage_data1_reg[0] ),
        .\storage_data1_reg[0]_1 (\storage_data1_reg[0]_0 ),
        .\storage_data1_reg[0]_2 (\storage_data1_reg[0]_1 ),
        .\storage_data1_reg[0]_3 (\storage_data1_reg[0]_2 ),
        .\storage_data1_reg[0]_4 (\storage_data1_reg[0]_3 ),
        .\storage_data1_reg[1]_0 (\storage_data1_reg[1] ),
        .wm_mr_wvalid_2(wm_mr_wvalid_2));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_axic_fifo" *) 
module bd_1_axi_data_fifo_v2_1_14_axic_fifo
   (dout,
    empty,
    SR,
    din,
    D,
    command_ongoing_reg,
    \USE_B_CHANNEL.cmd_b_empty_i_reg ,
    E,
    cmd_b_push_block_reg,
    wr_en,
    \pushed_commands_reg[7] ,
    cmd_push_block_reg,
    \queue_id_reg[0] ,
    m_axi_awvalid,
    S_AXI_AREADY_I_reg,
    CLK,
    \USE_WRITE.wr_cmd_b_ready ,
    Q,
    s_axi_awvalid,
    S_AXI_AREADY_I_reg_0,
    \areset_d_reg[0] ,
    \areset_d_reg[1] ,
    command_ongoing,
    cmd_b_push_block,
    \USE_B_CHANNEL.cmd_b_depth_reg[5] ,
    cmd_b_empty,
    out,
    m_axi_awready,
    access_is_incr_q_reg,
    cmd_push_block,
    S_AXI_AID_Q,
    s_axi_bid,
    full,
    wrap_need_to_split_q,
    incr_need_to_split_q,
    fix_need_to_split_q,
    \S_AXI_ALEN_Q_reg[3] ,
    \num_transactions_q_reg[2] );
  output [8:0]dout;
  output empty;
  output [0:0]SR;
  output [0:0]din;
  output [4:0]D;
  output command_ongoing_reg;
  output \USE_B_CHANNEL.cmd_b_empty_i_reg ;
  output [0:0]E;
  output cmd_b_push_block_reg;
  output wr_en;
  output [0:0]\pushed_commands_reg[7] ;
  output cmd_push_block_reg;
  output \queue_id_reg[0] ;
  output m_axi_awvalid;
  output S_AXI_AREADY_I_reg;
  input CLK;
  input \USE_WRITE.wr_cmd_b_ready ;
  input [5:0]Q;
  input s_axi_awvalid;
  input S_AXI_AREADY_I_reg_0;
  input \areset_d_reg[0] ;
  input \areset_d_reg[1] ;
  input command_ongoing;
  input cmd_b_push_block;
  input \USE_B_CHANNEL.cmd_b_depth_reg[5] ;
  input cmd_b_empty;
  input out;
  input m_axi_awready;
  input access_is_incr_q_reg;
  input cmd_push_block;
  input S_AXI_AID_Q;
  input [0:0]s_axi_bid;
  input full;
  input wrap_need_to_split_q;
  input incr_need_to_split_q;
  input fix_need_to_split_q;
  input [3:0]\S_AXI_ALEN_Q_reg[3] ;
  input [2:0]\num_transactions_q_reg[2] ;

  wire CLK;
  wire [4:0]D;
  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]SR;
  wire S_AXI_AID_Q;
  wire [3:0]\S_AXI_ALEN_Q_reg[3] ;
  wire S_AXI_AREADY_I_reg;
  wire S_AXI_AREADY_I_reg_0;
  wire \USE_B_CHANNEL.cmd_b_depth_reg[5] ;
  wire \USE_B_CHANNEL.cmd_b_empty_i_reg ;
  wire \USE_WRITE.wr_cmd_b_ready ;
  wire access_is_incr_q_reg;
  wire \areset_d_reg[0] ;
  wire \areset_d_reg[1] ;
  wire cmd_b_empty;
  wire cmd_b_push_block;
  wire cmd_b_push_block_reg;
  wire cmd_push_block;
  wire cmd_push_block_reg;
  wire command_ongoing;
  wire command_ongoing_reg;
  wire [0:0]din;
  wire [8:0]dout;
  wire empty;
  wire fix_need_to_split_q;
  wire full;
  wire incr_need_to_split_q;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire [2:0]\num_transactions_q_reg[2] ;
  wire out;
  wire [0:0]\pushed_commands_reg[7] ;
  wire \queue_id_reg[0] ;
  wire s_axi_awvalid;
  wire [0:0]s_axi_bid;
  wire wr_en;
  wire wrap_need_to_split_q;

  bd_1_axi_data_fifo_v2_1_14_fifo_gen inst
       (.CLK(CLK),
        .D(D),
        .E(E),
        .Q(Q),
        .SR(SR),
        .S_AXI_AID_Q(S_AXI_AID_Q),
        .\S_AXI_ALEN_Q_reg[3] (\S_AXI_ALEN_Q_reg[3] ),
        .S_AXI_AREADY_I_reg(S_AXI_AREADY_I_reg),
        .S_AXI_AREADY_I_reg_0(S_AXI_AREADY_I_reg_0),
        .\USE_B_CHANNEL.cmd_b_depth_reg[5] (\USE_B_CHANNEL.cmd_b_depth_reg[5] ),
        .\USE_B_CHANNEL.cmd_b_empty_i_reg (\USE_B_CHANNEL.cmd_b_empty_i_reg ),
        .\USE_WRITE.wr_cmd_b_ready (\USE_WRITE.wr_cmd_b_ready ),
        .access_is_incr_q_reg(access_is_incr_q_reg),
        .\areset_d_reg[0] (\areset_d_reg[0] ),
        .\areset_d_reg[1] (\areset_d_reg[1] ),
        .cmd_b_empty(cmd_b_empty),
        .cmd_b_push_block(cmd_b_push_block),
        .cmd_b_push_block_reg(cmd_b_push_block_reg),
        .cmd_push_block(cmd_push_block),
        .cmd_push_block_reg(cmd_push_block_reg),
        .command_ongoing(command_ongoing),
        .command_ongoing_reg(command_ongoing_reg),
        .din(din),
        .dout(dout),
        .empty(empty),
        .fix_need_to_split_q(fix_need_to_split_q),
        .full(full),
        .incr_need_to_split_q(incr_need_to_split_q),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .\num_transactions_q_reg[2] (\num_transactions_q_reg[2] ),
        .out(out),
        .\pushed_commands_reg[7] (\pushed_commands_reg[7] ),
        .\queue_id_reg[0] (\queue_id_reg[0] ),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bid(s_axi_bid),
        .wr_en(wr_en),
        .wrap_need_to_split_q(wrap_need_to_split_q));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_axic_fifo" *) 
module bd_1_axi_data_fifo_v2_1_14_axic_fifo__parameterized0
   (\m_payload_i_reg[72] ,
    full,
    \m_payload_i_reg[37] ,
    DI,
    \m_payload_i_reg[51] ,
    S,
    split_ongoing_reg,
    \next_mi_addr_reg[8] ,
    \next_mi_addr_reg[8]_0 ,
    m_axi_wvalid,
    s_axi_wready,
    first_word_reg,
    D,
    \m_payload_i_reg[47] ,
    CLK,
    SR,
    din,
    wr_en,
    Q,
    fix_need_to_split_q,
    access_is_fix_q,
    \S_AXI_ALEN_Q_reg[7] ,
    \downsized_len_q_reg[7] ,
    wrap_need_to_split_q,
    split_ongoing,
    \wrap_unaligned_len_q_reg[7] ,
    access_is_wrap_q,
    \wrap_rest_len_reg[7] ,
    legal_wrap_len_q,
    access_is_incr_q,
    incr_need_to_split_q,
    CO,
    si_full_size_q,
    \split_addr_mask_q_reg[0] ,
    \S_AXI_AADDR_Q_reg[2] ,
    \split_addr_mask_q_reg[1] ,
    \split_addr_mask_q_reg[2] ,
    \split_addr_mask_q_reg[31] ,
    \fix_len_q_reg[4] ,
    s_axi_wvalid,
    m_axi_wready,
    \goreg_dm.dout_i_reg[9] ,
    \current_word_1_reg[1] ,
    \current_word_1_reg[0] ,
    \goreg_dm.dout_i_reg[13] ,
    \unalignment_addr_q_reg[4] );
  output [17:0]\m_payload_i_reg[72] ;
  output full;
  output [2:0]\m_payload_i_reg[37] ;
  output [3:0]DI;
  output [2:0]\m_payload_i_reg[51] ;
  output [3:0]S;
  output split_ongoing_reg;
  output \next_mi_addr_reg[8] ;
  output \next_mi_addr_reg[8]_0 ;
  output m_axi_wvalid;
  output s_axi_wready;
  output [0:0]first_word_reg;
  output [2:0]D;
  output [3:0]\m_payload_i_reg[47] ;
  input CLK;
  input [0:0]SR;
  input [15:0]din;
  input wr_en;
  input [7:0]Q;
  input fix_need_to_split_q;
  input access_is_fix_q;
  input [7:0]\S_AXI_ALEN_Q_reg[7] ;
  input [7:0]\downsized_len_q_reg[7] ;
  input wrap_need_to_split_q;
  input split_ongoing;
  input [7:0]\wrap_unaligned_len_q_reg[7] ;
  input access_is_wrap_q;
  input [7:0]\wrap_rest_len_reg[7] ;
  input legal_wrap_len_q;
  input access_is_incr_q;
  input incr_need_to_split_q;
  input [0:0]CO;
  input si_full_size_q;
  input \split_addr_mask_q_reg[0] ;
  input [2:0]\S_AXI_AADDR_Q_reg[2] ;
  input \split_addr_mask_q_reg[1] ;
  input [0:0]\split_addr_mask_q_reg[2] ;
  input \split_addr_mask_q_reg[31] ;
  input [4:0]\fix_len_q_reg[4] ;
  input s_axi_wvalid;
  input m_axi_wready;
  input \goreg_dm.dout_i_reg[9] ;
  input \current_word_1_reg[1] ;
  input \current_word_1_reg[0] ;
  input \goreg_dm.dout_i_reg[13] ;
  input [4:0]\unalignment_addr_q_reg[4] ;

  wire CLK;
  wire [0:0]CO;
  wire [2:0]D;
  wire [3:0]DI;
  wire [7:0]Q;
  wire [3:0]S;
  wire [0:0]SR;
  wire [2:0]\S_AXI_AADDR_Q_reg[2] ;
  wire [7:0]\S_AXI_ALEN_Q_reg[7] ;
  wire access_is_fix_q;
  wire access_is_incr_q;
  wire access_is_wrap_q;
  wire \current_word_1_reg[0] ;
  wire \current_word_1_reg[1] ;
  wire [15:0]din;
  wire [7:0]\downsized_len_q_reg[7] ;
  wire [0:0]first_word_reg;
  wire [4:0]\fix_len_q_reg[4] ;
  wire fix_need_to_split_q;
  wire full;
  wire \goreg_dm.dout_i_reg[13] ;
  wire \goreg_dm.dout_i_reg[9] ;
  wire incr_need_to_split_q;
  wire legal_wrap_len_q;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire [2:0]\m_payload_i_reg[37] ;
  wire [3:0]\m_payload_i_reg[47] ;
  wire [2:0]\m_payload_i_reg[51] ;
  wire [17:0]\m_payload_i_reg[72] ;
  wire \next_mi_addr_reg[8] ;
  wire \next_mi_addr_reg[8]_0 ;
  wire s_axi_wready;
  wire s_axi_wvalid;
  wire si_full_size_q;
  wire \split_addr_mask_q_reg[0] ;
  wire \split_addr_mask_q_reg[1] ;
  wire [0:0]\split_addr_mask_q_reg[2] ;
  wire \split_addr_mask_q_reg[31] ;
  wire split_ongoing;
  wire split_ongoing_reg;
  wire [4:0]\unalignment_addr_q_reg[4] ;
  wire wr_en;
  wire wrap_need_to_split_q;
  wire [7:0]\wrap_rest_len_reg[7] ;
  wire [7:0]\wrap_unaligned_len_q_reg[7] ;

  bd_1_axi_data_fifo_v2_1_14_fifo_gen__parameterized0 inst
       (.CLK(CLK),
        .CO(CO),
        .D(D),
        .DI(DI),
        .Q(Q),
        .S(S),
        .SR(SR),
        .\S_AXI_AADDR_Q_reg[2] (\S_AXI_AADDR_Q_reg[2] ),
        .\S_AXI_ALEN_Q_reg[7] (\S_AXI_ALEN_Q_reg[7] ),
        .access_is_fix_q(access_is_fix_q),
        .access_is_incr_q(access_is_incr_q),
        .access_is_wrap_q(access_is_wrap_q),
        .\current_word_1_reg[0] (\current_word_1_reg[0] ),
        .\current_word_1_reg[1] (\current_word_1_reg[1] ),
        .din(din),
        .\downsized_len_q_reg[7] (\downsized_len_q_reg[7] ),
        .first_word_reg(first_word_reg),
        .\fix_len_q_reg[4] (\fix_len_q_reg[4] ),
        .fix_need_to_split_q(fix_need_to_split_q),
        .full(full),
        .\goreg_dm.dout_i_reg[13] (\goreg_dm.dout_i_reg[13] ),
        .\goreg_dm.dout_i_reg[9] (\goreg_dm.dout_i_reg[9] ),
        .incr_need_to_split_q(incr_need_to_split_q),
        .legal_wrap_len_q(legal_wrap_len_q),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .\m_payload_i_reg[37] (\m_payload_i_reg[37] ),
        .\m_payload_i_reg[47] (\m_payload_i_reg[47] ),
        .\m_payload_i_reg[51] (\m_payload_i_reg[51] ),
        .\m_payload_i_reg[72] (\m_payload_i_reg[72] ),
        .\next_mi_addr_reg[8] (\next_mi_addr_reg[8] ),
        .\next_mi_addr_reg[8]_0 (\next_mi_addr_reg[8]_0 ),
        .s_axi_wready(s_axi_wready),
        .s_axi_wvalid(s_axi_wvalid),
        .si_full_size_q(si_full_size_q),
        .\split_addr_mask_q_reg[0] (\split_addr_mask_q_reg[0] ),
        .\split_addr_mask_q_reg[1] (\split_addr_mask_q_reg[1] ),
        .\split_addr_mask_q_reg[2] (\split_addr_mask_q_reg[2] ),
        .\split_addr_mask_q_reg[31] (\split_addr_mask_q_reg[31] ),
        .split_ongoing(split_ongoing),
        .split_ongoing_reg(split_ongoing_reg),
        .\unalignment_addr_q_reg[4] (\unalignment_addr_q_reg[4] ),
        .wr_en(wr_en),
        .wrap_need_to_split_q(wrap_need_to_split_q),
        .\wrap_rest_len_reg[7] (\wrap_rest_len_reg[7] ),
        .\wrap_unaligned_len_q_reg[7] (\wrap_unaligned_len_q_reg[7] ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_axic_fifo" *) 
module bd_1_axi_data_fifo_v2_1_14_axic_fifo__parameterized0__xdcDup__1
   (dout,
    din,
    D,
    s_axi_rlast,
    command_ongoing_reg,
    command_ongoing_reg_0,
    cmd_push_block_reg,
    cmd_push_block_reg_0,
    m_axi_rready,
    first_mi_word_reg,
    \WORD_LANE[1].S_AXI_RDATA_II_reg[63] ,
    \WORD_LANE[0].S_AXI_RDATA_II_reg[31] ,
    E,
    \cmd_depth_reg[0] ,
    \WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ,
    s_axi_rvalid,
    \current_word_1_reg[2] ,
    \S_AXI_RRESP_ACC_reg[1] ,
    DI,
    \m_payload_i_reg[51] ,
    S,
    \next_mi_addr_reg[8] ,
    \next_mi_addr_reg[8]_0 ,
    \m_payload_i_reg[47] ,
    \queue_id_reg[0] ,
    cmd_empty_reg,
    CLK,
    SR,
    access_fit_mi_side_q,
    \cmd_mask_q_reg[2] ,
    \cmd_mask_q_reg[1] ,
    \cmd_mask_q_reg[0] ,
    \S_AXI_ALEN_Q_reg[6] ,
    Q,
    \pushed_commands_reg[7] ,
    fix_need_to_split_q,
    access_is_fix_q,
    \wrap_rest_len_reg[7] ,
    access_is_wrap_q,
    split_ongoing,
    m_axi_rlast,
    s_axi_arvalid,
    S_AXI_AREADY_I_reg,
    areset_d,
    command_ongoing,
    m_axi_arready,
    out,
    cmd_push_block,
    m_axi_rvalid,
    s_axi_rready,
    \goreg_dm.dout_i_reg[9] ,
    \goreg_dm.dout_i_reg[19] ,
    cmd_empty,
    S_AXI_AID_Q,
    \queue_id_reg[0]_0 ,
    \goreg_dm.dout_i_reg[12] ,
    \current_word_1_reg[0] ,
    \current_word_1_reg[1] ,
    first_word,
    wrap_need_to_split_q,
    incr_need_to_split_q,
    \S_AXI_ALEN_Q_reg[7] ,
    \downsized_len_q_reg[7] ,
    \wrap_unaligned_len_q_reg[7] ,
    legal_wrap_len_q,
    access_is_incr_q,
    CO,
    si_full_size_q,
    \split_addr_mask_q_reg[0] ,
    \S_AXI_AADDR_Q_reg[2] ,
    \split_addr_mask_q_reg[1] ,
    \split_addr_mask_q_reg[2] ,
    \split_addr_mask_q_reg[31] ,
    \fix_len_q_reg[4] ,
    \unalignment_addr_q_reg[4] ,
    \cmd_depth_reg[5] );
  output [21:0]dout;
  output [3:0]din;
  output [4:0]D;
  output s_axi_rlast;
  output command_ongoing_reg;
  output command_ongoing_reg_0;
  output cmd_push_block_reg;
  output cmd_push_block_reg_0;
  output m_axi_rready;
  output [0:0]first_mi_word_reg;
  output [0:0]\WORD_LANE[1].S_AXI_RDATA_II_reg[63] ;
  output [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31] ;
  output [0:0]E;
  output [0:0]\cmd_depth_reg[0] ;
  output [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ;
  output s_axi_rvalid;
  output [2:0]\current_word_1_reg[2] ;
  output \S_AXI_RRESP_ACC_reg[1] ;
  output [3:0]DI;
  output [2:0]\m_payload_i_reg[51] ;
  output [3:0]S;
  output \next_mi_addr_reg[8] ;
  output \next_mi_addr_reg[8]_0 ;
  output [3:0]\m_payload_i_reg[47] ;
  output \queue_id_reg[0] ;
  output cmd_empty_reg;
  input CLK;
  input [0:0]SR;
  input access_fit_mi_side_q;
  input \cmd_mask_q_reg[2] ;
  input \cmd_mask_q_reg[1] ;
  input \cmd_mask_q_reg[0] ;
  input [10:0]\S_AXI_ALEN_Q_reg[6] ;
  input [5:0]Q;
  input [7:0]\pushed_commands_reg[7] ;
  input fix_need_to_split_q;
  input access_is_fix_q;
  input [7:0]\wrap_rest_len_reg[7] ;
  input access_is_wrap_q;
  input split_ongoing;
  input m_axi_rlast;
  input s_axi_arvalid;
  input S_AXI_AREADY_I_reg;
  input [1:0]areset_d;
  input command_ongoing;
  input m_axi_arready;
  input out;
  input cmd_push_block;
  input m_axi_rvalid;
  input s_axi_rready;
  input \goreg_dm.dout_i_reg[9] ;
  input \goreg_dm.dout_i_reg[19] ;
  input cmd_empty;
  input S_AXI_AID_Q;
  input \queue_id_reg[0]_0 ;
  input \goreg_dm.dout_i_reg[12] ;
  input \current_word_1_reg[0] ;
  input \current_word_1_reg[1] ;
  input first_word;
  input wrap_need_to_split_q;
  input incr_need_to_split_q;
  input [7:0]\S_AXI_ALEN_Q_reg[7] ;
  input [7:0]\downsized_len_q_reg[7] ;
  input [7:0]\wrap_unaligned_len_q_reg[7] ;
  input legal_wrap_len_q;
  input access_is_incr_q;
  input [0:0]CO;
  input si_full_size_q;
  input \split_addr_mask_q_reg[0] ;
  input [2:0]\S_AXI_AADDR_Q_reg[2] ;
  input \split_addr_mask_q_reg[1] ;
  input [0:0]\split_addr_mask_q_reg[2] ;
  input \split_addr_mask_q_reg[31] ;
  input [4:0]\fix_len_q_reg[4] ;
  input [4:0]\unalignment_addr_q_reg[4] ;
  input \cmd_depth_reg[5] ;

  wire CLK;
  wire [0:0]CO;
  wire [4:0]D;
  wire [3:0]DI;
  wire [0:0]E;
  wire [5:0]Q;
  wire [3:0]S;
  wire [0:0]SR;
  wire [2:0]\S_AXI_AADDR_Q_reg[2] ;
  wire S_AXI_AID_Q;
  wire [10:0]\S_AXI_ALEN_Q_reg[6] ;
  wire [7:0]\S_AXI_ALEN_Q_reg[7] ;
  wire S_AXI_AREADY_I_reg;
  wire \S_AXI_RRESP_ACC_reg[1] ;
  wire [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31] ;
  wire [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ;
  wire [0:0]\WORD_LANE[1].S_AXI_RDATA_II_reg[63] ;
  wire access_fit_mi_side_q;
  wire access_is_fix_q;
  wire access_is_incr_q;
  wire access_is_wrap_q;
  wire [1:0]areset_d;
  wire [0:0]\cmd_depth_reg[0] ;
  wire \cmd_depth_reg[5] ;
  wire cmd_empty;
  wire cmd_empty_reg;
  wire \cmd_mask_q_reg[0] ;
  wire \cmd_mask_q_reg[1] ;
  wire \cmd_mask_q_reg[2] ;
  wire cmd_push_block;
  wire cmd_push_block_reg;
  wire cmd_push_block_reg_0;
  wire command_ongoing;
  wire command_ongoing_reg;
  wire command_ongoing_reg_0;
  wire \current_word_1_reg[0] ;
  wire \current_word_1_reg[1] ;
  wire [2:0]\current_word_1_reg[2] ;
  wire [3:0]din;
  wire [21:0]dout;
  wire [7:0]\downsized_len_q_reg[7] ;
  wire [0:0]first_mi_word_reg;
  wire first_word;
  wire [4:0]\fix_len_q_reg[4] ;
  wire fix_need_to_split_q;
  wire \goreg_dm.dout_i_reg[12] ;
  wire \goreg_dm.dout_i_reg[19] ;
  wire \goreg_dm.dout_i_reg[9] ;
  wire incr_need_to_split_q;
  wire legal_wrap_len_q;
  wire m_axi_arready;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire m_axi_rvalid;
  wire [3:0]\m_payload_i_reg[47] ;
  wire [2:0]\m_payload_i_reg[51] ;
  wire \next_mi_addr_reg[8] ;
  wire \next_mi_addr_reg[8]_0 ;
  wire out;
  wire [7:0]\pushed_commands_reg[7] ;
  wire \queue_id_reg[0] ;
  wire \queue_id_reg[0]_0 ;
  wire s_axi_arvalid;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire si_full_size_q;
  wire \split_addr_mask_q_reg[0] ;
  wire \split_addr_mask_q_reg[1] ;
  wire [0:0]\split_addr_mask_q_reg[2] ;
  wire \split_addr_mask_q_reg[31] ;
  wire split_ongoing;
  wire [4:0]\unalignment_addr_q_reg[4] ;
  wire wrap_need_to_split_q;
  wire [7:0]\wrap_rest_len_reg[7] ;
  wire [7:0]\wrap_unaligned_len_q_reg[7] ;

  bd_1_axi_data_fifo_v2_1_14_fifo_gen__parameterized0__xdcDup__1 inst
       (.CLK(CLK),
        .CO(CO),
        .D(D),
        .DI(DI),
        .E(E),
        .Q(Q),
        .S(S),
        .SR(SR),
        .\S_AXI_AADDR_Q_reg[2] (\S_AXI_AADDR_Q_reg[2] ),
        .S_AXI_AID_Q(S_AXI_AID_Q),
        .\S_AXI_ALEN_Q_reg[7] (\S_AXI_ALEN_Q_reg[7] ),
        .S_AXI_AREADY_I_reg(S_AXI_AREADY_I_reg),
        .\S_AXI_RRESP_ACC_reg[1] (\S_AXI_RRESP_ACC_reg[1] ),
        .\WORD_LANE[0].S_AXI_RDATA_II_reg[31] (\WORD_LANE[0].S_AXI_RDATA_II_reg[31] ),
        .\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 (\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ),
        .\WORD_LANE[1].S_AXI_RDATA_II_reg[63] (\WORD_LANE[1].S_AXI_RDATA_II_reg[63] ),
        .access_fit_mi_side_q_reg({access_fit_mi_side_q,\cmd_mask_q_reg[2] ,\cmd_mask_q_reg[1] ,\cmd_mask_q_reg[0] ,\S_AXI_ALEN_Q_reg[6] }),
        .access_is_fix_q(access_is_fix_q),
        .access_is_incr_q(access_is_incr_q),
        .access_is_wrap_q(access_is_wrap_q),
        .areset_d(areset_d),
        .\cmd_depth_reg[0] (\cmd_depth_reg[0] ),
        .\cmd_depth_reg[5] (\cmd_depth_reg[5] ),
        .cmd_empty(cmd_empty),
        .cmd_empty_reg(cmd_empty_reg),
        .cmd_push_block(cmd_push_block),
        .cmd_push_block_reg(cmd_push_block_reg),
        .cmd_push_block_reg_0(cmd_push_block_reg_0),
        .command_ongoing(command_ongoing),
        .command_ongoing_reg(command_ongoing_reg),
        .command_ongoing_reg_0(command_ongoing_reg_0),
        .\current_word_1_reg[0] (\current_word_1_reg[0] ),
        .\current_word_1_reg[1] (\current_word_1_reg[1] ),
        .\current_word_1_reg[2] (\current_word_1_reg[2] ),
        .din(din),
        .dout(dout),
        .\downsized_len_q_reg[7] (\downsized_len_q_reg[7] ),
        .first_mi_word_reg(first_mi_word_reg),
        .first_word(first_word),
        .\fix_len_q_reg[4] (\fix_len_q_reg[4] ),
        .fix_need_to_split_q(fix_need_to_split_q),
        .\goreg_dm.dout_i_reg[12] (\goreg_dm.dout_i_reg[12] ),
        .\goreg_dm.dout_i_reg[19] (\goreg_dm.dout_i_reg[19] ),
        .\goreg_dm.dout_i_reg[9] (\goreg_dm.dout_i_reg[9] ),
        .incr_need_to_split_q(incr_need_to_split_q),
        .legal_wrap_len_q(legal_wrap_len_q),
        .m_axi_arready(m_axi_arready),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rvalid(m_axi_rvalid),
        .\m_payload_i_reg[47] (\m_payload_i_reg[47] ),
        .\m_payload_i_reg[51] (\m_payload_i_reg[51] ),
        .\next_mi_addr_reg[8] (\next_mi_addr_reg[8] ),
        .\next_mi_addr_reg[8]_0 (\next_mi_addr_reg[8]_0 ),
        .out(out),
        .\pushed_commands_reg[7] (\pushed_commands_reg[7] ),
        .\queue_id_reg[0] (\queue_id_reg[0] ),
        .\queue_id_reg[0]_0 (\queue_id_reg[0]_0 ),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid),
        .si_full_size_q(si_full_size_q),
        .\split_addr_mask_q_reg[0] (\split_addr_mask_q_reg[0] ),
        .\split_addr_mask_q_reg[1] (\split_addr_mask_q_reg[1] ),
        .\split_addr_mask_q_reg[2] (\split_addr_mask_q_reg[2] ),
        .\split_addr_mask_q_reg[31] (\split_addr_mask_q_reg[31] ),
        .split_ongoing(split_ongoing),
        .\unalignment_addr_q_reg[4] (\unalignment_addr_q_reg[4] ),
        .wrap_need_to_split_q(wrap_need_to_split_q),
        .\wrap_rest_len_reg[7] (\wrap_rest_len_reg[7] ),
        .\wrap_unaligned_len_q_reg[7] (\wrap_unaligned_len_q_reg[7] ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_axic_reg_srl_fifo" *) 
module bd_1_axi_data_fifo_v2_1_14_axic_reg_srl_fifo
   (\gen_arbiter.m_target_hot_i_reg[1] ,
    SR,
    \gen_rep[0].fifoaddr_reg[0]_0 ,
    m_axi_wvalid,
    wm_mr_wvalid_2,
    storage_data11_10,
    out0,
    m_valid_i_reg_0,
    s_axi_wready,
    m_valid_i_reg_1,
    s_ready_i_reg_0,
    aclk,
    aresetn_d_reg,
    areset_d1_reg_0,
    \m_payload_i_reg[18] ,
    sel_4,
    s_axi_awaddr,
    sel_3,
    \storage_data1_reg[0]_0 ,
    m_avalid,
    \storage_data1_reg[0]_1 ,
    m_avalid_0,
    \storage_data1_reg[0]_2 ,
    \storage_data1_reg[1]_0 ,
    \storage_data1_reg[0]_3 ,
    m_avalid_1,
    \storage_data1_reg[0]_4 ,
    s_axi_wlast,
    s_axi_wvalid,
    \m_ready_d_reg[1] ,
    s_axi_awvalid,
    ss_wr_awvalid_1,
    m_axi_wready,
    p_14_in,
    \m_ready_d_reg[1]_0 ,
    \m_ready_d_reg[1]_1 );
  output \gen_arbiter.m_target_hot_i_reg[1] ;
  output [0:0]SR;
  output \gen_rep[0].fifoaddr_reg[0]_0 ;
  output [1:0]m_axi_wvalid;
  output wm_mr_wvalid_2;
  output storage_data11_10;
  output [1:0]out0;
  output m_valid_i_reg_0;
  output [0:0]s_axi_wready;
  output m_valid_i_reg_1;
  output s_ready_i_reg_0;
  input aclk;
  input [0:0]aresetn_d_reg;
  input areset_d1_reg_0;
  input \m_payload_i_reg[18] ;
  input sel_4;
  input [3:0]s_axi_awaddr;
  input sel_3;
  input \storage_data1_reg[0]_0 ;
  input m_avalid;
  input \storage_data1_reg[0]_1 ;
  input m_avalid_0;
  input \storage_data1_reg[0]_2 ;
  input \storage_data1_reg[1]_0 ;
  input \storage_data1_reg[0]_3 ;
  input m_avalid_1;
  input \storage_data1_reg[0]_4 ;
  input [0:0]s_axi_wlast;
  input [0:0]s_axi_wvalid;
  input \m_ready_d_reg[1] ;
  input [0:0]s_axi_awvalid;
  input ss_wr_awvalid_1;
  input [1:0]m_axi_wready;
  input p_14_in;
  input \m_ready_d_reg[1]_0 ;
  input \m_ready_d_reg[1]_1 ;

  wire \/FSM_onehot_state[0]_i_1_n_0 ;
  wire \/FSM_onehot_state[1]_i_1_n_0 ;
  wire \/FSM_onehot_state[2]_i_1_n_0 ;
  wire \/FSM_onehot_state[3]_i_2_n_0 ;
  wire \<const0> ;
  wire \<const1> ;
  wire \FSM_onehot_state[3]_i_3__0_n_0 ;
  wire \FSM_onehot_state[3]_i_4__0_n_0 ;
  wire \FSM_onehot_state[3]_i_7__0_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_state_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_state_reg_n_0_[3] ;
  wire [0:0]SR;
  wire aclk;
  wire areset_d1_reg_0;
  wire [0:0]aresetn_d_reg;
  wire [1:0]fifoaddr;
  wire \gen_arbiter.m_target_hot_i_reg[1] ;
  wire \gen_rep[0].fifoaddr[0]_i_1__0_n_0 ;
  wire \gen_rep[0].fifoaddr[1]_i_1__0_n_0 ;
  wire \gen_rep[0].fifoaddr_reg[0]_0 ;
  wire \gen_srls[0].gen_rep[0].srl_nx1_n_1 ;
  wire \gen_srls[0].gen_rep[1].srl_nx1_n_1 ;
  wire m_aready0__1;
  wire m_aready__1;
  wire m_avalid;
  wire m_avalid_0;
  wire m_avalid_1;
  wire m_avalid_2;
  wire [1:0]m_axi_wready;
  wire [1:0]m_axi_wvalid;
  wire \m_payload_i_reg[18] ;
  wire \m_ready_d_reg[1] ;
  wire \m_ready_d_reg[1]_0 ;
  wire \m_ready_d_reg[1]_1 ;
  wire m_valid_i;
  wire m_valid_i_i_1_n_0;
  wire m_valid_i_i_2_n_0;
  wire m_valid_i_reg_0;
  wire m_valid_i_reg_1;
  (* RTL_KEEP = "yes" *) wire [1:0]out0;
  wire p_0_in;
  wire p_11_in;
  wire p_14_in;
  wire push;
  wire [3:0]s_axi_awaddr;
  wire [0:0]s_axi_awvalid;
  wire [0:0]s_axi_wlast;
  wire [0:0]s_axi_wready;
  wire [0:0]s_axi_wvalid;
  wire s_ready_i_reg_0;
  wire sel_3;
  wire sel_4;
  wire ss_wr_awvalid_1;
  wire state17_out;
  wire storage_data11_10;
  wire \storage_data1[0]_i_1__0_n_0 ;
  wire \storage_data1[1]_i_1__0_n_0 ;
  wire \storage_data1_reg[0]_0 ;
  wire \storage_data1_reg[0]_1 ;
  wire \storage_data1_reg[0]_2 ;
  wire \storage_data1_reg[0]_3 ;
  wire \storage_data1_reg[0]_4 ;
  wire \storage_data1_reg[1]_0 ;
  wire \storage_data1_reg_n_0_[0] ;
  wire \storage_data1_reg_n_0_[1] ;
  wire wm_mr_wvalid_2;

  LUT3 #(
    .INIT(8'h40)) 
    \/FSM_onehot_state[0]_i_1 
       (.I0(out0[1]),
        .I1(state17_out),
        .I2(out0[0]),
        .O(\/FSM_onehot_state[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0B1A0)) 
    \/FSM_onehot_state[1]_i_1 
       (.I0(out0[1]),
        .I1(m_valid_i_reg_1),
        .I2(ss_wr_awvalid_1),
        .I3(\FSM_onehot_state[3]_i_7__0_n_0 ),
        .I4(out0[0]),
        .O(\/FSM_onehot_state[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0A0A4E5F)) 
    \/FSM_onehot_state[2]_i_1 
       (.I0(out0[1]),
        .I1(m_valid_i_reg_1),
        .I2(ss_wr_awvalid_1),
        .I3(\FSM_onehot_state[3]_i_7__0_n_0 ),
        .I4(out0[0]),
        .O(\/FSM_onehot_state[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \/FSM_onehot_state[3]_i_2 
       (.I0(out0[0]),
        .I1(state17_out),
        .I2(out0[1]),
        .O(\/FSM_onehot_state[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEFEEEEEEEEE)) 
    \FSM_onehot_state[3]_i_1__0 
       (.I0(\FSM_onehot_state[3]_i_3__0_n_0 ),
        .I1(\FSM_onehot_state[3]_i_4__0_n_0 ),
        .I2(\FSM_onehot_state_reg_n_0_[3] ),
        .I3(m_valid_i_reg_1),
        .I4(m_valid_i_reg_0),
        .I5(\FSM_onehot_state[3]_i_7__0_n_0 ),
        .O(m_valid_i));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \FSM_onehot_state[3]_i_3__0 
       (.I0(out0[0]),
        .I1(ss_wr_awvalid_1),
        .I2(m_aready0__1),
        .I3(s_axi_wvalid),
        .I4(m_avalid_2),
        .I5(s_axi_wlast),
        .O(\FSM_onehot_state[3]_i_3__0_n_0 ));
  LUT3 #(
    .INIT(8'h20)) 
    \FSM_onehot_state[3]_i_4__0 
       (.I0(out0[1]),
        .I1(\m_ready_d_reg[1] ),
        .I2(s_axi_awvalid),
        .O(\FSM_onehot_state[3]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'h0800)) 
    \FSM_onehot_state[3]_i_5__0 
       (.I0(\FSM_onehot_state_reg_n_0_[3] ),
        .I1(\gen_rep[0].fifoaddr_reg[0]_0 ),
        .I2(\m_ready_d_reg[1] ),
        .I3(s_axi_awvalid),
        .O(m_valid_i_reg_1));
  LUT6 #(
    .INIT(64'h7FFF000000000000)) 
    \FSM_onehot_state[3]_i_6__0 
       (.I0(s_axi_wlast),
        .I1(m_avalid_2),
        .I2(s_axi_wvalid),
        .I3(m_aready0__1),
        .I4(ss_wr_awvalid_1),
        .I5(out0[0]),
        .O(m_valid_i_reg_0));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    \FSM_onehot_state[3]_i_7__0 
       (.I0(fifoaddr[1]),
        .I1(fifoaddr[0]),
        .I2(\FSM_onehot_state_reg_n_0_[3] ),
        .I3(s_axi_wlast),
        .I4(p_0_in),
        .I5(m_aready0__1),
        .O(\FSM_onehot_state[3]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h8000000080008000)) 
    \FSM_onehot_state[3]_i_8__0 
       (.I0(m_aready0__1),
        .I1(s_axi_wvalid),
        .I2(m_avalid_2),
        .I3(s_axi_wlast),
        .I4(\m_ready_d_reg[1] ),
        .I5(s_axi_awvalid),
        .O(state17_out));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg[0] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[0]_i_1_n_0 ),
        .Q(out0[1]),
        .S(SR));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[1] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[1]_i_1_n_0 ),
        .Q(out0[0]),
        .R(SR));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[2] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[2]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[2] ),
        .R(SR));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[3] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[3]_i_2_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[3] ),
        .R(SR));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    areset_d1_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(aresetn_d_reg),
        .Q(SR),
        .R(\<const0> ));
  LUT6 #(
    .INIT(64'hA2B777775D488888)) 
    \gen_rep[0].fifoaddr[0]_i_1__0 
       (.I0(m_aready__1),
        .I1(\FSM_onehot_state_reg_n_0_[3] ),
        .I2(\gen_rep[0].fifoaddr_reg[0]_0 ),
        .I3(out0[0]),
        .I4(ss_wr_awvalid_1),
        .I5(fifoaddr[0]),
        .O(\gen_rep[0].fifoaddr[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFEA557F0015AA80)) 
    \gen_rep[0].fifoaddr[1]_i_1__0 
       (.I0(fifoaddr[0]),
        .I1(p_11_in),
        .I2(out0[0]),
        .I3(m_valid_i_reg_1),
        .I4(storage_data11_10),
        .I5(fifoaddr[1]),
        .O(\gen_rep[0].fifoaddr[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0444444444444444)) 
    \gen_rep[0].fifoaddr[1]_i_2__0 
       (.I0(\m_ready_d_reg[1] ),
        .I1(s_axi_awvalid),
        .I2(m_aready0__1),
        .I3(s_axi_wvalid),
        .I4(m_avalid_2),
        .I5(s_axi_wlast),
        .O(p_11_in));
  LUT5 #(
    .INIT(32'h80000000)) 
    \gen_rep[0].fifoaddr[1]_i_3__0 
       (.I0(m_aready0__1),
        .I1(s_axi_wvalid),
        .I2(m_avalid_2),
        .I3(s_axi_wlast),
        .I4(\FSM_onehot_state_reg_n_0_[3] ),
        .O(storage_data11_10));
  (* syn_keep = "1" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gen_rep[0].fifoaddr_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_rep[0].fifoaddr[0]_i_1__0_n_0 ),
        .Q(fifoaddr[0]),
        .S(aresetn_d_reg));
  (* syn_keep = "1" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gen_rep[0].fifoaddr_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_rep[0].fifoaddr[1]_i_1__0_n_0 ),
        .Q(fifoaddr[1]),
        .S(aresetn_d_reg));
  bd_1_axi_data_fifo_v2_1_14_ndeep_srl \gen_srls[0].gen_rep[0].srl_nx1 
       (.aclk(aclk),
        .fifoaddr(fifoaddr),
        .\gen_arbiter.m_target_hot_i_reg[1] (\gen_arbiter.m_target_hot_i_reg[1] ),
        .out0(\FSM_onehot_state_reg_n_0_[3] ),
        .push(push),
        .s_axi_awaddr(s_axi_awaddr),
        .sel_3(sel_3),
        .sel_4(sel_4),
        .\storage_data1_reg[0] (\gen_srls[0].gen_rep[0].srl_nx1_n_1 ));
  bd_1_axi_data_fifo_v2_1_14_ndeep_srl_48 \gen_srls[0].gen_rep[1].srl_nx1 
       (.aclk(aclk),
        .fifoaddr(fifoaddr),
        .m_aready0__1(m_aready0__1),
        .m_aready__1(m_aready__1),
        .m_avalid(m_avalid),
        .m_avalid_0(m_avalid_0),
        .m_avalid_1(m_avalid_1),
        .m_avalid_2(m_avalid_2),
        .m_axi_wready(m_axi_wready),
        .\m_payload_i_reg[18] (\m_payload_i_reg[18] ),
        .\m_ready_d_reg[1] (\m_ready_d_reg[1] ),
        .out0({out0[0],\FSM_onehot_state_reg_n_0_[3] }),
        .p_14_in(p_14_in),
        .push(push),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wvalid(s_axi_wvalid),
        .s_ready_i_reg(\gen_rep[0].fifoaddr_reg[0]_0 ),
        .\storage_data1_reg[0] (\storage_data1_reg[0]_3 ),
        .\storage_data1_reg[0]_0 (\storage_data1_reg_n_0_[0] ),
        .\storage_data1_reg[0]_1 (\storage_data1_reg[0]_2 ),
        .\storage_data1_reg[0]_2 (\storage_data1_reg[0]_0 ),
        .\storage_data1_reg[1] (\gen_srls[0].gen_rep[1].srl_nx1_n_1 ),
        .\storage_data1_reg[1]_0 (\storage_data1_reg_n_0_[1] ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000080)) 
    \m_axi_wvalid[0]_INST_0 
       (.I0(p_0_in),
        .I1(\storage_data1_reg[0]_0 ),
        .I2(m_avalid),
        .I3(\storage_data1_reg_n_0_[1] ),
        .I4(\storage_data1_reg_n_0_[0] ),
        .I5(\storage_data1_reg[0]_1 ),
        .O(m_axi_wvalid[0]));
  LUT6 #(
    .INIT(64'hFFFFFFFF00800000)) 
    \m_axi_wvalid[1]_INST_0 
       (.I0(p_0_in),
        .I1(\storage_data1_reg[0]_3 ),
        .I2(m_avalid_1),
        .I3(\storage_data1_reg_n_0_[1] ),
        .I4(\storage_data1_reg_n_0_[0] ),
        .I5(\storage_data1_reg[0]_4 ),
        .O(m_axi_wvalid[1]));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axi_wvalid[1]_INST_0_i_1 
       (.I0(m_avalid_2),
        .I1(s_axi_wvalid),
        .O(p_0_in));
  LUT6 #(
    .INIT(64'hEEEEEEFEEEEEEEEE)) 
    m_valid_i_i_1
       (.I0(m_valid_i_i_2_n_0),
        .I1(\FSM_onehot_state[3]_i_4__0_n_0 ),
        .I2(\FSM_onehot_state_reg_n_0_[3] ),
        .I3(m_valid_i_reg_1),
        .I4(m_valid_i_reg_0),
        .I5(\FSM_onehot_state[3]_i_7__0_n_0 ),
        .O(m_valid_i_i_1_n_0));
  LUT6 #(
    .INIT(64'h2AAAAAAA00000000)) 
    m_valid_i_i_2
       (.I0(out0[0]),
        .I1(m_aready0__1),
        .I2(s_axi_wvalid),
        .I3(m_avalid_2),
        .I4(s_axi_wlast),
        .I5(ss_wr_awvalid_1),
        .O(m_valid_i_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00800000)) 
    m_valid_i_i_4
       (.I0(p_0_in),
        .I1(m_avalid_0),
        .I2(\storage_data1_reg[0]_2 ),
        .I3(\storage_data1_reg_n_0_[0] ),
        .I4(\storage_data1_reg_n_0_[1] ),
        .I5(\storage_data1_reg[1]_0 ),
        .O(wm_mr_wvalid_2));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(m_valid_i),
        .D(m_valid_i_i_1_n_0),
        .Q(m_avalid_2),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \s_axi_wready[1]_INST_0 
       (.I0(m_avalid_2),
        .I1(m_aready0__1),
        .O(s_axi_wready));
  LUT2 #(
    .INIT(4'h2)) 
    s_ready_i_i_2__1
       (.I0(fifoaddr[1]),
        .I1(fifoaddr[0]),
        .O(s_ready_i_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(areset_d1_reg_0),
        .Q(\gen_rep[0].fifoaddr_reg[0]_0 ),
        .R(aresetn_d_reg));
  LUT6 #(
    .INIT(64'hAAAFABAFAAA0A8A0)) 
    \storage_data1[0]_i_1__0 
       (.I0(\gen_srls[0].gen_rep[0].srl_nx1_n_1 ),
        .I1(\FSM_onehot_state_reg_n_0_[3] ),
        .I2(\m_ready_d_reg[1]_0 ),
        .I3(m_aready__1),
        .I4(\m_ready_d_reg[1]_1 ),
        .I5(\storage_data1_reg_n_0_[0] ),
        .O(\storage_data1[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAFABAFAAA0A8A0)) 
    \storage_data1[1]_i_1__0 
       (.I0(\gen_srls[0].gen_rep[1].srl_nx1_n_1 ),
        .I1(\FSM_onehot_state_reg_n_0_[3] ),
        .I2(\m_ready_d_reg[1]_0 ),
        .I3(m_aready__1),
        .I4(\m_ready_d_reg[1]_1 ),
        .I5(\storage_data1_reg_n_0_[1] ),
        .O(\storage_data1[1]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \storage_data1_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\storage_data1[0]_i_1__0_n_0 ),
        .Q(\storage_data1_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \storage_data1_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\storage_data1[1]_i_1__0_n_0 ),
        .Q(\storage_data1_reg_n_0_[1] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_axic_reg_srl_fifo" *) 
module bd_1_axi_data_fifo_v2_1_14_axic_reg_srl_fifo_49
   (\gen_arbiter.m_target_hot_i_reg[1] ,
    \gen_rep[0].fifoaddr_reg[0]_0 ,
    s_axi_wready,
    storage_data11,
    out0,
    m_valid_i_reg_0,
    s_ready_i_reg_0,
    \gen_axi.s_axi_wready_i_reg ,
    s_ready_i_reg_1,
    m_valid_i_reg_1,
    s_ready_i_reg_2,
    aclk,
    SS,
    SR,
    areset_d1_reg,
    \m_payload_i_reg[18] ,
    sel_4,
    s_axi_awaddr,
    sel_3,
    s_axi_wlast,
    s_axi_wvalid,
    \m_ready_d_reg[1] ,
    s_axi_awvalid,
    ss_wr_awvalid_0,
    m_axi_wready,
    \storage_data1_reg[0]_0 ,
    m_avalid,
    m_avalid_0,
    \storage_data1_reg[0]_1 ,
    m_avalid_1,
    p_14_in,
    \storage_data1_reg[0]_2 ,
    \m_ready_d_reg[1]_0 ,
    \m_ready_d_reg[1]_1 );
  output \gen_arbiter.m_target_hot_i_reg[1] ;
  output \gen_rep[0].fifoaddr_reg[0]_0 ;
  output [0:0]s_axi_wready;
  output storage_data11;
  output [1:0]out0;
  output m_valid_i_reg_0;
  output s_ready_i_reg_0;
  output \gen_axi.s_axi_wready_i_reg ;
  output s_ready_i_reg_1;
  output m_valid_i_reg_1;
  output s_ready_i_reg_2;
  input aclk;
  input [0:0]SS;
  input [0:0]SR;
  input areset_d1_reg;
  input \m_payload_i_reg[18] ;
  input sel_4;
  input [3:0]s_axi_awaddr;
  input sel_3;
  input [0:0]s_axi_wlast;
  input [0:0]s_axi_wvalid;
  input \m_ready_d_reg[1] ;
  input [0:0]s_axi_awvalid;
  input ss_wr_awvalid_0;
  input [1:0]m_axi_wready;
  input \storage_data1_reg[0]_0 ;
  input m_avalid;
  input m_avalid_0;
  input \storage_data1_reg[0]_1 ;
  input m_avalid_1;
  input p_14_in;
  input \storage_data1_reg[0]_2 ;
  input \m_ready_d_reg[1]_0 ;
  input \m_ready_d_reg[1]_1 ;

  wire \/FSM_onehot_state[0]_i_1_n_0 ;
  wire \/FSM_onehot_state[1]_i_1_n_0 ;
  wire \/FSM_onehot_state[2]_i_1_n_0 ;
  wire \/FSM_onehot_state[3]_i_2_n_0 ;
  wire \<const0> ;
  wire \<const1> ;
  wire \FSM_onehot_state[3]_i_3_n_0 ;
  wire \FSM_onehot_state[3]_i_4_n_0 ;
  wire \FSM_onehot_state[3]_i_7_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_state_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_state_reg_n_0_[3] ;
  wire [0:0]SR;
  wire [0:0]SS;
  wire aclk;
  wire areset_d1_reg;
  wire [1:0]fifoaddr;
  wire \gen_arbiter.m_target_hot_i_reg[1] ;
  wire \gen_axi.s_axi_wready_i_reg ;
  wire \gen_rep[0].fifoaddr[0]_i_1_n_0 ;
  wire \gen_rep[0].fifoaddr[1]_i_1_n_0 ;
  wire \gen_rep[0].fifoaddr_reg[0]_0 ;
  wire \gen_srls[0].gen_rep[0].srl_nx1_n_1 ;
  wire \gen_srls[0].gen_rep[1].srl_nx1_n_1 ;
  wire m_aready0__1;
  wire m_aready__1;
  wire m_avalid;
  wire m_avalid_0;
  wire m_avalid_1;
  wire m_avalid_2;
  wire [1:0]m_axi_wready;
  wire \m_payload_i_reg[18] ;
  wire \m_ready_d_reg[1] ;
  wire \m_ready_d_reg[1]_0 ;
  wire \m_ready_d_reg[1]_1 ;
  wire m_valid_i;
  wire m_valid_i_i_1_n_0;
  wire m_valid_i_i_2_n_0;
  wire m_valid_i_reg_0;
  wire m_valid_i_reg_1;
  (* RTL_KEEP = "yes" *) wire [1:0]out0;
  wire p_0_in;
  wire p_11_in;
  wire p_14_in;
  wire push;
  wire [3:0]s_axi_awaddr;
  wire [0:0]s_axi_awvalid;
  wire [0:0]s_axi_wlast;
  wire [0:0]s_axi_wready;
  wire [0:0]s_axi_wvalid;
  wire s_ready_i_reg_0;
  wire s_ready_i_reg_1;
  wire s_ready_i_reg_2;
  wire sel_3;
  wire sel_4;
  wire ss_wr_awvalid_0;
  wire state17_out;
  wire storage_data11;
  wire \storage_data1[0]_i_1_n_0 ;
  wire \storage_data1[1]_i_1_n_0 ;
  wire \storage_data1_reg[0]_0 ;
  wire \storage_data1_reg[0]_1 ;
  wire \storage_data1_reg[0]_2 ;
  wire \storage_data1_reg_n_0_[0] ;
  wire \storage_data1_reg_n_0_[1] ;

  LUT3 #(
    .INIT(8'h40)) 
    \/FSM_onehot_state[0]_i_1 
       (.I0(out0[1]),
        .I1(state17_out),
        .I2(out0[0]),
        .O(\/FSM_onehot_state[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0B1A0)) 
    \/FSM_onehot_state[1]_i_1 
       (.I0(out0[1]),
        .I1(m_valid_i_reg_1),
        .I2(ss_wr_awvalid_0),
        .I3(\FSM_onehot_state[3]_i_7_n_0 ),
        .I4(out0[0]),
        .O(\/FSM_onehot_state[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0A0A4E5F)) 
    \/FSM_onehot_state[2]_i_1 
       (.I0(out0[1]),
        .I1(m_valid_i_reg_1),
        .I2(ss_wr_awvalid_0),
        .I3(\FSM_onehot_state[3]_i_7_n_0 ),
        .I4(out0[0]),
        .O(\/FSM_onehot_state[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \/FSM_onehot_state[3]_i_2 
       (.I0(out0[0]),
        .I1(state17_out),
        .I2(out0[1]),
        .O(\/FSM_onehot_state[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEFEEEEEEEEE)) 
    \FSM_onehot_state[3]_i_1 
       (.I0(\FSM_onehot_state[3]_i_3_n_0 ),
        .I1(\FSM_onehot_state[3]_i_4_n_0 ),
        .I2(\FSM_onehot_state_reg_n_0_[3] ),
        .I3(m_valid_i_reg_1),
        .I4(m_valid_i_reg_0),
        .I5(\FSM_onehot_state[3]_i_7_n_0 ),
        .O(m_valid_i));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \FSM_onehot_state[3]_i_3 
       (.I0(out0[0]),
        .I1(ss_wr_awvalid_0),
        .I2(m_aready0__1),
        .I3(s_axi_wvalid),
        .I4(m_avalid_2),
        .I5(s_axi_wlast),
        .O(\FSM_onehot_state[3]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h20)) 
    \FSM_onehot_state[3]_i_4 
       (.I0(out0[1]),
        .I1(\m_ready_d_reg[1] ),
        .I2(s_axi_awvalid),
        .O(\FSM_onehot_state[3]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h0800)) 
    \FSM_onehot_state[3]_i_5 
       (.I0(\FSM_onehot_state_reg_n_0_[3] ),
        .I1(\gen_rep[0].fifoaddr_reg[0]_0 ),
        .I2(\m_ready_d_reg[1] ),
        .I3(s_axi_awvalid),
        .O(m_valid_i_reg_1));
  LUT6 #(
    .INIT(64'h7FFF000000000000)) 
    \FSM_onehot_state[3]_i_6 
       (.I0(s_axi_wlast),
        .I1(m_avalid_2),
        .I2(s_axi_wvalid),
        .I3(m_aready0__1),
        .I4(ss_wr_awvalid_0),
        .I5(out0[0]),
        .O(m_valid_i_reg_0));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    \FSM_onehot_state[3]_i_7 
       (.I0(fifoaddr[1]),
        .I1(fifoaddr[0]),
        .I2(\FSM_onehot_state_reg_n_0_[3] ),
        .I3(s_axi_wlast),
        .I4(p_0_in),
        .I5(m_aready0__1),
        .O(\FSM_onehot_state[3]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h8000000080008000)) 
    \FSM_onehot_state[3]_i_8 
       (.I0(m_aready0__1),
        .I1(s_axi_wvalid),
        .I2(m_avalid_2),
        .I3(s_axi_wlast),
        .I4(\m_ready_d_reg[1] ),
        .I5(s_axi_awvalid),
        .O(state17_out));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_state[3]_i_9 
       (.I0(m_avalid_2),
        .I1(s_axi_wvalid),
        .O(p_0_in));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg[0] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[0]_i_1_n_0 ),
        .Q(out0[1]),
        .S(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[1] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[1]_i_1_n_0 ),
        .Q(out0[0]),
        .R(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[2] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[2]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[2] ),
        .R(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[3] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[3]_i_2_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[3] ),
        .R(SS));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'hA2B777775D488888)) 
    \gen_rep[0].fifoaddr[0]_i_1 
       (.I0(m_aready__1),
        .I1(\FSM_onehot_state_reg_n_0_[3] ),
        .I2(\gen_rep[0].fifoaddr_reg[0]_0 ),
        .I3(out0[0]),
        .I4(ss_wr_awvalid_0),
        .I5(fifoaddr[0]),
        .O(\gen_rep[0].fifoaddr[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFEA557F0015AA80)) 
    \gen_rep[0].fifoaddr[1]_i_1 
       (.I0(fifoaddr[0]),
        .I1(p_11_in),
        .I2(out0[0]),
        .I3(m_valid_i_reg_1),
        .I4(storage_data11),
        .I5(fifoaddr[1]),
        .O(\gen_rep[0].fifoaddr[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0444444444444444)) 
    \gen_rep[0].fifoaddr[1]_i_2 
       (.I0(\m_ready_d_reg[1] ),
        .I1(s_axi_awvalid),
        .I2(m_aready0__1),
        .I3(s_axi_wvalid),
        .I4(m_avalid_2),
        .I5(s_axi_wlast),
        .O(p_11_in));
  LUT5 #(
    .INIT(32'h80000000)) 
    \gen_rep[0].fifoaddr[1]_i_3 
       (.I0(m_aready0__1),
        .I1(s_axi_wvalid),
        .I2(m_avalid_2),
        .I3(s_axi_wlast),
        .I4(\FSM_onehot_state_reg_n_0_[3] ),
        .O(storage_data11));
  (* syn_keep = "1" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gen_rep[0].fifoaddr_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_rep[0].fifoaddr[0]_i_1_n_0 ),
        .Q(fifoaddr[0]),
        .S(SR));
  (* syn_keep = "1" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gen_rep[0].fifoaddr_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_rep[0].fifoaddr[1]_i_1_n_0 ),
        .Q(fifoaddr[1]),
        .S(SR));
  bd_1_axi_data_fifo_v2_1_14_ndeep_srl_50 \gen_srls[0].gen_rep[0].srl_nx1 
       (.aclk(aclk),
        .fifoaddr(fifoaddr),
        .\gen_arbiter.m_target_hot_i_reg[1] (\gen_arbiter.m_target_hot_i_reg[1] ),
        .out0(\FSM_onehot_state_reg_n_0_[3] ),
        .push(push),
        .s_axi_awaddr(s_axi_awaddr),
        .sel_3(sel_3),
        .sel_4(sel_4),
        .\storage_data1_reg[0] (\gen_srls[0].gen_rep[0].srl_nx1_n_1 ));
  bd_1_axi_data_fifo_v2_1_14_ndeep_srl_51 \gen_srls[0].gen_rep[1].srl_nx1 
       (.aclk(aclk),
        .fifoaddr(fifoaddr),
        .m_aready0__1(m_aready0__1),
        .m_aready__1(m_aready__1),
        .m_avalid(m_avalid),
        .m_avalid_0(m_avalid_0),
        .m_avalid_1(m_avalid_1),
        .m_avalid_2(m_avalid_2),
        .m_axi_wready(m_axi_wready),
        .\m_payload_i_reg[18] (\m_payload_i_reg[18] ),
        .\m_ready_d_reg[1] (\m_ready_d_reg[1] ),
        .out0({out0[0],\FSM_onehot_state_reg_n_0_[3] }),
        .p_14_in(p_14_in),
        .push(push),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wvalid(s_axi_wvalid),
        .s_ready_i_reg(\gen_rep[0].fifoaddr_reg[0]_0 ),
        .\storage_data1_reg[0] (\storage_data1_reg[0]_0 ),
        .\storage_data1_reg[0]_0 (\storage_data1_reg_n_0_[0] ),
        .\storage_data1_reg[0]_1 (\storage_data1_reg[0]_2 ),
        .\storage_data1_reg[0]_2 (\storage_data1_reg[0]_1 ),
        .\storage_data1_reg[1] (\gen_srls[0].gen_rep[1].srl_nx1_n_1 ),
        .\storage_data1_reg[1]_0 (\storage_data1_reg_n_0_[1] ));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    \m_axi_wvalid[0]_INST_0_i_1 
       (.I0(\storage_data1_reg_n_0_[0] ),
        .I1(\storage_data1_reg_n_0_[1] ),
        .I2(m_avalid_0),
        .I3(\storage_data1_reg[0]_1 ),
        .I4(s_axi_wvalid),
        .I5(m_avalid_2),
        .O(s_ready_i_reg_0));
  LUT6 #(
    .INIT(64'h0020000000000000)) 
    \m_axi_wvalid[1]_INST_0_i_2 
       (.I0(\storage_data1_reg_n_0_[0] ),
        .I1(\storage_data1_reg_n_0_[1] ),
        .I2(m_avalid),
        .I3(\storage_data1_reg[0]_0 ),
        .I4(s_axi_wvalid),
        .I5(m_avalid_2),
        .O(s_ready_i_reg_1));
  LUT6 #(
    .INIT(64'hEEEEEEFEEEEEEEEE)) 
    m_valid_i_i_1
       (.I0(m_valid_i_i_2_n_0),
        .I1(\FSM_onehot_state[3]_i_4_n_0 ),
        .I2(\FSM_onehot_state_reg_n_0_[3] ),
        .I3(m_valid_i_reg_1),
        .I4(m_valid_i_reg_0),
        .I5(\FSM_onehot_state[3]_i_7_n_0 ),
        .O(m_valid_i_i_1_n_0));
  LUT6 #(
    .INIT(64'h2AAAAAAA00000000)) 
    m_valid_i_i_2
       (.I0(out0[0]),
        .I1(m_aready0__1),
        .I2(s_axi_wvalid),
        .I3(m_avalid_2),
        .I4(s_axi_wlast),
        .I5(ss_wr_awvalid_0),
        .O(m_valid_i_i_2_n_0));
  LUT6 #(
    .INIT(64'h0020000000000000)) 
    m_valid_i_i_5
       (.I0(\storage_data1_reg_n_0_[1] ),
        .I1(\storage_data1_reg_n_0_[0] ),
        .I2(m_avalid_1),
        .I3(\storage_data1_reg[0]_2 ),
        .I4(s_axi_wvalid),
        .I5(m_avalid_2),
        .O(\gen_axi.s_axi_wready_i_reg ));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(m_valid_i),
        .D(m_valid_i_i_1_n_0),
        .Q(m_avalid_2),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \s_axi_wready[0]_INST_0 
       (.I0(m_avalid_2),
        .I1(m_aready0__1),
        .O(s_axi_wready));
  LUT2 #(
    .INIT(4'h2)) 
    s_ready_i_i_2__0
       (.I0(fifoaddr[1]),
        .I1(fifoaddr[0]),
        .O(s_ready_i_reg_2));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(areset_d1_reg),
        .Q(\gen_rep[0].fifoaddr_reg[0]_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'hAAAFABAFAAA0A8A0)) 
    \storage_data1[0]_i_1 
       (.I0(\gen_srls[0].gen_rep[0].srl_nx1_n_1 ),
        .I1(\FSM_onehot_state_reg_n_0_[3] ),
        .I2(\m_ready_d_reg[1]_0 ),
        .I3(m_aready__1),
        .I4(\m_ready_d_reg[1]_1 ),
        .I5(\storage_data1_reg_n_0_[0] ),
        .O(\storage_data1[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAFABAFAAA0A8A0)) 
    \storage_data1[1]_i_1 
       (.I0(\gen_srls[0].gen_rep[1].srl_nx1_n_1 ),
        .I1(\FSM_onehot_state_reg_n_0_[3] ),
        .I2(\m_ready_d_reg[1]_0 ),
        .I3(m_aready__1),
        .I4(\m_ready_d_reg[1]_1 ),
        .I5(\storage_data1_reg_n_0_[1] ),
        .O(\storage_data1[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \storage_data1_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\storage_data1[0]_i_1_n_0 ),
        .Q(\storage_data1_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \storage_data1_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\storage_data1[1]_i_1_n_0 ),
        .Q(\storage_data1_reg_n_0_[1] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_axic_reg_srl_fifo" *) 
module bd_1_axi_data_fifo_v2_1_14_axic_reg_srl_fifo__parameterized0
   (storage_data2_0,
    m_avalid,
    \skid_buffer_reg[72] ,
    out0,
    load_s1_16,
    m_axi_wlast,
    m_axi_wstrb,
    m_axi_wdata,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    aclk,
    SS,
    \FSM_onehot_state_reg[3]_0 ,
    m_ready_d,
    \gen_arbiter.m_valid_i_reg ,
    Q,
    sa_wm_awvalid,
    m_axi_wready,
    s_axi_wlast,
    m_axi_wvalid,
    s_axi_wstrb,
    s_axi_wdata,
    SR);
  output storage_data2_0;
  output m_avalid;
  output \skid_buffer_reg[72] ;
  output [0:0]out0;
  output load_s1_16;
  output [0:0]m_axi_wlast;
  output [7:0]m_axi_wstrb;
  output [63:0]m_axi_wdata;
  input \gen_arbiter.m_grant_enc_i_reg[0] ;
  input aclk;
  input [0:0]SS;
  input \FSM_onehot_state_reg[3]_0 ;
  input [0:0]m_ready_d;
  input \gen_arbiter.m_valid_i_reg ;
  input [0:0]Q;
  input [0:0]sa_wm_awvalid;
  input [0:0]m_axi_wready;
  input [1:0]s_axi_wlast;
  input [0:0]m_axi_wvalid;
  input [15:0]s_axi_wstrb;
  input [127:0]s_axi_wdata;
  input [0:0]SR;

  wire \/FSM_onehot_state[1]_i_1_n_0 ;
  wire \/FSM_onehot_state[2]_i_1_n_0 ;
  wire \<const0> ;
  wire \<const1> ;
  wire \FSM_onehot_state[0]_i_1__1_n_0 ;
  wire \FSM_onehot_state[3]_i_2__1_n_0 ;
  wire \FSM_onehot_state_reg[3]_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_state_reg_n_0_[2] ;
  wire [0:0]Q;
  wire [0:0]SR;
  wire [0:0]SS;
  wire aclk;
  wire [1:0]fifoaddr;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_arbiter.m_valid_i_reg ;
  wire \gen_rep[0].fifoaddr[0]_i_1__0_n_0 ;
  wire \gen_rep[0].fifoaddr[1]_i_1__0_n_0 ;
  wire load_s1_16;
  wire m_aready__1;
  wire m_avalid;
  wire [63:0]m_axi_wdata;
  wire [0:0]m_axi_wlast;
  wire [0:0]m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire [0:0]m_axi_wvalid;
  wire [0:0]m_ready_d;
  wire m_valid_i;
  wire \m_valid_i_inferred__0/i__n_0 ;
  (* RTL_KEEP = "yes" *) wire [0:0]out0;
  wire p_0_in3_out;
  (* RTL_KEEP = "yes" *) wire p_0_in6_in;
  (* RTL_KEEP = "yes" *) wire p_7_in;
  wire [127:0]s_axi_wdata;
  wire [1:0]s_axi_wlast;
  wire [15:0]s_axi_wstrb;
  wire [0:0]sa_wm_awvalid;
  wire \skid_buffer_reg[72] ;
  wire storage_data2_0;

  LUT6 #(
    .INIT(64'h0800080008FF0800)) 
    \/FSM_onehot_state[1]_i_1 
       (.I0(Q),
        .I1(\gen_arbiter.m_valid_i_reg ),
        .I2(m_ready_d),
        .I3(p_7_in),
        .I4(p_0_in3_out),
        .I5(p_0_in6_in),
        .O(\/FSM_onehot_state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF00BF00BF00BFFF)) 
    \/FSM_onehot_state[2]_i_1 
       (.I0(m_ready_d),
        .I1(\gen_arbiter.m_valid_i_reg ),
        .I2(Q),
        .I3(p_7_in),
        .I4(p_0_in3_out),
        .I5(p_0_in6_in),
        .O(\/FSM_onehot_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00008AAA00000000)) 
    \FSM_onehot_state[0]_i_1__1 
       (.I0(m_aready__1),
        .I1(m_ready_d),
        .I2(\gen_arbiter.m_valid_i_reg ),
        .I3(Q),
        .I4(p_7_in),
        .I5(p_0_in6_in),
        .O(\FSM_onehot_state[0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF488F488F488)) 
    \FSM_onehot_state[3]_i_1 
       (.I0(m_aready__1),
        .I1(p_0_in6_in),
        .I2(p_7_in),
        .I3(sa_wm_awvalid),
        .I4(out0),
        .I5(p_0_in3_out),
        .O(m_valid_i));
  LUT6 #(
    .INIT(64'h0000000075550000)) 
    \FSM_onehot_state[3]_i_2__1 
       (.I0(m_aready__1),
        .I1(m_ready_d),
        .I2(\gen_arbiter.m_valid_i_reg ),
        .I3(Q),
        .I4(p_0_in6_in),
        .I5(p_7_in),
        .O(\FSM_onehot_state[3]_i_2__1_n_0 ));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg[0] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\FSM_onehot_state[0]_i_1__1_n_0 ),
        .Q(p_7_in),
        .S(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[1] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[1]_i_1_n_0 ),
        .Q(p_0_in6_in),
        .R(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[2] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[2]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[2] ),
        .R(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[3] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\FSM_onehot_state[3]_i_2__1_n_0 ),
        .Q(out0),
        .R(SS));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT5 #(
    .INIT(32'hAB775488)) 
    \gen_rep[0].fifoaddr[0]_i_1__0 
       (.I0(m_aready__1),
        .I1(out0),
        .I2(p_0_in6_in),
        .I3(sa_wm_awvalid),
        .I4(fifoaddr[0]),
        .O(\gen_rep[0].fifoaddr[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEFF777F11008880)) 
    \gen_rep[0].fifoaddr[1]_i_1__0 
       (.I0(fifoaddr[0]),
        .I1(sa_wm_awvalid),
        .I2(p_0_in6_in),
        .I3(out0),
        .I4(m_aready__1),
        .I5(fifoaddr[1]),
        .O(\gen_rep[0].fifoaddr[1]_i_1__0_n_0 ));
  (* syn_keep = "1" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gen_rep[0].fifoaddr_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_rep[0].fifoaddr[0]_i_1__0_n_0 ),
        .Q(fifoaddr[0]),
        .S(SR));
  (* syn_keep = "1" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gen_rep[0].fifoaddr_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_rep[0].fifoaddr[1]_i_1__0_n_0 ),
        .Q(fifoaddr[1]),
        .S(SR));
  bd_1_axi_data_fifo_v2_1_14_ndeep_srl_57 \gen_srls[0].gen_rep[0].srl_nx1 
       (.A(fifoaddr),
        .Q(Q),
        .aclk(aclk),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_arbiter.m_grant_enc_i_reg[0] ),
        .\gen_arbiter.m_valid_i_reg (\gen_arbiter.m_valid_i_reg ),
        .m_aready__1(m_aready__1),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .m_ready_d(m_ready_d),
        .out0({p_0_in6_in,out0}),
        .s_axi_wlast(s_axi_wlast),
        .\storage_data1_reg[0] (\skid_buffer_reg[72] ),
        .storage_data2_0(storage_data2_0));
  LUT5 #(
    .INIT(32'h01000000)) 
    i__i_3__0
       (.I0(fifoaddr[0]),
        .I1(fifoaddr[1]),
        .I2(sa_wm_awvalid),
        .I3(out0),
        .I4(m_aready__1),
        .O(p_0_in3_out));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[100]_INST_0 
       (.I0(s_axi_wdata[100]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[36]),
        .O(m_axi_wdata[36]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[101]_INST_0 
       (.I0(s_axi_wdata[101]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[37]),
        .O(m_axi_wdata[37]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[102]_INST_0 
       (.I0(s_axi_wdata[102]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[38]),
        .O(m_axi_wdata[38]));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[103]_INST_0 
       (.I0(s_axi_wdata[103]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[39]),
        .O(m_axi_wdata[39]));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[104]_INST_0 
       (.I0(s_axi_wdata[104]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[40]),
        .O(m_axi_wdata[40]));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[105]_INST_0 
       (.I0(s_axi_wdata[105]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[41]),
        .O(m_axi_wdata[41]));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[106]_INST_0 
       (.I0(s_axi_wdata[106]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[42]),
        .O(m_axi_wdata[42]));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[107]_INST_0 
       (.I0(s_axi_wdata[107]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[43]),
        .O(m_axi_wdata[43]));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[108]_INST_0 
       (.I0(s_axi_wdata[108]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[44]),
        .O(m_axi_wdata[44]));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[109]_INST_0 
       (.I0(s_axi_wdata[109]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[45]),
        .O(m_axi_wdata[45]));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[110]_INST_0 
       (.I0(s_axi_wdata[110]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[46]),
        .O(m_axi_wdata[46]));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[111]_INST_0 
       (.I0(s_axi_wdata[111]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[47]),
        .O(m_axi_wdata[47]));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[112]_INST_0 
       (.I0(s_axi_wdata[112]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[48]),
        .O(m_axi_wdata[48]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[113]_INST_0 
       (.I0(s_axi_wdata[113]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[49]),
        .O(m_axi_wdata[49]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[114]_INST_0 
       (.I0(s_axi_wdata[114]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[50]),
        .O(m_axi_wdata[50]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[115]_INST_0 
       (.I0(s_axi_wdata[115]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[51]),
        .O(m_axi_wdata[51]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[116]_INST_0 
       (.I0(s_axi_wdata[116]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[52]),
        .O(m_axi_wdata[52]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[117]_INST_0 
       (.I0(s_axi_wdata[117]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[53]),
        .O(m_axi_wdata[53]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[118]_INST_0 
       (.I0(s_axi_wdata[118]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[54]),
        .O(m_axi_wdata[54]));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[119]_INST_0 
       (.I0(s_axi_wdata[119]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[55]),
        .O(m_axi_wdata[55]));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[120]_INST_0 
       (.I0(s_axi_wdata[120]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[56]),
        .O(m_axi_wdata[56]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[121]_INST_0 
       (.I0(s_axi_wdata[121]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[57]),
        .O(m_axi_wdata[57]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[122]_INST_0 
       (.I0(s_axi_wdata[122]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[58]),
        .O(m_axi_wdata[58]));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[123]_INST_0 
       (.I0(s_axi_wdata[123]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[59]),
        .O(m_axi_wdata[59]));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[124]_INST_0 
       (.I0(s_axi_wdata[124]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[60]),
        .O(m_axi_wdata[60]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[125]_INST_0 
       (.I0(s_axi_wdata[125]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[61]),
        .O(m_axi_wdata[61]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[126]_INST_0 
       (.I0(s_axi_wdata[126]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[62]),
        .O(m_axi_wdata[62]));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[127]_INST_0 
       (.I0(s_axi_wdata[127]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[63]),
        .O(m_axi_wdata[63]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[64]_INST_0 
       (.I0(s_axi_wdata[64]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[0]),
        .O(m_axi_wdata[0]));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[65]_INST_0 
       (.I0(s_axi_wdata[65]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[1]),
        .O(m_axi_wdata[1]));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[66]_INST_0 
       (.I0(s_axi_wdata[66]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[2]),
        .O(m_axi_wdata[2]));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[67]_INST_0 
       (.I0(s_axi_wdata[67]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[3]),
        .O(m_axi_wdata[3]));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[68]_INST_0 
       (.I0(s_axi_wdata[68]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[4]),
        .O(m_axi_wdata[4]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[69]_INST_0 
       (.I0(s_axi_wdata[69]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[5]),
        .O(m_axi_wdata[5]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[70]_INST_0 
       (.I0(s_axi_wdata[70]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[6]),
        .O(m_axi_wdata[6]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[71]_INST_0 
       (.I0(s_axi_wdata[71]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[7]),
        .O(m_axi_wdata[7]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[72]_INST_0 
       (.I0(s_axi_wdata[72]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[8]),
        .O(m_axi_wdata[8]));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[73]_INST_0 
       (.I0(s_axi_wdata[73]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[9]),
        .O(m_axi_wdata[9]));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[74]_INST_0 
       (.I0(s_axi_wdata[74]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[10]),
        .O(m_axi_wdata[10]));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[75]_INST_0 
       (.I0(s_axi_wdata[75]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[11]),
        .O(m_axi_wdata[11]));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[76]_INST_0 
       (.I0(s_axi_wdata[76]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[12]),
        .O(m_axi_wdata[12]));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[77]_INST_0 
       (.I0(s_axi_wdata[77]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[13]),
        .O(m_axi_wdata[13]));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[78]_INST_0 
       (.I0(s_axi_wdata[78]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[14]),
        .O(m_axi_wdata[14]));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[79]_INST_0 
       (.I0(s_axi_wdata[79]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[15]),
        .O(m_axi_wdata[15]));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[80]_INST_0 
       (.I0(s_axi_wdata[80]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[16]),
        .O(m_axi_wdata[16]));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[81]_INST_0 
       (.I0(s_axi_wdata[81]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[17]),
        .O(m_axi_wdata[17]));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[82]_INST_0 
       (.I0(s_axi_wdata[82]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[18]),
        .O(m_axi_wdata[18]));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[83]_INST_0 
       (.I0(s_axi_wdata[83]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[19]),
        .O(m_axi_wdata[19]));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[84]_INST_0 
       (.I0(s_axi_wdata[84]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[20]),
        .O(m_axi_wdata[20]));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[85]_INST_0 
       (.I0(s_axi_wdata[85]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[21]),
        .O(m_axi_wdata[21]));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[86]_INST_0 
       (.I0(s_axi_wdata[86]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[22]),
        .O(m_axi_wdata[22]));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[87]_INST_0 
       (.I0(s_axi_wdata[87]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[23]),
        .O(m_axi_wdata[23]));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[88]_INST_0 
       (.I0(s_axi_wdata[88]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[24]),
        .O(m_axi_wdata[24]));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[89]_INST_0 
       (.I0(s_axi_wdata[89]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[25]),
        .O(m_axi_wdata[25]));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[90]_INST_0 
       (.I0(s_axi_wdata[90]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[26]),
        .O(m_axi_wdata[26]));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[91]_INST_0 
       (.I0(s_axi_wdata[91]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[27]),
        .O(m_axi_wdata[27]));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[92]_INST_0 
       (.I0(s_axi_wdata[92]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[28]),
        .O(m_axi_wdata[28]));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[93]_INST_0 
       (.I0(s_axi_wdata[93]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[29]),
        .O(m_axi_wdata[29]));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[94]_INST_0 
       (.I0(s_axi_wdata[94]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[30]),
        .O(m_axi_wdata[30]));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[95]_INST_0 
       (.I0(s_axi_wdata[95]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[31]),
        .O(m_axi_wdata[31]));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[96]_INST_0 
       (.I0(s_axi_wdata[96]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[32]),
        .O(m_axi_wdata[32]));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[97]_INST_0 
       (.I0(s_axi_wdata[97]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[33]),
        .O(m_axi_wdata[33]));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[98]_INST_0 
       (.I0(s_axi_wdata[98]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[34]),
        .O(m_axi_wdata[34]));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[99]_INST_0 
       (.I0(s_axi_wdata[99]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[35]),
        .O(m_axi_wdata[35]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wlast[1]_INST_0 
       (.I0(s_axi_wlast[1]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wlast[0]),
        .O(m_axi_wlast));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[10]_INST_0 
       (.I0(s_axi_wstrb[10]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[2]),
        .O(m_axi_wstrb[2]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[11]_INST_0 
       (.I0(s_axi_wstrb[11]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[3]),
        .O(m_axi_wstrb[3]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[12]_INST_0 
       (.I0(s_axi_wstrb[12]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[4]),
        .O(m_axi_wstrb[4]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[13]_INST_0 
       (.I0(s_axi_wstrb[13]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[5]),
        .O(m_axi_wstrb[5]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[14]_INST_0 
       (.I0(s_axi_wstrb[14]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[6]),
        .O(m_axi_wstrb[6]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[15]_INST_0 
       (.I0(s_axi_wstrb[15]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[7]),
        .O(m_axi_wstrb[7]));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[8]_INST_0 
       (.I0(s_axi_wstrb[8]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[0]),
        .O(m_axi_wstrb[0]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[9]_INST_0 
       (.I0(s_axi_wstrb[9]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[1]),
        .O(m_axi_wstrb[1]));
  LUT6 #(
    .INIT(64'hFFFFF400F400F400)) 
    \m_valid_i_inferred__0/i_ 
       (.I0(m_aready__1),
        .I1(p_0_in6_in),
        .I2(p_7_in),
        .I3(sa_wm_awvalid),
        .I4(out0),
        .I5(p_0_in3_out),
        .O(\m_valid_i_inferred__0/i__n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(m_valid_i),
        .D(\m_valid_i_inferred__0/i__n_0 ),
        .Q(m_avalid),
        .R(SS));
  LUT5 #(
    .INIT(32'hFCA0ECA0)) 
    \storage_data1[0]_i_2__3 
       (.I0(out0),
        .I1(p_7_in),
        .I2(m_aready__1),
        .I3(sa_wm_awvalid),
        .I4(p_0_in6_in),
        .O(load_s1_16));
  FDRE #(
    .INIT(1'b0)) 
    \storage_data1_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\FSM_onehot_state_reg[3]_0 ),
        .Q(\skid_buffer_reg[72] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_axic_reg_srl_fifo" *) 
module bd_1_axi_data_fifo_v2_1_14_axic_reg_srl_fifo__parameterized0_60
   (storage_data2,
    m_avalid,
    \skid_buffer_reg[72] ,
    out0,
    load_s1,
    m_axi_wlast,
    m_axi_wstrb,
    m_axi_wdata,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    aclk,
    SS,
    \FSM_onehot_state_reg[3]_0 ,
    m_ready_d,
    \gen_arbiter.m_valid_i_reg ,
    Q,
    sa_wm_awvalid,
    m_axi_wready,
    s_axi_wlast,
    m_axi_wvalid,
    s_axi_wstrb,
    s_axi_wdata,
    SR);
  output storage_data2;
  output m_avalid;
  output \skid_buffer_reg[72] ;
  output [0:0]out0;
  output load_s1;
  output [0:0]m_axi_wlast;
  output [7:0]m_axi_wstrb;
  output [63:0]m_axi_wdata;
  input \gen_arbiter.m_grant_enc_i_reg[0] ;
  input aclk;
  input [0:0]SS;
  input \FSM_onehot_state_reg[3]_0 ;
  input [0:0]m_ready_d;
  input \gen_arbiter.m_valid_i_reg ;
  input [0:0]Q;
  input [0:0]sa_wm_awvalid;
  input [0:0]m_axi_wready;
  input [1:0]s_axi_wlast;
  input [0:0]m_axi_wvalid;
  input [15:0]s_axi_wstrb;
  input [127:0]s_axi_wdata;
  input [0:0]SR;

  wire \/FSM_onehot_state[1]_i_1_n_0 ;
  wire \/FSM_onehot_state[2]_i_1_n_0 ;
  wire \<const0> ;
  wire \<const1> ;
  wire \FSM_onehot_state[0]_i_1_n_0 ;
  wire \FSM_onehot_state[3]_i_2_n_0 ;
  wire \FSM_onehot_state_reg[3]_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_state_reg_n_0_[2] ;
  wire [0:0]Q;
  wire [0:0]SR;
  wire [0:0]SS;
  wire aclk;
  wire [1:0]fifoaddr;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_arbiter.m_valid_i_reg ;
  wire \gen_rep[0].fifoaddr[0]_i_1_n_0 ;
  wire \gen_rep[0].fifoaddr[1]_i_1_n_0 ;
  wire load_s1;
  wire m_aready__1;
  wire m_avalid;
  wire [63:0]m_axi_wdata;
  wire [0:0]m_axi_wlast;
  wire [0:0]m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire [0:0]m_axi_wvalid;
  wire [0:0]m_ready_d;
  wire m_valid_i;
  wire \m_valid_i_inferred__0/i__n_0 ;
  (* RTL_KEEP = "yes" *) wire [0:0]out0;
  wire p_0_in3_out;
  (* RTL_KEEP = "yes" *) wire p_0_in6_in;
  (* RTL_KEEP = "yes" *) wire p_7_in;
  wire [127:0]s_axi_wdata;
  wire [1:0]s_axi_wlast;
  wire [15:0]s_axi_wstrb;
  wire [0:0]sa_wm_awvalid;
  wire \skid_buffer_reg[72] ;
  wire storage_data2;

  LUT6 #(
    .INIT(64'h0800080008FF0800)) 
    \/FSM_onehot_state[1]_i_1 
       (.I0(Q),
        .I1(\gen_arbiter.m_valid_i_reg ),
        .I2(m_ready_d),
        .I3(p_7_in),
        .I4(p_0_in3_out),
        .I5(p_0_in6_in),
        .O(\/FSM_onehot_state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF00BF00BF00BFFF)) 
    \/FSM_onehot_state[2]_i_1 
       (.I0(m_ready_d),
        .I1(\gen_arbiter.m_valid_i_reg ),
        .I2(Q),
        .I3(p_7_in),
        .I4(p_0_in3_out),
        .I5(p_0_in6_in),
        .O(\/FSM_onehot_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00008AAA00000000)) 
    \FSM_onehot_state[0]_i_1 
       (.I0(m_aready__1),
        .I1(m_ready_d),
        .I2(\gen_arbiter.m_valid_i_reg ),
        .I3(Q),
        .I4(p_7_in),
        .I5(p_0_in6_in),
        .O(\FSM_onehot_state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF488F488F488)) 
    \FSM_onehot_state[3]_i_1 
       (.I0(m_aready__1),
        .I1(p_0_in6_in),
        .I2(p_7_in),
        .I3(sa_wm_awvalid),
        .I4(out0),
        .I5(p_0_in3_out),
        .O(m_valid_i));
  LUT6 #(
    .INIT(64'h0000000075550000)) 
    \FSM_onehot_state[3]_i_2 
       (.I0(m_aready__1),
        .I1(m_ready_d),
        .I2(\gen_arbiter.m_valid_i_reg ),
        .I3(Q),
        .I4(p_0_in6_in),
        .I5(p_7_in),
        .O(\FSM_onehot_state[3]_i_2_n_0 ));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg[0] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\FSM_onehot_state[0]_i_1_n_0 ),
        .Q(p_7_in),
        .S(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[1] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[1]_i_1_n_0 ),
        .Q(p_0_in6_in),
        .R(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[2] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\/FSM_onehot_state[2]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[2] ),
        .R(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[3] 
       (.C(aclk),
        .CE(m_valid_i),
        .D(\FSM_onehot_state[3]_i_2_n_0 ),
        .Q(out0),
        .R(SS));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT5 #(
    .INIT(32'hAB775488)) 
    \gen_rep[0].fifoaddr[0]_i_1 
       (.I0(m_aready__1),
        .I1(out0),
        .I2(p_0_in6_in),
        .I3(sa_wm_awvalid),
        .I4(fifoaddr[0]),
        .O(\gen_rep[0].fifoaddr[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEFF777F11008880)) 
    \gen_rep[0].fifoaddr[1]_i_1 
       (.I0(fifoaddr[0]),
        .I1(sa_wm_awvalid),
        .I2(p_0_in6_in),
        .I3(out0),
        .I4(m_aready__1),
        .I5(fifoaddr[1]),
        .O(\gen_rep[0].fifoaddr[1]_i_1_n_0 ));
  (* syn_keep = "1" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gen_rep[0].fifoaddr_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_rep[0].fifoaddr[0]_i_1_n_0 ),
        .Q(fifoaddr[0]),
        .S(SR));
  (* syn_keep = "1" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gen_rep[0].fifoaddr_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_rep[0].fifoaddr[1]_i_1_n_0 ),
        .Q(fifoaddr[1]),
        .S(SR));
  bd_1_axi_data_fifo_v2_1_14_ndeep_srl_61 \gen_srls[0].gen_rep[0].srl_nx1 
       (.A(fifoaddr),
        .Q(Q),
        .aclk(aclk),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_arbiter.m_grant_enc_i_reg[0] ),
        .\gen_arbiter.m_valid_i_reg (\gen_arbiter.m_valid_i_reg ),
        .m_aready__1(m_aready__1),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .m_ready_d(m_ready_d),
        .out0({p_0_in6_in,out0}),
        .s_axi_wlast(s_axi_wlast),
        .\storage_data1_reg[0] (\skid_buffer_reg[72] ),
        .storage_data2(storage_data2));
  LUT5 #(
    .INIT(32'h01000000)) 
    i__i_3
       (.I0(fifoaddr[0]),
        .I1(fifoaddr[1]),
        .I2(sa_wm_awvalid),
        .I3(out0),
        .I4(m_aready__1),
        .O(p_0_in3_out));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[0]_INST_0 
       (.I0(s_axi_wdata[64]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[0]),
        .O(m_axi_wdata[0]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[10]_INST_0 
       (.I0(s_axi_wdata[74]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[10]),
        .O(m_axi_wdata[10]));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[11]_INST_0 
       (.I0(s_axi_wdata[75]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[11]),
        .O(m_axi_wdata[11]));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[12]_INST_0 
       (.I0(s_axi_wdata[76]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[12]),
        .O(m_axi_wdata[12]));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[13]_INST_0 
       (.I0(s_axi_wdata[77]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[13]),
        .O(m_axi_wdata[13]));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[14]_INST_0 
       (.I0(s_axi_wdata[78]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[14]),
        .O(m_axi_wdata[14]));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[15]_INST_0 
       (.I0(s_axi_wdata[79]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[15]),
        .O(m_axi_wdata[15]));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[16]_INST_0 
       (.I0(s_axi_wdata[80]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[16]),
        .O(m_axi_wdata[16]));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[17]_INST_0 
       (.I0(s_axi_wdata[81]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[17]),
        .O(m_axi_wdata[17]));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[18]_INST_0 
       (.I0(s_axi_wdata[82]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[18]),
        .O(m_axi_wdata[18]));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[19]_INST_0 
       (.I0(s_axi_wdata[83]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[19]),
        .O(m_axi_wdata[19]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[1]_INST_0 
       (.I0(s_axi_wdata[65]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[1]),
        .O(m_axi_wdata[1]));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[20]_INST_0 
       (.I0(s_axi_wdata[84]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[20]),
        .O(m_axi_wdata[20]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[21]_INST_0 
       (.I0(s_axi_wdata[85]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[21]),
        .O(m_axi_wdata[21]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[22]_INST_0 
       (.I0(s_axi_wdata[86]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[22]),
        .O(m_axi_wdata[22]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[23]_INST_0 
       (.I0(s_axi_wdata[87]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[23]),
        .O(m_axi_wdata[23]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[24]_INST_0 
       (.I0(s_axi_wdata[88]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[24]),
        .O(m_axi_wdata[24]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[25]_INST_0 
       (.I0(s_axi_wdata[89]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[25]),
        .O(m_axi_wdata[25]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[26]_INST_0 
       (.I0(s_axi_wdata[90]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[26]),
        .O(m_axi_wdata[26]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[27]_INST_0 
       (.I0(s_axi_wdata[91]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[27]),
        .O(m_axi_wdata[27]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[28]_INST_0 
       (.I0(s_axi_wdata[92]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[28]),
        .O(m_axi_wdata[28]));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[29]_INST_0 
       (.I0(s_axi_wdata[93]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[29]),
        .O(m_axi_wdata[29]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[2]_INST_0 
       (.I0(s_axi_wdata[66]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[2]),
        .O(m_axi_wdata[2]));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[30]_INST_0 
       (.I0(s_axi_wdata[94]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[30]),
        .O(m_axi_wdata[30]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[31]_INST_0 
       (.I0(s_axi_wdata[95]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[31]),
        .O(m_axi_wdata[31]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[32]_INST_0 
       (.I0(s_axi_wdata[96]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[32]),
        .O(m_axi_wdata[32]));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[33]_INST_0 
       (.I0(s_axi_wdata[97]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[33]),
        .O(m_axi_wdata[33]));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[34]_INST_0 
       (.I0(s_axi_wdata[98]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[34]),
        .O(m_axi_wdata[34]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[35]_INST_0 
       (.I0(s_axi_wdata[99]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[35]),
        .O(m_axi_wdata[35]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[36]_INST_0 
       (.I0(s_axi_wdata[100]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[36]),
        .O(m_axi_wdata[36]));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[37]_INST_0 
       (.I0(s_axi_wdata[101]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[37]),
        .O(m_axi_wdata[37]));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[38]_INST_0 
       (.I0(s_axi_wdata[102]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[38]),
        .O(m_axi_wdata[38]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[39]_INST_0 
       (.I0(s_axi_wdata[103]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[39]),
        .O(m_axi_wdata[39]));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[3]_INST_0 
       (.I0(s_axi_wdata[67]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[3]),
        .O(m_axi_wdata[3]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[40]_INST_0 
       (.I0(s_axi_wdata[104]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[40]),
        .O(m_axi_wdata[40]));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[41]_INST_0 
       (.I0(s_axi_wdata[105]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[41]),
        .O(m_axi_wdata[41]));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[42]_INST_0 
       (.I0(s_axi_wdata[106]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[42]),
        .O(m_axi_wdata[42]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[43]_INST_0 
       (.I0(s_axi_wdata[107]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[43]),
        .O(m_axi_wdata[43]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[44]_INST_0 
       (.I0(s_axi_wdata[108]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[44]),
        .O(m_axi_wdata[44]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[45]_INST_0 
       (.I0(s_axi_wdata[109]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[45]),
        .O(m_axi_wdata[45]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[46]_INST_0 
       (.I0(s_axi_wdata[110]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[46]),
        .O(m_axi_wdata[46]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[47]_INST_0 
       (.I0(s_axi_wdata[111]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[47]),
        .O(m_axi_wdata[47]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[48]_INST_0 
       (.I0(s_axi_wdata[112]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[48]),
        .O(m_axi_wdata[48]));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[49]_INST_0 
       (.I0(s_axi_wdata[113]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[49]),
        .O(m_axi_wdata[49]));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[4]_INST_0 
       (.I0(s_axi_wdata[68]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[4]),
        .O(m_axi_wdata[4]));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[50]_INST_0 
       (.I0(s_axi_wdata[114]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[50]),
        .O(m_axi_wdata[50]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[51]_INST_0 
       (.I0(s_axi_wdata[115]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[51]),
        .O(m_axi_wdata[51]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[52]_INST_0 
       (.I0(s_axi_wdata[116]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[52]),
        .O(m_axi_wdata[52]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[53]_INST_0 
       (.I0(s_axi_wdata[117]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[53]),
        .O(m_axi_wdata[53]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[54]_INST_0 
       (.I0(s_axi_wdata[118]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[54]),
        .O(m_axi_wdata[54]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[55]_INST_0 
       (.I0(s_axi_wdata[119]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[55]),
        .O(m_axi_wdata[55]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[56]_INST_0 
       (.I0(s_axi_wdata[120]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[56]),
        .O(m_axi_wdata[56]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[57]_INST_0 
       (.I0(s_axi_wdata[121]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[57]),
        .O(m_axi_wdata[57]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[58]_INST_0 
       (.I0(s_axi_wdata[122]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[58]),
        .O(m_axi_wdata[58]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[59]_INST_0 
       (.I0(s_axi_wdata[123]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[59]),
        .O(m_axi_wdata[59]));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[5]_INST_0 
       (.I0(s_axi_wdata[69]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[5]),
        .O(m_axi_wdata[5]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[60]_INST_0 
       (.I0(s_axi_wdata[124]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[60]),
        .O(m_axi_wdata[60]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[61]_INST_0 
       (.I0(s_axi_wdata[125]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[61]),
        .O(m_axi_wdata[61]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[62]_INST_0 
       (.I0(s_axi_wdata[126]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[62]),
        .O(m_axi_wdata[62]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[63]_INST_0 
       (.I0(s_axi_wdata[127]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[63]),
        .O(m_axi_wdata[63]));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[6]_INST_0 
       (.I0(s_axi_wdata[70]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[6]),
        .O(m_axi_wdata[6]));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[7]_INST_0 
       (.I0(s_axi_wdata[71]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[7]),
        .O(m_axi_wdata[7]));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[8]_INST_0 
       (.I0(s_axi_wdata[72]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[8]),
        .O(m_axi_wdata[8]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[9]_INST_0 
       (.I0(s_axi_wdata[73]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wdata[9]),
        .O(m_axi_wdata[9]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wlast[0]_INST_0 
       (.I0(s_axi_wlast[1]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wlast[0]),
        .O(m_axi_wlast));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[0]_INST_0 
       (.I0(s_axi_wstrb[8]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[0]),
        .O(m_axi_wstrb[0]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[1]_INST_0 
       (.I0(s_axi_wstrb[9]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[1]),
        .O(m_axi_wstrb[1]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[2]_INST_0 
       (.I0(s_axi_wstrb[10]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[2]),
        .O(m_axi_wstrb[2]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[3]_INST_0 
       (.I0(s_axi_wstrb[11]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[3]),
        .O(m_axi_wstrb[3]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[4]_INST_0 
       (.I0(s_axi_wstrb[12]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[4]),
        .O(m_axi_wstrb[4]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[5]_INST_0 
       (.I0(s_axi_wstrb[13]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[5]),
        .O(m_axi_wstrb[5]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[6]_INST_0 
       (.I0(s_axi_wstrb[14]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[6]),
        .O(m_axi_wstrb[6]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[7]_INST_0 
       (.I0(s_axi_wstrb[15]),
        .I1(\skid_buffer_reg[72] ),
        .I2(s_axi_wstrb[7]),
        .O(m_axi_wstrb[7]));
  LUT6 #(
    .INIT(64'hFFFFF400F400F400)) 
    \m_valid_i_inferred__0/i_ 
       (.I0(m_aready__1),
        .I1(p_0_in6_in),
        .I2(p_7_in),
        .I3(sa_wm_awvalid),
        .I4(out0),
        .I5(p_0_in3_out),
        .O(\m_valid_i_inferred__0/i__n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(m_valid_i),
        .D(\m_valid_i_inferred__0/i__n_0 ),
        .Q(m_avalid),
        .R(SS));
  LUT5 #(
    .INIT(32'hFCA0ECA0)) 
    \storage_data1[0]_i_2__1 
       (.I0(out0),
        .I1(p_7_in),
        .I2(m_aready__1),
        .I3(sa_wm_awvalid),
        .I4(p_0_in6_in),
        .O(load_s1));
  FDRE #(
    .INIT(1'b0)) 
    \storage_data1_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\FSM_onehot_state_reg[3]_0 ),
        .Q(\skid_buffer_reg[72] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_axic_reg_srl_fifo" *) 
module bd_1_axi_data_fifo_v2_1_14_axic_reg_srl_fifo__parameterized1
   (storage_data2_1,
    m_avalid,
    \storage_data1_reg[0]_0 ,
    load_s1_15,
    out0,
    wm_mr_wlast_2,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    aclk,
    SS,
    \FSM_onehot_state_reg[3]_0 ,
    m_aready__1,
    sa_wm_awvalid,
    Q,
    \gen_arbiter.m_valid_i_reg ,
    m_ready_d,
    s_axi_wlast,
    SR,
    D);
  output storage_data2_1;
  output m_avalid;
  output \storage_data1_reg[0]_0 ;
  output load_s1_15;
  output [2:0]out0;
  output wm_mr_wlast_2;
  input \gen_arbiter.m_grant_enc_i_reg[0] ;
  input aclk;
  input [0:0]SS;
  input \FSM_onehot_state_reg[3]_0 ;
  input m_aready__1;
  input [0:0]sa_wm_awvalid;
  input [0:0]Q;
  input \gen_arbiter.m_valid_i_reg ;
  input [0:0]m_ready_d;
  input [1:0]s_axi_wlast;
  input [0:0]SR;
  input [1:0]D;

  wire \/FSM_onehot_state[1]_i_1_n_0 ;
  wire \/FSM_onehot_state[2]_i_1_n_0 ;
  wire \<const0> ;
  wire \<const1> ;
  wire [1:0]D;
  wire \FSM_onehot_state_reg[3]_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_state_reg_n_0_[2] ;
  wire [0:0]Q;
  wire [0:0]SR;
  wire [0:0]SS;
  wire aclk;
  wire [1:0]fifoaddr;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_arbiter.m_valid_i_reg ;
  wire \gen_rep[0].fifoaddr[0]_i_1_n_0 ;
  wire \gen_rep[0].fifoaddr[1]_i_1_n_0 ;
  wire load_s1_15;
  wire m_aready__1;
  wire m_avalid;
  wire [0:0]m_ready_d;
  wire m_valid_i__0;
  wire m_valid_i_n_0;
  (* RTL_KEEP = "yes" *) wire [2:0]out0;
  wire p_0_in3_out;
  wire [1:0]s_axi_wlast;
  wire [0:0]sa_wm_awvalid;
  wire \storage_data1_reg[0]_0 ;
  wire storage_data2_1;
  wire wm_mr_wlast_2;

  LUT6 #(
    .INIT(64'h0800080008FF0800)) 
    \/FSM_onehot_state[1]_i_1 
       (.I0(Q),
        .I1(\gen_arbiter.m_valid_i_reg ),
        .I2(m_ready_d),
        .I3(out0[2]),
        .I4(p_0_in3_out),
        .I5(out0[1]),
        .O(\/FSM_onehot_state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF00BF00BF00BFFF)) 
    \/FSM_onehot_state[2]_i_1 
       (.I0(m_ready_d),
        .I1(\gen_arbiter.m_valid_i_reg ),
        .I2(Q),
        .I3(out0[2]),
        .I4(p_0_in3_out),
        .I5(out0[1]),
        .O(\/FSM_onehot_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF488F488F488)) 
    \FSM_onehot_state[3]_i_1__1 
       (.I0(m_aready__1),
        .I1(out0[1]),
        .I2(out0[2]),
        .I3(sa_wm_awvalid),
        .I4(out0[0]),
        .I5(p_0_in3_out),
        .O(m_valid_i__0));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg[0] 
       (.C(aclk),
        .CE(m_valid_i__0),
        .D(D[0]),
        .Q(out0[2]),
        .S(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[1] 
       (.C(aclk),
        .CE(m_valid_i__0),
        .D(\/FSM_onehot_state[1]_i_1_n_0 ),
        .Q(out0[1]),
        .R(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[2] 
       (.C(aclk),
        .CE(m_valid_i__0),
        .D(\/FSM_onehot_state[2]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[2] ),
        .R(SS));
  (* FSM_ENCODED_STATES = "ZERO:0001,ONE:0010,TWO:1000,iSTATE:0100" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[3] 
       (.C(aclk),
        .CE(m_valid_i__0),
        .D(D[1]),
        .Q(out0[0]),
        .R(SS));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT3 #(
    .INIT(8'hB8)) 
    \gen_axi.s_axi_wready_i_i_2 
       (.I0(s_axi_wlast[1]),
        .I1(\storage_data1_reg[0]_0 ),
        .I2(s_axi_wlast[0]),
        .O(wm_mr_wlast_2));
  LUT5 #(
    .INIT(32'hAB775488)) 
    \gen_rep[0].fifoaddr[0]_i_1 
       (.I0(m_aready__1),
        .I1(out0[0]),
        .I2(out0[1]),
        .I3(sa_wm_awvalid),
        .I4(fifoaddr[0]),
        .O(\gen_rep[0].fifoaddr[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEFF777F11008880)) 
    \gen_rep[0].fifoaddr[1]_i_1 
       (.I0(fifoaddr[0]),
        .I1(sa_wm_awvalid),
        .I2(out0[1]),
        .I3(out0[0]),
        .I4(m_aready__1),
        .I5(fifoaddr[1]),
        .O(\gen_rep[0].fifoaddr[1]_i_1_n_0 ));
  (* syn_keep = "1" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gen_rep[0].fifoaddr_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_rep[0].fifoaddr[0]_i_1_n_0 ),
        .Q(fifoaddr[0]),
        .S(SR));
  (* syn_keep = "1" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gen_rep[0].fifoaddr_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_rep[0].fifoaddr[1]_i_1_n_0 ),
        .Q(fifoaddr[1]),
        .S(SR));
  bd_1_axi_data_fifo_v2_1_14_ndeep_srl_54 \gen_srls[0].gen_rep[0].srl_nx1 
       (.A(fifoaddr),
        .Q(Q),
        .aclk(aclk),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_arbiter.m_grant_enc_i_reg[0] ),
        .\gen_arbiter.m_valid_i_reg (\gen_arbiter.m_valid_i_reg ),
        .m_aready__1(m_aready__1),
        .m_ready_d(m_ready_d),
        .out0(out0[1:0]),
        .storage_data2_1(storage_data2_1));
  LUT6 #(
    .INIT(64'hFFFFF400F400F400)) 
    m_valid_i
       (.I0(m_aready__1),
        .I1(out0[1]),
        .I2(out0[2]),
        .I3(sa_wm_awvalid),
        .I4(out0[0]),
        .I5(p_0_in3_out),
        .O(m_valid_i_n_0));
  LUT5 #(
    .INIT(32'h01000000)) 
    m_valid_i_i_3
       (.I0(fifoaddr[0]),
        .I1(fifoaddr[1]),
        .I2(sa_wm_awvalid),
        .I3(out0[0]),
        .I4(m_aready__1),
        .O(p_0_in3_out));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(m_valid_i__0),
        .D(m_valid_i_n_0),
        .Q(m_avalid),
        .R(SS));
  LUT5 #(
    .INIT(32'hFCA0ECA0)) 
    \storage_data1[0]_i_2__2 
       (.I0(out0[0]),
        .I1(out0[2]),
        .I2(m_aready__1),
        .I3(sa_wm_awvalid),
        .I4(out0[1]),
        .O(load_s1_15));
  FDRE #(
    .INIT(1'b0)) 
    \storage_data1_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\FSM_onehot_state_reg[3]_0 ),
        .Q(\storage_data1_reg[0]_0 ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_fifo_gen" *) 
module bd_1_axi_data_fifo_v2_1_14_fifo_gen
   (dout,
    empty,
    SR,
    din,
    D,
    command_ongoing_reg,
    \USE_B_CHANNEL.cmd_b_empty_i_reg ,
    E,
    cmd_b_push_block_reg,
    wr_en,
    \pushed_commands_reg[7] ,
    cmd_push_block_reg,
    \queue_id_reg[0] ,
    m_axi_awvalid,
    S_AXI_AREADY_I_reg,
    CLK,
    \USE_WRITE.wr_cmd_b_ready ,
    Q,
    s_axi_awvalid,
    S_AXI_AREADY_I_reg_0,
    \areset_d_reg[0] ,
    \areset_d_reg[1] ,
    command_ongoing,
    cmd_b_push_block,
    \USE_B_CHANNEL.cmd_b_depth_reg[5] ,
    cmd_b_empty,
    out,
    m_axi_awready,
    access_is_incr_q_reg,
    cmd_push_block,
    S_AXI_AID_Q,
    s_axi_bid,
    full,
    wrap_need_to_split_q,
    incr_need_to_split_q,
    fix_need_to_split_q,
    \S_AXI_ALEN_Q_reg[3] ,
    \num_transactions_q_reg[2] );
  output [8:0]dout;
  output empty;
  output [0:0]SR;
  output [0:0]din;
  output [4:0]D;
  output command_ongoing_reg;
  output \USE_B_CHANNEL.cmd_b_empty_i_reg ;
  output [0:0]E;
  output cmd_b_push_block_reg;
  output wr_en;
  output [0:0]\pushed_commands_reg[7] ;
  output cmd_push_block_reg;
  output \queue_id_reg[0] ;
  output m_axi_awvalid;
  output S_AXI_AREADY_I_reg;
  input CLK;
  input \USE_WRITE.wr_cmd_b_ready ;
  input [5:0]Q;
  input s_axi_awvalid;
  input S_AXI_AREADY_I_reg_0;
  input \areset_d_reg[0] ;
  input \areset_d_reg[1] ;
  input command_ongoing;
  input cmd_b_push_block;
  input \USE_B_CHANNEL.cmd_b_depth_reg[5] ;
  input cmd_b_empty;
  input out;
  input m_axi_awready;
  input access_is_incr_q_reg;
  input cmd_push_block;
  input S_AXI_AID_Q;
  input [0:0]s_axi_bid;
  input full;
  input wrap_need_to_split_q;
  input incr_need_to_split_q;
  input fix_need_to_split_q;
  input [3:0]\S_AXI_ALEN_Q_reg[3] ;
  input [2:0]\num_transactions_q_reg[2] ;

  wire \<const0> ;
  wire CLK;
  wire [4:0]D;
  wire [0:0]E;
  wire [5:0]Q;
  wire [0:0]SR;
  wire S_AXI_AID_Q;
  wire [3:0]\S_AXI_ALEN_Q_reg[3] ;
  wire S_AXI_AREADY_I_i_3_n_0;
  wire S_AXI_AREADY_I_reg;
  wire S_AXI_AREADY_I_reg_0;
  wire \USE_B_CHANNEL.cmd_b_depth[5]_i_3_n_0 ;
  wire \USE_B_CHANNEL.cmd_b_depth_reg[5] ;
  wire \USE_B_CHANNEL.cmd_b_empty_i_reg ;
  wire \USE_WRITE.wr_cmd_b_ready ;
  wire access_is_incr_q_reg;
  wire \areset_d_reg[0] ;
  wire \areset_d_reg[1] ;
  wire cmd_b_empty;
  wire cmd_b_empty0;
  wire cmd_b_push;
  wire cmd_b_push_block;
  wire cmd_b_push_block_reg;
  wire cmd_push_block;
  wire cmd_push_block_reg;
  wire command_ongoing;
  wire command_ongoing_reg;
  wire [0:0]din;
  wire [8:0]dout;
  wire empty;
  wire fix_need_to_split_q;
  wire full;
  wire full_0;
  wire incr_need_to_split_q;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire m_axi_awvalid_INST_0_i_1_n_0;
  wire [2:0]\num_transactions_q_reg[2] ;
  wire out;
  wire [3:0]p_1_out;
  wire [0:0]\pushed_commands_reg[7] ;
  wire \queue_id_reg[0] ;
  wire s_axi_awvalid;
  wire [0:0]s_axi_bid;
  wire wr_en;
  wire wrap_need_to_split_q;

  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    S_AXI_AREADY_I_i_1
       (.I0(out),
        .O(SR));
  LUT5 #(
    .INIT(32'h44F4FFF4)) 
    S_AXI_AREADY_I_i_2
       (.I0(\areset_d_reg[0] ),
        .I1(\areset_d_reg[1] ),
        .I2(S_AXI_AREADY_I_i_3_n_0),
        .I3(S_AXI_AREADY_I_reg_0),
        .I4(s_axi_awvalid),
        .O(S_AXI_AREADY_I_reg));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT4 #(
    .INIT(16'h0020)) 
    S_AXI_AREADY_I_i_3
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .I2(m_axi_awready),
        .I3(access_is_incr_q_reg),
        .O(S_AXI_AREADY_I_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair411" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \USE_B_CHANNEL.cmd_b_depth[1]_i_1 
       (.I0(Q[0]),
        .I1(cmd_b_empty0),
        .I2(Q[1]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair411" *) 
  LUT4 #(
    .INIT(16'h78E1)) 
    \USE_B_CHANNEL.cmd_b_depth[2]_i_1 
       (.I0(cmd_b_empty0),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair405" *) 
  LUT5 #(
    .INIT(32'h7FFE8001)) 
    \USE_B_CHANNEL.cmd_b_depth[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(cmd_b_empty0),
        .I3(Q[2]),
        .I4(Q[3]),
        .O(D[2]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAA9)) 
    \USE_B_CHANNEL.cmd_b_depth[4]_i_1 
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(cmd_b_empty0),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair410" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \USE_B_CHANNEL.cmd_b_depth[4]_i_2 
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .I2(cmd_b_push_block),
        .I3(\USE_WRITE.wr_cmd_b_ready ),
        .O(cmd_b_empty0));
  (* SOFT_HLUTNM = "soft_lutpair410" *) 
  LUT4 #(
    .INIT(16'hFD02)) 
    \USE_B_CHANNEL.cmd_b_depth[5]_i_1 
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .I2(cmd_b_push_block),
        .I3(\USE_WRITE.wr_cmd_b_ready ),
        .O(E));
  LUT5 #(
    .INIT(32'h6AAAAAA9)) 
    \USE_B_CHANNEL.cmd_b_depth[5]_i_2 
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(\USE_B_CHANNEL.cmd_b_depth[5]_i_3_n_0 ),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair405" *) 
  LUT4 #(
    .INIT(16'h80FE)) 
    \USE_B_CHANNEL.cmd_b_depth[5]_i_3 
       (.I0(cmd_b_empty0),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(\USE_B_CHANNEL.cmd_b_depth[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF02FDFDFD000000)) 
    \USE_B_CHANNEL.cmd_b_empty_i_i_1 
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .I2(cmd_b_push_block),
        .I3(\USE_B_CHANNEL.cmd_b_depth_reg[5] ),
        .I4(\USE_WRITE.wr_cmd_b_ready ),
        .I5(cmd_b_empty),
        .O(\USE_B_CHANNEL.cmd_b_empty_i_reg ));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT5 #(
    .INIT(32'h0000F200)) 
    cmd_b_push_block_i_1
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .I2(cmd_b_push_block),
        .I3(out),
        .I4(S_AXI_AREADY_I_reg_0),
        .O(cmd_b_push_block_reg));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT5 #(
    .INIT(32'hD000F020)) 
    cmd_push_block_i_1
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .I2(out),
        .I3(cmd_push_block),
        .I4(m_axi_awready),
        .O(cmd_push_block_reg));
  LUT6 #(
    .INIT(64'h8FFF8F8F88008888)) 
    command_ongoing_i_1
       (.I0(s_axi_awvalid),
        .I1(S_AXI_AREADY_I_reg_0),
        .I2(S_AXI_AREADY_I_i_3_n_0),
        .I3(\areset_d_reg[0] ),
        .I4(\areset_d_reg[1] ),
        .I5(command_ongoing),
        .O(command_ongoing_reg));
  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "64" *) 
  (* C_AXIS_TDEST_WIDTH = "4" *) 
  (* C_AXIS_TID_WIDTH = "8" *) 
  (* C_AXIS_TKEEP_WIDTH = "4" *) 
  (* C_AXIS_TSTRB_WIDTH = "4" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "4" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "2" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "0" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "6" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "9" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "32" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "9" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "0" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "0" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "0" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "0" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "31" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "30" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "6" *) 
  (* C_RD_DEPTH = "32" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "5" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "3" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "0" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "6" *) 
  (* C_WR_DEPTH = "32" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "5" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_1_fifo_generator_v13_2_1 fifo_gen_inst
       (.axi_ar_injectdbiterr(\<const0> ),
        .axi_ar_injectsbiterr(\<const0> ),
        .axi_ar_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_ar_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_aw_injectdbiterr(\<const0> ),
        .axi_aw_injectsbiterr(\<const0> ),
        .axi_aw_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_aw_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_b_injectdbiterr(\<const0> ),
        .axi_b_injectsbiterr(\<const0> ),
        .axi_b_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_b_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_r_injectdbiterr(\<const0> ),
        .axi_r_injectsbiterr(\<const0> ),
        .axi_r_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_r_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_w_injectdbiterr(\<const0> ),
        .axi_w_injectsbiterr(\<const0> ),
        .axi_w_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_w_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axis_injectdbiterr(\<const0> ),
        .axis_injectsbiterr(\<const0> ),
        .axis_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axis_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .backup(\<const0> ),
        .backup_marker(\<const0> ),
        .clk(CLK),
        .din({din,\<const0> ,\<const0> ,\<const0> ,\<const0> ,p_1_out}),
        .dout(dout),
        .empty(empty),
        .full(full_0),
        .injectdbiterr(\<const0> ),
        .injectsbiterr(\<const0> ),
        .int_clk(\<const0> ),
        .m_aclk(\<const0> ),
        .m_aclk_en(\<const0> ),
        .m_axi_arready(\<const0> ),
        .m_axi_awready(\<const0> ),
        .m_axi_bid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .m_axi_bresp({\<const0> ,\<const0> }),
        .m_axi_buser(\<const0> ),
        .m_axi_bvalid(\<const0> ),
        .m_axi_rdata({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .m_axi_rid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .m_axi_rlast(\<const0> ),
        .m_axi_rresp({\<const0> ,\<const0> }),
        .m_axi_ruser(\<const0> ),
        .m_axi_rvalid(\<const0> ),
        .m_axi_wready(\<const0> ),
        .m_axis_tready(\<const0> ),
        .prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_empty_thresh_assert({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_empty_thresh_negate({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_full_thresh_assert({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_full_thresh_negate({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .rd_clk(\<const0> ),
        .rd_en(\USE_WRITE.wr_cmd_b_ready ),
        .rd_rst(\<const0> ),
        .rst(SR),
        .s_aclk(\<const0> ),
        .s_aclk_en(\<const0> ),
        .s_aresetn(\<const0> ),
        .s_axi_araddr({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arburst({\<const0> ,\<const0> }),
        .s_axi_arcache({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arlen({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arlock({\<const0> ,\<const0> }),
        .s_axi_arprot({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arqos({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arregion({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arsize({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_aruser(\<const0> ),
        .s_axi_arvalid(\<const0> ),
        .s_axi_awaddr({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awburst({\<const0> ,\<const0> }),
        .s_axi_awcache({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awlen({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awlock({\<const0> ,\<const0> }),
        .s_axi_awprot({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awqos({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awregion({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awsize({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awuser(\<const0> ),
        .s_axi_awvalid(\<const0> ),
        .s_axi_bready(\<const0> ),
        .s_axi_rready(\<const0> ),
        .s_axi_wdata({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_wid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_wlast(\<const0> ),
        .s_axi_wstrb({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_wuser(\<const0> ),
        .s_axi_wvalid(\<const0> ),
        .s_axis_tdata({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tdest({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tid({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tkeep({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tlast(\<const0> ),
        .s_axis_tstrb({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tuser({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tvalid(\<const0> ),
        .sleep(\<const0> ),
        .srst(\<const0> ),
        .wr_clk(\<const0> ),
        .wr_en(cmd_b_push),
        .wr_rst(\<const0> ));
  LUT4 #(
    .INIT(16'hAAA8)) 
    fifo_gen_inst_i_1
       (.I0(access_is_incr_q_reg),
        .I1(wrap_need_to_split_q),
        .I2(incr_need_to_split_q),
        .I3(fix_need_to_split_q),
        .O(din));
  LUT2 #(
    .INIT(4'h8)) 
    fifo_gen_inst_i_2__1
       (.I0(fix_need_to_split_q),
        .I1(\S_AXI_ALEN_Q_reg[3] [3]),
        .O(p_1_out[3]));
  LUT4 #(
    .INIT(16'hB888)) 
    fifo_gen_inst_i_3__1
       (.I0(\S_AXI_ALEN_Q_reg[3] [2]),
        .I1(fix_need_to_split_q),
        .I2(\num_transactions_q_reg[2] [2]),
        .I3(incr_need_to_split_q),
        .O(p_1_out[2]));
  LUT4 #(
    .INIT(16'hB888)) 
    fifo_gen_inst_i_4__1
       (.I0(\S_AXI_ALEN_Q_reg[3] [1]),
        .I1(fix_need_to_split_q),
        .I2(\num_transactions_q_reg[2] [1]),
        .I3(incr_need_to_split_q),
        .O(p_1_out[1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    fifo_gen_inst_i_5__1
       (.I0(\S_AXI_ALEN_Q_reg[3] [0]),
        .I1(fix_need_to_split_q),
        .I2(\num_transactions_q_reg[2] [0]),
        .I3(incr_need_to_split_q),
        .I4(wrap_need_to_split_q),
        .O(p_1_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT3 #(
    .INIT(8'h02)) 
    fifo_gen_inst_i_6__1
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .I2(cmd_b_push_block),
        .O(cmd_b_push));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT3 #(
    .INIT(8'h02)) 
    fifo_gen_inst_i_8__1
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .I2(cmd_push_block),
        .O(wr_en));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT2 #(
    .INIT(4'h2)) 
    m_axi_awvalid_INST_0
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .O(m_axi_awvalid));
  LUT6 #(
    .INIT(64'h00000000FFFFFF14)) 
    m_axi_awvalid_INST_0_i_1
       (.I0(cmd_b_empty),
        .I1(S_AXI_AID_Q),
        .I2(s_axi_bid),
        .I3(full_0),
        .I4(full),
        .I5(cmd_push_block),
        .O(m_axi_awvalid_INST_0_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT5 #(
    .INIT(32'hFFFD0020)) 
    \queue_id[0]_i_1__0 
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .I2(S_AXI_AID_Q),
        .I3(cmd_push_block),
        .I4(s_axi_bid),
        .O(\queue_id_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT3 #(
    .INIT(8'h20)) 
    split_ongoing_i_1__0
       (.I0(command_ongoing),
        .I1(m_axi_awvalid_INST_0_i_1_n_0),
        .I2(m_axi_awready),
        .O(\pushed_commands_reg[7] ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_fifo_gen" *) 
module bd_1_axi_data_fifo_v2_1_14_fifo_gen__parameterized0
   (\m_payload_i_reg[72] ,
    full,
    \m_payload_i_reg[37] ,
    DI,
    \m_payload_i_reg[51] ,
    S,
    split_ongoing_reg,
    \next_mi_addr_reg[8] ,
    \next_mi_addr_reg[8]_0 ,
    m_axi_wvalid,
    s_axi_wready,
    first_word_reg,
    D,
    \m_payload_i_reg[47] ,
    CLK,
    SR,
    din,
    wr_en,
    Q,
    fix_need_to_split_q,
    access_is_fix_q,
    \S_AXI_ALEN_Q_reg[7] ,
    \downsized_len_q_reg[7] ,
    wrap_need_to_split_q,
    split_ongoing,
    \wrap_unaligned_len_q_reg[7] ,
    access_is_wrap_q,
    \wrap_rest_len_reg[7] ,
    legal_wrap_len_q,
    access_is_incr_q,
    incr_need_to_split_q,
    CO,
    si_full_size_q,
    \split_addr_mask_q_reg[0] ,
    \S_AXI_AADDR_Q_reg[2] ,
    \split_addr_mask_q_reg[1] ,
    \split_addr_mask_q_reg[2] ,
    \split_addr_mask_q_reg[31] ,
    \fix_len_q_reg[4] ,
    s_axi_wvalid,
    m_axi_wready,
    \goreg_dm.dout_i_reg[9] ,
    \current_word_1_reg[1] ,
    \current_word_1_reg[0] ,
    \goreg_dm.dout_i_reg[13] ,
    \unalignment_addr_q_reg[4] );
  output [17:0]\m_payload_i_reg[72] ;
  output full;
  output [2:0]\m_payload_i_reg[37] ;
  output [3:0]DI;
  output [2:0]\m_payload_i_reg[51] ;
  output [3:0]S;
  output split_ongoing_reg;
  output \next_mi_addr_reg[8] ;
  output \next_mi_addr_reg[8]_0 ;
  output m_axi_wvalid;
  output s_axi_wready;
  output [0:0]first_word_reg;
  output [2:0]D;
  output [3:0]\m_payload_i_reg[47] ;
  input CLK;
  input [0:0]SR;
  input [15:0]din;
  input wr_en;
  input [7:0]Q;
  input fix_need_to_split_q;
  input access_is_fix_q;
  input [7:0]\S_AXI_ALEN_Q_reg[7] ;
  input [7:0]\downsized_len_q_reg[7] ;
  input wrap_need_to_split_q;
  input split_ongoing;
  input [7:0]\wrap_unaligned_len_q_reg[7] ;
  input access_is_wrap_q;
  input [7:0]\wrap_rest_len_reg[7] ;
  input legal_wrap_len_q;
  input access_is_incr_q;
  input incr_need_to_split_q;
  input [0:0]CO;
  input si_full_size_q;
  input \split_addr_mask_q_reg[0] ;
  input [2:0]\S_AXI_AADDR_Q_reg[2] ;
  input \split_addr_mask_q_reg[1] ;
  input [0:0]\split_addr_mask_q_reg[2] ;
  input \split_addr_mask_q_reg[31] ;
  input [4:0]\fix_len_q_reg[4] ;
  input s_axi_wvalid;
  input m_axi_wready;
  input \goreg_dm.dout_i_reg[9] ;
  input \current_word_1_reg[1] ;
  input \current_word_1_reg[0] ;
  input \goreg_dm.dout_i_reg[13] ;
  input [4:0]\unalignment_addr_q_reg[4] ;

  wire \<const0> ;
  wire CLK;
  wire [0:0]CO;
  wire [2:0]D;
  wire [3:0]DI;
  wire [7:0]Q;
  wire [3:0]S;
  wire [0:0]SR;
  wire [2:0]\S_AXI_AADDR_Q_reg[2] ;
  wire [7:0]\S_AXI_ALEN_Q_reg[7] ;
  wire [2:0]\USE_WRITE.wr_cmd_mask ;
  wire \USE_WRITE.wr_cmd_mirror ;
  wire \USE_WRITE.wr_cmd_ready ;
  wire [2:0]\USE_WRITE.wr_cmd_size ;
  wire access_is_fix_q;
  wire access_is_incr_q;
  wire access_is_wrap_q;
  wire cmd_length_i_carry__0_i_10_n_0;
  wire cmd_length_i_carry__0_i_11_n_0;
  wire cmd_length_i_carry__0_i_12_n_0;
  wire cmd_length_i_carry__0_i_13_n_0;
  wire cmd_length_i_carry__0_i_8_n_0;
  wire cmd_length_i_carry__0_i_9_n_0;
  wire cmd_length_i_carry_i_10_n_0;
  wire cmd_length_i_carry_i_11_n_0;
  wire cmd_length_i_carry_i_12_n_0;
  wire cmd_length_i_carry_i_9_n_0;
  wire \current_word_1_reg[0] ;
  wire \current_word_1_reg[1] ;
  wire [15:0]din;
  wire [7:0]\downsized_len_q_reg[7] ;
  wire empty;
  wire fifo_gen_inst_i_10__0_n_0;
  wire fifo_gen_inst_i_10_n_0;
  wire fifo_gen_inst_i_11_n_0;
  wire fifo_gen_inst_i_9__1_n_0;
  wire [0:0]first_word_reg;
  wire [4:0]\fix_len_q_reg[4] ;
  wire fix_need_to_split_q;
  wire full;
  wire \goreg_dm.dout_i_reg[13] ;
  wire \goreg_dm.dout_i_reg[9] ;
  wire incr_need_to_split_q;
  wire legal_wrap_len_q;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire [2:0]\m_payload_i_reg[37] ;
  wire [3:0]\m_payload_i_reg[47] ;
  wire [2:0]\m_payload_i_reg[51] ;
  wire [17:0]\m_payload_i_reg[72] ;
  wire \next_mi_addr_reg[8] ;
  wire \next_mi_addr_reg[8]_0 ;
  wire [25:17]p_0_out;
  wire s_axi_wready;
  wire s_axi_wready_INST_0_i_1_n_0;
  wire s_axi_wvalid;
  wire si_full_size_q;
  wire \split_addr_mask_q_reg[0] ;
  wire \split_addr_mask_q_reg[1] ;
  wire [0:0]\split_addr_mask_q_reg[2] ;
  wire \split_addr_mask_q_reg[31] ;
  wire split_ongoing;
  wire split_ongoing_reg;
  wire [4:0]\unalignment_addr_q_reg[4] ;
  wire wr_en;
  wire wrap_need_to_split_q;
  wire [7:0]\wrap_rest_len_reg[7] ;
  wire [7:0]\wrap_unaligned_len_q_reg[7] ;
  wire [25:0]NLW_fifo_gen_inst_dout_UNCONNECTED;

  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry__0_i_1
       (.I0(\S_AXI_ALEN_Q_reg[7] [6]),
        .I1(din[14]),
        .I2(cmd_length_i_carry__0_i_8_n_0),
        .I3(cmd_length_i_carry__0_i_9_n_0),
        .I4(\downsized_len_q_reg[7] [6]),
        .O(\m_payload_i_reg[51] [2]));
  (* SOFT_HLUTNM = "soft_lutpair418" *) 
  LUT4 #(
    .INIT(16'h4555)) 
    cmd_length_i_carry__0_i_10
       (.I0(fix_need_to_split_q),
        .I1(\wrap_rest_len_reg[7] [5]),
        .I2(access_is_wrap_q),
        .I3(split_ongoing),
        .O(cmd_length_i_carry__0_i_10_n_0));
  LUT5 #(
    .INIT(32'hB8BBBBBB)) 
    cmd_length_i_carry__0_i_11
       (.I0(\fix_len_q_reg[4] [4]),
        .I1(fix_need_to_split_q),
        .I2(\wrap_rest_len_reg[7] [4]),
        .I3(access_is_wrap_q),
        .I4(split_ongoing),
        .O(cmd_length_i_carry__0_i_11_n_0));
  LUT6 #(
    .INIT(64'h00F7FFFF00F70000)) 
    cmd_length_i_carry__0_i_12
       (.I0(access_is_wrap_q),
        .I1(split_ongoing),
        .I2(\wrap_rest_len_reg[7] [7]),
        .I3(fix_need_to_split_q),
        .I4(cmd_length_i_carry__0_i_9_n_0),
        .I5(\downsized_len_q_reg[7] [7]),
        .O(cmd_length_i_carry__0_i_12_n_0));
  (* SOFT_HLUTNM = "soft_lutpair417" *) 
  LUT5 #(
    .INIT(32'h0000FD0D)) 
    cmd_length_i_carry__0_i_13
       (.I0(access_is_incr_q),
        .I1(din[14]),
        .I2(incr_need_to_split_q),
        .I3(split_ongoing),
        .I4(fix_need_to_split_q),
        .O(cmd_length_i_carry__0_i_13_n_0));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry__0_i_2
       (.I0(\S_AXI_ALEN_Q_reg[7] [5]),
        .I1(din[14]),
        .I2(cmd_length_i_carry__0_i_10_n_0),
        .I3(cmd_length_i_carry__0_i_9_n_0),
        .I4(\downsized_len_q_reg[7] [5]),
        .O(\m_payload_i_reg[51] [1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry__0_i_3
       (.I0(\S_AXI_ALEN_Q_reg[7] [4]),
        .I1(din[14]),
        .I2(cmd_length_i_carry__0_i_11_n_0),
        .I3(cmd_length_i_carry__0_i_9_n_0),
        .I4(\downsized_len_q_reg[7] [4]),
        .O(\m_payload_i_reg[51] [0]));
  LUT6 #(
    .INIT(64'h202020DFDFDF20DF)) 
    cmd_length_i_carry__0_i_4
       (.I0(wrap_need_to_split_q),
        .I1(split_ongoing),
        .I2(\wrap_unaligned_len_q_reg[7] [7]),
        .I3(cmd_length_i_carry__0_i_12_n_0),
        .I4(din[14]),
        .I5(\S_AXI_ALEN_Q_reg[7] [7]),
        .O(S[3]));
  LUT4 #(
    .INIT(16'h5955)) 
    cmd_length_i_carry__0_i_5
       (.I0(\m_payload_i_reg[51] [2]),
        .I1(wrap_need_to_split_q),
        .I2(split_ongoing),
        .I3(\wrap_unaligned_len_q_reg[7] [6]),
        .O(S[2]));
  LUT4 #(
    .INIT(16'h5955)) 
    cmd_length_i_carry__0_i_6
       (.I0(\m_payload_i_reg[51] [1]),
        .I1(wrap_need_to_split_q),
        .I2(split_ongoing),
        .I3(\wrap_unaligned_len_q_reg[7] [5]),
        .O(S[1]));
  LUT6 #(
    .INIT(64'h59AA595959555959)) 
    cmd_length_i_carry__0_i_7
       (.I0(\m_payload_i_reg[51] [0]),
        .I1(\unalignment_addr_q_reg[4] [4]),
        .I2(cmd_length_i_carry__0_i_13_n_0),
        .I3(split_ongoing),
        .I4(wrap_need_to_split_q),
        .I5(\wrap_unaligned_len_q_reg[7] [4]),
        .O(S[0]));
  (* SOFT_HLUTNM = "soft_lutpair418" *) 
  LUT4 #(
    .INIT(16'h4555)) 
    cmd_length_i_carry__0_i_8
       (.I0(fix_need_to_split_q),
        .I1(\wrap_rest_len_reg[7] [6]),
        .I2(access_is_wrap_q),
        .I3(split_ongoing),
        .O(cmd_length_i_carry__0_i_8_n_0));
  LUT6 #(
    .INIT(64'h2A223F3300003F33)) 
    cmd_length_i_carry__0_i_9
       (.I0(split_ongoing_reg),
        .I1(access_is_wrap_q),
        .I2(legal_wrap_len_q),
        .I3(split_ongoing),
        .I4(access_is_incr_q),
        .I5(incr_need_to_split_q),
        .O(cmd_length_i_carry__0_i_9_n_0));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry_i_1
       (.I0(\S_AXI_ALEN_Q_reg[7] [3]),
        .I1(din[14]),
        .I2(cmd_length_i_carry_i_9_n_0),
        .I3(cmd_length_i_carry__0_i_9_n_0),
        .I4(\downsized_len_q_reg[7] [3]),
        .O(DI[3]));
  LUT5 #(
    .INIT(32'hB8BBBBBB)) 
    cmd_length_i_carry_i_10
       (.I0(\fix_len_q_reg[4] [2]),
        .I1(fix_need_to_split_q),
        .I2(\wrap_rest_len_reg[7] [2]),
        .I3(access_is_wrap_q),
        .I4(split_ongoing),
        .O(cmd_length_i_carry_i_10_n_0));
  (* SOFT_HLUTNM = "soft_lutpair416" *) 
  LUT5 #(
    .INIT(32'hB8BBBBBB)) 
    cmd_length_i_carry_i_11
       (.I0(\fix_len_q_reg[4] [1]),
        .I1(fix_need_to_split_q),
        .I2(\wrap_rest_len_reg[7] [1]),
        .I3(access_is_wrap_q),
        .I4(split_ongoing),
        .O(cmd_length_i_carry_i_11_n_0));
  LUT5 #(
    .INIT(32'hB8BBBBBB)) 
    cmd_length_i_carry_i_12
       (.I0(\fix_len_q_reg[4] [0]),
        .I1(fix_need_to_split_q),
        .I2(\wrap_rest_len_reg[7] [0]),
        .I3(access_is_wrap_q),
        .I4(split_ongoing),
        .O(cmd_length_i_carry_i_12_n_0));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry_i_2
       (.I0(\S_AXI_ALEN_Q_reg[7] [2]),
        .I1(din[14]),
        .I2(cmd_length_i_carry_i_10_n_0),
        .I3(cmd_length_i_carry__0_i_9_n_0),
        .I4(\downsized_len_q_reg[7] [2]),
        .O(DI[2]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry_i_3
       (.I0(\S_AXI_ALEN_Q_reg[7] [1]),
        .I1(din[14]),
        .I2(cmd_length_i_carry_i_11_n_0),
        .I3(cmd_length_i_carry__0_i_9_n_0),
        .I4(\downsized_len_q_reg[7] [1]),
        .O(DI[1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry_i_4
       (.I0(\S_AXI_ALEN_Q_reg[7] [0]),
        .I1(din[14]),
        .I2(cmd_length_i_carry_i_12_n_0),
        .I3(cmd_length_i_carry__0_i_9_n_0),
        .I4(\downsized_len_q_reg[7] [0]),
        .O(DI[0]));
  LUT6 #(
    .INIT(64'h59AA595959555959)) 
    cmd_length_i_carry_i_5
       (.I0(DI[3]),
        .I1(\unalignment_addr_q_reg[4] [3]),
        .I2(cmd_length_i_carry__0_i_13_n_0),
        .I3(split_ongoing),
        .I4(wrap_need_to_split_q),
        .I5(\wrap_unaligned_len_q_reg[7] [3]),
        .O(\m_payload_i_reg[47] [3]));
  LUT6 #(
    .INIT(64'h59AA595959555959)) 
    cmd_length_i_carry_i_6
       (.I0(DI[2]),
        .I1(\unalignment_addr_q_reg[4] [2]),
        .I2(cmd_length_i_carry__0_i_13_n_0),
        .I3(split_ongoing),
        .I4(wrap_need_to_split_q),
        .I5(\wrap_unaligned_len_q_reg[7] [2]),
        .O(\m_payload_i_reg[47] [2]));
  LUT6 #(
    .INIT(64'h5959AA595555A655)) 
    cmd_length_i_carry_i_7
       (.I0(DI[1]),
        .I1(wrap_need_to_split_q),
        .I2(split_ongoing),
        .I3(\unalignment_addr_q_reg[4] [1]),
        .I4(cmd_length_i_carry__0_i_13_n_0),
        .I5(\wrap_unaligned_len_q_reg[7] [1]),
        .O(\m_payload_i_reg[47] [1]));
  LUT6 #(
    .INIT(64'h59AA595959555959)) 
    cmd_length_i_carry_i_8
       (.I0(DI[0]),
        .I1(\unalignment_addr_q_reg[4] [0]),
        .I2(cmd_length_i_carry__0_i_13_n_0),
        .I3(split_ongoing),
        .I4(wrap_need_to_split_q),
        .I5(\wrap_unaligned_len_q_reg[7] [0]),
        .O(\m_payload_i_reg[47] [0]));
  LUT5 #(
    .INIT(32'hB8BBBBBB)) 
    cmd_length_i_carry_i_9
       (.I0(\fix_len_q_reg[4] [3]),
        .I1(fix_need_to_split_q),
        .I2(\wrap_rest_len_reg[7] [3]),
        .I3(access_is_wrap_q),
        .I4(split_ongoing),
        .O(cmd_length_i_carry_i_9_n_0));
  LUT5 #(
    .INIT(32'h22222228)) 
    \current_word_1[0]_i_1__0 
       (.I0(\USE_WRITE.wr_cmd_mask [0]),
        .I1(\current_word_1_reg[0] ),
        .I2(\m_payload_i_reg[72] [9]),
        .I3(\m_payload_i_reg[72] [10]),
        .I4(\m_payload_i_reg[72] [8]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h8888828888888282)) 
    \current_word_1[1]_i_1__0 
       (.I0(\USE_WRITE.wr_cmd_mask [1]),
        .I1(\current_word_1_reg[1] ),
        .I2(\m_payload_i_reg[72] [10]),
        .I3(\m_payload_i_reg[72] [8]),
        .I4(\m_payload_i_reg[72] [9]),
        .I5(\current_word_1_reg[0] ),
        .O(D[1]));
  LUT2 #(
    .INIT(4'h2)) 
    \current_word_1[2]_i_1__0 
       (.I0(\USE_WRITE.wr_cmd_mask [2]),
        .I1(\goreg_dm.dout_i_reg[13] ),
        .O(D[2]));
  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "64" *) 
  (* C_AXIS_TDEST_WIDTH = "4" *) 
  (* C_AXIS_TID_WIDTH = "8" *) 
  (* C_AXIS_TKEEP_WIDTH = "4" *) 
  (* C_AXIS_TSTRB_WIDTH = "4" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "4" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "2" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "0" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "6" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "26" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "32" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "26" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "0" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "0" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "0" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "0" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "31" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "30" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "6" *) 
  (* C_RD_DEPTH = "32" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "5" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "3" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "0" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "6" *) 
  (* C_WR_DEPTH = "32" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "5" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_1_fifo_generator_v13_2_1__parameterized0 fifo_gen_inst
       (.axi_ar_injectdbiterr(\<const0> ),
        .axi_ar_injectsbiterr(\<const0> ),
        .axi_ar_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_ar_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_aw_injectdbiterr(\<const0> ),
        .axi_aw_injectsbiterr(\<const0> ),
        .axi_aw_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_aw_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_b_injectdbiterr(\<const0> ),
        .axi_b_injectsbiterr(\<const0> ),
        .axi_b_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_b_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_r_injectdbiterr(\<const0> ),
        .axi_r_injectsbiterr(\<const0> ),
        .axi_r_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_r_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_w_injectdbiterr(\<const0> ),
        .axi_w_injectsbiterr(\<const0> ),
        .axi_w_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_w_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axis_injectdbiterr(\<const0> ),
        .axis_injectsbiterr(\<const0> ),
        .axis_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axis_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .backup(\<const0> ),
        .backup_marker(\<const0> ),
        .clk(CLK),
        .din({p_0_out[25],din[15:14],p_0_out[22:17],din[13:11],\m_payload_i_reg[37] ,din[10:0]}),
        .dout({\m_payload_i_reg[72] [17],NLW_fifo_gen_inst_dout_UNCONNECTED[24],\USE_WRITE.wr_cmd_mirror ,\m_payload_i_reg[72] [16:11],\USE_WRITE.wr_cmd_mask ,\m_payload_i_reg[72] [10:0],\USE_WRITE.wr_cmd_size }),
        .empty(empty),
        .full(full),
        .injectdbiterr(\<const0> ),
        .injectsbiterr(\<const0> ),
        .int_clk(\<const0> ),
        .m_aclk(\<const0> ),
        .m_aclk_en(\<const0> ),
        .m_axi_arready(\<const0> ),
        .m_axi_awready(\<const0> ),
        .m_axi_bid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .m_axi_bresp({\<const0> ,\<const0> }),
        .m_axi_buser(\<const0> ),
        .m_axi_bvalid(\<const0> ),
        .m_axi_rdata({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .m_axi_rid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .m_axi_rlast(\<const0> ),
        .m_axi_rresp({\<const0> ,\<const0> }),
        .m_axi_ruser(\<const0> ),
        .m_axi_rvalid(\<const0> ),
        .m_axi_wready(\<const0> ),
        .m_axis_tready(\<const0> ),
        .prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_empty_thresh_assert({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_empty_thresh_negate({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_full_thresh_assert({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_full_thresh_negate({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .rd_clk(\<const0> ),
        .rd_en(\USE_WRITE.wr_cmd_ready ),
        .rd_rst(\<const0> ),
        .rst(SR),
        .s_aclk(\<const0> ),
        .s_aclk_en(\<const0> ),
        .s_aresetn(\<const0> ),
        .s_axi_araddr({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arburst({\<const0> ,\<const0> }),
        .s_axi_arcache({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arlen({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arlock({\<const0> ,\<const0> }),
        .s_axi_arprot({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arqos({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arregion({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arsize({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_aruser(\<const0> ),
        .s_axi_arvalid(\<const0> ),
        .s_axi_awaddr({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awburst({\<const0> ,\<const0> }),
        .s_axi_awcache({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awlen({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awlock({\<const0> ,\<const0> }),
        .s_axi_awprot({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awqos({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awregion({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awsize({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awuser(\<const0> ),
        .s_axi_awvalid(\<const0> ),
        .s_axi_bready(\<const0> ),
        .s_axi_rready(\<const0> ),
        .s_axi_wdata({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_wid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_wlast(\<const0> ),
        .s_axi_wstrb({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_wuser(\<const0> ),
        .s_axi_wvalid(\<const0> ),
        .s_axis_tdata({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tdest({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tid({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tkeep({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tlast(\<const0> ),
        .s_axis_tstrb({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tuser({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tvalid(\<const0> ),
        .sleep(\<const0> ),
        .srst(\<const0> ),
        .wr_clk(\<const0> ),
        .wr_en(wr_en),
        .wr_rst(\<const0> ));
  LUT6 #(
    .INIT(64'h0040CCCC4444CCCC)) 
    fifo_gen_inst_i_10
       (.I0(access_is_wrap_q),
        .I1(\S_AXI_AADDR_Q_reg[2] [2]),
        .I2(\split_addr_mask_q_reg[2] ),
        .I3(si_full_size_q),
        .I4(split_ongoing),
        .I5(access_is_incr_q),
        .O(fifo_gen_inst_i_10_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    fifo_gen_inst_i_10__0
       (.I0(\S_AXI_ALEN_Q_reg[7] [0]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(\S_AXI_ALEN_Q_reg[7] [2]),
        .I4(Q[1]),
        .I5(\S_AXI_ALEN_Q_reg[7] [1]),
        .O(fifo_gen_inst_i_10__0_n_0));
  LUT4 #(
    .INIT(16'hEFFE)) 
    fifo_gen_inst_i_11
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(\S_AXI_ALEN_Q_reg[7] [3]),
        .I3(Q[3]),
        .O(fifo_gen_inst_i_11_n_0));
  (* SOFT_HLUTNM = "soft_lutpair417" *) 
  LUT2 #(
    .INIT(4'h8)) 
    fifo_gen_inst_i_11__0
       (.I0(split_ongoing),
        .I1(access_is_incr_q),
        .O(\next_mi_addr_reg[8] ));
  (* SOFT_HLUTNM = "soft_lutpair416" *) 
  LUT2 #(
    .INIT(4'h8)) 
    fifo_gen_inst_i_12
       (.I0(access_is_wrap_q),
        .I1(split_ongoing),
        .O(\next_mi_addr_reg[8]_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    fifo_gen_inst_i_1__0
       (.I0(din[14]),
        .I1(access_is_fix_q),
        .O(p_0_out[25]));
  LUT3 #(
    .INIT(8'h80)) 
    fifo_gen_inst_i_2
       (.I0(fifo_gen_inst_i_10_n_0),
        .I1(din[13]),
        .I2(\split_addr_mask_q_reg[31] ),
        .O(p_0_out[22]));
  LUT6 #(
    .INIT(64'h0070000000000000)) 
    fifo_gen_inst_i_3
       (.I0(\next_mi_addr_reg[8] ),
        .I1(si_full_size_q),
        .I2(\S_AXI_AADDR_Q_reg[2] [1]),
        .I3(\next_mi_addr_reg[8]_0 ),
        .I4(\split_addr_mask_q_reg[1] ),
        .I5(din[12]),
        .O(p_0_out[21]));
  LUT6 #(
    .INIT(64'h0070000000000000)) 
    fifo_gen_inst_i_4
       (.I0(\next_mi_addr_reg[8] ),
        .I1(si_full_size_q),
        .I2(\S_AXI_AADDR_Q_reg[2] [0]),
        .I3(\next_mi_addr_reg[8]_0 ),
        .I4(\split_addr_mask_q_reg[0] ),
        .I5(din[11]),
        .O(p_0_out[20]));
  LUT6 #(
    .INIT(64'h0000000000007500)) 
    fifo_gen_inst_i_5
       (.I0(\next_mi_addr_reg[8] ),
        .I1(si_full_size_q),
        .I2(\split_addr_mask_q_reg[2] ),
        .I3(\S_AXI_AADDR_Q_reg[2] [2]),
        .I4(\next_mi_addr_reg[8]_0 ),
        .I5(din[13]),
        .O(p_0_out[19]));
  LUT6 #(
    .INIT(64'h0000000000007500)) 
    fifo_gen_inst_i_6
       (.I0(\next_mi_addr_reg[8] ),
        .I1(si_full_size_q),
        .I2(\split_addr_mask_q_reg[1] ),
        .I3(\S_AXI_AADDR_Q_reg[2] [1]),
        .I4(\next_mi_addr_reg[8]_0 ),
        .I5(din[12]),
        .O(p_0_out[18]));
  LUT6 #(
    .INIT(64'h0000000000007500)) 
    fifo_gen_inst_i_7__0
       (.I0(\next_mi_addr_reg[8] ),
        .I1(si_full_size_q),
        .I2(\split_addr_mask_q_reg[0] ),
        .I3(\S_AXI_AADDR_Q_reg[2] [0]),
        .I4(\next_mi_addr_reg[8]_0 ),
        .I5(din[11]),
        .O(p_0_out[17]));
  LUT6 #(
    .INIT(64'h002A2A2A002A002A)) 
    fifo_gen_inst_i_8
       (.I0(fifo_gen_inst_i_9__1_n_0),
        .I1(access_is_incr_q),
        .I2(CO),
        .I3(access_is_wrap_q),
        .I4(split_ongoing),
        .I5(wrap_need_to_split_q),
        .O(split_ongoing_reg));
  (* SOFT_HLUTNM = "soft_lutpair419" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    fifo_gen_inst_i_9
       (.I0(m_axi_wready),
        .I1(empty),
        .I2(s_axi_wvalid),
        .I3(\goreg_dm.dout_i_reg[9] ),
        .O(\USE_WRITE.wr_cmd_ready ));
  LUT6 #(
    .INIT(64'hFFFE0000FFFFFFFF)) 
    fifo_gen_inst_i_9__1
       (.I0(Q[7]),
        .I1(Q[6]),
        .I2(fifo_gen_inst_i_10__0_n_0),
        .I3(fifo_gen_inst_i_11_n_0),
        .I4(fix_need_to_split_q),
        .I5(access_is_fix_q),
        .O(fifo_gen_inst_i_9__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair419" *) 
  LUT3 #(
    .INIT(8'h20)) 
    first_word_i_1
       (.I0(s_axi_wvalid),
        .I1(empty),
        .I2(m_axi_wready),
        .O(first_word_reg));
  LUT2 #(
    .INIT(4'h8)) 
    \m_axi_awsize[0]_INST_0 
       (.I0(din[14]),
        .I1(din[0]),
        .O(\m_payload_i_reg[37] [0]));
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_awsize[1]_INST_0 
       (.I0(din[1]),
        .I1(din[14]),
        .O(\m_payload_i_reg[37] [1]));
  LUT2 #(
    .INIT(4'h8)) 
    \m_axi_awsize[2]_INST_0 
       (.I0(din[14]),
        .I1(din[2]),
        .O(\m_payload_i_reg[37] [2]));
  LUT2 #(
    .INIT(4'h2)) 
    m_axi_wvalid_INST_0
       (.I0(s_axi_wvalid),
        .I1(empty),
        .O(m_axi_wvalid));
  LUT6 #(
    .INIT(64'h4444444044444444)) 
    s_axi_wready_INST_0
       (.I0(empty),
        .I1(m_axi_wready),
        .I2(\goreg_dm.dout_i_reg[9] ),
        .I3(\USE_WRITE.wr_cmd_mirror ),
        .I4(\m_payload_i_reg[72] [17]),
        .I5(s_axi_wready_INST_0_i_1_n_0),
        .O(s_axi_wready));
  LUT6 #(
    .INIT(64'hFEFEFEF0FEFEFC00)) 
    s_axi_wready_INST_0_i_1
       (.I0(D[2]),
        .I1(D[1]),
        .I2(D[0]),
        .I3(\USE_WRITE.wr_cmd_size [1]),
        .I4(\USE_WRITE.wr_cmd_size [2]),
        .I5(\USE_WRITE.wr_cmd_size [0]),
        .O(s_axi_wready_INST_0_i_1_n_0));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_fifo_gen" *) 
module bd_1_axi_data_fifo_v2_1_14_fifo_gen__parameterized0__xdcDup__1
   (dout,
    din,
    D,
    s_axi_rlast,
    command_ongoing_reg,
    command_ongoing_reg_0,
    cmd_push_block_reg,
    cmd_push_block_reg_0,
    m_axi_rready,
    first_mi_word_reg,
    \WORD_LANE[1].S_AXI_RDATA_II_reg[63] ,
    \WORD_LANE[0].S_AXI_RDATA_II_reg[31] ,
    E,
    \cmd_depth_reg[0] ,
    \WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ,
    s_axi_rvalid,
    \current_word_1_reg[2] ,
    \S_AXI_RRESP_ACC_reg[1] ,
    DI,
    \m_payload_i_reg[51] ,
    S,
    \next_mi_addr_reg[8] ,
    \next_mi_addr_reg[8]_0 ,
    \m_payload_i_reg[47] ,
    \queue_id_reg[0] ,
    cmd_empty_reg,
    CLK,
    SR,
    access_fit_mi_side_q_reg,
    Q,
    \pushed_commands_reg[7] ,
    fix_need_to_split_q,
    access_is_fix_q,
    \wrap_rest_len_reg[7] ,
    access_is_wrap_q,
    split_ongoing,
    m_axi_rlast,
    s_axi_arvalid,
    S_AXI_AREADY_I_reg,
    areset_d,
    command_ongoing,
    m_axi_arready,
    out,
    cmd_push_block,
    m_axi_rvalid,
    s_axi_rready,
    \goreg_dm.dout_i_reg[9] ,
    \goreg_dm.dout_i_reg[19] ,
    cmd_empty,
    S_AXI_AID_Q,
    \queue_id_reg[0]_0 ,
    \goreg_dm.dout_i_reg[12] ,
    \current_word_1_reg[0] ,
    \current_word_1_reg[1] ,
    first_word,
    wrap_need_to_split_q,
    incr_need_to_split_q,
    \S_AXI_ALEN_Q_reg[7] ,
    \downsized_len_q_reg[7] ,
    \wrap_unaligned_len_q_reg[7] ,
    legal_wrap_len_q,
    access_is_incr_q,
    CO,
    si_full_size_q,
    \split_addr_mask_q_reg[0] ,
    \S_AXI_AADDR_Q_reg[2] ,
    \split_addr_mask_q_reg[1] ,
    \split_addr_mask_q_reg[2] ,
    \split_addr_mask_q_reg[31] ,
    \fix_len_q_reg[4] ,
    \unalignment_addr_q_reg[4] ,
    \cmd_depth_reg[5] );
  output [21:0]dout;
  output [3:0]din;
  output [4:0]D;
  output s_axi_rlast;
  output command_ongoing_reg;
  output command_ongoing_reg_0;
  output cmd_push_block_reg;
  output cmd_push_block_reg_0;
  output m_axi_rready;
  output [0:0]first_mi_word_reg;
  output [0:0]\WORD_LANE[1].S_AXI_RDATA_II_reg[63] ;
  output [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31] ;
  output [0:0]E;
  output [0:0]\cmd_depth_reg[0] ;
  output [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ;
  output s_axi_rvalid;
  output [2:0]\current_word_1_reg[2] ;
  output \S_AXI_RRESP_ACC_reg[1] ;
  output [3:0]DI;
  output [2:0]\m_payload_i_reg[51] ;
  output [3:0]S;
  output \next_mi_addr_reg[8] ;
  output \next_mi_addr_reg[8]_0 ;
  output [3:0]\m_payload_i_reg[47] ;
  output \queue_id_reg[0] ;
  output cmd_empty_reg;
  input CLK;
  input [0:0]SR;
  input [14:0]access_fit_mi_side_q_reg;
  input [5:0]Q;
  input [7:0]\pushed_commands_reg[7] ;
  input fix_need_to_split_q;
  input access_is_fix_q;
  input [7:0]\wrap_rest_len_reg[7] ;
  input access_is_wrap_q;
  input split_ongoing;
  input m_axi_rlast;
  input s_axi_arvalid;
  input S_AXI_AREADY_I_reg;
  input [1:0]areset_d;
  input command_ongoing;
  input m_axi_arready;
  input out;
  input cmd_push_block;
  input m_axi_rvalid;
  input s_axi_rready;
  input \goreg_dm.dout_i_reg[9] ;
  input \goreg_dm.dout_i_reg[19] ;
  input cmd_empty;
  input S_AXI_AID_Q;
  input \queue_id_reg[0]_0 ;
  input \goreg_dm.dout_i_reg[12] ;
  input \current_word_1_reg[0] ;
  input \current_word_1_reg[1] ;
  input first_word;
  input wrap_need_to_split_q;
  input incr_need_to_split_q;
  input [7:0]\S_AXI_ALEN_Q_reg[7] ;
  input [7:0]\downsized_len_q_reg[7] ;
  input [7:0]\wrap_unaligned_len_q_reg[7] ;
  input legal_wrap_len_q;
  input access_is_incr_q;
  input [0:0]CO;
  input si_full_size_q;
  input \split_addr_mask_q_reg[0] ;
  input [2:0]\S_AXI_AADDR_Q_reg[2] ;
  input \split_addr_mask_q_reg[1] ;
  input [0:0]\split_addr_mask_q_reg[2] ;
  input \split_addr_mask_q_reg[31] ;
  input [4:0]\fix_len_q_reg[4] ;
  input [4:0]\unalignment_addr_q_reg[4] ;
  input \cmd_depth_reg[5] ;

  wire \<const0> ;
  wire CLK;
  wire [0:0]CO;
  wire [4:0]D;
  wire [3:0]DI;
  wire [0:0]E;
  wire [5:0]Q;
  wire [3:0]S;
  wire [0:0]SR;
  wire [2:0]\S_AXI_AADDR_Q_reg[2] ;
  wire S_AXI_AID_Q;
  wire [7:0]\S_AXI_ALEN_Q_reg[7] ;
  wire S_AXI_AREADY_I_reg;
  wire \S_AXI_RRESP_ACC_reg[1] ;
  wire [2:0]\USE_READ.rd_cmd_mask ;
  wire \USE_READ.rd_cmd_ready ;
  wire \USE_READ.rd_cmd_split ;
  wire [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31] ;
  wire [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ;
  wire [0:0]\WORD_LANE[1].S_AXI_RDATA_II_reg[63] ;
  wire [14:0]access_fit_mi_side_q_reg;
  wire access_is_fix_q;
  wire access_is_incr_q;
  wire access_is_wrap_q;
  wire [1:0]areset_d;
  wire \cmd_depth[5]_i_3_n_0 ;
  wire [0:0]\cmd_depth_reg[0] ;
  wire \cmd_depth_reg[5] ;
  wire cmd_empty;
  wire cmd_empty0;
  wire cmd_empty_reg;
  wire cmd_length_i_carry__0_i_10__0_n_0;
  wire cmd_length_i_carry__0_i_11__0_n_0;
  wire cmd_length_i_carry__0_i_12__0_n_0;
  wire cmd_length_i_carry__0_i_13__0_n_0;
  wire cmd_length_i_carry__0_i_8__0_n_0;
  wire cmd_length_i_carry__0_i_9__0_n_0;
  wire cmd_length_i_carry_i_10__0_n_0;
  wire cmd_length_i_carry_i_11__0_n_0;
  wire cmd_length_i_carry_i_12__0_n_0;
  wire cmd_length_i_carry_i_9__0_n_0;
  wire cmd_push;
  wire cmd_push_block;
  wire cmd_push_block_reg;
  wire cmd_push_block_reg_0;
  wire command_ongoing;
  wire command_ongoing_reg;
  wire command_ongoing_reg_0;
  wire \current_word_1_reg[0] ;
  wire \current_word_1_reg[1] ;
  wire [2:0]\current_word_1_reg[2] ;
  wire [3:0]din;
  wire [21:0]dout;
  wire [7:0]\downsized_len_q_reg[7] ;
  wire empty;
  wire fifo_gen_inst_i_11__1_n_0;
  wire fifo_gen_inst_i_12__0_n_0;
  wire fifo_gen_inst_i_15_n_0;
  wire fifo_gen_inst_i_16_n_0;
  wire fifo_gen_inst_i_17_n_0;
  wire [0:0]first_mi_word_reg;
  wire first_word;
  wire [4:0]\fix_len_q_reg[4] ;
  wire fix_need_to_split_q;
  wire full;
  wire \goreg_dm.dout_i_reg[12] ;
  wire \goreg_dm.dout_i_reg[19] ;
  wire \goreg_dm.dout_i_reg[9] ;
  wire incr_need_to_split_q;
  wire legal_wrap_len_q;
  wire m_axi_arready;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire m_axi_rvalid;
  wire [3:0]\m_payload_i_reg[47] ;
  wire [2:0]\m_payload_i_reg[51] ;
  wire \next_mi_addr_reg[8] ;
  wire \next_mi_addr_reg[8]_0 ;
  wire out;
  wire [25:17]p_0_out;
  wire [7:0]\pushed_commands_reg[7] ;
  wire \queue_id_reg[0] ;
  wire \queue_id_reg[0]_0 ;
  wire s_axi_arvalid;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire s_axi_rvalid_INST_0_i_1_n_0;
  wire s_axi_rvalid_INST_0_i_2_n_0;
  wire s_axi_rvalid_INST_0_i_3_n_0;
  wire s_axi_rvalid_INST_0_i_5_n_0;
  wire s_axi_rvalid_INST_0_i_6_n_0;
  wire si_full_size_q;
  wire \split_addr_mask_q_reg[0] ;
  wire \split_addr_mask_q_reg[1] ;
  wire [0:0]\split_addr_mask_q_reg[2] ;
  wire \split_addr_mask_q_reg[31] ;
  wire split_ongoing;
  wire [4:0]\unalignment_addr_q_reg[4] ;
  wire wrap_need_to_split_q;
  wire [7:0]\wrap_rest_len_reg[7] ;
  wire [7:0]\wrap_unaligned_len_q_reg[7] ;

  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'h08)) 
    S_AXI_AREADY_I_i_2__0
       (.I0(m_axi_arready),
        .I1(cmd_push_block_reg),
        .I2(fifo_gen_inst_i_11__1_n_0),
        .O(command_ongoing_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair320" *) 
  LUT5 #(
    .INIT(32'h55555D55)) 
    \WORD_LANE[0].S_AXI_RDATA_II[31]_i_1 
       (.I0(out),
        .I1(s_axi_rready),
        .I2(s_axi_rvalid_INST_0_i_1_n_0),
        .I3(m_axi_rvalid),
        .I4(empty),
        .O(\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair319" *) 
  LUT5 #(
    .INIT(32'h00000E00)) 
    \WORD_LANE[0].S_AXI_RDATA_II[31]_i_2 
       (.I0(s_axi_rready),
        .I1(s_axi_rvalid_INST_0_i_1_n_0),
        .I2(empty),
        .I3(m_axi_rvalid),
        .I4(\goreg_dm.dout_i_reg[19] ),
        .O(\WORD_LANE[0].S_AXI_RDATA_II_reg[31] ));
  (* SOFT_HLUTNM = "soft_lutpair319" *) 
  LUT5 #(
    .INIT(32'h0E000000)) 
    \WORD_LANE[1].S_AXI_RDATA_II[63]_i_1 
       (.I0(s_axi_rready),
        .I1(s_axi_rvalid_INST_0_i_1_n_0),
        .I2(empty),
        .I3(m_axi_rvalid),
        .I4(\goreg_dm.dout_i_reg[19] ),
        .O(\WORD_LANE[1].S_AXI_RDATA_II_reg[63] ));
  LUT3 #(
    .INIT(8'h69)) 
    \cmd_depth[1]_i_1 
       (.I0(Q[0]),
        .I1(cmd_empty0),
        .I2(Q[1]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT4 #(
    .INIT(16'h7E81)) 
    \cmd_depth[2]_i_1 
       (.I0(cmd_empty0),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT5 #(
    .INIT(32'hB0F0F0F0)) 
    \cmd_depth[2]_i_2 
       (.I0(empty),
        .I1(m_axi_rvalid),
        .I2(cmd_push),
        .I3(\goreg_dm.dout_i_reg[9] ),
        .I4(s_axi_rready),
        .O(cmd_empty0));
  LUT3 #(
    .INIT(8'h69)) 
    \cmd_depth[3]_i_1 
       (.I0(\cmd_depth[5]_i_3_n_0 ),
        .I1(Q[3]),
        .I2(Q[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT4 #(
    .INIT(16'h6AA9)) 
    \cmd_depth[4]_i_1 
       (.I0(Q[4]),
        .I1(\cmd_depth[5]_i_3_n_0 ),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \cmd_depth[5]_i_1 
       (.I0(\USE_READ.rd_cmd_ready ),
        .I1(cmd_push),
        .O(\cmd_depth_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT5 #(
    .INIT(32'h6AAAAAA9)) 
    \cmd_depth[5]_i_2 
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(\cmd_depth[5]_i_3_n_0 ),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT4 #(
    .INIT(16'hD554)) 
    \cmd_depth[5]_i_3 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(cmd_empty0),
        .I3(Q[0]),
        .O(\cmd_depth[5]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT4 #(
    .INIT(16'hCB08)) 
    cmd_empty_i_1
       (.I0(\cmd_depth_reg[5] ),
        .I1(\USE_READ.rd_cmd_ready ),
        .I2(cmd_push),
        .I3(cmd_empty),
        .O(cmd_empty_reg));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT4 #(
    .INIT(16'h4555)) 
    cmd_length_i_carry__0_i_10__0
       (.I0(fix_need_to_split_q),
        .I1(\wrap_rest_len_reg[7] [5]),
        .I2(access_is_wrap_q),
        .I3(split_ongoing),
        .O(cmd_length_i_carry__0_i_10__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair318" *) 
  LUT5 #(
    .INIT(32'hFF00BFBF)) 
    cmd_length_i_carry__0_i_11__0
       (.I0(\wrap_rest_len_reg[7] [4]),
        .I1(access_is_wrap_q),
        .I2(split_ongoing),
        .I3(\fix_len_q_reg[4] [4]),
        .I4(fix_need_to_split_q),
        .O(cmd_length_i_carry__0_i_11__0_n_0));
  LUT6 #(
    .INIT(64'h8B888B8B8B8B8B8B)) 
    cmd_length_i_carry__0_i_12__0
       (.I0(\downsized_len_q_reg[7] [7]),
        .I1(cmd_length_i_carry__0_i_8__0_n_0),
        .I2(fix_need_to_split_q),
        .I3(\wrap_rest_len_reg[7] [7]),
        .I4(access_is_wrap_q),
        .I5(split_ongoing),
        .O(cmd_length_i_carry__0_i_12__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair321" *) 
  LUT5 #(
    .INIT(32'h0000FD0D)) 
    cmd_length_i_carry__0_i_13__0
       (.I0(access_is_incr_q),
        .I1(access_fit_mi_side_q_reg[14]),
        .I2(incr_need_to_split_q),
        .I3(split_ongoing),
        .I4(fix_need_to_split_q),
        .O(cmd_length_i_carry__0_i_13__0_n_0));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry__0_i_1__0
       (.I0(\S_AXI_ALEN_Q_reg[7] [6]),
        .I1(access_fit_mi_side_q_reg[14]),
        .I2(\downsized_len_q_reg[7] [6]),
        .I3(cmd_length_i_carry__0_i_8__0_n_0),
        .I4(cmd_length_i_carry__0_i_9__0_n_0),
        .O(\m_payload_i_reg[51] [2]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry__0_i_2__0
       (.I0(\S_AXI_ALEN_Q_reg[7] [5]),
        .I1(access_fit_mi_side_q_reg[14]),
        .I2(\downsized_len_q_reg[7] [5]),
        .I3(cmd_length_i_carry__0_i_8__0_n_0),
        .I4(cmd_length_i_carry__0_i_10__0_n_0),
        .O(\m_payload_i_reg[51] [1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry__0_i_3__0
       (.I0(\S_AXI_ALEN_Q_reg[7] [4]),
        .I1(access_fit_mi_side_q_reg[14]),
        .I2(\downsized_len_q_reg[7] [4]),
        .I3(cmd_length_i_carry__0_i_8__0_n_0),
        .I4(cmd_length_i_carry__0_i_11__0_n_0),
        .O(\m_payload_i_reg[51] [0]));
  LUT6 #(
    .INIT(64'h202020DFDFDF20DF)) 
    cmd_length_i_carry__0_i_4__0
       (.I0(wrap_need_to_split_q),
        .I1(split_ongoing),
        .I2(\wrap_unaligned_len_q_reg[7] [7]),
        .I3(cmd_length_i_carry__0_i_12__0_n_0),
        .I4(access_fit_mi_side_q_reg[14]),
        .I5(\S_AXI_ALEN_Q_reg[7] [7]),
        .O(S[3]));
  LUT4 #(
    .INIT(16'h5955)) 
    cmd_length_i_carry__0_i_5__0
       (.I0(\m_payload_i_reg[51] [2]),
        .I1(wrap_need_to_split_q),
        .I2(split_ongoing),
        .I3(\wrap_unaligned_len_q_reg[7] [6]),
        .O(S[2]));
  LUT4 #(
    .INIT(16'h5955)) 
    cmd_length_i_carry__0_i_6__0
       (.I0(\m_payload_i_reg[51] [1]),
        .I1(wrap_need_to_split_q),
        .I2(split_ongoing),
        .I3(\wrap_unaligned_len_q_reg[7] [5]),
        .O(S[1]));
  LUT6 #(
    .INIT(64'h59AA595959555959)) 
    cmd_length_i_carry__0_i_7__0
       (.I0(\m_payload_i_reg[51] [0]),
        .I1(\unalignment_addr_q_reg[4] [4]),
        .I2(cmd_length_i_carry__0_i_13__0_n_0),
        .I3(split_ongoing),
        .I4(wrap_need_to_split_q),
        .I5(\wrap_unaligned_len_q_reg[7] [4]),
        .O(S[0]));
  LUT6 #(
    .INIT(64'hD5DDC0CCFFFFC0CC)) 
    cmd_length_i_carry__0_i_8__0
       (.I0(fifo_gen_inst_i_11__1_n_0),
        .I1(access_is_wrap_q),
        .I2(legal_wrap_len_q),
        .I3(split_ongoing),
        .I4(access_is_incr_q),
        .I5(incr_need_to_split_q),
        .O(cmd_length_i_carry__0_i_8__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT4 #(
    .INIT(16'h4555)) 
    cmd_length_i_carry__0_i_9__0
       (.I0(fix_need_to_split_q),
        .I1(\wrap_rest_len_reg[7] [6]),
        .I2(access_is_wrap_q),
        .I3(split_ongoing),
        .O(cmd_length_i_carry__0_i_9__0_n_0));
  LUT5 #(
    .INIT(32'hFF00BFBF)) 
    cmd_length_i_carry_i_10__0
       (.I0(\wrap_rest_len_reg[7] [2]),
        .I1(access_is_wrap_q),
        .I2(split_ongoing),
        .I3(\fix_len_q_reg[4] [2]),
        .I4(fix_need_to_split_q),
        .O(cmd_length_i_carry_i_10__0_n_0));
  LUT5 #(
    .INIT(32'hFF00BFBF)) 
    cmd_length_i_carry_i_11__0
       (.I0(\wrap_rest_len_reg[7] [1]),
        .I1(access_is_wrap_q),
        .I2(split_ongoing),
        .I3(\fix_len_q_reg[4] [1]),
        .I4(fix_need_to_split_q),
        .O(cmd_length_i_carry_i_11__0_n_0));
  LUT5 #(
    .INIT(32'hFF00BFBF)) 
    cmd_length_i_carry_i_12__0
       (.I0(\wrap_rest_len_reg[7] [0]),
        .I1(access_is_wrap_q),
        .I2(split_ongoing),
        .I3(\fix_len_q_reg[4] [0]),
        .I4(fix_need_to_split_q),
        .O(cmd_length_i_carry_i_12__0_n_0));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry_i_1__0
       (.I0(\S_AXI_ALEN_Q_reg[7] [3]),
        .I1(access_fit_mi_side_q_reg[14]),
        .I2(\downsized_len_q_reg[7] [3]),
        .I3(cmd_length_i_carry__0_i_8__0_n_0),
        .I4(cmd_length_i_carry_i_9__0_n_0),
        .O(DI[3]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry_i_2__0
       (.I0(\S_AXI_ALEN_Q_reg[7] [2]),
        .I1(access_fit_mi_side_q_reg[14]),
        .I2(\downsized_len_q_reg[7] [2]),
        .I3(cmd_length_i_carry__0_i_8__0_n_0),
        .I4(cmd_length_i_carry_i_10__0_n_0),
        .O(DI[2]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry_i_3__0
       (.I0(\S_AXI_ALEN_Q_reg[7] [1]),
        .I1(access_fit_mi_side_q_reg[14]),
        .I2(\downsized_len_q_reg[7] [1]),
        .I3(cmd_length_i_carry__0_i_8__0_n_0),
        .I4(cmd_length_i_carry_i_11__0_n_0),
        .O(DI[1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    cmd_length_i_carry_i_4__0
       (.I0(\S_AXI_ALEN_Q_reg[7] [0]),
        .I1(access_fit_mi_side_q_reg[14]),
        .I2(\downsized_len_q_reg[7] [0]),
        .I3(cmd_length_i_carry__0_i_8__0_n_0),
        .I4(cmd_length_i_carry_i_12__0_n_0),
        .O(DI[0]));
  LUT6 #(
    .INIT(64'h59AA595959555959)) 
    cmd_length_i_carry_i_5__0
       (.I0(DI[3]),
        .I1(\unalignment_addr_q_reg[4] [3]),
        .I2(cmd_length_i_carry__0_i_13__0_n_0),
        .I3(split_ongoing),
        .I4(wrap_need_to_split_q),
        .I5(\wrap_unaligned_len_q_reg[7] [3]),
        .O(\m_payload_i_reg[47] [3]));
  LUT6 #(
    .INIT(64'h59AA595959555959)) 
    cmd_length_i_carry_i_6__0
       (.I0(DI[2]),
        .I1(\unalignment_addr_q_reg[4] [2]),
        .I2(cmd_length_i_carry__0_i_13__0_n_0),
        .I3(split_ongoing),
        .I4(wrap_need_to_split_q),
        .I5(\wrap_unaligned_len_q_reg[7] [2]),
        .O(\m_payload_i_reg[47] [2]));
  LUT6 #(
    .INIT(64'h5959AA595555A655)) 
    cmd_length_i_carry_i_7__0
       (.I0(DI[1]),
        .I1(wrap_need_to_split_q),
        .I2(split_ongoing),
        .I3(\unalignment_addr_q_reg[4] [1]),
        .I4(cmd_length_i_carry__0_i_13__0_n_0),
        .I5(\wrap_unaligned_len_q_reg[7] [1]),
        .O(\m_payload_i_reg[47] [1]));
  LUT6 #(
    .INIT(64'h59AA595959555959)) 
    cmd_length_i_carry_i_8__0
       (.I0(DI[0]),
        .I1(\unalignment_addr_q_reg[4] [0]),
        .I2(cmd_length_i_carry__0_i_13__0_n_0),
        .I3(split_ongoing),
        .I4(wrap_need_to_split_q),
        .I5(\wrap_unaligned_len_q_reg[7] [0]),
        .O(\m_payload_i_reg[47] [0]));
  LUT5 #(
    .INIT(32'hFF00BFBF)) 
    cmd_length_i_carry_i_9__0
       (.I0(\wrap_rest_len_reg[7] [3]),
        .I1(access_is_wrap_q),
        .I2(split_ongoing),
        .I3(\fix_len_q_reg[4] [3]),
        .I4(fix_need_to_split_q),
        .O(cmd_length_i_carry_i_9__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT5 #(
    .INIT(32'h70705000)) 
    cmd_push_block_i_1__0
       (.I0(m_axi_arready),
        .I1(cmd_push_block_reg),
        .I2(out),
        .I3(cmd_push),
        .I4(cmd_push_block),
        .O(cmd_push_block_reg_0));
  LUT6 #(
    .INIT(64'h8FFF8F8F88008888)) 
    command_ongoing_i_1__0
       (.I0(s_axi_arvalid),
        .I1(S_AXI_AREADY_I_reg),
        .I2(command_ongoing_reg_0),
        .I3(areset_d[0]),
        .I4(areset_d[1]),
        .I5(command_ongoing),
        .O(command_ongoing_reg));
  (* SOFT_HLUTNM = "soft_lutpair317" *) 
  LUT5 #(
    .INIT(32'h88888882)) 
    \current_word_1[0]_i_1 
       (.I0(\USE_READ.rd_cmd_mask [0]),
        .I1(\current_word_1_reg[0] ),
        .I2(dout[13]),
        .I3(dout[12]),
        .I4(dout[11]),
        .O(\current_word_1_reg[2] [0]));
  LUT6 #(
    .INIT(64'h000000A8AAAAAA02)) 
    \current_word_1[1]_i_1 
       (.I0(\USE_READ.rd_cmd_mask [1]),
        .I1(\current_word_1_reg[0] ),
        .I2(dout[11]),
        .I3(dout[12]),
        .I4(dout[13]),
        .I5(\current_word_1_reg[1] ),
        .O(\current_word_1_reg[2] [1]));
  LUT2 #(
    .INIT(4'h2)) 
    \current_word_1[2]_i_1 
       (.I0(\USE_READ.rd_cmd_mask [2]),
        .I1(\goreg_dm.dout_i_reg[12] ),
        .O(\current_word_1_reg[2] [2]));
  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "64" *) 
  (* C_AXIS_TDEST_WIDTH = "4" *) 
  (* C_AXIS_TID_WIDTH = "8" *) 
  (* C_AXIS_TKEEP_WIDTH = "4" *) 
  (* C_AXIS_TSTRB_WIDTH = "4" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "4" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "2" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "0" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "6" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "26" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "32" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "26" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "0" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "0" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "0" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "0" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "31" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "30" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "6" *) 
  (* C_RD_DEPTH = "32" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "5" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "3" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "0" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "6" *) 
  (* C_WR_DEPTH = "32" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "5" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_1_fifo_generator_v13_2_1__parameterized0__xdcDup__1 fifo_gen_inst
       (.axi_ar_injectdbiterr(\<const0> ),
        .axi_ar_injectsbiterr(\<const0> ),
        .axi_ar_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_ar_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_aw_injectdbiterr(\<const0> ),
        .axi_aw_injectsbiterr(\<const0> ),
        .axi_aw_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_aw_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_b_injectdbiterr(\<const0> ),
        .axi_b_injectsbiterr(\<const0> ),
        .axi_b_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_b_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_r_injectdbiterr(\<const0> ),
        .axi_r_injectsbiterr(\<const0> ),
        .axi_r_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_r_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_w_injectdbiterr(\<const0> ),
        .axi_w_injectsbiterr(\<const0> ),
        .axi_w_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axi_w_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axis_injectdbiterr(\<const0> ),
        .axis_injectsbiterr(\<const0> ),
        .axis_prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .axis_prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .backup(\<const0> ),
        .backup_marker(\<const0> ),
        .clk(CLK),
        .din({p_0_out[25],din[3],access_fit_mi_side_q_reg[14],p_0_out[22:17],access_fit_mi_side_q_reg[13:11],din[2:0],access_fit_mi_side_q_reg[10:0]}),
        .dout({dout[21],\USE_READ.rd_cmd_split ,dout[20:14],\USE_READ.rd_cmd_mask ,dout[13:0]}),
        .empty(empty),
        .full(full),
        .injectdbiterr(\<const0> ),
        .injectsbiterr(\<const0> ),
        .int_clk(\<const0> ),
        .m_aclk(\<const0> ),
        .m_aclk_en(\<const0> ),
        .m_axi_arready(\<const0> ),
        .m_axi_awready(\<const0> ),
        .m_axi_bid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .m_axi_bresp({\<const0> ,\<const0> }),
        .m_axi_buser(\<const0> ),
        .m_axi_bvalid(\<const0> ),
        .m_axi_rdata({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .m_axi_rid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .m_axi_rlast(\<const0> ),
        .m_axi_rresp({\<const0> ,\<const0> }),
        .m_axi_ruser(\<const0> ),
        .m_axi_rvalid(\<const0> ),
        .m_axi_wready(\<const0> ),
        .m_axis_tready(\<const0> ),
        .prog_empty_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_empty_thresh_assert({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_empty_thresh_negate({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_full_thresh({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_full_thresh_assert({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .prog_full_thresh_negate({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .rd_clk(\<const0> ),
        .rd_en(\USE_READ.rd_cmd_ready ),
        .rd_rst(\<const0> ),
        .rst(SR),
        .s_aclk(\<const0> ),
        .s_aclk_en(\<const0> ),
        .s_aresetn(\<const0> ),
        .s_axi_araddr({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arburst({\<const0> ,\<const0> }),
        .s_axi_arcache({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arlen({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arlock({\<const0> ,\<const0> }),
        .s_axi_arprot({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arqos({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arregion({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_arsize({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_aruser(\<const0> ),
        .s_axi_arvalid(\<const0> ),
        .s_axi_awaddr({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awburst({\<const0> ,\<const0> }),
        .s_axi_awcache({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awlen({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awlock({\<const0> ,\<const0> }),
        .s_axi_awprot({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awqos({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awregion({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awsize({\<const0> ,\<const0> ,\<const0> }),
        .s_axi_awuser(\<const0> ),
        .s_axi_awvalid(\<const0> ),
        .s_axi_bready(\<const0> ),
        .s_axi_rready(\<const0> ),
        .s_axi_wdata({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_wid({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_wlast(\<const0> ),
        .s_axi_wstrb({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axi_wuser(\<const0> ),
        .s_axi_wvalid(\<const0> ),
        .s_axis_tdata({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tdest({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tid({\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tkeep({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tlast(\<const0> ),
        .s_axis_tstrb({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tuser({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .s_axis_tvalid(\<const0> ),
        .sleep(\<const0> ),
        .srst(\<const0> ),
        .wr_clk(\<const0> ),
        .wr_en(cmd_push),
        .wr_rst(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    fifo_gen_inst_i_10__1
       (.I0(empty),
        .I1(m_axi_rvalid),
        .I2(s_axi_rready),
        .I3(\goreg_dm.dout_i_reg[9] ),
        .O(\USE_READ.rd_cmd_ready ));
  LUT6 #(
    .INIT(64'h002A2A2A002A002A)) 
    fifo_gen_inst_i_11__1
       (.I0(fifo_gen_inst_i_15_n_0),
        .I1(access_is_incr_q),
        .I2(CO),
        .I3(access_is_wrap_q),
        .I4(split_ongoing),
        .I5(wrap_need_to_split_q),
        .O(fifo_gen_inst_i_11__1_n_0));
  LUT6 #(
    .INIT(64'h0040CCCC4444CCCC)) 
    fifo_gen_inst_i_12__0
       (.I0(access_is_wrap_q),
        .I1(\S_AXI_AADDR_Q_reg[2] [2]),
        .I2(\split_addr_mask_q_reg[2] ),
        .I3(si_full_size_q),
        .I4(split_ongoing),
        .I5(access_is_incr_q),
        .O(fifo_gen_inst_i_12__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair321" *) 
  LUT2 #(
    .INIT(4'h8)) 
    fifo_gen_inst_i_13
       (.I0(split_ongoing),
        .I1(access_is_incr_q),
        .O(\next_mi_addr_reg[8] ));
  (* SOFT_HLUTNM = "soft_lutpair318" *) 
  LUT2 #(
    .INIT(4'h8)) 
    fifo_gen_inst_i_14
       (.I0(access_is_wrap_q),
        .I1(split_ongoing),
        .O(\next_mi_addr_reg[8]_0 ));
  LUT6 #(
    .INIT(64'hFFFE0000FFFFFFFF)) 
    fifo_gen_inst_i_15
       (.I0(\pushed_commands_reg[7] [7]),
        .I1(\pushed_commands_reg[7] [6]),
        .I2(fifo_gen_inst_i_16_n_0),
        .I3(fifo_gen_inst_i_17_n_0),
        .I4(fix_need_to_split_q),
        .I5(access_is_fix_q),
        .O(fifo_gen_inst_i_15_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    fifo_gen_inst_i_16
       (.I0(\S_AXI_ALEN_Q_reg[7] [0]),
        .I1(\pushed_commands_reg[7] [0]),
        .I2(\pushed_commands_reg[7] [2]),
        .I3(\S_AXI_ALEN_Q_reg[7] [2]),
        .I4(\pushed_commands_reg[7] [1]),
        .I5(\S_AXI_ALEN_Q_reg[7] [1]),
        .O(fifo_gen_inst_i_16_n_0));
  LUT4 #(
    .INIT(16'hEFFE)) 
    fifo_gen_inst_i_17
       (.I0(\pushed_commands_reg[7] [5]),
        .I1(\pushed_commands_reg[7] [4]),
        .I2(\S_AXI_ALEN_Q_reg[7] [3]),
        .I3(\pushed_commands_reg[7] [3]),
        .O(fifo_gen_inst_i_17_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    fifo_gen_inst_i_1__1
       (.I0(access_fit_mi_side_q_reg[14]),
        .I1(access_is_fix_q),
        .O(p_0_out[25]));
  LUT4 #(
    .INIT(16'hAAA8)) 
    fifo_gen_inst_i_2__0
       (.I0(fifo_gen_inst_i_11__1_n_0),
        .I1(wrap_need_to_split_q),
        .I2(fix_need_to_split_q),
        .I3(incr_need_to_split_q),
        .O(din[3]));
  LUT3 #(
    .INIT(8'h80)) 
    fifo_gen_inst_i_3__0
       (.I0(fifo_gen_inst_i_12__0_n_0),
        .I1(access_fit_mi_side_q_reg[13]),
        .I2(\split_addr_mask_q_reg[31] ),
        .O(p_0_out[22]));
  LUT6 #(
    .INIT(64'h0070000000000000)) 
    fifo_gen_inst_i_4__0
       (.I0(\next_mi_addr_reg[8] ),
        .I1(si_full_size_q),
        .I2(\S_AXI_AADDR_Q_reg[2] [1]),
        .I3(\next_mi_addr_reg[8]_0 ),
        .I4(\split_addr_mask_q_reg[1] ),
        .I5(access_fit_mi_side_q_reg[12]),
        .O(p_0_out[21]));
  LUT6 #(
    .INIT(64'h0070000000000000)) 
    fifo_gen_inst_i_5__0
       (.I0(\next_mi_addr_reg[8] ),
        .I1(si_full_size_q),
        .I2(\S_AXI_AADDR_Q_reg[2] [0]),
        .I3(\next_mi_addr_reg[8]_0 ),
        .I4(\split_addr_mask_q_reg[0] ),
        .I5(access_fit_mi_side_q_reg[11]),
        .O(p_0_out[20]));
  LUT6 #(
    .INIT(64'h0000000000007500)) 
    fifo_gen_inst_i_6__0
       (.I0(\next_mi_addr_reg[8] ),
        .I1(si_full_size_q),
        .I2(\split_addr_mask_q_reg[2] ),
        .I3(\S_AXI_AADDR_Q_reg[2] [2]),
        .I4(\next_mi_addr_reg[8]_0 ),
        .I5(access_fit_mi_side_q_reg[13]),
        .O(p_0_out[19]));
  LUT6 #(
    .INIT(64'h0000000000007500)) 
    fifo_gen_inst_i_7__1
       (.I0(\next_mi_addr_reg[8] ),
        .I1(si_full_size_q),
        .I2(\split_addr_mask_q_reg[1] ),
        .I3(\S_AXI_AADDR_Q_reg[2] [1]),
        .I4(\next_mi_addr_reg[8]_0 ),
        .I5(access_fit_mi_side_q_reg[12]),
        .O(p_0_out[18]));
  LUT6 #(
    .INIT(64'h0000000000007500)) 
    fifo_gen_inst_i_8__0
       (.I0(\next_mi_addr_reg[8] ),
        .I1(si_full_size_q),
        .I2(\split_addr_mask_q_reg[0] ),
        .I3(\S_AXI_AADDR_Q_reg[2] [0]),
        .I4(\next_mi_addr_reg[8]_0 ),
        .I5(access_fit_mi_side_q_reg[11]),
        .O(p_0_out[17]));
  LUT6 #(
    .INIT(64'h0000000000EB0000)) 
    fifo_gen_inst_i_9__0
       (.I0(cmd_empty),
        .I1(S_AXI_AID_Q),
        .I2(\queue_id_reg[0]_0 ),
        .I3(full),
        .I4(command_ongoing),
        .I5(cmd_push_block),
        .O(cmd_push));
  (* SOFT_HLUTNM = "soft_lutpair320" *) 
  LUT4 #(
    .INIT(16'h00E0)) 
    first_mi_word_i_1__0
       (.I0(s_axi_rready),
        .I1(s_axi_rvalid_INST_0_i_1_n_0),
        .I2(m_axi_rvalid),
        .I3(empty),
        .O(first_mi_word_reg));
  LUT2 #(
    .INIT(4'h8)) 
    \m_axi_arsize[0]_INST_0 
       (.I0(access_fit_mi_side_q_reg[14]),
        .I1(access_fit_mi_side_q_reg[0]),
        .O(din[0]));
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_arsize[1]_INST_0 
       (.I0(access_fit_mi_side_q_reg[1]),
        .I1(access_fit_mi_side_q_reg[14]),
        .O(din[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \m_axi_arsize[2]_INST_0 
       (.I0(access_fit_mi_side_q_reg[14]),
        .I1(access_fit_mi_side_q_reg[2]),
        .O(din[2]));
  LUT6 #(
    .INIT(64'h8A8A8A8A8A88888A)) 
    m_axi_arvalid_INST_0
       (.I0(command_ongoing),
        .I1(cmd_push_block),
        .I2(full),
        .I3(\queue_id_reg[0]_0 ),
        .I4(S_AXI_AID_Q),
        .I5(cmd_empty),
        .O(cmd_push_block_reg));
  (* SOFT_HLUTNM = "soft_lutpair328" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    m_axi_rready_INST_0
       (.I0(s_axi_rready),
        .I1(s_axi_rvalid_INST_0_i_1_n_0),
        .I2(empty),
        .O(m_axi_rready));
  LUT6 #(
    .INIT(64'hF0F0F0F0F0D8F0F0)) 
    \queue_id[0]_i_1 
       (.I0(cmd_empty),
        .I1(S_AXI_AID_Q),
        .I2(\queue_id_reg[0]_0 ),
        .I3(full),
        .I4(command_ongoing),
        .I5(cmd_push_block),
        .O(\queue_id_reg[0] ));
  LUT2 #(
    .INIT(4'h2)) 
    s_axi_rlast_INST_0
       (.I0(m_axi_rlast),
        .I1(\USE_READ.rd_cmd_split ),
        .O(s_axi_rlast));
  LUT5 #(
    .INIT(32'hFFFFFF01)) 
    \s_axi_rresp[1]_INST_0_i_2 
       (.I0(dout[0]),
        .I1(dout[2]),
        .I2(dout[1]),
        .I3(dout[20]),
        .I4(first_word),
        .O(\S_AXI_RRESP_ACC_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair328" *) 
  LUT3 #(
    .INIT(8'h04)) 
    s_axi_rvalid_INST_0
       (.I0(empty),
        .I1(m_axi_rvalid),
        .I2(s_axi_rvalid_INST_0_i_1_n_0),
        .O(s_axi_rvalid));
  LUT6 #(
    .INIT(64'h00000000000000AE)) 
    s_axi_rvalid_INST_0_i_1
       (.I0(s_axi_rvalid_INST_0_i_2_n_0),
        .I1(\current_word_1_reg[2] [2]),
        .I2(s_axi_rvalid_INST_0_i_3_n_0),
        .I3(dout[21]),
        .I4(dout[20]),
        .I5(\goreg_dm.dout_i_reg[9] ),
        .O(s_axi_rvalid_INST_0_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT5 #(
    .INIT(32'h77737770)) 
    s_axi_rvalid_INST_0_i_2
       (.I0(s_axi_rvalid_INST_0_i_5_n_0),
        .I1(s_axi_rvalid_INST_0_i_6_n_0),
        .I2(dout[1]),
        .I3(dout[2]),
        .I4(dout[0]),
        .O(s_axi_rvalid_INST_0_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT3 #(
    .INIT(8'h13)) 
    s_axi_rvalid_INST_0_i_3
       (.I0(dout[1]),
        .I1(dout[2]),
        .I2(dout[0]),
        .O(s_axi_rvalid_INST_0_i_3_n_0));
  LUT6 #(
    .INIT(64'hA9A9A9AAFFFFFFFF)) 
    s_axi_rvalid_INST_0_i_5
       (.I0(\current_word_1_reg[1] ),
        .I1(dout[13]),
        .I2(dout[12]),
        .I3(dout[11]),
        .I4(\current_word_1_reg[0] ),
        .I5(\USE_READ.rd_cmd_mask [1]),
        .O(s_axi_rvalid_INST_0_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair317" *) 
  LUT5 #(
    .INIT(32'h01FEFFFF)) 
    s_axi_rvalid_INST_0_i_6
       (.I0(dout[11]),
        .I1(dout[12]),
        .I2(dout[13]),
        .I3(\current_word_1_reg[0] ),
        .I4(\USE_READ.rd_cmd_mask [0]),
        .O(s_axi_rvalid_INST_0_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT2 #(
    .INIT(4'h8)) 
    split_ongoing_i_1
       (.I0(m_axi_arready),
        .I1(cmd_push_block_reg),
        .O(E));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_ndeep_srl" *) 
module bd_1_axi_data_fifo_v2_1_14_ndeep_srl
   (\gen_arbiter.m_target_hot_i_reg[1] ,
    \storage_data1_reg[0] ,
    push,
    fifoaddr,
    aclk,
    out0,
    sel_4,
    s_axi_awaddr,
    sel_3);
  output \gen_arbiter.m_target_hot_i_reg[1] ;
  output \storage_data1_reg[0] ;
  input push;
  input [1:0]fifoaddr;
  input aclk;
  input [0:0]out0;
  input sel_4;
  input [3:0]s_axi_awaddr;
  input sel_3;

  wire \<const0> ;
  wire aclk;
  wire [1:0]fifoaddr;
  wire \gen_arbiter.m_target_hot_i_reg[1] ;
  wire \gen_primitive_shifter.gen_srls[0].srl_inst_n_0 ;
  wire [0:0]out0;
  wire push;
  wire [3:0]s_axi_awaddr;
  wire sel_3;
  wire sel_4;
  wire \storage_data1_reg[0] ;

  GND GND
       (.G(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/gen_srls[0].gen_rep[0].srl_nx1/gen_primitive_shifter.gen_srls " *) 
  (* srl_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/gen_srls[0].gen_rep[0].srl_nx1/gen_primitive_shifter.gen_srls[0].srl_inst " *) 
  SRLC32E #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst 
       (.A({\<const0> ,\<const0> ,\<const0> ,fifoaddr}),
        .CE(push),
        .CLK(aclk),
        .D(\gen_arbiter.m_target_hot_i_reg[1] ),
        .Q(\gen_primitive_shifter.gen_srls[0].srl_inst_n_0 ));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_2 
       (.I0(sel_4),
        .I1(s_axi_awaddr[2]),
        .I2(s_axi_awaddr[3]),
        .I3(s_axi_awaddr[0]),
        .I4(s_axi_awaddr[1]),
        .I5(sel_3),
        .O(\gen_arbiter.m_target_hot_i_reg[1] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \storage_data1[0]_i_2 
       (.I0(\gen_primitive_shifter.gen_srls[0].srl_inst_n_0 ),
        .I1(out0),
        .I2(\gen_arbiter.m_target_hot_i_reg[1] ),
        .O(\storage_data1_reg[0] ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_ndeep_srl" *) 
module bd_1_axi_data_fifo_v2_1_14_ndeep_srl_48
   (push,
    \storage_data1_reg[1] ,
    m_aready__1,
    m_aready0__1,
    fifoaddr,
    aclk,
    out0,
    \m_payload_i_reg[18] ,
    s_ready_i_reg,
    \m_ready_d_reg[1] ,
    s_axi_awvalid,
    s_axi_wlast,
    m_avalid_2,
    s_axi_wvalid,
    m_axi_wready,
    \storage_data1_reg[0] ,
    \storage_data1_reg[1]_0 ,
    m_avalid_1,
    \storage_data1_reg[0]_0 ,
    m_avalid_0,
    p_14_in,
    \storage_data1_reg[0]_1 ,
    \storage_data1_reg[0]_2 ,
    m_avalid);
  output push;
  output \storage_data1_reg[1] ;
  output m_aready__1;
  output m_aready0__1;
  input [1:0]fifoaddr;
  input aclk;
  input [1:0]out0;
  input \m_payload_i_reg[18] ;
  input s_ready_i_reg;
  input \m_ready_d_reg[1] ;
  input [0:0]s_axi_awvalid;
  input [0:0]s_axi_wlast;
  input m_avalid_2;
  input [0:0]s_axi_wvalid;
  input [1:0]m_axi_wready;
  input \storage_data1_reg[0] ;
  input \storage_data1_reg[1]_0 ;
  input m_avalid_1;
  input \storage_data1_reg[0]_0 ;
  input m_avalid_0;
  input p_14_in;
  input \storage_data1_reg[0]_1 ;
  input \storage_data1_reg[0]_2 ;
  input m_avalid;

  wire \<const0> ;
  wire aclk;
  wire [1:0]fifoaddr;
  wire \gen_primitive_shifter.gen_srls[0].srl_inst_i_1_n_0 ;
  wire m_aready0__1;
  wire m_aready__1;
  wire m_avalid;
  wire m_avalid_0;
  wire m_avalid_1;
  wire m_avalid_2;
  wire [1:0]m_axi_wready;
  wire \m_payload_i_reg[18] ;
  wire \m_ready_d_reg[1] ;
  wire [1:0]out0;
  wire p_14_in;
  wire p_2_out;
  wire push;
  wire [0:0]s_axi_awvalid;
  wire [0:0]s_axi_wlast;
  wire \s_axi_wready[1]_INST_0_i_2_n_0 ;
  wire \s_axi_wready[1]_INST_0_i_3_n_0 ;
  wire [0:0]s_axi_wvalid;
  wire s_ready_i_reg;
  wire \storage_data1_reg[0] ;
  wire \storage_data1_reg[0]_0 ;
  wire \storage_data1_reg[0]_1 ;
  wire \storage_data1_reg[0]_2 ;
  wire \storage_data1_reg[1] ;
  wire \storage_data1_reg[1]_0 ;

  GND GND
       (.G(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/gen_srls[0].gen_rep[1].srl_nx1/gen_primitive_shifter.gen_srls " *) 
  (* srl_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_slave_slots[1].gen_si_write.wdata_router_w/wrouter_aw_fifo/gen_srls[0].gen_rep[1].srl_nx1/gen_primitive_shifter.gen_srls[0].srl_inst " *) 
  SRLC32E #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst 
       (.A({\<const0> ,\<const0> ,\<const0> ,fifoaddr}),
        .CE(push),
        .CLK(aclk),
        .D(\gen_primitive_shifter.gen_srls[0].srl_inst_i_1_n_0 ),
        .Q(p_2_out));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_1 
       (.I0(\m_payload_i_reg[18] ),
        .O(\gen_primitive_shifter.gen_srls[0].srl_inst_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0088000000F80000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_1__3 
       (.I0(s_ready_i_reg),
        .I1(out0[0]),
        .I2(out0[1]),
        .I3(\m_ready_d_reg[1] ),
        .I4(s_axi_awvalid),
        .I5(m_aready__1),
        .O(push));
  LUT4 #(
    .INIT(16'h8000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_3__0 
       (.I0(s_axi_wlast),
        .I1(m_avalid_2),
        .I2(s_axi_wvalid),
        .I3(m_aready0__1),
        .O(m_aready__1));
  LUT6 #(
    .INIT(64'hAAEAAAAAAAAAAAAA)) 
    \s_axi_wready[1]_INST_0_i_1 
       (.I0(\s_axi_wready[1]_INST_0_i_2_n_0 ),
        .I1(m_axi_wready[1]),
        .I2(\storage_data1_reg[0] ),
        .I3(\storage_data1_reg[1]_0 ),
        .I4(m_avalid_1),
        .I5(\storage_data1_reg[0]_0 ),
        .O(m_aready0__1));
  LUT6 #(
    .INIT(64'hFFFFFFFF00008000)) 
    \s_axi_wready[1]_INST_0_i_2 
       (.I0(m_avalid_0),
        .I1(p_14_in),
        .I2(\storage_data1_reg[0]_1 ),
        .I3(\storage_data1_reg[1]_0 ),
        .I4(\storage_data1_reg[0]_0 ),
        .I5(\s_axi_wready[1]_INST_0_i_3_n_0 ),
        .O(\s_axi_wready[1]_INST_0_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h04000000)) 
    \s_axi_wready[1]_INST_0_i_3 
       (.I0(\storage_data1_reg[0]_0 ),
        .I1(m_axi_wready[0]),
        .I2(\storage_data1_reg[1]_0 ),
        .I3(\storage_data1_reg[0]_2 ),
        .I4(m_avalid),
        .O(\s_axi_wready[1]_INST_0_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT3 #(
    .INIT(8'h8B)) 
    \storage_data1[1]_i_2 
       (.I0(p_2_out),
        .I1(out0[0]),
        .I2(\m_payload_i_reg[18] ),
        .O(\storage_data1_reg[1] ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_ndeep_srl" *) 
module bd_1_axi_data_fifo_v2_1_14_ndeep_srl_50
   (\gen_arbiter.m_target_hot_i_reg[1] ,
    \storage_data1_reg[0] ,
    push,
    fifoaddr,
    aclk,
    out0,
    sel_4,
    s_axi_awaddr,
    sel_3);
  output \gen_arbiter.m_target_hot_i_reg[1] ;
  output \storage_data1_reg[0] ;
  input push;
  input [1:0]fifoaddr;
  input aclk;
  input [0:0]out0;
  input sel_4;
  input [3:0]s_axi_awaddr;
  input sel_3;

  wire \<const0> ;
  wire aclk;
  wire [1:0]fifoaddr;
  wire \gen_arbiter.m_target_hot_i_reg[1] ;
  wire \gen_primitive_shifter.gen_srls[0].srl_inst_n_0 ;
  wire [0:0]out0;
  wire push;
  wire [3:0]s_axi_awaddr;
  wire sel_3;
  wire sel_4;
  wire \storage_data1_reg[0] ;

  GND GND
       (.G(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_slave_slots[0].gen_si_write.wdata_router_w/wrouter_aw_fifo/gen_srls[0].gen_rep[0].srl_nx1/gen_primitive_shifter.gen_srls " *) 
  (* srl_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_slave_slots[0].gen_si_write.wdata_router_w/wrouter_aw_fifo/gen_srls[0].gen_rep[0].srl_nx1/gen_primitive_shifter.gen_srls[0].srl_inst " *) 
  SRLC32E #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst 
       (.A({\<const0> ,\<const0> ,\<const0> ,fifoaddr}),
        .CE(push),
        .CLK(aclk),
        .D(\gen_arbiter.m_target_hot_i_reg[1] ),
        .Q(\gen_primitive_shifter.gen_srls[0].srl_inst_n_0 ));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_2__0 
       (.I0(sel_4),
        .I1(s_axi_awaddr[2]),
        .I2(s_axi_awaddr[3]),
        .I3(s_axi_awaddr[0]),
        .I4(s_axi_awaddr[1]),
        .I5(sel_3),
        .O(\gen_arbiter.m_target_hot_i_reg[1] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \storage_data1[0]_i_2__0 
       (.I0(\gen_primitive_shifter.gen_srls[0].srl_inst_n_0 ),
        .I1(out0),
        .I2(\gen_arbiter.m_target_hot_i_reg[1] ),
        .O(\storage_data1_reg[0] ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_ndeep_srl" *) 
module bd_1_axi_data_fifo_v2_1_14_ndeep_srl_51
   (push,
    \storage_data1_reg[1] ,
    m_aready__1,
    m_aready0__1,
    fifoaddr,
    aclk,
    out0,
    \m_payload_i_reg[18] ,
    s_ready_i_reg,
    \m_ready_d_reg[1] ,
    s_axi_awvalid,
    s_axi_wlast,
    m_avalid_2,
    s_axi_wvalid,
    m_axi_wready,
    \storage_data1_reg[0] ,
    \storage_data1_reg[1]_0 ,
    m_avalid,
    \storage_data1_reg[0]_0 ,
    m_avalid_1,
    p_14_in,
    \storage_data1_reg[0]_1 ,
    \storage_data1_reg[0]_2 ,
    m_avalid_0);
  output push;
  output \storage_data1_reg[1] ;
  output m_aready__1;
  output m_aready0__1;
  input [1:0]fifoaddr;
  input aclk;
  input [1:0]out0;
  input \m_payload_i_reg[18] ;
  input s_ready_i_reg;
  input \m_ready_d_reg[1] ;
  input [0:0]s_axi_awvalid;
  input [0:0]s_axi_wlast;
  input m_avalid_2;
  input [0:0]s_axi_wvalid;
  input [1:0]m_axi_wready;
  input \storage_data1_reg[0] ;
  input \storage_data1_reg[1]_0 ;
  input m_avalid;
  input \storage_data1_reg[0]_0 ;
  input m_avalid_1;
  input p_14_in;
  input \storage_data1_reg[0]_1 ;
  input \storage_data1_reg[0]_2 ;
  input m_avalid_0;

  wire \<const0> ;
  wire aclk;
  wire [1:0]fifoaddr;
  wire \gen_primitive_shifter.gen_srls[0].srl_inst_i_1__0_n_0 ;
  wire m_aready0__1;
  wire m_aready__1;
  wire m_avalid;
  wire m_avalid_0;
  wire m_avalid_1;
  wire m_avalid_2;
  wire [1:0]m_axi_wready;
  wire \m_payload_i_reg[18] ;
  wire \m_ready_d_reg[1] ;
  wire [1:0]out0;
  wire p_14_in;
  wire p_2_out;
  wire push;
  wire [0:0]s_axi_awvalid;
  wire [0:0]s_axi_wlast;
  wire \s_axi_wready[0]_INST_0_i_2_n_0 ;
  wire \s_axi_wready[0]_INST_0_i_3_n_0 ;
  wire [0:0]s_axi_wvalid;
  wire s_ready_i_reg;
  wire \storage_data1_reg[0] ;
  wire \storage_data1_reg[0]_0 ;
  wire \storage_data1_reg[0]_1 ;
  wire \storage_data1_reg[0]_2 ;
  wire \storage_data1_reg[1] ;
  wire \storage_data1_reg[1]_0 ;

  GND GND
       (.G(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_slave_slots[0].gen_si_write.wdata_router_w/wrouter_aw_fifo/gen_srls[0].gen_rep[1].srl_nx1/gen_primitive_shifter.gen_srls " *) 
  (* srl_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_slave_slots[0].gen_si_write.wdata_router_w/wrouter_aw_fifo/gen_srls[0].gen_rep[1].srl_nx1/gen_primitive_shifter.gen_srls[0].srl_inst " *) 
  SRLC32E #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst 
       (.A({\<const0> ,\<const0> ,\<const0> ,fifoaddr}),
        .CE(push),
        .CLK(aclk),
        .D(\gen_primitive_shifter.gen_srls[0].srl_inst_i_1__0_n_0 ),
        .Q(p_2_out));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_1__0 
       (.I0(\m_payload_i_reg[18] ),
        .O(\gen_primitive_shifter.gen_srls[0].srl_inst_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0088000000F80000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_1__1 
       (.I0(s_ready_i_reg),
        .I1(out0[0]),
        .I2(out0[1]),
        .I3(\m_ready_d_reg[1] ),
        .I4(s_axi_awvalid),
        .I5(m_aready__1),
        .O(push));
  LUT4 #(
    .INIT(16'h8000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_3 
       (.I0(s_axi_wlast),
        .I1(m_avalid_2),
        .I2(s_axi_wvalid),
        .I3(m_aready0__1),
        .O(m_aready__1));
  LUT6 #(
    .INIT(64'hAAAEAAAAAAAAAAAA)) 
    \s_axi_wready[0]_INST_0_i_1 
       (.I0(\s_axi_wready[0]_INST_0_i_2_n_0 ),
        .I1(m_axi_wready[1]),
        .I2(\storage_data1_reg[0] ),
        .I3(\storage_data1_reg[1]_0 ),
        .I4(m_avalid),
        .I5(\storage_data1_reg[0]_0 ),
        .O(m_aready0__1));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000800)) 
    \s_axi_wready[0]_INST_0_i_2 
       (.I0(m_avalid_1),
        .I1(p_14_in),
        .I2(\storage_data1_reg[0]_1 ),
        .I3(\storage_data1_reg[1]_0 ),
        .I4(\storage_data1_reg[0]_0 ),
        .I5(\s_axi_wready[0]_INST_0_i_3_n_0 ),
        .O(\s_axi_wready[0]_INST_0_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00040000)) 
    \s_axi_wready[0]_INST_0_i_3 
       (.I0(\storage_data1_reg[0]_0 ),
        .I1(m_axi_wready[0]),
        .I2(\storage_data1_reg[1]_0 ),
        .I3(\storage_data1_reg[0]_2 ),
        .I4(m_avalid_0),
        .O(\s_axi_wready[0]_INST_0_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT3 #(
    .INIT(8'h8B)) 
    \storage_data1[1]_i_2__0 
       (.I0(p_2_out),
        .I1(out0[0]),
        .I2(\m_payload_i_reg[18] ),
        .O(\storage_data1_reg[1] ));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_ndeep_srl" *) 
module bd_1_axi_data_fifo_v2_1_14_ndeep_srl_54
   (storage_data2_1,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    A,
    aclk,
    out0,
    m_aready__1,
    Q,
    \gen_arbiter.m_valid_i_reg ,
    m_ready_d);
  output storage_data2_1;
  input \gen_arbiter.m_grant_enc_i_reg[0] ;
  input [1:0]A;
  input aclk;
  input [1:0]out0;
  input m_aready__1;
  input [0:0]Q;
  input \gen_arbiter.m_valid_i_reg ;
  input [0:0]m_ready_d;

  wire \<const0> ;
  wire [1:0]A;
  wire [0:0]Q;
  wire aclk;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_arbiter.m_valid_i_reg ;
  wire m_aready__1;
  wire [0:0]m_ready_d;
  wire [1:0]out0;
  wire push;
  wire storage_data2_1;

  GND GND
       (.G(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_master_slots[2].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/gen_srls[0].gen_rep[0].srl_nx1/gen_primitive_shifter.gen_srls " *) 
  (* srl_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_master_slots[2].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/gen_srls[0].gen_rep[0].srl_nx1/gen_primitive_shifter.gen_srls[0].srl_inst " *) 
  SRLC32E #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst 
       (.A({\<const0> ,\<const0> ,\<const0> ,A}),
        .CE(push),
        .CLK(aclk),
        .D(\gen_arbiter.m_grant_enc_i_reg[0] ),
        .Q(storage_data2_1));
  LUT6 #(
    .INIT(64'h00000000F2000000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_1__2 
       (.I0(out0[1]),
        .I1(m_aready__1),
        .I2(out0[0]),
        .I3(Q),
        .I4(\gen_arbiter.m_valid_i_reg ),
        .I5(m_ready_d),
        .O(push));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_ndeep_srl" *) 
module bd_1_axi_data_fifo_v2_1_14_ndeep_srl_57
   (storage_data2_0,
    m_aready__1,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    A,
    aclk,
    m_ready_d,
    \gen_arbiter.m_valid_i_reg ,
    Q,
    out0,
    m_axi_wready,
    s_axi_wlast,
    \storage_data1_reg[0] ,
    m_axi_wvalid);
  output storage_data2_0;
  output m_aready__1;
  input \gen_arbiter.m_grant_enc_i_reg[0] ;
  input [1:0]A;
  input aclk;
  input [0:0]m_ready_d;
  input \gen_arbiter.m_valid_i_reg ;
  input [0:0]Q;
  input [1:0]out0;
  input [0:0]m_axi_wready;
  input [1:0]s_axi_wlast;
  input \storage_data1_reg[0] ;
  input [0:0]m_axi_wvalid;

  wire \<const0> ;
  wire [1:0]A;
  wire [0:0]Q;
  wire aclk;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_arbiter.m_valid_i_reg ;
  wire m_aready__1;
  wire [0:0]m_axi_wready;
  wire [0:0]m_axi_wvalid;
  wire [0:0]m_ready_d;
  wire [1:0]out0;
  wire push;
  wire [1:0]s_axi_wlast;
  wire \storage_data1_reg[0] ;
  wire storage_data2_0;

  GND GND
       (.G(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_master_slots[1].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/gen_srls[0].gen_rep[0].srl_nx1/gen_primitive_shifter.gen_srls " *) 
  (* srl_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_master_slots[1].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/gen_srls[0].gen_rep[0].srl_nx1/gen_primitive_shifter.gen_srls[0].srl_inst " *) 
  SRLC32E #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst 
       (.A({\<const0> ,\<const0> ,\<const0> ,A}),
        .CE(push),
        .CLK(aclk),
        .D(\gen_arbiter.m_grant_enc_i_reg[0] ),
        .Q(storage_data2_0));
  LUT6 #(
    .INIT(64'h4040404000400000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_1__5 
       (.I0(m_ready_d),
        .I1(\gen_arbiter.m_valid_i_reg ),
        .I2(Q),
        .I3(m_aready__1),
        .I4(out0[1]),
        .I5(out0[0]),
        .O(push));
  LUT5 #(
    .INIT(32'h8A800000)) 
    i__i_1__0
       (.I0(m_axi_wready),
        .I1(s_axi_wlast[1]),
        .I2(\storage_data1_reg[0] ),
        .I3(s_axi_wlast[0]),
        .I4(m_axi_wvalid),
        .O(m_aready__1));
endmodule

(* ORIG_REF_NAME = "axi_data_fifo_v2_1_14_ndeep_srl" *) 
module bd_1_axi_data_fifo_v2_1_14_ndeep_srl_61
   (storage_data2,
    m_aready__1,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    A,
    aclk,
    m_ready_d,
    \gen_arbiter.m_valid_i_reg ,
    Q,
    out0,
    m_axi_wready,
    s_axi_wlast,
    \storage_data1_reg[0] ,
    m_axi_wvalid);
  output storage_data2;
  output m_aready__1;
  input \gen_arbiter.m_grant_enc_i_reg[0] ;
  input [1:0]A;
  input aclk;
  input [0:0]m_ready_d;
  input \gen_arbiter.m_valid_i_reg ;
  input [0:0]Q;
  input [1:0]out0;
  input [0:0]m_axi_wready;
  input [1:0]s_axi_wlast;
  input \storage_data1_reg[0] ;
  input [0:0]m_axi_wvalid;

  wire \<const0> ;
  wire [1:0]A;
  wire [0:0]Q;
  wire aclk;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_arbiter.m_valid_i_reg ;
  wire m_aready__1;
  wire [0:0]m_axi_wready;
  wire [0:0]m_axi_wvalid;
  wire [0:0]m_ready_d;
  wire [1:0]out0;
  wire push;
  wire [1:0]s_axi_wlast;
  wire \storage_data1_reg[0] ;
  wire storage_data2;

  GND GND
       (.G(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_master_slots[0].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/gen_srls[0].gen_rep[0].srl_nx1/gen_primitive_shifter.gen_srls " *) 
  (* srl_name = "axi_interconnect_0/xbar/\inst/gen_samd.crossbar_samd/gen_master_slots[0].gen_mi_write.wdata_mux_w/gen_wmux.wmux_aw_fifo/gen_srls[0].gen_rep[0].srl_nx1/gen_primitive_shifter.gen_srls[0].srl_inst " *) 
  SRLC32E #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst 
       (.A({\<const0> ,\<const0> ,\<const0> ,A}),
        .CE(push),
        .CLK(aclk),
        .D(\gen_arbiter.m_grant_enc_i_reg[0] ),
        .Q(storage_data2));
  LUT6 #(
    .INIT(64'h4040404000400000)) 
    \gen_primitive_shifter.gen_srls[0].srl_inst_i_1__4 
       (.I0(m_ready_d),
        .I1(\gen_arbiter.m_valid_i_reg ),
        .I2(Q),
        .I3(m_aready__1),
        .I4(out0[1]),
        .I5(out0[0]),
        .O(push));
  LUT5 #(
    .INIT(32'h8A800000)) 
    i__i_1
       (.I0(m_axi_wready),
        .I1(s_axi_wlast[1]),
        .I2(\storage_data1_reg[0] ),
        .I3(s_axi_wlast[0]),
        .I4(m_axi_wvalid),
        .O(m_aready__1));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_a_downsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_a_downsizer
   (dout,
    empty,
    SR,
    \m_payload_i_reg[72] ,
    din,
    E,
    areset_d,
    s_axi_bid,
    m_axi_awvalid,
    m_axi_awaddr,
    m_axi_wvalid,
    s_axi_wready,
    first_word_reg,
    m_axi_awlock,
    D,
    m_axi_awburst,
    S_AXI_AREADY_I_reg_0,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    CLK,
    \USE_WRITE.wr_cmd_b_ready ,
    s_axi_awid,
    s_axi_awlock,
    s_axi_awsize,
    s_axi_awlen,
    s_axi_awvalid,
    out,
    m_axi_awready,
    s_axi_awaddr,
    s_axi_awburst,
    s_axi_wvalid,
    m_axi_wready,
    \goreg_dm.dout_i_reg[9] ,
    \current_word_1_reg[1] ,
    \current_word_1_reg[0] ,
    \goreg_dm.dout_i_reg[13] ,
    s_ready_i_reg,
    S_AXI_AREADY_I_reg_1,
    s_axi_arvalid,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos);
  output [8:0]dout;
  output empty;
  output [0:0]SR;
  output [17:0]\m_payload_i_reg[72] ;
  output [10:0]din;
  output [0:0]E;
  output [1:0]areset_d;
  output [0:0]s_axi_bid;
  output m_axi_awvalid;
  output [31:0]m_axi_awaddr;
  output m_axi_wvalid;
  output s_axi_wready;
  output [0:0]first_word_reg;
  output [0:0]m_axi_awlock;
  output [2:0]D;
  output [1:0]m_axi_awburst;
  output S_AXI_AREADY_I_reg_0;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awregion;
  output [3:0]m_axi_awqos;
  input CLK;
  input \USE_WRITE.wr_cmd_b_ready ;
  input [0:0]s_axi_awid;
  input [0:0]s_axi_awlock;
  input [2:0]s_axi_awsize;
  input [7:0]s_axi_awlen;
  input s_axi_awvalid;
  input out;
  input m_axi_awready;
  input [31:0]s_axi_awaddr;
  input [1:0]s_axi_awburst;
  input s_axi_wvalid;
  input m_axi_wready;
  input \goreg_dm.dout_i_reg[9] ;
  input \current_word_1_reg[1] ;
  input \current_word_1_reg[0] ;
  input \goreg_dm.dout_i_reg[13] ;
  input s_ready_i_reg;
  input S_AXI_AREADY_I_reg_1;
  input s_axi_arvalid;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awregion;
  input [3:0]s_axi_awqos;

  wire \<const0> ;
  wire \<const1> ;
  wire CLK;
  wire [2:0]D;
  wire [0:0]E;
  wire [0:0]SR;
  wire \S_AXI_AADDR_Q_reg_n_0_[0] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[10] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[11] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[12] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[13] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[14] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[15] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[16] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[17] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[18] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[19] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[1] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[20] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[21] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[22] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[23] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[24] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[25] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[26] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[27] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[28] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[29] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[2] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[30] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[31] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[3] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[4] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[5] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[6] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[7] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[8] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[9] ;
  wire [1:0]S_AXI_ABURST_Q;
  wire S_AXI_AID_Q;
  wire \S_AXI_ALEN_Q_reg_n_0_[4] ;
  wire \S_AXI_ALEN_Q_reg_n_0_[5] ;
  wire \S_AXI_ALEN_Q_reg_n_0_[6] ;
  wire \S_AXI_ALEN_Q_reg_n_0_[7] ;
  wire [0:0]S_AXI_ALOCK_Q;
  wire S_AXI_AREADY_I_reg_0;
  wire S_AXI_AREADY_I_reg_1;
  wire [2:0]S_AXI_ASIZE_Q;
  wire \USE_B_CHANNEL.cmd_b_depth[0]_i_1_n_0 ;
  wire [5:0]\USE_B_CHANNEL.cmd_b_depth_reg__0 ;
  wire \USE_B_CHANNEL.cmd_b_empty_i_i_2_n_0 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_12 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_13 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_14 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_15 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_16 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_17 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_18 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_19 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_20 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_23 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_24 ;
  wire \USE_B_CHANNEL.cmd_b_queue_n_26 ;
  wire \USE_WRITE.wr_cmd_b_ready ;
  wire access_fit_mi_side_q;
  wire access_is_fix;
  wire access_is_fix_q;
  wire access_is_incr;
  wire access_is_incr_q;
  wire access_is_wrap;
  wire access_is_wrap_q;
  wire [1:0]areset_d;
  wire cmd_b_empty;
  wire cmd_b_push_block;
  wire cmd_length_i_carry__0_n_1;
  wire cmd_length_i_carry__0_n_2;
  wire cmd_length_i_carry__0_n_3;
  wire cmd_length_i_carry_n_0;
  wire cmd_length_i_carry_n_1;
  wire cmd_length_i_carry_n_2;
  wire cmd_length_i_carry_n_3;
  wire [2:0]cmd_mask_i;
  wire \cmd_mask_q[0]_i_1_n_0 ;
  wire \cmd_mask_q[1]_i_1_n_0 ;
  wire \cmd_mask_q[2]_i_1_n_0 ;
  wire \cmd_mask_q_reg_n_0_[0] ;
  wire \cmd_mask_q_reg_n_0_[1] ;
  wire \cmd_mask_q_reg_n_0_[2] ;
  wire cmd_push;
  wire cmd_push_block;
  wire cmd_queue_n_22;
  wire cmd_queue_n_23;
  wire cmd_queue_n_24;
  wire cmd_queue_n_25;
  wire cmd_queue_n_26;
  wire cmd_queue_n_27;
  wire cmd_queue_n_28;
  wire cmd_queue_n_29;
  wire cmd_queue_n_30;
  wire cmd_queue_n_31;
  wire cmd_queue_n_32;
  wire cmd_queue_n_33;
  wire cmd_queue_n_34;
  wire cmd_queue_n_35;
  wire cmd_queue_n_42;
  wire cmd_queue_n_43;
  wire cmd_queue_n_44;
  wire cmd_queue_n_45;
  wire cmd_split_i;
  wire command_ongoing;
  wire \current_word_1_reg[0] ;
  wire \current_word_1_reg[1] ;
  wire [10:0]din;
  wire [8:0]dout;
  wire [7:0]downsized_len_q;
  wire \downsized_len_q[0]_i_1_n_0 ;
  wire \downsized_len_q[1]_i_1_n_0 ;
  wire \downsized_len_q[2]_i_1_n_0 ;
  wire \downsized_len_q[3]_i_1_n_0 ;
  wire \downsized_len_q[4]_i_1_n_0 ;
  wire \downsized_len_q[5]_i_1_n_0 ;
  wire \downsized_len_q[6]_i_1__0_n_0 ;
  wire \downsized_len_q[7]_i_1_n_0 ;
  wire \downsized_len_q[7]_i_2_n_0 ;
  wire empty;
  wire [0:0]first_word_reg;
  wire [3:0]fix_len;
  wire [4:0]fix_len_q;
  wire \fix_len_q[4]_i_1_n_0 ;
  wire fix_need_to_split;
  wire fix_need_to_split_q;
  wire \goreg_dm.dout_i_reg[13] ;
  wire \goreg_dm.dout_i_reg[9] ;
  wire incr_need_to_split;
  wire incr_need_to_split_q;
  wire \inst/full ;
  wire last_incr_split0;
  wire last_incr_split0_carry_i_1_n_0;
  wire last_incr_split0_carry_i_2_n_0;
  wire last_incr_split0_carry_i_3_n_0;
  wire last_incr_split0_carry_n_2;
  wire last_incr_split0_carry_n_3;
  wire legal_wrap_len_q;
  wire legal_wrap_len_q_i_1_n_0;
  wire legal_wrap_len_q_i_2_n_0;
  wire legal_wrap_len_q_i_3_n_0;
  wire legal_wrap_len_q_i_4_n_0;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire m_axi_awvalid;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire [17:0]\m_payload_i_reg[72] ;
  wire [14:0]masked_addr;
  wire [31:0]masked_addr_q;
  wire \masked_addr_q[3]_i_2_n_0 ;
  wire \masked_addr_q[3]_i_3_n_0 ;
  wire \masked_addr_q[5]_i_2_n_0 ;
  wire \masked_addr_q[6]_i_2_n_0 ;
  wire \masked_addr_q[7]_i_2_n_0 ;
  wire \masked_addr_q[7]_i_3_n_0 ;
  wire \masked_addr_q[8]_i_2_n_0 ;
  wire \masked_addr_q[8]_i_3_n_0 ;
  wire \masked_addr_q[9]_i_2_n_0 ;
  wire [31:2]next_mi_addr;
  wire next_mi_addr0_carry__0_n_0;
  wire next_mi_addr0_carry__0_n_1;
  wire next_mi_addr0_carry__0_n_2;
  wire next_mi_addr0_carry__0_n_3;
  wire next_mi_addr0_carry__0_n_4;
  wire next_mi_addr0_carry__0_n_5;
  wire next_mi_addr0_carry__0_n_6;
  wire next_mi_addr0_carry__0_n_7;
  wire next_mi_addr0_carry__1_n_0;
  wire next_mi_addr0_carry__1_n_1;
  wire next_mi_addr0_carry__1_n_2;
  wire next_mi_addr0_carry__1_n_3;
  wire next_mi_addr0_carry__1_n_4;
  wire next_mi_addr0_carry__1_n_5;
  wire next_mi_addr0_carry__1_n_6;
  wire next_mi_addr0_carry__1_n_7;
  wire next_mi_addr0_carry__2_n_0;
  wire next_mi_addr0_carry__2_n_1;
  wire next_mi_addr0_carry__2_n_2;
  wire next_mi_addr0_carry__2_n_3;
  wire next_mi_addr0_carry__2_n_4;
  wire next_mi_addr0_carry__2_n_5;
  wire next_mi_addr0_carry__2_n_6;
  wire next_mi_addr0_carry__2_n_7;
  wire next_mi_addr0_carry__3_n_0;
  wire next_mi_addr0_carry__3_n_1;
  wire next_mi_addr0_carry__3_n_2;
  wire next_mi_addr0_carry__3_n_3;
  wire next_mi_addr0_carry__3_n_4;
  wire next_mi_addr0_carry__3_n_5;
  wire next_mi_addr0_carry__3_n_6;
  wire next_mi_addr0_carry__3_n_7;
  wire next_mi_addr0_carry__4_n_2;
  wire next_mi_addr0_carry__4_n_3;
  wire next_mi_addr0_carry__4_n_5;
  wire next_mi_addr0_carry__4_n_6;
  wire next_mi_addr0_carry__4_n_7;
  wire next_mi_addr0_carry_i_4_n_0;
  wire next_mi_addr0_carry_n_0;
  wire next_mi_addr0_carry_n_1;
  wire next_mi_addr0_carry_n_2;
  wire next_mi_addr0_carry_n_3;
  wire next_mi_addr0_carry_n_4;
  wire next_mi_addr0_carry_n_5;
  wire next_mi_addr0_carry_n_6;
  wire next_mi_addr0_carry_n_7;
  wire [0:0]num_transactions;
  wire \num_transactions_q[0]_i_2_n_0 ;
  wire \num_transactions_q[1]_i_1_n_0 ;
  wire \num_transactions_q[1]_i_2_n_0 ;
  wire \num_transactions_q[2]_i_1_n_0 ;
  wire \num_transactions_q_reg_n_0_[0] ;
  wire \num_transactions_q_reg_n_0_[1] ;
  wire \num_transactions_q_reg_n_0_[2] ;
  wire out;
  wire [7:0]p_0_in;
  wire [3:0]p_0_in_0;
  wire [8:2]pre_mi_addr;
  wire [31:9]pre_mi_addr__0;
  wire \pushed_commands[7]_i_1_n_0 ;
  wire \pushed_commands[7]_i_3_n_0 ;
  wire [7:0]pushed_commands_reg__0;
  wire pushed_new_cmd;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [0:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire [0:0]s_axi_bid;
  wire s_axi_wready;
  wire s_axi_wvalid;
  wire s_ready_i_reg;
  wire si_full_size_q;
  wire si_full_size_q_i_1_n_0;
  wire [6:0]split_addr_mask;
  wire \split_addr_mask_q[2]_i_1_n_0 ;
  wire \split_addr_mask_q_reg_n_0_[0] ;
  wire \split_addr_mask_q_reg_n_0_[1] ;
  wire \split_addr_mask_q_reg_n_0_[2] ;
  wire \split_addr_mask_q_reg_n_0_[31] ;
  wire \split_addr_mask_q_reg_n_0_[3] ;
  wire \split_addr_mask_q_reg_n_0_[4] ;
  wire \split_addr_mask_q_reg_n_0_[5] ;
  wire \split_addr_mask_q_reg_n_0_[6] ;
  wire split_ongoing;
  wire [4:0]unalignment_addr;
  wire [4:0]unalignment_addr_q;
  wire wrap_need_to_split;
  wire wrap_need_to_split_q;
  wire wrap_need_to_split_q_i_2_n_0;
  wire wrap_need_to_split_q_i_3_n_0;
  wire [7:0]wrap_rest_len;
  wire [7:0]wrap_rest_len0;
  wire \wrap_rest_len[1]_i_1_n_0 ;
  wire \wrap_rest_len[7]_i_2_n_0 ;
  wire [7:0]wrap_unaligned_len;
  wire [7:0]wrap_unaligned_len_q;

  GND GND
       (.G(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[0]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[10] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[10]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[11] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[11]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[12] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[12]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[13] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[13]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[14] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[14]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[15] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[15]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[16] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[16]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[17] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[17]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[18] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[18]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[19] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[19]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[1]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[20] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[20]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[21] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[21]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[22] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[22]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[23] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[23]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[24] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[24]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[25] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[25]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[26] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[26]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[27] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[27]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[28] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[28]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[29] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[29]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[2]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[30] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[30]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[31] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[31]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[3]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[4]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[5]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[6]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[7]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[8] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[8]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[9] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[9]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[9] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ABURST_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awburst[0]),
        .Q(S_AXI_ABURST_Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ABURST_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awburst[1]),
        .Q(S_AXI_ABURST_Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ACACHE_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awcache[0]),
        .Q(m_axi_awcache[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ACACHE_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awcache[1]),
        .Q(m_axi_awcache[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ACACHE_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awcache[2]),
        .Q(m_axi_awcache[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ACACHE_Q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awcache[3]),
        .Q(m_axi_awcache[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AID_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awid),
        .Q(S_AXI_AID_Q),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awlen[0]),
        .Q(p_0_in_0[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awlen[1]),
        .Q(p_0_in_0[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awlen[2]),
        .Q(p_0_in_0[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awlen[3]),
        .Q(p_0_in_0[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awlen[4]),
        .Q(\S_AXI_ALEN_Q_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awlen[5]),
        .Q(\S_AXI_ALEN_Q_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awlen[6]),
        .Q(\S_AXI_ALEN_Q_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awlen[7]),
        .Q(\S_AXI_ALEN_Q_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALOCK_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awlock),
        .Q(S_AXI_ALOCK_Q),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_APROT_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awprot[0]),
        .Q(m_axi_awprot[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_APROT_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awprot[1]),
        .Q(m_axi_awprot[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_APROT_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awprot[2]),
        .Q(m_axi_awprot[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AQOS_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awqos[0]),
        .Q(m_axi_awqos[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AQOS_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awqos[1]),
        .Q(m_axi_awqos[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AQOS_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awqos[2]),
        .Q(m_axi_awqos[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AQOS_Q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awqos[3]),
        .Q(m_axi_awqos[3]),
        .R(\<const0> ));
  LUT5 #(
    .INIT(32'h44F4FFF4)) 
    S_AXI_AREADY_I_i_1__0
       (.I0(areset_d[0]),
        .I1(areset_d[1]),
        .I2(s_ready_i_reg),
        .I3(S_AXI_AREADY_I_reg_1),
        .I4(s_axi_arvalid),
        .O(S_AXI_AREADY_I_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    S_AXI_AREADY_I_reg
       (.C(CLK),
        .CE(\<const1> ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_26 ),
        .Q(E),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AREGION_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awregion[0]),
        .Q(m_axi_awregion[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AREGION_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awregion[1]),
        .Q(m_axi_awregion[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AREGION_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awregion[2]),
        .Q(m_axi_awregion[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AREGION_Q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awregion[3]),
        .Q(m_axi_awregion[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ASIZE_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awsize[0]),
        .Q(S_AXI_ASIZE_Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ASIZE_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awsize[1]),
        .Q(S_AXI_ASIZE_Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ASIZE_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awsize[2]),
        .Q(S_AXI_ASIZE_Q[2]),
        .R(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \USE_B_CHANNEL.cmd_b_depth[0]_i_1 
       (.I0(\USE_B_CHANNEL.cmd_b_depth_reg__0 [0]),
        .O(\USE_B_CHANNEL.cmd_b_depth[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_B_CHANNEL.cmd_b_depth_reg[0] 
       (.C(CLK),
        .CE(\USE_B_CHANNEL.cmd_b_queue_n_19 ),
        .D(\USE_B_CHANNEL.cmd_b_depth[0]_i_1_n_0 ),
        .Q(\USE_B_CHANNEL.cmd_b_depth_reg__0 [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_B_CHANNEL.cmd_b_depth_reg[1] 
       (.C(CLK),
        .CE(\USE_B_CHANNEL.cmd_b_queue_n_19 ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_16 ),
        .Q(\USE_B_CHANNEL.cmd_b_depth_reg__0 [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_B_CHANNEL.cmd_b_depth_reg[2] 
       (.C(CLK),
        .CE(\USE_B_CHANNEL.cmd_b_queue_n_19 ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_15 ),
        .Q(\USE_B_CHANNEL.cmd_b_depth_reg__0 [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_B_CHANNEL.cmd_b_depth_reg[3] 
       (.C(CLK),
        .CE(\USE_B_CHANNEL.cmd_b_queue_n_19 ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_14 ),
        .Q(\USE_B_CHANNEL.cmd_b_depth_reg__0 [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_B_CHANNEL.cmd_b_depth_reg[4] 
       (.C(CLK),
        .CE(\USE_B_CHANNEL.cmd_b_queue_n_19 ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_13 ),
        .Q(\USE_B_CHANNEL.cmd_b_depth_reg__0 [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_B_CHANNEL.cmd_b_depth_reg[5] 
       (.C(CLK),
        .CE(\USE_B_CHANNEL.cmd_b_queue_n_19 ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_12 ),
        .Q(\USE_B_CHANNEL.cmd_b_depth_reg__0 [5]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \USE_B_CHANNEL.cmd_b_empty_i_i_2 
       (.I0(\USE_B_CHANNEL.cmd_b_depth_reg__0 [5]),
        .I1(\USE_B_CHANNEL.cmd_b_depth_reg__0 [4]),
        .I2(\USE_B_CHANNEL.cmd_b_depth_reg__0 [2]),
        .I3(\USE_B_CHANNEL.cmd_b_depth_reg__0 [3]),
        .I4(\USE_B_CHANNEL.cmd_b_depth_reg__0 [1]),
        .I5(\USE_B_CHANNEL.cmd_b_depth_reg__0 [0]),
        .O(\USE_B_CHANNEL.cmd_b_empty_i_i_2_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_B_CHANNEL.cmd_b_empty_i_reg 
       (.C(CLK),
        .CE(\<const1> ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_18 ),
        .Q(cmd_b_empty),
        .S(SR));
  bd_1_axi_data_fifo_v2_1_14_axic_fifo \USE_B_CHANNEL.cmd_b_queue 
       (.CLK(CLK),
        .D({\USE_B_CHANNEL.cmd_b_queue_n_12 ,\USE_B_CHANNEL.cmd_b_queue_n_13 ,\USE_B_CHANNEL.cmd_b_queue_n_14 ,\USE_B_CHANNEL.cmd_b_queue_n_15 ,\USE_B_CHANNEL.cmd_b_queue_n_16 }),
        .E(\USE_B_CHANNEL.cmd_b_queue_n_19 ),
        .Q(\USE_B_CHANNEL.cmd_b_depth_reg__0 ),
        .SR(SR),
        .S_AXI_AID_Q(S_AXI_AID_Q),
        .\S_AXI_ALEN_Q_reg[3] (p_0_in_0),
        .S_AXI_AREADY_I_reg(\USE_B_CHANNEL.cmd_b_queue_n_26 ),
        .S_AXI_AREADY_I_reg_0(E),
        .\USE_B_CHANNEL.cmd_b_depth_reg[5] (\USE_B_CHANNEL.cmd_b_empty_i_i_2_n_0 ),
        .\USE_B_CHANNEL.cmd_b_empty_i_reg (\USE_B_CHANNEL.cmd_b_queue_n_18 ),
        .\USE_WRITE.wr_cmd_b_ready (\USE_WRITE.wr_cmd_b_ready ),
        .access_is_incr_q_reg(cmd_queue_n_33),
        .\areset_d_reg[0] (areset_d[0]),
        .\areset_d_reg[1] (areset_d[1]),
        .cmd_b_empty(cmd_b_empty),
        .cmd_b_push_block(cmd_b_push_block),
        .cmd_b_push_block_reg(\USE_B_CHANNEL.cmd_b_queue_n_20 ),
        .cmd_push_block(cmd_push_block),
        .cmd_push_block_reg(\USE_B_CHANNEL.cmd_b_queue_n_23 ),
        .command_ongoing(command_ongoing),
        .command_ongoing_reg(\USE_B_CHANNEL.cmd_b_queue_n_17 ),
        .din(cmd_split_i),
        .dout(dout),
        .empty(empty),
        .fix_need_to_split_q(fix_need_to_split_q),
        .full(\inst/full ),
        .incr_need_to_split_q(incr_need_to_split_q),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .\num_transactions_q_reg[2] ({\num_transactions_q_reg_n_0_[2] ,\num_transactions_q_reg_n_0_[1] ,\num_transactions_q_reg_n_0_[0] }),
        .out(out),
        .\pushed_commands_reg[7] (pushed_new_cmd),
        .\queue_id_reg[0] (\USE_B_CHANNEL.cmd_b_queue_n_24 ),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bid(s_axi_bid),
        .wr_en(cmd_push),
        .wrap_need_to_split_q(wrap_need_to_split_q));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    access_fit_mi_side_q_reg
       (.C(CLK),
        .CE(E),
        .D(\split_addr_mask_q[2]_i_1_n_0 ),
        .Q(access_fit_mi_side_q),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair420" *) 
  LUT2 #(
    .INIT(4'h1)) 
    access_is_fix_q_i_1
       (.I0(s_axi_awburst[1]),
        .I1(s_axi_awburst[0]),
        .O(access_is_fix));
  FDRE #(
    .INIT(1'b0)) 
    access_is_fix_q_reg
       (.C(CLK),
        .CE(E),
        .D(access_is_fix),
        .Q(access_is_fix_q),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair445" *) 
  LUT2 #(
    .INIT(4'h2)) 
    access_is_incr_q_i_1
       (.I0(s_axi_awburst[0]),
        .I1(s_axi_awburst[1]),
        .O(access_is_incr));
  FDRE #(
    .INIT(1'b0)) 
    access_is_incr_q_reg
       (.C(CLK),
        .CE(E),
        .D(access_is_incr),
        .Q(access_is_incr_q),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair445" *) 
  LUT2 #(
    .INIT(4'h2)) 
    access_is_wrap_q_i_1
       (.I0(s_axi_awburst[1]),
        .I1(s_axi_awburst[0]),
        .O(access_is_wrap));
  FDRE #(
    .INIT(1'b0)) 
    access_is_wrap_q_reg
       (.C(CLK),
        .CE(E),
        .D(access_is_wrap),
        .Q(access_is_wrap_q),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \areset_d_reg[0] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(SR),
        .Q(areset_d[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \areset_d_reg[1] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(areset_d[0]),
        .Q(areset_d[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    cmd_b_push_block_reg
       (.C(CLK),
        .CE(\<const1> ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_20 ),
        .Q(cmd_b_push_block),
        .R(\<const0> ));
  CARRY4 cmd_length_i_carry
       (.CI(\<const0> ),
        .CO({cmd_length_i_carry_n_0,cmd_length_i_carry_n_1,cmd_length_i_carry_n_2,cmd_length_i_carry_n_3}),
        .CYINIT(\<const1> ),
        .DI({cmd_queue_n_22,cmd_queue_n_23,cmd_queue_n_24,cmd_queue_n_25}),
        .O(din[3:0]),
        .S({cmd_queue_n_42,cmd_queue_n_43,cmd_queue_n_44,cmd_queue_n_45}));
  CARRY4 cmd_length_i_carry__0
       (.CI(cmd_length_i_carry_n_0),
        .CO({cmd_length_i_carry__0_n_1,cmd_length_i_carry__0_n_2,cmd_length_i_carry__0_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,cmd_queue_n_26,cmd_queue_n_27,cmd_queue_n_28}),
        .O(din[7:4]),
        .S({cmd_queue_n_29,cmd_queue_n_30,cmd_queue_n_31,cmd_queue_n_32}));
  LUT5 #(
    .INIT(32'hFBFFFB00)) 
    \cmd_mask_q[0]_i_1 
       (.I0(cmd_mask_i[0]),
        .I1(s_axi_awburst[1]),
        .I2(s_axi_awburst[0]),
        .I3(E),
        .I4(\cmd_mask_q_reg_n_0_[0] ),
        .O(\cmd_mask_q[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair423" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cmd_mask_q[0]_i_2 
       (.I0(s_axi_awlen[0]),
        .I1(s_axi_awsize[0]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awsize[2]),
        .O(cmd_mask_i[0]));
  LUT5 #(
    .INIT(32'hFBFFFB00)) 
    \cmd_mask_q[1]_i_1 
       (.I0(cmd_mask_i[1]),
        .I1(s_axi_awburst[1]),
        .I2(s_axi_awburst[0]),
        .I3(E),
        .I4(\cmd_mask_q_reg_n_0_[1] ),
        .O(\cmd_mask_q[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair423" *) 
  LUT5 #(
    .INIT(32'hFFFFFFE2)) 
    \cmd_mask_q[1]_i_2 
       (.I0(s_axi_awlen[1]),
        .I1(s_axi_awsize[0]),
        .I2(s_axi_awlen[0]),
        .I3(s_axi_awsize[2]),
        .I4(s_axi_awsize[1]),
        .O(cmd_mask_i[1]));
  LUT5 #(
    .INIT(32'hFBFFFB00)) 
    \cmd_mask_q[2]_i_1 
       (.I0(cmd_mask_i[2]),
        .I1(s_axi_awburst[1]),
        .I2(s_axi_awburst[0]),
        .I3(E),
        .I4(\cmd_mask_q_reg_n_0_[2] ),
        .O(\cmd_mask_q[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_mask_q_reg[0] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(\cmd_mask_q[0]_i_1_n_0 ),
        .Q(\cmd_mask_q_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_mask_q_reg[1] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(\cmd_mask_q[1]_i_1_n_0 ),
        .Q(\cmd_mask_q_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_mask_q_reg[2] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(\cmd_mask_q[2]_i_1_n_0 ),
        .Q(\cmd_mask_q_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    cmd_push_block_reg
       (.C(CLK),
        .CE(\<const1> ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_23 ),
        .Q(cmd_push_block),
        .R(\<const0> ));
  bd_1_axi_data_fifo_v2_1_14_axic_fifo__parameterized0 cmd_queue
       (.CLK(CLK),
        .CO(last_incr_split0),
        .D(D),
        .DI({cmd_queue_n_22,cmd_queue_n_23,cmd_queue_n_24,cmd_queue_n_25}),
        .Q(pushed_commands_reg__0),
        .S({cmd_queue_n_29,cmd_queue_n_30,cmd_queue_n_31,cmd_queue_n_32}),
        .SR(SR),
        .\S_AXI_AADDR_Q_reg[2] ({\S_AXI_AADDR_Q_reg_n_0_[2] ,\S_AXI_AADDR_Q_reg_n_0_[1] ,\S_AXI_AADDR_Q_reg_n_0_[0] }),
        .\S_AXI_ALEN_Q_reg[7] ({\S_AXI_ALEN_Q_reg_n_0_[7] ,\S_AXI_ALEN_Q_reg_n_0_[6] ,\S_AXI_ALEN_Q_reg_n_0_[5] ,\S_AXI_ALEN_Q_reg_n_0_[4] ,p_0_in_0}),
        .access_is_fix_q(access_is_fix_q),
        .access_is_incr_q(access_is_incr_q),
        .access_is_wrap_q(access_is_wrap_q),
        .\current_word_1_reg[0] (\current_word_1_reg[0] ),
        .\current_word_1_reg[1] (\current_word_1_reg[1] ),
        .din({cmd_split_i,access_fit_mi_side_q,\cmd_mask_q_reg_n_0_[2] ,\cmd_mask_q_reg_n_0_[1] ,\cmd_mask_q_reg_n_0_[0] ,din[7:0],S_AXI_ASIZE_Q}),
        .\downsized_len_q_reg[7] (downsized_len_q),
        .first_word_reg(first_word_reg),
        .\fix_len_q_reg[4] (fix_len_q),
        .fix_need_to_split_q(fix_need_to_split_q),
        .full(\inst/full ),
        .\goreg_dm.dout_i_reg[13] (\goreg_dm.dout_i_reg[13] ),
        .\goreg_dm.dout_i_reg[9] (\goreg_dm.dout_i_reg[9] ),
        .incr_need_to_split_q(incr_need_to_split_q),
        .legal_wrap_len_q(legal_wrap_len_q),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .\m_payload_i_reg[37] (din[10:8]),
        .\m_payload_i_reg[47] ({cmd_queue_n_42,cmd_queue_n_43,cmd_queue_n_44,cmd_queue_n_45}),
        .\m_payload_i_reg[51] ({cmd_queue_n_26,cmd_queue_n_27,cmd_queue_n_28}),
        .\m_payload_i_reg[72] (\m_payload_i_reg[72] ),
        .\next_mi_addr_reg[8] (cmd_queue_n_34),
        .\next_mi_addr_reg[8]_0 (cmd_queue_n_35),
        .s_axi_wready(s_axi_wready),
        .s_axi_wvalid(s_axi_wvalid),
        .si_full_size_q(si_full_size_q),
        .\split_addr_mask_q_reg[0] (\split_addr_mask_q_reg_n_0_[0] ),
        .\split_addr_mask_q_reg[1] (\split_addr_mask_q_reg_n_0_[1] ),
        .\split_addr_mask_q_reg[2] (\split_addr_mask_q_reg_n_0_[2] ),
        .\split_addr_mask_q_reg[31] (\split_addr_mask_q_reg_n_0_[31] ),
        .split_ongoing(split_ongoing),
        .split_ongoing_reg(cmd_queue_n_33),
        .\unalignment_addr_q_reg[4] (unalignment_addr_q),
        .wr_en(cmd_push),
        .wrap_need_to_split_q(wrap_need_to_split_q),
        .\wrap_rest_len_reg[7] (wrap_rest_len),
        .\wrap_unaligned_len_q_reg[7] (wrap_unaligned_len_q));
  FDRE #(
    .INIT(1'b0)) 
    command_ongoing_reg
       (.C(CLK),
        .CE(\<const1> ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_17 ),
        .Q(command_ongoing),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair427" *) 
  LUT4 #(
    .INIT(16'hFFEA)) 
    \downsized_len_q[0]_i_1 
       (.I0(s_axi_awlen[0]),
        .I1(s_axi_awsize[0]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awsize[2]),
        .O(\downsized_len_q[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair421" *) 
  LUT5 #(
    .INIT(32'h0FEEEEEE)) 
    \downsized_len_q[1]_i_1 
       (.I0(s_axi_awsize[2]),
        .I1(s_axi_awlen[1]),
        .I2(\masked_addr_q[3]_i_2_n_0 ),
        .I3(s_axi_awsize[0]),
        .I4(s_axi_awsize[1]),
        .O(\downsized_len_q[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEEEFEE2CEEECEE2)) 
    \downsized_len_q[2]_i_1 
       (.I0(s_axi_awlen[2]),
        .I1(s_axi_awsize[2]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awsize[0]),
        .I4(s_axi_awlen[0]),
        .I5(\masked_addr_q[8]_i_2_n_0 ),
        .O(\downsized_len_q[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair428" *) 
  LUT5 #(
    .INIT(32'hFEEE0222)) 
    \downsized_len_q[3]_i_1 
       (.I0(s_axi_awlen[3]),
        .I1(s_axi_awsize[2]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awsize[0]),
        .I4(\masked_addr_q[5]_i_2_n_0 ),
        .O(\downsized_len_q[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8BB88BB88BB88)) 
    \downsized_len_q[4]_i_1 
       (.I0(\masked_addr_q[6]_i_2_n_0 ),
        .I1(s_axi_awsize[2]),
        .I2(\num_transactions_q[0]_i_2_n_0 ),
        .I3(s_axi_awlen[4]),
        .I4(s_axi_awsize[1]),
        .I5(s_axi_awsize[0]),
        .O(\downsized_len_q[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair431" *) 
  LUT5 #(
    .INIT(32'hFEEE0222)) 
    \downsized_len_q[5]_i_1 
       (.I0(s_axi_awlen[5]),
        .I1(s_axi_awsize[2]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awsize[0]),
        .I4(\masked_addr_q[7]_i_2_n_0 ),
        .O(\downsized_len_q[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8BB88BB88BB88)) 
    \downsized_len_q[6]_i_1__0 
       (.I0(\masked_addr_q[8]_i_2_n_0 ),
        .I1(s_axi_awsize[2]),
        .I2(\masked_addr_q[8]_i_3_n_0 ),
        .I3(s_axi_awlen[6]),
        .I4(s_axi_awsize[1]),
        .I5(s_axi_awsize[0]),
        .O(\downsized_len_q[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFF55EA40BF15AA00)) 
    \downsized_len_q[7]_i_1 
       (.I0(s_axi_awsize[2]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awsize[0]),
        .I3(\downsized_len_q[7]_i_2_n_0 ),
        .I4(s_axi_awlen[7]),
        .I5(s_axi_awlen[6]),
        .O(\downsized_len_q[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \downsized_len_q[7]_i_2 
       (.I0(s_axi_awlen[2]),
        .I1(s_axi_awlen[3]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awlen[4]),
        .I4(s_axi_awsize[0]),
        .I5(s_axi_awlen[5]),
        .O(\downsized_len_q[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[0]_i_1_n_0 ),
        .Q(downsized_len_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[1]_i_1_n_0 ),
        .Q(downsized_len_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[2]_i_1_n_0 ),
        .Q(downsized_len_q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[3]_i_1_n_0 ),
        .Q(downsized_len_q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[4]_i_1_n_0 ),
        .Q(downsized_len_q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[5]_i_1_n_0 ),
        .Q(downsized_len_q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[6]_i_1__0_n_0 ),
        .Q(downsized_len_q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[7]_i_1_n_0 ),
        .Q(downsized_len_q[7]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair431" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \fix_len_q[0]_i_1 
       (.I0(s_axi_awsize[0]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awsize[2]),
        .O(fix_len[0]));
  (* SOFT_HLUTNM = "soft_lutpair430" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \fix_len_q[2]_i_1 
       (.I0(s_axi_awsize[2]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awsize[0]),
        .O(fix_len[2]));
  (* SOFT_HLUTNM = "soft_lutpair448" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \fix_len_q[3]_i_1 
       (.I0(s_axi_awsize[1]),
        .I1(s_axi_awsize[2]),
        .O(fix_len[3]));
  (* SOFT_HLUTNM = "soft_lutpair422" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \fix_len_q[4]_i_1 
       (.I0(s_axi_awsize[2]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awsize[0]),
        .O(\fix_len_q[4]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \fix_len_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(fix_len[0]),
        .Q(fix_len_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \fix_len_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awsize[2]),
        .Q(fix_len_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \fix_len_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(fix_len[2]),
        .Q(fix_len_q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \fix_len_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(fix_len[3]),
        .Q(fix_len_q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \fix_len_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(\fix_len_q[4]_i_1_n_0 ),
        .Q(fix_len_q[4]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair429" *) 
  LUT5 #(
    .INIT(32'h11111000)) 
    fix_need_to_split_q_i_1
       (.I0(s_axi_awburst[0]),
        .I1(s_axi_awburst[1]),
        .I2(s_axi_awsize[0]),
        .I3(s_axi_awsize[1]),
        .I4(s_axi_awsize[2]),
        .O(fix_need_to_split));
  FDRE #(
    .INIT(1'b0)) 
    fix_need_to_split_q_reg
       (.C(CLK),
        .CE(E),
        .D(fix_need_to_split),
        .Q(fix_need_to_split_q),
        .R(SR));
  LUT6 #(
    .INIT(64'h0F000F000F000800)) 
    incr_need_to_split_q_i_1
       (.I0(\num_transactions_q[1]_i_2_n_0 ),
        .I1(s_axi_awsize[2]),
        .I2(s_axi_awburst[1]),
        .I3(s_axi_awburst[0]),
        .I4(num_transactions),
        .I5(\num_transactions_q[2]_i_1_n_0 ),
        .O(incr_need_to_split));
  FDRE #(
    .INIT(1'b0)) 
    incr_need_to_split_q_reg
       (.C(CLK),
        .CE(E),
        .D(incr_need_to_split),
        .Q(incr_need_to_split_q),
        .R(SR));
  CARRY4 last_incr_split0_carry
       (.CI(\<const0> ),
        .CO({last_incr_split0,last_incr_split0_carry_n_2,last_incr_split0_carry_n_3}),
        .CYINIT(\<const1> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .S({\<const0> ,last_incr_split0_carry_i_1_n_0,last_incr_split0_carry_i_2_n_0,last_incr_split0_carry_i_3_n_0}));
  LUT2 #(
    .INIT(4'h1)) 
    last_incr_split0_carry_i_1
       (.I0(pushed_commands_reg__0[6]),
        .I1(pushed_commands_reg__0[7]),
        .O(last_incr_split0_carry_i_1_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    last_incr_split0_carry_i_2
       (.I0(pushed_commands_reg__0[3]),
        .I1(pushed_commands_reg__0[5]),
        .I2(pushed_commands_reg__0[4]),
        .O(last_incr_split0_carry_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    last_incr_split0_carry_i_3
       (.I0(pushed_commands_reg__0[2]),
        .I1(\num_transactions_q_reg_n_0_[2] ),
        .I2(pushed_commands_reg__0[0]),
        .I3(\num_transactions_q_reg_n_0_[0] ),
        .I4(\num_transactions_q_reg_n_0_[1] ),
        .I5(pushed_commands_reg__0[1]),
        .O(last_incr_split0_carry_i_3_n_0));
  LUT6 #(
    .INIT(64'h000000A2AAAAAAAA)) 
    legal_wrap_len_q_i_1
       (.I0(legal_wrap_len_q_i_2_n_0),
        .I1(s_axi_awlen[1]),
        .I2(legal_wrap_len_q_i_3_n_0),
        .I3(legal_wrap_len_q_i_4_n_0),
        .I4(s_axi_awlen[2]),
        .I5(s_axi_awsize[2]),
        .O(legal_wrap_len_q_i_1_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAB)) 
    legal_wrap_len_q_i_2
       (.I0(\split_addr_mask_q[2]_i_1_n_0 ),
        .I1(s_axi_awlen[5]),
        .I2(s_axi_awlen[3]),
        .I3(s_axi_awlen[4]),
        .I4(s_axi_awlen[7]),
        .I5(s_axi_awlen[6]),
        .O(legal_wrap_len_q_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair426" *) 
  LUT2 #(
    .INIT(4'h1)) 
    legal_wrap_len_q_i_3
       (.I0(s_axi_awsize[0]),
        .I1(s_axi_awsize[1]),
        .O(legal_wrap_len_q_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair438" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    legal_wrap_len_q_i_4
       (.I0(s_axi_awsize[1]),
        .I1(s_axi_awlen[0]),
        .I2(s_axi_awsize[0]),
        .O(legal_wrap_len_q_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    legal_wrap_len_q_reg
       (.C(CLK),
        .CE(E),
        .D(legal_wrap_len_q_i_1_n_0),
        .Q(legal_wrap_len_q),
        .R(SR));
  LUT5 #(
    .INIT(32'h00E2AAAA)) 
    \m_axi_awaddr[0]_INST_0 
       (.I0(\S_AXI_AADDR_Q_reg_n_0_[0] ),
        .I1(access_is_wrap_q),
        .I2(masked_addr_q[0]),
        .I3(access_is_incr_q),
        .I4(split_ongoing),
        .O(m_axi_awaddr[0]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[10]_INST_0 
       (.I0(next_mi_addr[10]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[10]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[10] ),
        .O(m_axi_awaddr[10]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[11]_INST_0 
       (.I0(next_mi_addr[11]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[11]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[11] ),
        .O(m_axi_awaddr[11]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[12]_INST_0 
       (.I0(next_mi_addr[12]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[12]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[12] ),
        .O(m_axi_awaddr[12]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[13]_INST_0 
       (.I0(next_mi_addr[13]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[13]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[13] ),
        .O(m_axi_awaddr[13]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[14]_INST_0 
       (.I0(next_mi_addr[14]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[14]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[14] ),
        .O(m_axi_awaddr[14]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[15]_INST_0 
       (.I0(next_mi_addr[15]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[15]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[15] ),
        .O(m_axi_awaddr[15]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[16]_INST_0 
       (.I0(next_mi_addr[16]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[16]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[16] ),
        .O(m_axi_awaddr[16]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[17]_INST_0 
       (.I0(next_mi_addr[17]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[17]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[17] ),
        .O(m_axi_awaddr[17]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[18]_INST_0 
       (.I0(next_mi_addr[18]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[18]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[18] ),
        .O(m_axi_awaddr[18]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[19]_INST_0 
       (.I0(next_mi_addr[19]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[19]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[19] ),
        .O(m_axi_awaddr[19]));
  LUT5 #(
    .INIT(32'h00E2AAAA)) 
    \m_axi_awaddr[1]_INST_0 
       (.I0(\S_AXI_AADDR_Q_reg_n_0_[1] ),
        .I1(access_is_wrap_q),
        .I2(masked_addr_q[1]),
        .I3(access_is_incr_q),
        .I4(split_ongoing),
        .O(m_axi_awaddr[1]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[20]_INST_0 
       (.I0(next_mi_addr[20]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[20]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[20] ),
        .O(m_axi_awaddr[20]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[21]_INST_0 
       (.I0(next_mi_addr[21]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[21]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[21] ),
        .O(m_axi_awaddr[21]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[22]_INST_0 
       (.I0(next_mi_addr[22]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[22]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[22] ),
        .O(m_axi_awaddr[22]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[23]_INST_0 
       (.I0(next_mi_addr[23]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[23]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[23] ),
        .O(m_axi_awaddr[23]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[24]_INST_0 
       (.I0(next_mi_addr[24]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[24]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[24] ),
        .O(m_axi_awaddr[24]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[25]_INST_0 
       (.I0(next_mi_addr[25]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[25]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[25] ),
        .O(m_axi_awaddr[25]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[26]_INST_0 
       (.I0(next_mi_addr[26]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[26]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[26] ),
        .O(m_axi_awaddr[26]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[27]_INST_0 
       (.I0(next_mi_addr[27]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[27]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[27] ),
        .O(m_axi_awaddr[27]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[28]_INST_0 
       (.I0(next_mi_addr[28]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[28]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[28] ),
        .O(m_axi_awaddr[28]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[29]_INST_0 
       (.I0(next_mi_addr[29]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[29]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[29] ),
        .O(m_axi_awaddr[29]));
  LUT6 #(
    .INIT(64'hFF00F0F0B8B8F0F0)) 
    \m_axi_awaddr[2]_INST_0 
       (.I0(masked_addr_q[2]),
        .I1(access_is_wrap_q),
        .I2(\S_AXI_AADDR_Q_reg_n_0_[2] ),
        .I3(next_mi_addr[2]),
        .I4(split_ongoing),
        .I5(access_is_incr_q),
        .O(m_axi_awaddr[2]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[30]_INST_0 
       (.I0(next_mi_addr[30]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[30]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[30] ),
        .O(m_axi_awaddr[30]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[31]_INST_0 
       (.I0(next_mi_addr[31]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[31]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[31] ),
        .O(m_axi_awaddr[31]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[3]_INST_0 
       (.I0(next_mi_addr[3]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[3]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[3] ),
        .O(m_axi_awaddr[3]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[4]_INST_0 
       (.I0(next_mi_addr[4]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[4]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[4] ),
        .O(m_axi_awaddr[4]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[5]_INST_0 
       (.I0(next_mi_addr[5]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[5]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[5] ),
        .O(m_axi_awaddr[5]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[6]_INST_0 
       (.I0(next_mi_addr[6]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[6]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[6] ),
        .O(m_axi_awaddr[6]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[7]_INST_0 
       (.I0(next_mi_addr[7]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[7]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[7] ),
        .O(m_axi_awaddr[7]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[8]_INST_0 
       (.I0(next_mi_addr[8]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[8]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[8] ),
        .O(m_axi_awaddr[8]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_awaddr[9]_INST_0 
       (.I0(next_mi_addr[9]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[9]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[9] ),
        .O(m_axi_awaddr[9]));
  LUT5 #(
    .INIT(32'hAAAAEFEE)) 
    \m_axi_awburst[0]_INST_0 
       (.I0(S_AXI_ABURST_Q[0]),
        .I1(access_is_fix_q),
        .I2(legal_wrap_len_q),
        .I3(access_is_wrap_q),
        .I4(access_fit_mi_side_q),
        .O(m_axi_awburst[0]));
  LUT5 #(
    .INIT(32'hAAAA2022)) 
    \m_axi_awburst[1]_INST_0 
       (.I0(S_AXI_ABURST_Q[1]),
        .I1(access_is_fix_q),
        .I2(legal_wrap_len_q),
        .I3(access_is_wrap_q),
        .I4(access_fit_mi_side_q),
        .O(m_axi_awburst[1]));
  LUT4 #(
    .INIT(16'h0002)) 
    \m_axi_awlock[0]_INST_0 
       (.I0(S_AXI_ALOCK_Q),
        .I1(wrap_need_to_split_q),
        .I2(incr_need_to_split_q),
        .I3(fix_need_to_split_q),
        .O(m_axi_awlock));
  (* SOFT_HLUTNM = "soft_lutpair427" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    \masked_addr_q[0]_i_1 
       (.I0(s_axi_awaddr[0]),
        .I1(s_axi_awsize[2]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awsize[0]),
        .I4(s_axi_awlen[0]),
        .O(masked_addr[0]));
  LUT6 #(
    .INIT(64'h00002AAAAAAA2AAA)) 
    \masked_addr_q[10]_i_1 
       (.I0(s_axi_awaddr[10]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awlen[7]),
        .I3(s_axi_awsize[0]),
        .I4(s_axi_awsize[2]),
        .I5(\num_transactions_q[0]_i_2_n_0 ),
        .O(masked_addr[10]));
  (* SOFT_HLUTNM = "soft_lutpair441" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    \masked_addr_q[11]_i_1 
       (.I0(s_axi_awaddr[11]),
        .I1(s_axi_awsize[2]),
        .I2(\num_transactions_q[1]_i_2_n_0 ),
        .O(masked_addr[11]));
  LUT2 #(
    .INIT(4'h2)) 
    \masked_addr_q[12]_i_1 
       (.I0(s_axi_awaddr[12]),
        .I1(\num_transactions_q[2]_i_1_n_0 ),
        .O(masked_addr[12]));
  LUT6 #(
    .INIT(64'h222AAA2AAAAAAAAA)) 
    \masked_addr_q[13]_i_1 
       (.I0(s_axi_awaddr[13]),
        .I1(s_axi_awsize[2]),
        .I2(s_axi_awlen[7]),
        .I3(s_axi_awsize[0]),
        .I4(s_axi_awlen[6]),
        .I5(s_axi_awsize[1]),
        .O(masked_addr[13]));
  (* SOFT_HLUTNM = "soft_lutpair422" *) 
  LUT5 #(
    .INIT(32'h2AAAAAAA)) 
    \masked_addr_q[14]_i_1 
       (.I0(s_axi_awaddr[14]),
        .I1(s_axi_awlen[7]),
        .I2(s_axi_awsize[0]),
        .I3(s_axi_awsize[1]),
        .I4(s_axi_awsize[2]),
        .O(masked_addr[14]));
  LUT6 #(
    .INIT(64'h0002000000020202)) 
    \masked_addr_q[1]_i_1 
       (.I0(s_axi_awaddr[1]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awsize[2]),
        .I3(s_axi_awlen[0]),
        .I4(s_axi_awsize[0]),
        .I5(s_axi_awlen[1]),
        .O(masked_addr[1]));
  (* SOFT_HLUTNM = "soft_lutpair446" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \masked_addr_q[2]_i_1 
       (.I0(s_axi_awaddr[2]),
        .I1(cmd_mask_i[2]),
        .O(masked_addr[2]));
  LUT6 #(
    .INIT(64'hFFFFFEAEFAFAFEAE)) 
    \masked_addr_q[2]_i_2 
       (.I0(s_axi_awsize[2]),
        .I1(s_axi_awlen[2]),
        .I2(s_axi_awsize[0]),
        .I3(s_axi_awlen[1]),
        .I4(s_axi_awsize[1]),
        .I5(s_axi_awlen[0]),
        .O(cmd_mask_i[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \masked_addr_q[3]_i_1 
       (.I0(s_axi_awaddr[3]),
        .I1(\masked_addr_q[3]_i_2_n_0 ),
        .O(masked_addr[3]));
  LUT6 #(
    .INIT(64'h0000015155550151)) 
    \masked_addr_q[3]_i_2 
       (.I0(s_axi_awsize[2]),
        .I1(s_axi_awlen[3]),
        .I2(s_axi_awsize[0]),
        .I3(s_axi_awlen[2]),
        .I4(s_axi_awsize[1]),
        .I5(\masked_addr_q[3]_i_3_n_0 ),
        .O(\masked_addr_q[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair424" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \masked_addr_q[3]_i_3 
       (.I0(s_axi_awlen[0]),
        .I1(s_axi_awsize[0]),
        .I2(s_axi_awlen[1]),
        .O(\masked_addr_q[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h02020202020202A2)) 
    \masked_addr_q[4]_i_1 
       (.I0(s_axi_awaddr[4]),
        .I1(\masked_addr_q[8]_i_2_n_0 ),
        .I2(s_axi_awsize[2]),
        .I3(s_axi_awsize[0]),
        .I4(s_axi_awsize[1]),
        .I5(s_axi_awlen[0]),
        .O(masked_addr[4]));
  (* SOFT_HLUTNM = "soft_lutpair450" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \masked_addr_q[5]_i_1 
       (.I0(s_axi_awaddr[5]),
        .I1(\masked_addr_q[5]_i_2_n_0 ),
        .O(masked_addr[5]));
  LUT6 #(
    .INIT(64'hFEAEFFFFFEAE0000)) 
    \masked_addr_q[5]_i_2 
       (.I0(s_axi_awsize[1]),
        .I1(s_axi_awlen[1]),
        .I2(s_axi_awsize[0]),
        .I3(s_axi_awlen[0]),
        .I4(s_axi_awsize[2]),
        .I5(\downsized_len_q[7]_i_2_n_0 ),
        .O(\masked_addr_q[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair434" *) 
  LUT4 #(
    .INIT(16'h4700)) 
    \masked_addr_q[6]_i_1 
       (.I0(\masked_addr_q[6]_i_2_n_0 ),
        .I1(s_axi_awsize[2]),
        .I2(\num_transactions_q[0]_i_2_n_0 ),
        .I3(s_axi_awaddr[6]),
        .O(masked_addr[6]));
  (* SOFT_HLUTNM = "soft_lutpair424" *) 
  LUT5 #(
    .INIT(32'hFCBBFC88)) 
    \masked_addr_q[6]_i_2 
       (.I0(s_axi_awlen[0]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awlen[1]),
        .I3(s_axi_awsize[0]),
        .I4(s_axi_awlen[2]),
        .O(\masked_addr_q[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair451" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \masked_addr_q[7]_i_1 
       (.I0(s_axi_awaddr[7]),
        .I1(\masked_addr_q[7]_i_2_n_0 ),
        .O(masked_addr[7]));
  (* SOFT_HLUTNM = "soft_lutpair439" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \masked_addr_q[7]_i_2 
       (.I0(\masked_addr_q[7]_i_3_n_0 ),
        .I1(s_axi_awsize[2]),
        .I2(\num_transactions_q[1]_i_2_n_0 ),
        .O(\masked_addr_q[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \masked_addr_q[7]_i_3 
       (.I0(s_axi_awlen[0]),
        .I1(s_axi_awlen[1]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awlen[2]),
        .I4(s_axi_awsize[0]),
        .I5(s_axi_awlen[3]),
        .O(\masked_addr_q[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair435" *) 
  LUT4 #(
    .INIT(16'h4700)) 
    \masked_addr_q[8]_i_1__0 
       (.I0(\masked_addr_q[8]_i_2_n_0 ),
        .I1(s_axi_awsize[2]),
        .I2(\masked_addr_q[8]_i_3_n_0 ),
        .I3(s_axi_awaddr[8]),
        .O(masked_addr[8]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \masked_addr_q[8]_i_2 
       (.I0(s_axi_awlen[1]),
        .I1(s_axi_awlen[2]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awlen[3]),
        .I4(s_axi_awsize[0]),
        .I5(s_axi_awlen[4]),
        .O(\masked_addr_q[8]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair426" *) 
  LUT5 #(
    .INIT(32'hAFA0C0C0)) 
    \masked_addr_q[8]_i_3 
       (.I0(s_axi_awlen[5]),
        .I1(s_axi_awlen[6]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awlen[7]),
        .I4(s_axi_awsize[0]),
        .O(\masked_addr_q[8]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair449" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \masked_addr_q[9]_i_1 
       (.I0(s_axi_awaddr[9]),
        .I1(\masked_addr_q[9]_i_2_n_0 ),
        .O(masked_addr[9]));
  LUT6 #(
    .INIT(64'hBBB888B888888888)) 
    \masked_addr_q[9]_i_2 
       (.I0(\downsized_len_q[7]_i_2_n_0 ),
        .I1(s_axi_awsize[2]),
        .I2(s_axi_awlen[7]),
        .I3(s_axi_awsize[0]),
        .I4(s_axi_awlen[6]),
        .I5(s_axi_awsize[1]),
        .O(\masked_addr_q[9]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[0]),
        .Q(masked_addr_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[10] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[10]),
        .Q(masked_addr_q[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[11] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[11]),
        .Q(masked_addr_q[11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[12] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[12]),
        .Q(masked_addr_q[12]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[13] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[13]),
        .Q(masked_addr_q[13]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[14] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[14]),
        .Q(masked_addr_q[14]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[15] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[15]),
        .Q(masked_addr_q[15]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[16] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[16]),
        .Q(masked_addr_q[16]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[17] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[17]),
        .Q(masked_addr_q[17]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[18] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[18]),
        .Q(masked_addr_q[18]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[19] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[19]),
        .Q(masked_addr_q[19]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[1]),
        .Q(masked_addr_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[20] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[20]),
        .Q(masked_addr_q[20]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[21] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[21]),
        .Q(masked_addr_q[21]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[22] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[22]),
        .Q(masked_addr_q[22]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[23] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[23]),
        .Q(masked_addr_q[23]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[24] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[24]),
        .Q(masked_addr_q[24]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[25] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[25]),
        .Q(masked_addr_q[25]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[26] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[26]),
        .Q(masked_addr_q[26]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[27] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[27]),
        .Q(masked_addr_q[27]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[28] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[28]),
        .Q(masked_addr_q[28]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[29] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[29]),
        .Q(masked_addr_q[29]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[2]),
        .Q(masked_addr_q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[30] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[30]),
        .Q(masked_addr_q[30]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[31] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_awaddr[31]),
        .Q(masked_addr_q[31]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[3]),
        .Q(masked_addr_q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[4]),
        .Q(masked_addr_q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[5]),
        .Q(masked_addr_q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[6]),
        .Q(masked_addr_q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[7]),
        .Q(masked_addr_q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[8] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[8]),
        .Q(masked_addr_q[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[9] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[9]),
        .Q(masked_addr_q[9]),
        .R(SR));
  CARRY4 next_mi_addr0_carry
       (.CI(\<const0> ),
        .CO({next_mi_addr0_carry_n_0,next_mi_addr0_carry_n_1,next_mi_addr0_carry_n_2,next_mi_addr0_carry_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,pre_mi_addr__0[10],\<const0> }),
        .O({next_mi_addr0_carry_n_4,next_mi_addr0_carry_n_5,next_mi_addr0_carry_n_6,next_mi_addr0_carry_n_7}),
        .S({pre_mi_addr__0[12:11],next_mi_addr0_carry_i_4_n_0,pre_mi_addr__0[9]}));
  CARRY4 next_mi_addr0_carry__0
       (.CI(next_mi_addr0_carry_n_0),
        .CO({next_mi_addr0_carry__0_n_0,next_mi_addr0_carry__0_n_1,next_mi_addr0_carry__0_n_2,next_mi_addr0_carry__0_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .O({next_mi_addr0_carry__0_n_4,next_mi_addr0_carry__0_n_5,next_mi_addr0_carry__0_n_6,next_mi_addr0_carry__0_n_7}),
        .S(pre_mi_addr__0[16:13]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__0_i_1
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[16] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[16]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[16]),
        .O(pre_mi_addr__0[16]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__0_i_2
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[15] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[15]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[15]),
        .O(pre_mi_addr__0[15]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__0_i_3
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[14] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[14]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[14]),
        .O(pre_mi_addr__0[14]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__0_i_4
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[13] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[13]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[13]),
        .O(pre_mi_addr__0[13]));
  CARRY4 next_mi_addr0_carry__1
       (.CI(next_mi_addr0_carry__0_n_0),
        .CO({next_mi_addr0_carry__1_n_0,next_mi_addr0_carry__1_n_1,next_mi_addr0_carry__1_n_2,next_mi_addr0_carry__1_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .O({next_mi_addr0_carry__1_n_4,next_mi_addr0_carry__1_n_5,next_mi_addr0_carry__1_n_6,next_mi_addr0_carry__1_n_7}),
        .S(pre_mi_addr__0[20:17]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__1_i_1
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[20] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[20]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[20]),
        .O(pre_mi_addr__0[20]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__1_i_2
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[19] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[19]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[19]),
        .O(pre_mi_addr__0[19]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__1_i_3
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[18] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[18]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[18]),
        .O(pre_mi_addr__0[18]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__1_i_4
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[17] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[17]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[17]),
        .O(pre_mi_addr__0[17]));
  CARRY4 next_mi_addr0_carry__2
       (.CI(next_mi_addr0_carry__1_n_0),
        .CO({next_mi_addr0_carry__2_n_0,next_mi_addr0_carry__2_n_1,next_mi_addr0_carry__2_n_2,next_mi_addr0_carry__2_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .O({next_mi_addr0_carry__2_n_4,next_mi_addr0_carry__2_n_5,next_mi_addr0_carry__2_n_6,next_mi_addr0_carry__2_n_7}),
        .S(pre_mi_addr__0[24:21]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__2_i_1
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[24] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[24]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[24]),
        .O(pre_mi_addr__0[24]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__2_i_2
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[23] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[23]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[23]),
        .O(pre_mi_addr__0[23]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__2_i_3
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[22] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[22]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[22]),
        .O(pre_mi_addr__0[22]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__2_i_4
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[21] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[21]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[21]),
        .O(pre_mi_addr__0[21]));
  CARRY4 next_mi_addr0_carry__3
       (.CI(next_mi_addr0_carry__2_n_0),
        .CO({next_mi_addr0_carry__3_n_0,next_mi_addr0_carry__3_n_1,next_mi_addr0_carry__3_n_2,next_mi_addr0_carry__3_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .O({next_mi_addr0_carry__3_n_4,next_mi_addr0_carry__3_n_5,next_mi_addr0_carry__3_n_6,next_mi_addr0_carry__3_n_7}),
        .S(pre_mi_addr__0[28:25]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__3_i_1
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[28] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[28]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[28]),
        .O(pre_mi_addr__0[28]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__3_i_2
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[27] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[27]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[27]),
        .O(pre_mi_addr__0[27]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__3_i_3
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[26] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[26]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[26]),
        .O(pre_mi_addr__0[26]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__3_i_4
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[25] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[25]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[25]),
        .O(pre_mi_addr__0[25]));
  CARRY4 next_mi_addr0_carry__4
       (.CI(next_mi_addr0_carry__3_n_0),
        .CO({next_mi_addr0_carry__4_n_2,next_mi_addr0_carry__4_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .O({next_mi_addr0_carry__4_n_5,next_mi_addr0_carry__4_n_6,next_mi_addr0_carry__4_n_7}),
        .S({\<const0> ,pre_mi_addr__0[31:29]}));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__4_i_1
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[31] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[31]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[31]),
        .O(pre_mi_addr__0[31]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__4_i_2
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[30] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[30]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[30]),
        .O(pre_mi_addr__0[30]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__4_i_3
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[29] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[29]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[29]),
        .O(pre_mi_addr__0[29]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry_i_1
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[10] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[10]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[10]),
        .O(pre_mi_addr__0[10]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry_i_2
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[12] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[12]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[12]),
        .O(pre_mi_addr__0[12]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry_i_3
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[11] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[11]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[11]),
        .O(pre_mi_addr__0[11]));
  LUT6 #(
    .INIT(64'h47444777FFFFFFFF)) 
    next_mi_addr0_carry_i_4
       (.I0(next_mi_addr[10]),
        .I1(cmd_queue_n_34),
        .I2(masked_addr_q[10]),
        .I3(cmd_queue_n_35),
        .I4(\S_AXI_AADDR_Q_reg_n_0_[10] ),
        .I5(\split_addr_mask_q_reg_n_0_[31] ),
        .O(next_mi_addr0_carry_i_4_n_0));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry_i_5
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[9] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[9]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[9]),
        .O(pre_mi_addr__0[9]));
  LUT6 #(
    .INIT(64'hA2A2A2808080A280)) 
    \next_mi_addr[2]_i_1 
       (.I0(\split_addr_mask_q_reg_n_0_[2] ),
        .I1(cmd_queue_n_34),
        .I2(next_mi_addr[2]),
        .I3(\S_AXI_AADDR_Q_reg_n_0_[2] ),
        .I4(cmd_queue_n_35),
        .I5(masked_addr_q[2]),
        .O(pre_mi_addr[2]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[3]_i_1 
       (.I0(\split_addr_mask_q_reg_n_0_[3] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[3] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[3]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[3]),
        .O(pre_mi_addr[3]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[4]_i_1 
       (.I0(\split_addr_mask_q_reg_n_0_[4] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[4] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[4]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[4]),
        .O(pre_mi_addr[4]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[5]_i_1 
       (.I0(\split_addr_mask_q_reg_n_0_[5] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[5] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[5]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[5]),
        .O(pre_mi_addr[5]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[6]_i_1 
       (.I0(\split_addr_mask_q_reg_n_0_[6] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[6] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[6]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[6]),
        .O(pre_mi_addr[6]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[7]_i_1 
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[7] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[7]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[7]),
        .O(pre_mi_addr[7]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[8]_i_1 
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[8] ),
        .I2(cmd_queue_n_35),
        .I3(masked_addr_q[8]),
        .I4(cmd_queue_n_34),
        .I5(next_mi_addr[8]),
        .O(pre_mi_addr[8]));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[10] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry_n_6),
        .Q(next_mi_addr[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[11] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry_n_5),
        .Q(next_mi_addr[11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[12] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry_n_4),
        .Q(next_mi_addr[12]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[13] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__0_n_7),
        .Q(next_mi_addr[13]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[14] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__0_n_6),
        .Q(next_mi_addr[14]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[15] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__0_n_5),
        .Q(next_mi_addr[15]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[16] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__0_n_4),
        .Q(next_mi_addr[16]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[17] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__1_n_7),
        .Q(next_mi_addr[17]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[18] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__1_n_6),
        .Q(next_mi_addr[18]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[19] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__1_n_5),
        .Q(next_mi_addr[19]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[20] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__1_n_4),
        .Q(next_mi_addr[20]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[21] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__2_n_7),
        .Q(next_mi_addr[21]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[22] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__2_n_6),
        .Q(next_mi_addr[22]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[23] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__2_n_5),
        .Q(next_mi_addr[23]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[24] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__2_n_4),
        .Q(next_mi_addr[24]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[25] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__3_n_7),
        .Q(next_mi_addr[25]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[26] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__3_n_6),
        .Q(next_mi_addr[26]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[27] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__3_n_5),
        .Q(next_mi_addr[27]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[28] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__3_n_4),
        .Q(next_mi_addr[28]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[29] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__4_n_7),
        .Q(next_mi_addr[29]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[2] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[2]),
        .Q(next_mi_addr[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[30] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__4_n_6),
        .Q(next_mi_addr[30]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[31] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__4_n_5),
        .Q(next_mi_addr[31]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[3] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[3]),
        .Q(next_mi_addr[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[4] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[4]),
        .Q(next_mi_addr[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[5] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[5]),
        .Q(next_mi_addr[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[6] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[6]),
        .Q(next_mi_addr[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[7] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[7]),
        .Q(next_mi_addr[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[8] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[8]),
        .Q(next_mi_addr[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[9] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry_n_7),
        .Q(next_mi_addr[9]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair430" *) 
  LUT5 #(
    .INIT(32'hB8888888)) 
    \num_transactions_q[0]_i_1 
       (.I0(\num_transactions_q[0]_i_2_n_0 ),
        .I1(s_axi_awsize[2]),
        .I2(s_axi_awsize[0]),
        .I3(s_axi_awlen[7]),
        .I4(s_axi_awsize[1]),
        .O(num_transactions));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \num_transactions_q[0]_i_2 
       (.I0(s_axi_awlen[3]),
        .I1(s_axi_awlen[4]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awlen[5]),
        .I4(s_axi_awsize[0]),
        .I5(s_axi_awlen[6]),
        .O(\num_transactions_q[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair439" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \num_transactions_q[1]_i_1 
       (.I0(\num_transactions_q[1]_i_2_n_0 ),
        .I1(s_axi_awsize[2]),
        .O(\num_transactions_q[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \num_transactions_q[1]_i_2 
       (.I0(s_axi_awlen[4]),
        .I1(s_axi_awlen[5]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awlen[6]),
        .I4(s_axi_awsize[0]),
        .I5(s_axi_awlen[7]),
        .O(\num_transactions_q[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF8A8580800000000)) 
    \num_transactions_q[2]_i_1 
       (.I0(s_axi_awsize[0]),
        .I1(s_axi_awlen[7]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awlen[6]),
        .I4(s_axi_awlen[5]),
        .I5(s_axi_awsize[2]),
        .O(\num_transactions_q[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \num_transactions_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(num_transactions),
        .Q(\num_transactions_q_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \num_transactions_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(\num_transactions_q[1]_i_1_n_0 ),
        .Q(\num_transactions_q_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \num_transactions_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(\num_transactions_q[2]_i_1_n_0 ),
        .Q(\num_transactions_q_reg_n_0_[2] ),
        .R(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \pushed_commands[0]_i_1 
       (.I0(pushed_commands_reg__0[0]),
        .O(p_0_in[0]));
  (* SOFT_HLUTNM = "soft_lutpair440" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \pushed_commands[1]_i_1 
       (.I0(pushed_commands_reg__0[1]),
        .I1(pushed_commands_reg__0[0]),
        .O(p_0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair440" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \pushed_commands[2]_i_1 
       (.I0(pushed_commands_reg__0[2]),
        .I1(pushed_commands_reg__0[0]),
        .I2(pushed_commands_reg__0[1]),
        .O(p_0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair432" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \pushed_commands[3]_i_1 
       (.I0(pushed_commands_reg__0[3]),
        .I1(pushed_commands_reg__0[1]),
        .I2(pushed_commands_reg__0[0]),
        .I3(pushed_commands_reg__0[2]),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair432" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \pushed_commands[4]_i_1 
       (.I0(pushed_commands_reg__0[4]),
        .I1(pushed_commands_reg__0[3]),
        .I2(pushed_commands_reg__0[2]),
        .I3(pushed_commands_reg__0[0]),
        .I4(pushed_commands_reg__0[1]),
        .O(p_0_in[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \pushed_commands[5]_i_1 
       (.I0(pushed_commands_reg__0[5]),
        .I1(pushed_commands_reg__0[1]),
        .I2(pushed_commands_reg__0[0]),
        .I3(pushed_commands_reg__0[2]),
        .I4(pushed_commands_reg__0[3]),
        .I5(pushed_commands_reg__0[4]),
        .O(p_0_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair442" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \pushed_commands[6]_i_1 
       (.I0(pushed_commands_reg__0[6]),
        .I1(\pushed_commands[7]_i_3_n_0 ),
        .O(p_0_in[6]));
  LUT2 #(
    .INIT(4'hB)) 
    \pushed_commands[7]_i_1 
       (.I0(E),
        .I1(out),
        .O(\pushed_commands[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair442" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \pushed_commands[7]_i_2 
       (.I0(pushed_commands_reg__0[7]),
        .I1(\pushed_commands[7]_i_3_n_0 ),
        .I2(pushed_commands_reg__0[6]),
        .O(p_0_in[7]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \pushed_commands[7]_i_3 
       (.I0(pushed_commands_reg__0[5]),
        .I1(pushed_commands_reg__0[1]),
        .I2(pushed_commands_reg__0[0]),
        .I3(pushed_commands_reg__0[2]),
        .I4(pushed_commands_reg__0[3]),
        .I5(pushed_commands_reg__0[4]),
        .O(\pushed_commands[7]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[0] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in[0]),
        .Q(pushed_commands_reg__0[0]),
        .R(\pushed_commands[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[1] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in[1]),
        .Q(pushed_commands_reg__0[1]),
        .R(\pushed_commands[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[2] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in[2]),
        .Q(pushed_commands_reg__0[2]),
        .R(\pushed_commands[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[3] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in[3]),
        .Q(pushed_commands_reg__0[3]),
        .R(\pushed_commands[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[4] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in[4]),
        .Q(pushed_commands_reg__0[4]),
        .R(\pushed_commands[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[5] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in[5]),
        .Q(pushed_commands_reg__0[5]),
        .R(\pushed_commands[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[6] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in[6]),
        .Q(pushed_commands_reg__0[6]),
        .R(\pushed_commands[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[7] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in[7]),
        .Q(pushed_commands_reg__0[7]),
        .R(\pushed_commands[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \queue_id_reg[0] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(\USE_B_CHANNEL.cmd_b_queue_n_24 ),
        .Q(s_axi_bid),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair428" *) 
  LUT3 #(
    .INIT(8'h40)) 
    si_full_size_q_i_1
       (.I0(s_axi_awsize[2]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awsize[0]),
        .O(si_full_size_q_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    si_full_size_q_reg
       (.C(CLK),
        .CE(E),
        .D(si_full_size_q_i_1_n_0),
        .Q(si_full_size_q),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair438" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \split_addr_mask_q[0]_i_1 
       (.I0(s_axi_awsize[2]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awsize[0]),
        .O(split_addr_mask[0]));
  (* SOFT_HLUTNM = "soft_lutpair448" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \split_addr_mask_q[1]_i_1 
       (.I0(s_axi_awsize[1]),
        .I1(s_axi_awsize[2]),
        .O(split_addr_mask[1]));
  (* SOFT_HLUTNM = "soft_lutpair421" *) 
  LUT3 #(
    .INIT(8'h15)) 
    \split_addr_mask_q[2]_i_1 
       (.I0(s_axi_awsize[2]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awsize[0]),
        .O(\split_addr_mask_q[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair441" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \split_addr_mask_q[3]_i_1 
       (.I0(s_axi_awsize[2]),
        .O(split_addr_mask[3]));
  (* SOFT_HLUTNM = "soft_lutpair429" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \split_addr_mask_q[4]_i_1 
       (.I0(s_axi_awsize[0]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awsize[2]),
        .O(split_addr_mask[4]));
  (* SOFT_HLUTNM = "soft_lutpair443" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \split_addr_mask_q[5]_i_1 
       (.I0(s_axi_awsize[2]),
        .I1(s_axi_awsize[1]),
        .O(split_addr_mask[5]));
  (* SOFT_HLUTNM = "soft_lutpair436" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \split_addr_mask_q[6]_i_1 
       (.I0(s_axi_awsize[0]),
        .I1(s_axi_awsize[1]),
        .I2(s_axi_awsize[2]),
        .O(split_addr_mask[6]));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[0]),
        .Q(\split_addr_mask_q_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[1]),
        .Q(\split_addr_mask_q_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(\split_addr_mask_q[2]_i_1_n_0 ),
        .Q(\split_addr_mask_q_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[31] 
       (.C(CLK),
        .CE(E),
        .D(\<const1> ),
        .Q(\split_addr_mask_q_reg_n_0_[31] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[3]),
        .Q(\split_addr_mask_q_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[4]),
        .Q(\split_addr_mask_q_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[5]),
        .Q(\split_addr_mask_q_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[6]),
        .Q(\split_addr_mask_q_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    split_ongoing_reg
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(cmd_split_i),
        .Q(split_ongoing),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair433" *) 
  LUT4 #(
    .INIT(16'hAA80)) 
    \unalignment_addr_q[0]_i_1 
       (.I0(s_axi_awaddr[2]),
        .I1(s_axi_awsize[0]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awsize[2]),
        .O(unalignment_addr[0]));
  (* SOFT_HLUTNM = "soft_lutpair447" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \unalignment_addr_q[1]_i_1 
       (.I0(s_axi_awaddr[3]),
        .I1(s_axi_awsize[2]),
        .O(unalignment_addr[1]));
  (* SOFT_HLUTNM = "soft_lutpair433" *) 
  LUT4 #(
    .INIT(16'hA800)) 
    \unalignment_addr_q[2]_i_1 
       (.I0(s_axi_awaddr[4]),
        .I1(s_axi_awsize[0]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awsize[2]),
        .O(unalignment_addr[2]));
  (* SOFT_HLUTNM = "soft_lutpair443" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \unalignment_addr_q[3]_i_1 
       (.I0(s_axi_awaddr[5]),
        .I1(s_axi_awsize[2]),
        .I2(s_axi_awsize[1]),
        .O(unalignment_addr[3]));
  (* SOFT_HLUTNM = "soft_lutpair436" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \unalignment_addr_q[4]_i_1 
       (.I0(s_axi_awaddr[6]),
        .I1(s_axi_awsize[0]),
        .I2(s_axi_awsize[1]),
        .I3(s_axi_awsize[2]),
        .O(unalignment_addr[4]));
  FDRE #(
    .INIT(1'b0)) 
    \unalignment_addr_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(unalignment_addr[0]),
        .Q(unalignment_addr_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \unalignment_addr_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(unalignment_addr[1]),
        .Q(unalignment_addr_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \unalignment_addr_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(unalignment_addr[2]),
        .Q(unalignment_addr_q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \unalignment_addr_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(unalignment_addr[3]),
        .Q(unalignment_addr_q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \unalignment_addr_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(unalignment_addr[4]),
        .Q(unalignment_addr_q[4]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair420" *) 
  LUT5 #(
    .INIT(32'h000000E0)) 
    wrap_need_to_split_q_i_1
       (.I0(wrap_need_to_split_q_i_2_n_0),
        .I1(wrap_need_to_split_q_i_3_n_0),
        .I2(s_axi_awburst[1]),
        .I3(s_axi_awburst[0]),
        .I4(legal_wrap_len_q_i_1_n_0),
        .O(wrap_need_to_split));
  LUT6 #(
    .INIT(64'hFFFFFFEAFFEAFFEA)) 
    wrap_need_to_split_q_i_2
       (.I0(wrap_unaligned_len[4]),
        .I1(s_axi_awaddr[7]),
        .I2(\masked_addr_q[7]_i_2_n_0 ),
        .I3(wrap_unaligned_len[6]),
        .I4(s_axi_awaddr[9]),
        .I5(\masked_addr_q[9]_i_2_n_0 ),
        .O(wrap_need_to_split_q_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF88F8)) 
    wrap_need_to_split_q_i_3
       (.I0(s_axi_awaddr[2]),
        .I1(cmd_mask_i[2]),
        .I2(s_axi_awaddr[3]),
        .I3(\masked_addr_q[3]_i_2_n_0 ),
        .I4(wrap_unaligned_len[2]),
        .I5(wrap_unaligned_len[3]),
        .O(wrap_need_to_split_q_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wrap_need_to_split_q_reg
       (.C(CLK),
        .CE(E),
        .D(wrap_need_to_split),
        .Q(wrap_need_to_split_q),
        .R(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \wrap_rest_len[0]_i_1 
       (.I0(wrap_unaligned_len_q[0]),
        .O(wrap_rest_len0[0]));
  (* SOFT_HLUTNM = "soft_lutpair444" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \wrap_rest_len[1]_i_1 
       (.I0(wrap_unaligned_len_q[0]),
        .I1(wrap_unaligned_len_q[1]),
        .O(\wrap_rest_len[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair444" *) 
  LUT3 #(
    .INIT(8'hA9)) 
    \wrap_rest_len[2]_i_1 
       (.I0(wrap_unaligned_len_q[2]),
        .I1(wrap_unaligned_len_q[1]),
        .I2(wrap_unaligned_len_q[0]),
        .O(wrap_rest_len0[2]));
  (* SOFT_HLUTNM = "soft_lutpair425" *) 
  LUT4 #(
    .INIT(16'hAAA9)) 
    \wrap_rest_len[3]_i_1 
       (.I0(wrap_unaligned_len_q[3]),
        .I1(wrap_unaligned_len_q[2]),
        .I2(wrap_unaligned_len_q[0]),
        .I3(wrap_unaligned_len_q[1]),
        .O(wrap_rest_len0[3]));
  (* SOFT_HLUTNM = "soft_lutpair425" *) 
  LUT5 #(
    .INIT(32'hAAAAAAA9)) 
    \wrap_rest_len[4]_i_1 
       (.I0(wrap_unaligned_len_q[4]),
        .I1(wrap_unaligned_len_q[3]),
        .I2(wrap_unaligned_len_q[1]),
        .I3(wrap_unaligned_len_q[0]),
        .I4(wrap_unaligned_len_q[2]),
        .O(wrap_rest_len0[4]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA9)) 
    \wrap_rest_len[5]_i_1 
       (.I0(wrap_unaligned_len_q[5]),
        .I1(wrap_unaligned_len_q[4]),
        .I2(wrap_unaligned_len_q[2]),
        .I3(wrap_unaligned_len_q[0]),
        .I4(wrap_unaligned_len_q[1]),
        .I5(wrap_unaligned_len_q[3]),
        .O(wrap_rest_len0[5]));
  (* SOFT_HLUTNM = "soft_lutpair437" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wrap_rest_len[6]_i_1 
       (.I0(wrap_unaligned_len_q[6]),
        .I1(\wrap_rest_len[7]_i_2_n_0 ),
        .O(wrap_rest_len0[6]));
  (* SOFT_HLUTNM = "soft_lutpair437" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    \wrap_rest_len[7]_i_1 
       (.I0(wrap_unaligned_len_q[7]),
        .I1(wrap_unaligned_len_q[6]),
        .I2(\wrap_rest_len[7]_i_2_n_0 ),
        .O(wrap_rest_len0[7]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \wrap_rest_len[7]_i_2 
       (.I0(wrap_unaligned_len_q[4]),
        .I1(wrap_unaligned_len_q[2]),
        .I2(wrap_unaligned_len_q[0]),
        .I3(wrap_unaligned_len_q[1]),
        .I4(wrap_unaligned_len_q[3]),
        .I5(wrap_unaligned_len_q[5]),
        .O(\wrap_rest_len[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[0] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[0]),
        .Q(wrap_rest_len[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[1] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(\wrap_rest_len[1]_i_1_n_0 ),
        .Q(wrap_rest_len[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[2] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[2]),
        .Q(wrap_rest_len[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[3] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[3]),
        .Q(wrap_rest_len[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[4] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[4]),
        .Q(wrap_rest_len[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[5] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[5]),
        .Q(wrap_rest_len[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[6] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[6]),
        .Q(wrap_rest_len[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[7] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[7]),
        .Q(wrap_rest_len[7]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair446" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wrap_unaligned_len_q[0]_i_1 
       (.I0(s_axi_awaddr[2]),
        .I1(cmd_mask_i[2]),
        .O(wrap_unaligned_len[0]));
  (* SOFT_HLUTNM = "soft_lutpair447" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \wrap_unaligned_len_q[1]_i_1 
       (.I0(s_axi_awaddr[3]),
        .I1(\masked_addr_q[3]_i_2_n_0 ),
        .O(wrap_unaligned_len[1]));
  LUT6 #(
    .INIT(64'hA8A8A8A8A8A8A808)) 
    \wrap_unaligned_len_q[2]_i_1 
       (.I0(s_axi_awaddr[4]),
        .I1(\masked_addr_q[8]_i_2_n_0 ),
        .I2(s_axi_awsize[2]),
        .I3(s_axi_awsize[0]),
        .I4(s_axi_awsize[1]),
        .I5(s_axi_awlen[0]),
        .O(wrap_unaligned_len[2]));
  (* SOFT_HLUTNM = "soft_lutpair450" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wrap_unaligned_len_q[3]_i_1 
       (.I0(s_axi_awaddr[5]),
        .I1(\masked_addr_q[5]_i_2_n_0 ),
        .O(wrap_unaligned_len[3]));
  (* SOFT_HLUTNM = "soft_lutpair434" *) 
  LUT4 #(
    .INIT(16'hB800)) 
    \wrap_unaligned_len_q[4]_i_1 
       (.I0(\masked_addr_q[6]_i_2_n_0 ),
        .I1(s_axi_awsize[2]),
        .I2(\num_transactions_q[0]_i_2_n_0 ),
        .I3(s_axi_awaddr[6]),
        .O(wrap_unaligned_len[4]));
  (* SOFT_HLUTNM = "soft_lutpair451" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wrap_unaligned_len_q[5]_i_1 
       (.I0(s_axi_awaddr[7]),
        .I1(\masked_addr_q[7]_i_2_n_0 ),
        .O(wrap_unaligned_len[5]));
  (* SOFT_HLUTNM = "soft_lutpair435" *) 
  LUT4 #(
    .INIT(16'hB800)) 
    \wrap_unaligned_len_q[6]_i_1__0 
       (.I0(\masked_addr_q[8]_i_2_n_0 ),
        .I1(s_axi_awsize[2]),
        .I2(\masked_addr_q[8]_i_3_n_0 ),
        .I3(s_axi_awaddr[8]),
        .O(wrap_unaligned_len[6]));
  (* SOFT_HLUTNM = "soft_lutpair449" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wrap_unaligned_len_q[7]_i_1 
       (.I0(s_axi_awaddr[9]),
        .I1(\masked_addr_q[9]_i_2_n_0 ),
        .O(wrap_unaligned_len[7]));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[0]),
        .Q(wrap_unaligned_len_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[1]),
        .Q(wrap_unaligned_len_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[2]),
        .Q(wrap_unaligned_len_q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[3]),
        .Q(wrap_unaligned_len_q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[4]),
        .Q(wrap_unaligned_len_q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[5]),
        .Q(wrap_unaligned_len_q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[6]),
        .Q(wrap_unaligned_len_q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[7]),
        .Q(wrap_unaligned_len_q[7]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_a_downsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_a_downsizer__parameterized0
   (dout,
    \m_payload_i_reg[37] ,
    E,
    \skid_buffer_reg[67] ,
    s_axi_rlast,
    command_ongoing_reg_0,
    cmd_push_block_reg_0,
    m_axi_rready,
    first_mi_word_reg,
    \WORD_LANE[1].S_AXI_RDATA_II_reg[63] ,
    \WORD_LANE[0].S_AXI_RDATA_II_reg[31] ,
    \WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ,
    s_axi_rvalid,
    D,
    \S_AXI_RRESP_ACC_reg[1] ,
    m_axi_araddr,
    m_axi_arlock,
    m_axi_arburst,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    CLK,
    SR,
    s_axi_arid,
    s_axi_arlock,
    \areset_d_reg[0] ,
    s_axi_arsize,
    s_axi_arlen,
    m_axi_rlast,
    s_axi_arvalid,
    areset_d,
    m_axi_arready,
    out,
    s_axi_araddr,
    m_axi_rvalid,
    s_axi_rready,
    \goreg_dm.dout_i_reg[9] ,
    \goreg_dm.dout_i_reg[19] ,
    s_axi_arburst,
    \goreg_dm.dout_i_reg[12] ,
    \current_word_1_reg[0] ,
    \current_word_1_reg[1] ,
    first_word,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos);
  output [21:0]dout;
  output [10:0]\m_payload_i_reg[37] ;
  output [0:0]E;
  output \skid_buffer_reg[67] ;
  output s_axi_rlast;
  output command_ongoing_reg_0;
  output cmd_push_block_reg_0;
  output m_axi_rready;
  output [0:0]first_mi_word_reg;
  output [0:0]\WORD_LANE[1].S_AXI_RDATA_II_reg[63] ;
  output [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31] ;
  output [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ;
  output s_axi_rvalid;
  output [2:0]D;
  output \S_AXI_RRESP_ACC_reg[1] ;
  output [31:0]m_axi_araddr;
  output [0:0]m_axi_arlock;
  output [1:0]m_axi_arburst;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arregion;
  output [3:0]m_axi_arqos;
  input CLK;
  input [0:0]SR;
  input [0:0]s_axi_arid;
  input [0:0]s_axi_arlock;
  input \areset_d_reg[0] ;
  input [2:0]s_axi_arsize;
  input [7:0]s_axi_arlen;
  input m_axi_rlast;
  input s_axi_arvalid;
  input [1:0]areset_d;
  input m_axi_arready;
  input out;
  input [31:0]s_axi_araddr;
  input m_axi_rvalid;
  input s_axi_rready;
  input \goreg_dm.dout_i_reg[9] ;
  input \goreg_dm.dout_i_reg[19] ;
  input [1:0]s_axi_arburst;
  input \goreg_dm.dout_i_reg[12] ;
  input \current_word_1_reg[0] ;
  input \current_word_1_reg[1] ;
  input first_word;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arregion;
  input [3:0]s_axi_arqos;

  wire \<const0> ;
  wire \<const1> ;
  wire CLK;
  wire [2:0]D;
  wire [0:0]E;
  wire [0:0]SR;
  wire \S_AXI_AADDR_Q_reg_n_0_[0] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[10] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[11] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[12] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[13] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[14] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[15] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[16] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[17] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[18] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[19] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[1] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[20] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[21] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[22] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[23] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[24] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[25] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[26] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[27] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[28] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[29] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[2] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[30] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[31] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[3] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[4] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[5] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[6] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[7] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[8] ;
  wire \S_AXI_AADDR_Q_reg_n_0_[9] ;
  wire [1:0]S_AXI_ABURST_Q;
  wire S_AXI_AID_Q;
  wire \S_AXI_ALEN_Q_reg_n_0_[4] ;
  wire \S_AXI_ALEN_Q_reg_n_0_[5] ;
  wire \S_AXI_ALEN_Q_reg_n_0_[6] ;
  wire \S_AXI_ALEN_Q_reg_n_0_[7] ;
  wire [0:0]S_AXI_ALOCK_Q;
  wire [2:0]S_AXI_ASIZE_Q;
  wire \S_AXI_RRESP_ACC_reg[1] ;
  wire [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31] ;
  wire [0:0]\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ;
  wire [0:0]\WORD_LANE[1].S_AXI_RDATA_II_reg[63] ;
  wire access_fit_mi_side_q;
  wire access_is_fix;
  wire access_is_fix_q;
  wire access_is_incr;
  wire access_is_incr_q;
  wire access_is_wrap;
  wire access_is_wrap_q;
  wire [1:0]areset_d;
  wire \areset_d_reg[0] ;
  wire \cmd_depth[0]_i_1_n_0 ;
  wire [5:0]cmd_depth_reg__0;
  wire cmd_empty;
  wire cmd_empty_i_2_n_0;
  wire cmd_length_i_carry__0_n_1;
  wire cmd_length_i_carry__0_n_2;
  wire cmd_length_i_carry__0_n_3;
  wire cmd_length_i_carry_n_0;
  wire cmd_length_i_carry_n_1;
  wire cmd_length_i_carry_n_2;
  wire cmd_length_i_carry_n_3;
  wire [2:0]cmd_mask_i;
  wire \cmd_mask_q[0]_i_1__0_n_0 ;
  wire \cmd_mask_q[1]_i_1__0_n_0 ;
  wire \cmd_mask_q[2]_i_1__0_n_0 ;
  wire \cmd_mask_q_reg_n_0_[0] ;
  wire \cmd_mask_q_reg_n_0_[1] ;
  wire \cmd_mask_q_reg_n_0_[2] ;
  wire cmd_push_block;
  wire cmd_push_block_reg_0;
  wire cmd_queue_n_26;
  wire cmd_queue_n_27;
  wire cmd_queue_n_28;
  wire cmd_queue_n_29;
  wire cmd_queue_n_30;
  wire cmd_queue_n_32;
  wire cmd_queue_n_35;
  wire cmd_queue_n_41;
  wire cmd_queue_n_48;
  wire cmd_queue_n_49;
  wire cmd_queue_n_50;
  wire cmd_queue_n_51;
  wire cmd_queue_n_52;
  wire cmd_queue_n_53;
  wire cmd_queue_n_54;
  wire cmd_queue_n_55;
  wire cmd_queue_n_56;
  wire cmd_queue_n_57;
  wire cmd_queue_n_58;
  wire cmd_queue_n_59;
  wire cmd_queue_n_60;
  wire cmd_queue_n_61;
  wire cmd_queue_n_62;
  wire cmd_queue_n_63;
  wire cmd_queue_n_64;
  wire cmd_queue_n_65;
  wire cmd_queue_n_66;
  wire cmd_split_i;
  wire command_ongoing;
  wire command_ongoing_reg_0;
  wire \current_word_1_reg[0] ;
  wire \current_word_1_reg[1] ;
  wire [21:0]dout;
  wire [7:0]downsized_len_q;
  wire \downsized_len_q[0]_i_1__0_n_0 ;
  wire \downsized_len_q[1]_i_1__0_n_0 ;
  wire \downsized_len_q[2]_i_1__0_n_0 ;
  wire \downsized_len_q[3]_i_1__0_n_0 ;
  wire \downsized_len_q[4]_i_1__0_n_0 ;
  wire \downsized_len_q[5]_i_1__0_n_0 ;
  wire \downsized_len_q[6]_i_1_n_0 ;
  wire \downsized_len_q[7]_i_1__0_n_0 ;
  wire \downsized_len_q[7]_i_2__0_n_0 ;
  wire [0:0]first_mi_word_reg;
  wire first_word;
  wire [3:0]fix_len;
  wire [4:0]fix_len_q;
  wire \fix_len_q[4]_i_1__0_n_0 ;
  wire fix_need_to_split;
  wire fix_need_to_split_q;
  wire \goreg_dm.dout_i_reg[12] ;
  wire \goreg_dm.dout_i_reg[19] ;
  wire \goreg_dm.dout_i_reg[9] ;
  wire incr_need_to_split;
  wire incr_need_to_split_q;
  wire last_incr_split0;
  wire last_incr_split0_carry_i_1__0_n_0;
  wire last_incr_split0_carry_i_2__0_n_0;
  wire last_incr_split0_carry_i_3__0_n_0;
  wire last_incr_split0_carry_n_2;
  wire last_incr_split0_carry_n_3;
  wire legal_wrap_len_q;
  wire legal_wrap_len_q_i_1__0_n_0;
  wire legal_wrap_len_q_i_2__0_n_0;
  wire legal_wrap_len_q_i_3__0_n_0;
  wire legal_wrap_len_q_i_4__0_n_0;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire m_axi_rvalid;
  wire [10:0]\m_payload_i_reg[37] ;
  wire [14:0]masked_addr;
  wire [31:0]masked_addr_q;
  wire \masked_addr_q[3]_i_2__0_n_0 ;
  wire \masked_addr_q[3]_i_3__0_n_0 ;
  wire \masked_addr_q[4]_i_2_n_0 ;
  wire \masked_addr_q[5]_i_2__0_n_0 ;
  wire \masked_addr_q[6]_i_2__0_n_0 ;
  wire \masked_addr_q[7]_i_2__0_n_0 ;
  wire \masked_addr_q[8]_i_2__0_n_0 ;
  wire \masked_addr_q[8]_i_3__0_n_0 ;
  wire \masked_addr_q[9]_i_2__0_n_0 ;
  wire [31:2]next_mi_addr;
  wire next_mi_addr0_carry__0_n_0;
  wire next_mi_addr0_carry__0_n_1;
  wire next_mi_addr0_carry__0_n_2;
  wire next_mi_addr0_carry__0_n_3;
  wire next_mi_addr0_carry__0_n_4;
  wire next_mi_addr0_carry__0_n_5;
  wire next_mi_addr0_carry__0_n_6;
  wire next_mi_addr0_carry__0_n_7;
  wire next_mi_addr0_carry__1_n_0;
  wire next_mi_addr0_carry__1_n_1;
  wire next_mi_addr0_carry__1_n_2;
  wire next_mi_addr0_carry__1_n_3;
  wire next_mi_addr0_carry__1_n_4;
  wire next_mi_addr0_carry__1_n_5;
  wire next_mi_addr0_carry__1_n_6;
  wire next_mi_addr0_carry__1_n_7;
  wire next_mi_addr0_carry__2_n_0;
  wire next_mi_addr0_carry__2_n_1;
  wire next_mi_addr0_carry__2_n_2;
  wire next_mi_addr0_carry__2_n_3;
  wire next_mi_addr0_carry__2_n_4;
  wire next_mi_addr0_carry__2_n_5;
  wire next_mi_addr0_carry__2_n_6;
  wire next_mi_addr0_carry__2_n_7;
  wire next_mi_addr0_carry__3_n_0;
  wire next_mi_addr0_carry__3_n_1;
  wire next_mi_addr0_carry__3_n_2;
  wire next_mi_addr0_carry__3_n_3;
  wire next_mi_addr0_carry__3_n_4;
  wire next_mi_addr0_carry__3_n_5;
  wire next_mi_addr0_carry__3_n_6;
  wire next_mi_addr0_carry__3_n_7;
  wire next_mi_addr0_carry__4_n_2;
  wire next_mi_addr0_carry__4_n_3;
  wire next_mi_addr0_carry__4_n_5;
  wire next_mi_addr0_carry__4_n_6;
  wire next_mi_addr0_carry__4_n_7;
  wire next_mi_addr0_carry_i_4__0_n_0;
  wire next_mi_addr0_carry_n_0;
  wire next_mi_addr0_carry_n_1;
  wire next_mi_addr0_carry_n_2;
  wire next_mi_addr0_carry_n_3;
  wire next_mi_addr0_carry_n_4;
  wire next_mi_addr0_carry_n_5;
  wire next_mi_addr0_carry_n_6;
  wire next_mi_addr0_carry_n_7;
  wire [0:0]num_transactions;
  wire [2:0]num_transactions_q;
  wire \num_transactions_q[0]_i_2__0_n_0 ;
  wire \num_transactions_q[1]_i_1__0_n_0 ;
  wire \num_transactions_q[1]_i_2__0_n_0 ;
  wire \num_transactions_q[2]_i_1__0_n_0 ;
  wire out;
  wire [3:0]p_0_in;
  wire [7:0]p_0_in__0;
  wire [8:2]pre_mi_addr;
  wire [31:9]pre_mi_addr__0;
  wire \pushed_commands[7]_i_1__0_n_0 ;
  wire \pushed_commands[7]_i_3__0_n_0 ;
  wire [7:0]pushed_commands_reg;
  wire pushed_new_cmd;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [0:0]s_axi_arid;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire si_full_size_q;
  wire si_full_size_q_i_1__0_n_0;
  wire \skid_buffer_reg[67] ;
  wire [6:0]split_addr_mask;
  wire \split_addr_mask_q[2]_i_1__0_n_0 ;
  wire \split_addr_mask_q_reg_n_0_[0] ;
  wire \split_addr_mask_q_reg_n_0_[1] ;
  wire \split_addr_mask_q_reg_n_0_[2] ;
  wire \split_addr_mask_q_reg_n_0_[31] ;
  wire \split_addr_mask_q_reg_n_0_[3] ;
  wire \split_addr_mask_q_reg_n_0_[4] ;
  wire \split_addr_mask_q_reg_n_0_[5] ;
  wire \split_addr_mask_q_reg_n_0_[6] ;
  wire split_ongoing;
  wire [4:0]unalignment_addr;
  wire [4:0]unalignment_addr_q;
  wire wrap_need_to_split;
  wire wrap_need_to_split_q;
  wire wrap_need_to_split_q_i_2__0_n_0;
  wire wrap_need_to_split_q_i_3__0_n_0;
  wire [7:0]wrap_rest_len;
  wire [7:0]wrap_rest_len0;
  wire \wrap_rest_len[1]_i_1__0_n_0 ;
  wire \wrap_rest_len[7]_i_2__0_n_0 ;
  wire [7:0]wrap_unaligned_len;
  wire [7:0]wrap_unaligned_len_q;

  GND GND
       (.G(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[0]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[10] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[10]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[11] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[11]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[12] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[12]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[13] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[13]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[14] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[14]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[15] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[15]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[16] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[16]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[17] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[17]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[18] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[18]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[19] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[19]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[1]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[20] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[20]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[21] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[21]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[22] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[22]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[23] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[23]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[24] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[24]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[25] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[25]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[26] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[26]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[27] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[27]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[28] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[28]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[29] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[29]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[2]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[30] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[30]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[31] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[31]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[3]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[4]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[5]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[6]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[7]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[8] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[8]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AADDR_Q_reg[9] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[9]),
        .Q(\S_AXI_AADDR_Q_reg_n_0_[9] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ABURST_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arburst[0]),
        .Q(S_AXI_ABURST_Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ABURST_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arburst[1]),
        .Q(S_AXI_ABURST_Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ACACHE_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arcache[0]),
        .Q(m_axi_arcache[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ACACHE_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arcache[1]),
        .Q(m_axi_arcache[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ACACHE_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arcache[2]),
        .Q(m_axi_arcache[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ACACHE_Q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arcache[3]),
        .Q(m_axi_arcache[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AID_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arid),
        .Q(S_AXI_AID_Q),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arlen[0]),
        .Q(p_0_in[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arlen[1]),
        .Q(p_0_in[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arlen[2]),
        .Q(p_0_in[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arlen[3]),
        .Q(p_0_in[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arlen[4]),
        .Q(\S_AXI_ALEN_Q_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arlen[5]),
        .Q(\S_AXI_ALEN_Q_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arlen[6]),
        .Q(\S_AXI_ALEN_Q_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALEN_Q_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arlen[7]),
        .Q(\S_AXI_ALEN_Q_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ALOCK_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arlock),
        .Q(S_AXI_ALOCK_Q),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_APROT_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arprot[0]),
        .Q(m_axi_arprot[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_APROT_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arprot[1]),
        .Q(m_axi_arprot[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_APROT_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arprot[2]),
        .Q(m_axi_arprot[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AQOS_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arqos[0]),
        .Q(m_axi_arqos[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AQOS_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arqos[1]),
        .Q(m_axi_arqos[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AQOS_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arqos[2]),
        .Q(m_axi_arqos[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AQOS_Q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arqos[3]),
        .Q(m_axi_arqos[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    S_AXI_AREADY_I_reg
       (.C(CLK),
        .CE(\<const1> ),
        .D(\areset_d_reg[0] ),
        .Q(E),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AREGION_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arregion[0]),
        .Q(m_axi_arregion[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AREGION_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arregion[1]),
        .Q(m_axi_arregion[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AREGION_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arregion[2]),
        .Q(m_axi_arregion[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_AREGION_Q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arregion[3]),
        .Q(m_axi_arregion[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ASIZE_Q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arsize[0]),
        .Q(S_AXI_ASIZE_Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ASIZE_Q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arsize[1]),
        .Q(S_AXI_ASIZE_Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_ASIZE_Q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arsize[2]),
        .Q(S_AXI_ASIZE_Q[2]),
        .R(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    access_fit_mi_side_q_reg
       (.C(CLK),
        .CE(E),
        .D(\split_addr_mask_q[2]_i_1__0_n_0 ),
        .Q(access_fit_mi_side_q),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair329" *) 
  LUT2 #(
    .INIT(4'h1)) 
    access_is_fix_q_i_1__0
       (.I0(s_axi_arburst[1]),
        .I1(s_axi_arburst[0]),
        .O(access_is_fix));
  FDRE #(
    .INIT(1'b0)) 
    access_is_fix_q_reg
       (.C(CLK),
        .CE(E),
        .D(access_is_fix),
        .Q(access_is_fix_q),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair354" *) 
  LUT2 #(
    .INIT(4'h2)) 
    access_is_incr_q_i_1__0
       (.I0(s_axi_arburst[0]),
        .I1(s_axi_arburst[1]),
        .O(access_is_incr));
  FDRE #(
    .INIT(1'b0)) 
    access_is_incr_q_reg
       (.C(CLK),
        .CE(E),
        .D(access_is_incr),
        .Q(access_is_incr_q),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair354" *) 
  LUT2 #(
    .INIT(4'h2)) 
    access_is_wrap_q_i_1__0
       (.I0(s_axi_arburst[1]),
        .I1(s_axi_arburst[0]),
        .O(access_is_wrap));
  FDRE #(
    .INIT(1'b0)) 
    access_is_wrap_q_reg
       (.C(CLK),
        .CE(E),
        .D(access_is_wrap),
        .Q(access_is_wrap_q),
        .R(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \cmd_depth[0]_i_1 
       (.I0(cmd_depth_reg__0[0]),
        .O(\cmd_depth[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_depth_reg[0] 
       (.C(CLK),
        .CE(cmd_queue_n_41),
        .D(\cmd_depth[0]_i_1_n_0 ),
        .Q(cmd_depth_reg__0[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_depth_reg[1] 
       (.C(CLK),
        .CE(cmd_queue_n_41),
        .D(cmd_queue_n_30),
        .Q(cmd_depth_reg__0[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_depth_reg[2] 
       (.C(CLK),
        .CE(cmd_queue_n_41),
        .D(cmd_queue_n_29),
        .Q(cmd_depth_reg__0[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_depth_reg[3] 
       (.C(CLK),
        .CE(cmd_queue_n_41),
        .D(cmd_queue_n_28),
        .Q(cmd_depth_reg__0[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_depth_reg[4] 
       (.C(CLK),
        .CE(cmd_queue_n_41),
        .D(cmd_queue_n_27),
        .Q(cmd_depth_reg__0[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_depth_reg[5] 
       (.C(CLK),
        .CE(cmd_queue_n_41),
        .D(cmd_queue_n_26),
        .Q(cmd_depth_reg__0[5]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    cmd_empty_i_2
       (.I0(cmd_depth_reg__0[5]),
        .I1(cmd_depth_reg__0[4]),
        .I2(cmd_depth_reg__0[2]),
        .I3(cmd_depth_reg__0[3]),
        .I4(cmd_depth_reg__0[1]),
        .I5(cmd_depth_reg__0[0]),
        .O(cmd_empty_i_2_n_0));
  FDSE #(
    .INIT(1'b0)) 
    cmd_empty_reg
       (.C(CLK),
        .CE(\<const1> ),
        .D(cmd_queue_n_66),
        .Q(cmd_empty),
        .S(SR));
  CARRY4 cmd_length_i_carry
       (.CI(\<const0> ),
        .CO({cmd_length_i_carry_n_0,cmd_length_i_carry_n_1,cmd_length_i_carry_n_2,cmd_length_i_carry_n_3}),
        .CYINIT(\<const1> ),
        .DI({cmd_queue_n_48,cmd_queue_n_49,cmd_queue_n_50,cmd_queue_n_51}),
        .O(\m_payload_i_reg[37] [3:0]),
        .S({cmd_queue_n_61,cmd_queue_n_62,cmd_queue_n_63,cmd_queue_n_64}));
  CARRY4 cmd_length_i_carry__0
       (.CI(cmd_length_i_carry_n_0),
        .CO({cmd_length_i_carry__0_n_1,cmd_length_i_carry__0_n_2,cmd_length_i_carry__0_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,cmd_queue_n_52,cmd_queue_n_53,cmd_queue_n_54}),
        .O(\m_payload_i_reg[37] [7:4]),
        .S({cmd_queue_n_55,cmd_queue_n_56,cmd_queue_n_57,cmd_queue_n_58}));
  LUT5 #(
    .INIT(32'hFBFFFB00)) 
    \cmd_mask_q[0]_i_1__0 
       (.I0(cmd_mask_i[0]),
        .I1(s_axi_arburst[1]),
        .I2(s_axi_arburst[0]),
        .I3(E),
        .I4(\cmd_mask_q_reg_n_0_[0] ),
        .O(\cmd_mask_q[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cmd_mask_q[0]_i_2__0 
       (.I0(s_axi_arlen[0]),
        .I1(s_axi_arsize[0]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arsize[2]),
        .O(cmd_mask_i[0]));
  LUT5 #(
    .INIT(32'hFBFFFB00)) 
    \cmd_mask_q[1]_i_1__0 
       (.I0(cmd_mask_i[1]),
        .I1(s_axi_arburst[1]),
        .I2(s_axi_arburst[0]),
        .I3(E),
        .I4(\cmd_mask_q_reg_n_0_[1] ),
        .O(\cmd_mask_q[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT5 #(
    .INIT(32'hFFFFFFE2)) 
    \cmd_mask_q[1]_i_2__0 
       (.I0(s_axi_arlen[1]),
        .I1(s_axi_arsize[0]),
        .I2(s_axi_arlen[0]),
        .I3(s_axi_arsize[2]),
        .I4(s_axi_arsize[1]),
        .O(cmd_mask_i[1]));
  LUT5 #(
    .INIT(32'hFBFFFB00)) 
    \cmd_mask_q[2]_i_1__0 
       (.I0(cmd_mask_i[2]),
        .I1(s_axi_arburst[1]),
        .I2(s_axi_arburst[0]),
        .I3(E),
        .I4(\cmd_mask_q_reg_n_0_[2] ),
        .O(\cmd_mask_q[2]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_mask_q_reg[0] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(\cmd_mask_q[0]_i_1__0_n_0 ),
        .Q(\cmd_mask_q_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_mask_q_reg[1] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(\cmd_mask_q[1]_i_1__0_n_0 ),
        .Q(\cmd_mask_q_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cmd_mask_q_reg[2] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(\cmd_mask_q[2]_i_1__0_n_0 ),
        .Q(\cmd_mask_q_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    cmd_push_block_reg
       (.C(CLK),
        .CE(\<const1> ),
        .D(cmd_queue_n_35),
        .Q(cmd_push_block),
        .R(\<const0> ));
  bd_1_axi_data_fifo_v2_1_14_axic_fifo__parameterized0__xdcDup__1 cmd_queue
       (.CLK(CLK),
        .CO(last_incr_split0),
        .D({cmd_queue_n_26,cmd_queue_n_27,cmd_queue_n_28,cmd_queue_n_29,cmd_queue_n_30}),
        .DI({cmd_queue_n_48,cmd_queue_n_49,cmd_queue_n_50,cmd_queue_n_51}),
        .E(pushed_new_cmd),
        .Q(cmd_depth_reg__0),
        .S({cmd_queue_n_55,cmd_queue_n_56,cmd_queue_n_57,cmd_queue_n_58}),
        .SR(SR),
        .\S_AXI_AADDR_Q_reg[2] ({\S_AXI_AADDR_Q_reg_n_0_[2] ,\S_AXI_AADDR_Q_reg_n_0_[1] ,\S_AXI_AADDR_Q_reg_n_0_[0] }),
        .S_AXI_AID_Q(S_AXI_AID_Q),
        .\S_AXI_ALEN_Q_reg[6] ({\m_payload_i_reg[37] [7:0],S_AXI_ASIZE_Q}),
        .\S_AXI_ALEN_Q_reg[7] ({\S_AXI_ALEN_Q_reg_n_0_[7] ,\S_AXI_ALEN_Q_reg_n_0_[6] ,\S_AXI_ALEN_Q_reg_n_0_[5] ,\S_AXI_ALEN_Q_reg_n_0_[4] ,p_0_in}),
        .S_AXI_AREADY_I_reg(E),
        .\S_AXI_RRESP_ACC_reg[1] (\S_AXI_RRESP_ACC_reg[1] ),
        .\WORD_LANE[0].S_AXI_RDATA_II_reg[31] (\WORD_LANE[0].S_AXI_RDATA_II_reg[31] ),
        .\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 (\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ),
        .\WORD_LANE[1].S_AXI_RDATA_II_reg[63] (\WORD_LANE[1].S_AXI_RDATA_II_reg[63] ),
        .access_fit_mi_side_q(access_fit_mi_side_q),
        .access_is_fix_q(access_is_fix_q),
        .access_is_incr_q(access_is_incr_q),
        .access_is_wrap_q(access_is_wrap_q),
        .areset_d(areset_d),
        .\cmd_depth_reg[0] (cmd_queue_n_41),
        .\cmd_depth_reg[5] (cmd_empty_i_2_n_0),
        .cmd_empty(cmd_empty),
        .cmd_empty_reg(cmd_queue_n_66),
        .\cmd_mask_q_reg[0] (\cmd_mask_q_reg_n_0_[0] ),
        .\cmd_mask_q_reg[1] (\cmd_mask_q_reg_n_0_[1] ),
        .\cmd_mask_q_reg[2] (\cmd_mask_q_reg_n_0_[2] ),
        .cmd_push_block(cmd_push_block),
        .cmd_push_block_reg(cmd_push_block_reg_0),
        .cmd_push_block_reg_0(cmd_queue_n_35),
        .command_ongoing(command_ongoing),
        .command_ongoing_reg(cmd_queue_n_32),
        .command_ongoing_reg_0(command_ongoing_reg_0),
        .\current_word_1_reg[0] (\current_word_1_reg[0] ),
        .\current_word_1_reg[1] (\current_word_1_reg[1] ),
        .\current_word_1_reg[2] (D),
        .din({cmd_split_i,\m_payload_i_reg[37] [10:8]}),
        .dout(dout),
        .\downsized_len_q_reg[7] (downsized_len_q),
        .first_mi_word_reg(first_mi_word_reg),
        .first_word(first_word),
        .\fix_len_q_reg[4] (fix_len_q),
        .fix_need_to_split_q(fix_need_to_split_q),
        .\goreg_dm.dout_i_reg[12] (\goreg_dm.dout_i_reg[12] ),
        .\goreg_dm.dout_i_reg[19] (\goreg_dm.dout_i_reg[19] ),
        .\goreg_dm.dout_i_reg[9] (\goreg_dm.dout_i_reg[9] ),
        .incr_need_to_split_q(incr_need_to_split_q),
        .legal_wrap_len_q(legal_wrap_len_q),
        .m_axi_arready(m_axi_arready),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rvalid(m_axi_rvalid),
        .\m_payload_i_reg[47] ({cmd_queue_n_61,cmd_queue_n_62,cmd_queue_n_63,cmd_queue_n_64}),
        .\m_payload_i_reg[51] ({cmd_queue_n_52,cmd_queue_n_53,cmd_queue_n_54}),
        .\next_mi_addr_reg[8] (cmd_queue_n_59),
        .\next_mi_addr_reg[8]_0 (cmd_queue_n_60),
        .out(out),
        .\pushed_commands_reg[7] (pushed_commands_reg),
        .\queue_id_reg[0] (cmd_queue_n_65),
        .\queue_id_reg[0]_0 (\skid_buffer_reg[67] ),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid),
        .si_full_size_q(si_full_size_q),
        .\split_addr_mask_q_reg[0] (\split_addr_mask_q_reg_n_0_[0] ),
        .\split_addr_mask_q_reg[1] (\split_addr_mask_q_reg_n_0_[1] ),
        .\split_addr_mask_q_reg[2] (\split_addr_mask_q_reg_n_0_[2] ),
        .\split_addr_mask_q_reg[31] (\split_addr_mask_q_reg_n_0_[31] ),
        .split_ongoing(split_ongoing),
        .\unalignment_addr_q_reg[4] (unalignment_addr_q),
        .wrap_need_to_split_q(wrap_need_to_split_q),
        .\wrap_rest_len_reg[7] (wrap_rest_len),
        .\wrap_unaligned_len_q_reg[7] (wrap_unaligned_len_q));
  FDRE #(
    .INIT(1'b0)) 
    command_ongoing_reg
       (.C(CLK),
        .CE(\<const1> ),
        .D(cmd_queue_n_32),
        .Q(command_ongoing),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT4 #(
    .INIT(16'hFFEA)) 
    \downsized_len_q[0]_i_1__0 
       (.I0(s_axi_arlen[0]),
        .I1(s_axi_arsize[0]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arsize[2]),
        .O(\downsized_len_q[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair330" *) 
  LUT5 #(
    .INIT(32'h0FEEEEEE)) 
    \downsized_len_q[1]_i_1__0 
       (.I0(s_axi_arsize[2]),
        .I1(s_axi_arlen[1]),
        .I2(\masked_addr_q[3]_i_2__0_n_0 ),
        .I3(s_axi_arsize[0]),
        .I4(s_axi_arsize[1]),
        .O(\downsized_len_q[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFEEEFEE2CEEECEE2)) 
    \downsized_len_q[2]_i_1__0 
       (.I0(s_axi_arlen[2]),
        .I1(s_axi_arsize[2]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arsize[0]),
        .I4(s_axi_arlen[0]),
        .I5(\masked_addr_q[4]_i_2_n_0 ),
        .O(\downsized_len_q[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT5 #(
    .INIT(32'hFEEE0222)) 
    \downsized_len_q[3]_i_1__0 
       (.I0(s_axi_arlen[3]),
        .I1(s_axi_arsize[2]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arsize[0]),
        .I4(\masked_addr_q[5]_i_2__0_n_0 ),
        .O(\downsized_len_q[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8BB88BB88BB88)) 
    \downsized_len_q[4]_i_1__0 
       (.I0(\masked_addr_q[6]_i_2__0_n_0 ),
        .I1(s_axi_arsize[2]),
        .I2(\num_transactions_q[0]_i_2__0_n_0 ),
        .I3(s_axi_arlen[4]),
        .I4(s_axi_arsize[1]),
        .I5(s_axi_arsize[0]),
        .O(\downsized_len_q[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8BB88BB88BB88)) 
    \downsized_len_q[5]_i_1__0 
       (.I0(\masked_addr_q[7]_i_2__0_n_0 ),
        .I1(s_axi_arsize[2]),
        .I2(\num_transactions_q[1]_i_2__0_n_0 ),
        .I3(s_axi_arlen[5]),
        .I4(s_axi_arsize[1]),
        .I5(s_axi_arsize[0]),
        .O(\downsized_len_q[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT5 #(
    .INIT(32'hFEEE0222)) 
    \downsized_len_q[6]_i_1 
       (.I0(s_axi_arlen[6]),
        .I1(s_axi_arsize[2]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arsize[0]),
        .I4(\masked_addr_q[8]_i_2__0_n_0 ),
        .O(\downsized_len_q[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF55EA40BF15AA00)) 
    \downsized_len_q[7]_i_1__0 
       (.I0(s_axi_arsize[2]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arsize[0]),
        .I3(\downsized_len_q[7]_i_2__0_n_0 ),
        .I4(s_axi_arlen[7]),
        .I5(s_axi_arlen[6]),
        .O(\downsized_len_q[7]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \downsized_len_q[7]_i_2__0 
       (.I0(s_axi_arlen[2]),
        .I1(s_axi_arlen[3]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arlen[4]),
        .I4(s_axi_arsize[0]),
        .I5(s_axi_arlen[5]),
        .O(\downsized_len_q[7]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[0]_i_1__0_n_0 ),
        .Q(downsized_len_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[1]_i_1__0_n_0 ),
        .Q(downsized_len_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[2]_i_1__0_n_0 ),
        .Q(downsized_len_q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[3]_i_1__0_n_0 ),
        .Q(downsized_len_q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[4]_i_1__0_n_0 ),
        .Q(downsized_len_q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[5]_i_1__0_n_0 ),
        .Q(downsized_len_q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[6]_i_1_n_0 ),
        .Q(downsized_len_q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \downsized_len_q_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(\downsized_len_q[7]_i_1__0_n_0 ),
        .Q(downsized_len_q[7]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \fix_len_q[0]_i_1__0 
       (.I0(s_axi_arsize[0]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arsize[2]),
        .O(fix_len[0]));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \fix_len_q[2]_i_1__0 
       (.I0(s_axi_arsize[2]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arsize[0]),
        .O(fix_len[2]));
  (* SOFT_HLUTNM = "soft_lutpair357" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \fix_len_q[3]_i_1__0 
       (.I0(s_axi_arsize[1]),
        .I1(s_axi_arsize[2]),
        .O(fix_len[3]));
  (* SOFT_HLUTNM = "soft_lutpair331" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \fix_len_q[4]_i_1__0 
       (.I0(s_axi_arsize[2]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arsize[0]),
        .O(\fix_len_q[4]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \fix_len_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(fix_len[0]),
        .Q(fix_len_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \fix_len_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_arsize[2]),
        .Q(fix_len_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \fix_len_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(fix_len[2]),
        .Q(fix_len_q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \fix_len_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(fix_len[3]),
        .Q(fix_len_q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \fix_len_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(\fix_len_q[4]_i_1__0_n_0 ),
        .Q(fix_len_q[4]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair338" *) 
  LUT5 #(
    .INIT(32'h11111000)) 
    fix_need_to_split_q_i_1__0
       (.I0(s_axi_arburst[0]),
        .I1(s_axi_arburst[1]),
        .I2(s_axi_arsize[0]),
        .I3(s_axi_arsize[1]),
        .I4(s_axi_arsize[2]),
        .O(fix_need_to_split));
  FDRE #(
    .INIT(1'b0)) 
    fix_need_to_split_q_reg
       (.C(CLK),
        .CE(E),
        .D(fix_need_to_split),
        .Q(fix_need_to_split_q),
        .R(SR));
  LUT6 #(
    .INIT(64'h0F000F000F000800)) 
    incr_need_to_split_q_i_1__0
       (.I0(\num_transactions_q[1]_i_2__0_n_0 ),
        .I1(s_axi_arsize[2]),
        .I2(s_axi_arburst[1]),
        .I3(s_axi_arburst[0]),
        .I4(num_transactions),
        .I5(\num_transactions_q[2]_i_1__0_n_0 ),
        .O(incr_need_to_split));
  FDRE #(
    .INIT(1'b0)) 
    incr_need_to_split_q_reg
       (.C(CLK),
        .CE(E),
        .D(incr_need_to_split),
        .Q(incr_need_to_split_q),
        .R(SR));
  CARRY4 last_incr_split0_carry
       (.CI(\<const0> ),
        .CO({last_incr_split0,last_incr_split0_carry_n_2,last_incr_split0_carry_n_3}),
        .CYINIT(\<const1> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .S({\<const0> ,last_incr_split0_carry_i_1__0_n_0,last_incr_split0_carry_i_2__0_n_0,last_incr_split0_carry_i_3__0_n_0}));
  LUT2 #(
    .INIT(4'h1)) 
    last_incr_split0_carry_i_1__0
       (.I0(pushed_commands_reg[6]),
        .I1(pushed_commands_reg[7]),
        .O(last_incr_split0_carry_i_1__0_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    last_incr_split0_carry_i_2__0
       (.I0(pushed_commands_reg[3]),
        .I1(pushed_commands_reg[5]),
        .I2(pushed_commands_reg[4]),
        .O(last_incr_split0_carry_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    last_incr_split0_carry_i_3__0
       (.I0(num_transactions_q[2]),
        .I1(pushed_commands_reg[2]),
        .I2(pushed_commands_reg[1]),
        .I3(num_transactions_q[1]),
        .I4(pushed_commands_reg[0]),
        .I5(num_transactions_q[0]),
        .O(last_incr_split0_carry_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h000000A2AAAAAAAA)) 
    legal_wrap_len_q_i_1__0
       (.I0(legal_wrap_len_q_i_2__0_n_0),
        .I1(s_axi_arlen[1]),
        .I2(legal_wrap_len_q_i_3__0_n_0),
        .I3(legal_wrap_len_q_i_4__0_n_0),
        .I4(s_axi_arlen[2]),
        .I5(s_axi_arsize[2]),
        .O(legal_wrap_len_q_i_1__0_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAB)) 
    legal_wrap_len_q_i_2__0
       (.I0(\split_addr_mask_q[2]_i_1__0_n_0 ),
        .I1(s_axi_arlen[5]),
        .I2(s_axi_arlen[3]),
        .I3(s_axi_arlen[4]),
        .I4(s_axi_arlen[7]),
        .I5(s_axi_arlen[6]),
        .O(legal_wrap_len_q_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT2 #(
    .INIT(4'h1)) 
    legal_wrap_len_q_i_3__0
       (.I0(s_axi_arsize[0]),
        .I1(s_axi_arsize[1]),
        .O(legal_wrap_len_q_i_3__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair348" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    legal_wrap_len_q_i_4__0
       (.I0(s_axi_arsize[1]),
        .I1(s_axi_arlen[0]),
        .I2(s_axi_arsize[0]),
        .O(legal_wrap_len_q_i_4__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    legal_wrap_len_q_reg
       (.C(CLK),
        .CE(E),
        .D(legal_wrap_len_q_i_1__0_n_0),
        .Q(legal_wrap_len_q),
        .R(SR));
  LUT5 #(
    .INIT(32'h00E2AAAA)) 
    \m_axi_araddr[0]_INST_0 
       (.I0(\S_AXI_AADDR_Q_reg_n_0_[0] ),
        .I1(access_is_wrap_q),
        .I2(masked_addr_q[0]),
        .I3(access_is_incr_q),
        .I4(split_ongoing),
        .O(m_axi_araddr[0]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[10]_INST_0 
       (.I0(next_mi_addr[10]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[10]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[10] ),
        .O(m_axi_araddr[10]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[11]_INST_0 
       (.I0(next_mi_addr[11]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[11]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[11] ),
        .O(m_axi_araddr[11]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[12]_INST_0 
       (.I0(next_mi_addr[12]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[12]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[12] ),
        .O(m_axi_araddr[12]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[13]_INST_0 
       (.I0(next_mi_addr[13]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[13]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[13] ),
        .O(m_axi_araddr[13]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[14]_INST_0 
       (.I0(next_mi_addr[14]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[14]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[14] ),
        .O(m_axi_araddr[14]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[15]_INST_0 
       (.I0(next_mi_addr[15]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[15]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[15] ),
        .O(m_axi_araddr[15]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[16]_INST_0 
       (.I0(next_mi_addr[16]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[16]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[16] ),
        .O(m_axi_araddr[16]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[17]_INST_0 
       (.I0(next_mi_addr[17]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[17]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[17] ),
        .O(m_axi_araddr[17]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[18]_INST_0 
       (.I0(next_mi_addr[18]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[18]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[18] ),
        .O(m_axi_araddr[18]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[19]_INST_0 
       (.I0(next_mi_addr[19]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[19]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[19] ),
        .O(m_axi_araddr[19]));
  LUT5 #(
    .INIT(32'h00E2AAAA)) 
    \m_axi_araddr[1]_INST_0 
       (.I0(\S_AXI_AADDR_Q_reg_n_0_[1] ),
        .I1(access_is_wrap_q),
        .I2(masked_addr_q[1]),
        .I3(access_is_incr_q),
        .I4(split_ongoing),
        .O(m_axi_araddr[1]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[20]_INST_0 
       (.I0(next_mi_addr[20]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[20]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[20] ),
        .O(m_axi_araddr[20]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[21]_INST_0 
       (.I0(next_mi_addr[21]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[21]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[21] ),
        .O(m_axi_araddr[21]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[22]_INST_0 
       (.I0(next_mi_addr[22]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[22]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[22] ),
        .O(m_axi_araddr[22]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[23]_INST_0 
       (.I0(next_mi_addr[23]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[23]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[23] ),
        .O(m_axi_araddr[23]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[24]_INST_0 
       (.I0(next_mi_addr[24]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[24]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[24] ),
        .O(m_axi_araddr[24]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[25]_INST_0 
       (.I0(next_mi_addr[25]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[25]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[25] ),
        .O(m_axi_araddr[25]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[26]_INST_0 
       (.I0(next_mi_addr[26]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[26]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[26] ),
        .O(m_axi_araddr[26]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[27]_INST_0 
       (.I0(next_mi_addr[27]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[27]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[27] ),
        .O(m_axi_araddr[27]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[28]_INST_0 
       (.I0(next_mi_addr[28]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[28]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[28] ),
        .O(m_axi_araddr[28]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[29]_INST_0 
       (.I0(next_mi_addr[29]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[29]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[29] ),
        .O(m_axi_araddr[29]));
  LUT6 #(
    .INIT(64'hFF00F0F0B8B8F0F0)) 
    \m_axi_araddr[2]_INST_0 
       (.I0(masked_addr_q[2]),
        .I1(access_is_wrap_q),
        .I2(\S_AXI_AADDR_Q_reg_n_0_[2] ),
        .I3(next_mi_addr[2]),
        .I4(split_ongoing),
        .I5(access_is_incr_q),
        .O(m_axi_araddr[2]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[30]_INST_0 
       (.I0(next_mi_addr[30]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[30]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[30] ),
        .O(m_axi_araddr[30]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[31]_INST_0 
       (.I0(next_mi_addr[31]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[31]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[31] ),
        .O(m_axi_araddr[31]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[3]_INST_0 
       (.I0(next_mi_addr[3]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[3]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[3] ),
        .O(m_axi_araddr[3]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[4]_INST_0 
       (.I0(next_mi_addr[4]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[4]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[4] ),
        .O(m_axi_araddr[4]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[5]_INST_0 
       (.I0(next_mi_addr[5]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[5]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[5] ),
        .O(m_axi_araddr[5]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[6]_INST_0 
       (.I0(next_mi_addr[6]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[6]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[6] ),
        .O(m_axi_araddr[6]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[7]_INST_0 
       (.I0(next_mi_addr[7]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[7]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[7] ),
        .O(m_axi_araddr[7]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[8]_INST_0 
       (.I0(next_mi_addr[8]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[8]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[8] ),
        .O(m_axi_araddr[8]));
  LUT6 #(
    .INIT(64'hBFB3BFBF8C808080)) 
    \m_axi_araddr[9]_INST_0 
       (.I0(next_mi_addr[9]),
        .I1(split_ongoing),
        .I2(access_is_incr_q),
        .I3(masked_addr_q[9]),
        .I4(access_is_wrap_q),
        .I5(\S_AXI_AADDR_Q_reg_n_0_[9] ),
        .O(m_axi_araddr[9]));
  LUT5 #(
    .INIT(32'hAAAAEFEE)) 
    \m_axi_arburst[0]_INST_0 
       (.I0(S_AXI_ABURST_Q[0]),
        .I1(access_is_fix_q),
        .I2(legal_wrap_len_q),
        .I3(access_is_wrap_q),
        .I4(access_fit_mi_side_q),
        .O(m_axi_arburst[0]));
  LUT5 #(
    .INIT(32'hAAAA2022)) 
    \m_axi_arburst[1]_INST_0 
       (.I0(S_AXI_ABURST_Q[1]),
        .I1(access_is_fix_q),
        .I2(legal_wrap_len_q),
        .I3(access_is_wrap_q),
        .I4(access_fit_mi_side_q),
        .O(m_axi_arburst[1]));
  LUT4 #(
    .INIT(16'h0002)) 
    \m_axi_arlock[0]_INST_0 
       (.I0(S_AXI_ALOCK_Q),
        .I1(wrap_need_to_split_q),
        .I2(fix_need_to_split_q),
        .I3(incr_need_to_split_q),
        .O(m_axi_arlock));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    \masked_addr_q[0]_i_1__0 
       (.I0(s_axi_araddr[0]),
        .I1(s_axi_arsize[2]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arsize[0]),
        .I4(s_axi_arlen[0]),
        .O(masked_addr[0]));
  LUT6 #(
    .INIT(64'h00002AAAAAAA2AAA)) 
    \masked_addr_q[10]_i_1__0 
       (.I0(s_axi_araddr[10]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arlen[7]),
        .I3(s_axi_arsize[0]),
        .I4(s_axi_arsize[2]),
        .I5(\num_transactions_q[0]_i_2__0_n_0 ),
        .O(masked_addr[10]));
  (* SOFT_HLUTNM = "soft_lutpair350" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    \masked_addr_q[11]_i_1__0 
       (.I0(s_axi_araddr[11]),
        .I1(s_axi_arsize[2]),
        .I2(\num_transactions_q[1]_i_2__0_n_0 ),
        .O(masked_addr[11]));
  LUT2 #(
    .INIT(4'h2)) 
    \masked_addr_q[12]_i_1__0 
       (.I0(s_axi_araddr[12]),
        .I1(\num_transactions_q[2]_i_1__0_n_0 ),
        .O(masked_addr[12]));
  LUT6 #(
    .INIT(64'h222AAA2AAAAAAAAA)) 
    \masked_addr_q[13]_i_1__0 
       (.I0(s_axi_araddr[13]),
        .I1(s_axi_arsize[2]),
        .I2(s_axi_arlen[7]),
        .I3(s_axi_arsize[0]),
        .I4(s_axi_arlen[6]),
        .I5(s_axi_arsize[1]),
        .O(masked_addr[13]));
  (* SOFT_HLUTNM = "soft_lutpair331" *) 
  LUT5 #(
    .INIT(32'h2AAAAAAA)) 
    \masked_addr_q[14]_i_1__0 
       (.I0(s_axi_araddr[14]),
        .I1(s_axi_arlen[7]),
        .I2(s_axi_arsize[0]),
        .I3(s_axi_arsize[1]),
        .I4(s_axi_arsize[2]),
        .O(masked_addr[14]));
  LUT6 #(
    .INIT(64'h0002000000020202)) 
    \masked_addr_q[1]_i_1__0 
       (.I0(s_axi_araddr[1]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arsize[2]),
        .I3(s_axi_arlen[0]),
        .I4(s_axi_arsize[0]),
        .I5(s_axi_arlen[1]),
        .O(masked_addr[1]));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \masked_addr_q[2]_i_1__0 
       (.I0(s_axi_araddr[2]),
        .I1(cmd_mask_i[2]),
        .O(masked_addr[2]));
  LUT6 #(
    .INIT(64'hFFFFFEAEFAFAFEAE)) 
    \masked_addr_q[2]_i_2__0 
       (.I0(s_axi_arsize[2]),
        .I1(s_axi_arlen[2]),
        .I2(s_axi_arsize[0]),
        .I3(s_axi_arlen[1]),
        .I4(s_axi_arsize[1]),
        .I5(s_axi_arlen[0]),
        .O(cmd_mask_i[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \masked_addr_q[3]_i_1__0 
       (.I0(s_axi_araddr[3]),
        .I1(\masked_addr_q[3]_i_2__0_n_0 ),
        .O(masked_addr[3]));
  LUT6 #(
    .INIT(64'h0000015155550151)) 
    \masked_addr_q[3]_i_2__0 
       (.I0(s_axi_arsize[2]),
        .I1(s_axi_arlen[3]),
        .I2(s_axi_arsize[0]),
        .I3(s_axi_arlen[2]),
        .I4(s_axi_arsize[1]),
        .I5(\masked_addr_q[3]_i_3__0_n_0 ),
        .O(\masked_addr_q[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair333" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \masked_addr_q[3]_i_3__0 
       (.I0(s_axi_arlen[0]),
        .I1(s_axi_arsize[0]),
        .I2(s_axi_arlen[1]),
        .O(\masked_addr_q[3]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h02020202020202A2)) 
    \masked_addr_q[4]_i_1__0 
       (.I0(s_axi_araddr[4]),
        .I1(\masked_addr_q[4]_i_2_n_0 ),
        .I2(s_axi_arsize[2]),
        .I3(s_axi_arsize[0]),
        .I4(s_axi_arsize[1]),
        .I5(s_axi_arlen[0]),
        .O(masked_addr[4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \masked_addr_q[4]_i_2 
       (.I0(s_axi_arlen[1]),
        .I1(s_axi_arlen[2]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arlen[3]),
        .I4(s_axi_arsize[0]),
        .I5(s_axi_arlen[4]),
        .O(\masked_addr_q[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair359" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \masked_addr_q[5]_i_1__0 
       (.I0(s_axi_araddr[5]),
        .I1(\masked_addr_q[5]_i_2__0_n_0 ),
        .O(masked_addr[5]));
  LUT6 #(
    .INIT(64'hFEAEFFFFFEAE0000)) 
    \masked_addr_q[5]_i_2__0 
       (.I0(s_axi_arsize[1]),
        .I1(s_axi_arlen[1]),
        .I2(s_axi_arsize[0]),
        .I3(s_axi_arlen[0]),
        .I4(s_axi_arsize[2]),
        .I5(\downsized_len_q[7]_i_2__0_n_0 ),
        .O(\masked_addr_q[5]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair345" *) 
  LUT4 #(
    .INIT(16'h4700)) 
    \masked_addr_q[6]_i_1__0 
       (.I0(\masked_addr_q[6]_i_2__0_n_0 ),
        .I1(s_axi_arsize[2]),
        .I2(\num_transactions_q[0]_i_2__0_n_0 ),
        .I3(s_axi_araddr[6]),
        .O(masked_addr[6]));
  (* SOFT_HLUTNM = "soft_lutpair333" *) 
  LUT5 #(
    .INIT(32'hFCBBFC88)) 
    \masked_addr_q[6]_i_2__0 
       (.I0(s_axi_arlen[0]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arlen[1]),
        .I3(s_axi_arsize[0]),
        .I4(s_axi_arlen[2]),
        .O(\masked_addr_q[6]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair344" *) 
  LUT4 #(
    .INIT(16'h4700)) 
    \masked_addr_q[7]_i_1__0 
       (.I0(\masked_addr_q[7]_i_2__0_n_0 ),
        .I1(s_axi_arsize[2]),
        .I2(\num_transactions_q[1]_i_2__0_n_0 ),
        .I3(s_axi_araddr[7]),
        .O(masked_addr[7]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \masked_addr_q[7]_i_2__0 
       (.I0(s_axi_arlen[0]),
        .I1(s_axi_arlen[1]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arlen[2]),
        .I4(s_axi_arsize[0]),
        .I5(s_axi_arlen[3]),
        .O(\masked_addr_q[7]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair360" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \masked_addr_q[8]_i_1 
       (.I0(s_axi_araddr[8]),
        .I1(\masked_addr_q[8]_i_2__0_n_0 ),
        .O(masked_addr[8]));
  (* SOFT_HLUTNM = "soft_lutpair349" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \masked_addr_q[8]_i_2__0 
       (.I0(\masked_addr_q[4]_i_2_n_0 ),
        .I1(s_axi_arsize[2]),
        .I2(\masked_addr_q[8]_i_3__0_n_0 ),
        .O(\masked_addr_q[8]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT5 #(
    .INIT(32'hAFA0C0C0)) 
    \masked_addr_q[8]_i_3__0 
       (.I0(s_axi_arlen[5]),
        .I1(s_axi_arlen[6]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arlen[7]),
        .I4(s_axi_arsize[0]),
        .O(\masked_addr_q[8]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair358" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \masked_addr_q[9]_i_1__0 
       (.I0(s_axi_araddr[9]),
        .I1(\masked_addr_q[9]_i_2__0_n_0 ),
        .O(masked_addr[9]));
  LUT6 #(
    .INIT(64'hBBB888B888888888)) 
    \masked_addr_q[9]_i_2__0 
       (.I0(\downsized_len_q[7]_i_2__0_n_0 ),
        .I1(s_axi_arsize[2]),
        .I2(s_axi_arlen[7]),
        .I3(s_axi_arsize[0]),
        .I4(s_axi_arlen[6]),
        .I5(s_axi_arsize[1]),
        .O(\masked_addr_q[9]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[0]),
        .Q(masked_addr_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[10] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[10]),
        .Q(masked_addr_q[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[11] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[11]),
        .Q(masked_addr_q[11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[12] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[12]),
        .Q(masked_addr_q[12]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[13] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[13]),
        .Q(masked_addr_q[13]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[14] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[14]),
        .Q(masked_addr_q[14]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[15] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[15]),
        .Q(masked_addr_q[15]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[16] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[16]),
        .Q(masked_addr_q[16]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[17] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[17]),
        .Q(masked_addr_q[17]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[18] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[18]),
        .Q(masked_addr_q[18]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[19] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[19]),
        .Q(masked_addr_q[19]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[1]),
        .Q(masked_addr_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[20] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[20]),
        .Q(masked_addr_q[20]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[21] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[21]),
        .Q(masked_addr_q[21]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[22] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[22]),
        .Q(masked_addr_q[22]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[23] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[23]),
        .Q(masked_addr_q[23]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[24] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[24]),
        .Q(masked_addr_q[24]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[25] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[25]),
        .Q(masked_addr_q[25]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[26] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[26]),
        .Q(masked_addr_q[26]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[27] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[27]),
        .Q(masked_addr_q[27]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[28] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[28]),
        .Q(masked_addr_q[28]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[29] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[29]),
        .Q(masked_addr_q[29]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[2]),
        .Q(masked_addr_q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[30] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[30]),
        .Q(masked_addr_q[30]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[31] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_araddr[31]),
        .Q(masked_addr_q[31]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[3]),
        .Q(masked_addr_q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[4]),
        .Q(masked_addr_q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[5]),
        .Q(masked_addr_q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[6]),
        .Q(masked_addr_q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[7]),
        .Q(masked_addr_q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[8] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[8]),
        .Q(masked_addr_q[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \masked_addr_q_reg[9] 
       (.C(CLK),
        .CE(E),
        .D(masked_addr[9]),
        .Q(masked_addr_q[9]),
        .R(SR));
  CARRY4 next_mi_addr0_carry
       (.CI(\<const0> ),
        .CO({next_mi_addr0_carry_n_0,next_mi_addr0_carry_n_1,next_mi_addr0_carry_n_2,next_mi_addr0_carry_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,pre_mi_addr__0[10],\<const0> }),
        .O({next_mi_addr0_carry_n_4,next_mi_addr0_carry_n_5,next_mi_addr0_carry_n_6,next_mi_addr0_carry_n_7}),
        .S({pre_mi_addr__0[12:11],next_mi_addr0_carry_i_4__0_n_0,pre_mi_addr__0[9]}));
  CARRY4 next_mi_addr0_carry__0
       (.CI(next_mi_addr0_carry_n_0),
        .CO({next_mi_addr0_carry__0_n_0,next_mi_addr0_carry__0_n_1,next_mi_addr0_carry__0_n_2,next_mi_addr0_carry__0_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .O({next_mi_addr0_carry__0_n_4,next_mi_addr0_carry__0_n_5,next_mi_addr0_carry__0_n_6,next_mi_addr0_carry__0_n_7}),
        .S(pre_mi_addr__0[16:13]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__0_i_1__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[16] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[16]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[16]),
        .O(pre_mi_addr__0[16]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__0_i_2__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[15] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[15]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[15]),
        .O(pre_mi_addr__0[15]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__0_i_3__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[14] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[14]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[14]),
        .O(pre_mi_addr__0[14]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__0_i_4__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[13] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[13]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[13]),
        .O(pre_mi_addr__0[13]));
  CARRY4 next_mi_addr0_carry__1
       (.CI(next_mi_addr0_carry__0_n_0),
        .CO({next_mi_addr0_carry__1_n_0,next_mi_addr0_carry__1_n_1,next_mi_addr0_carry__1_n_2,next_mi_addr0_carry__1_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .O({next_mi_addr0_carry__1_n_4,next_mi_addr0_carry__1_n_5,next_mi_addr0_carry__1_n_6,next_mi_addr0_carry__1_n_7}),
        .S(pre_mi_addr__0[20:17]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__1_i_1__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[20] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[20]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[20]),
        .O(pre_mi_addr__0[20]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__1_i_2__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[19] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[19]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[19]),
        .O(pre_mi_addr__0[19]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__1_i_3__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[18] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[18]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[18]),
        .O(pre_mi_addr__0[18]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__1_i_4__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[17] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[17]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[17]),
        .O(pre_mi_addr__0[17]));
  CARRY4 next_mi_addr0_carry__2
       (.CI(next_mi_addr0_carry__1_n_0),
        .CO({next_mi_addr0_carry__2_n_0,next_mi_addr0_carry__2_n_1,next_mi_addr0_carry__2_n_2,next_mi_addr0_carry__2_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .O({next_mi_addr0_carry__2_n_4,next_mi_addr0_carry__2_n_5,next_mi_addr0_carry__2_n_6,next_mi_addr0_carry__2_n_7}),
        .S(pre_mi_addr__0[24:21]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__2_i_1__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[24] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[24]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[24]),
        .O(pre_mi_addr__0[24]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__2_i_2__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[23] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[23]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[23]),
        .O(pre_mi_addr__0[23]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__2_i_3__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[22] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[22]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[22]),
        .O(pre_mi_addr__0[22]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__2_i_4__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[21] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[21]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[21]),
        .O(pre_mi_addr__0[21]));
  CARRY4 next_mi_addr0_carry__3
       (.CI(next_mi_addr0_carry__2_n_0),
        .CO({next_mi_addr0_carry__3_n_0,next_mi_addr0_carry__3_n_1,next_mi_addr0_carry__3_n_2,next_mi_addr0_carry__3_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .O({next_mi_addr0_carry__3_n_4,next_mi_addr0_carry__3_n_5,next_mi_addr0_carry__3_n_6,next_mi_addr0_carry__3_n_7}),
        .S(pre_mi_addr__0[28:25]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__3_i_1__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[28] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[28]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[28]),
        .O(pre_mi_addr__0[28]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__3_i_2__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[27] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[27]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[27]),
        .O(pre_mi_addr__0[27]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__3_i_3__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[26] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[26]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[26]),
        .O(pre_mi_addr__0[26]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__3_i_4__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[25] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[25]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[25]),
        .O(pre_mi_addr__0[25]));
  CARRY4 next_mi_addr0_carry__4
       (.CI(next_mi_addr0_carry__3_n_0),
        .CO({next_mi_addr0_carry__4_n_2,next_mi_addr0_carry__4_n_3}),
        .CYINIT(\<const0> ),
        .DI({\<const0> ,\<const0> ,\<const0> ,\<const0> }),
        .O({next_mi_addr0_carry__4_n_5,next_mi_addr0_carry__4_n_6,next_mi_addr0_carry__4_n_7}),
        .S({\<const0> ,pre_mi_addr__0[31:29]}));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__4_i_1__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[31] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[31]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[31]),
        .O(pre_mi_addr__0[31]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__4_i_2__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[30] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[30]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[30]),
        .O(pre_mi_addr__0[30]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry__4_i_3__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[29] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[29]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[29]),
        .O(pre_mi_addr__0[29]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry_i_1__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[10] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[10]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[10]),
        .O(pre_mi_addr__0[10]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry_i_2__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[12] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[12]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[12]),
        .O(pre_mi_addr__0[12]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry_i_3__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[11] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[11]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[11]),
        .O(pre_mi_addr__0[11]));
  LUT6 #(
    .INIT(64'h47444777FFFFFFFF)) 
    next_mi_addr0_carry_i_4__0
       (.I0(next_mi_addr[10]),
        .I1(cmd_queue_n_59),
        .I2(masked_addr_q[10]),
        .I3(cmd_queue_n_60),
        .I4(\S_AXI_AADDR_Q_reg_n_0_[10] ),
        .I5(\split_addr_mask_q_reg_n_0_[31] ),
        .O(next_mi_addr0_carry_i_4__0_n_0));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    next_mi_addr0_carry_i_5__0
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[9] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[9]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[9]),
        .O(pre_mi_addr__0[9]));
  LUT6 #(
    .INIT(64'hA2A2A2808080A280)) 
    \next_mi_addr[2]_i_1__0 
       (.I0(\split_addr_mask_q_reg_n_0_[2] ),
        .I1(cmd_queue_n_59),
        .I2(next_mi_addr[2]),
        .I3(\S_AXI_AADDR_Q_reg_n_0_[2] ),
        .I4(cmd_queue_n_60),
        .I5(masked_addr_q[2]),
        .O(pre_mi_addr[2]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[3]_i_1__0 
       (.I0(\split_addr_mask_q_reg_n_0_[3] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[3] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[3]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[3]),
        .O(pre_mi_addr[3]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[4]_i_1__0 
       (.I0(\split_addr_mask_q_reg_n_0_[4] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[4] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[4]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[4]),
        .O(pre_mi_addr[4]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[5]_i_1__0 
       (.I0(\split_addr_mask_q_reg_n_0_[5] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[5] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[5]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[5]),
        .O(pre_mi_addr[5]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[6]_i_1__0 
       (.I0(\split_addr_mask_q_reg_n_0_[6] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[6] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[6]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[6]),
        .O(pre_mi_addr[6]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[7]_i_1__0 
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[7] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[7]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[7]),
        .O(pre_mi_addr[7]));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \next_mi_addr[8]_i_1__0 
       (.I0(\split_addr_mask_q_reg_n_0_[31] ),
        .I1(\S_AXI_AADDR_Q_reg_n_0_[8] ),
        .I2(cmd_queue_n_60),
        .I3(masked_addr_q[8]),
        .I4(cmd_queue_n_59),
        .I5(next_mi_addr[8]),
        .O(pre_mi_addr[8]));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[10] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry_n_6),
        .Q(next_mi_addr[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[11] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry_n_5),
        .Q(next_mi_addr[11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[12] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry_n_4),
        .Q(next_mi_addr[12]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[13] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__0_n_7),
        .Q(next_mi_addr[13]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[14] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__0_n_6),
        .Q(next_mi_addr[14]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[15] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__0_n_5),
        .Q(next_mi_addr[15]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[16] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__0_n_4),
        .Q(next_mi_addr[16]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[17] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__1_n_7),
        .Q(next_mi_addr[17]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[18] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__1_n_6),
        .Q(next_mi_addr[18]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[19] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__1_n_5),
        .Q(next_mi_addr[19]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[20] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__1_n_4),
        .Q(next_mi_addr[20]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[21] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__2_n_7),
        .Q(next_mi_addr[21]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[22] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__2_n_6),
        .Q(next_mi_addr[22]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[23] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__2_n_5),
        .Q(next_mi_addr[23]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[24] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__2_n_4),
        .Q(next_mi_addr[24]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[25] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__3_n_7),
        .Q(next_mi_addr[25]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[26] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__3_n_6),
        .Q(next_mi_addr[26]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[27] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__3_n_5),
        .Q(next_mi_addr[27]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[28] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__3_n_4),
        .Q(next_mi_addr[28]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[29] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__4_n_7),
        .Q(next_mi_addr[29]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[2] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[2]),
        .Q(next_mi_addr[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[30] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__4_n_6),
        .Q(next_mi_addr[30]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[31] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry__4_n_5),
        .Q(next_mi_addr[31]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[3] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[3]),
        .Q(next_mi_addr[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[4] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[4]),
        .Q(next_mi_addr[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[5] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[5]),
        .Q(next_mi_addr[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[6] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[6]),
        .Q(next_mi_addr[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[7] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[7]),
        .Q(next_mi_addr[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[8] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(pre_mi_addr[8]),
        .Q(next_mi_addr[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \next_mi_addr_reg[9] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(next_mi_addr0_carry_n_7),
        .Q(next_mi_addr[9]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT5 #(
    .INIT(32'hB8888888)) 
    \num_transactions_q[0]_i_1__0 
       (.I0(\num_transactions_q[0]_i_2__0_n_0 ),
        .I1(s_axi_arsize[2]),
        .I2(s_axi_arsize[0]),
        .I3(s_axi_arlen[7]),
        .I4(s_axi_arsize[1]),
        .O(num_transactions));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \num_transactions_q[0]_i_2__0 
       (.I0(s_axi_arlen[3]),
        .I1(s_axi_arlen[4]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arlen[5]),
        .I4(s_axi_arsize[0]),
        .I5(s_axi_arlen[6]),
        .O(\num_transactions_q[0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair349" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \num_transactions_q[1]_i_1__0 
       (.I0(\num_transactions_q[1]_i_2__0_n_0 ),
        .I1(s_axi_arsize[2]),
        .O(\num_transactions_q[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \num_transactions_q[1]_i_2__0 
       (.I0(s_axi_arlen[4]),
        .I1(s_axi_arlen[5]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arlen[6]),
        .I4(s_axi_arsize[0]),
        .I5(s_axi_arlen[7]),
        .O(\num_transactions_q[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hF8A8580800000000)) 
    \num_transactions_q[2]_i_1__0 
       (.I0(s_axi_arsize[0]),
        .I1(s_axi_arlen[7]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arlen[6]),
        .I4(s_axi_arlen[5]),
        .I5(s_axi_arsize[2]),
        .O(\num_transactions_q[2]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \num_transactions_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(num_transactions),
        .Q(num_transactions_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \num_transactions_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(\num_transactions_q[1]_i_1__0_n_0 ),
        .Q(num_transactions_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \num_transactions_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(\num_transactions_q[2]_i_1__0_n_0 ),
        .Q(num_transactions_q[2]),
        .R(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \pushed_commands[0]_i_1__0 
       (.I0(pushed_commands_reg[0]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair346" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \pushed_commands[1]_i_1__0 
       (.I0(pushed_commands_reg[1]),
        .I1(pushed_commands_reg[0]),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair346" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \pushed_commands[2]_i_1__0 
       (.I0(pushed_commands_reg[2]),
        .I1(pushed_commands_reg[0]),
        .I2(pushed_commands_reg[1]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair341" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \pushed_commands[3]_i_1__0 
       (.I0(pushed_commands_reg[3]),
        .I1(pushed_commands_reg[2]),
        .I2(pushed_commands_reg[1]),
        .I3(pushed_commands_reg[0]),
        .O(p_0_in__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair341" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \pushed_commands[4]_i_1__0 
       (.I0(pushed_commands_reg[4]),
        .I1(pushed_commands_reg[3]),
        .I2(pushed_commands_reg[0]),
        .I3(pushed_commands_reg[1]),
        .I4(pushed_commands_reg[2]),
        .O(p_0_in__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \pushed_commands[5]_i_1__0 
       (.I0(pushed_commands_reg[5]),
        .I1(pushed_commands_reg[2]),
        .I2(pushed_commands_reg[1]),
        .I3(pushed_commands_reg[0]),
        .I4(pushed_commands_reg[3]),
        .I5(pushed_commands_reg[4]),
        .O(p_0_in__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair351" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \pushed_commands[6]_i_1__0 
       (.I0(pushed_commands_reg[6]),
        .I1(\pushed_commands[7]_i_3__0_n_0 ),
        .O(p_0_in__0[6]));
  LUT2 #(
    .INIT(4'hB)) 
    \pushed_commands[7]_i_1__0 
       (.I0(E),
        .I1(out),
        .O(\pushed_commands[7]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair351" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \pushed_commands[7]_i_2__0 
       (.I0(pushed_commands_reg[7]),
        .I1(\pushed_commands[7]_i_3__0_n_0 ),
        .I2(pushed_commands_reg[6]),
        .O(p_0_in__0[7]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \pushed_commands[7]_i_3__0 
       (.I0(pushed_commands_reg[5]),
        .I1(pushed_commands_reg[2]),
        .I2(pushed_commands_reg[1]),
        .I3(pushed_commands_reg[0]),
        .I4(pushed_commands_reg[3]),
        .I5(pushed_commands_reg[4]),
        .O(\pushed_commands[7]_i_3__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[0] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in__0[0]),
        .Q(pushed_commands_reg[0]),
        .R(\pushed_commands[7]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[1] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in__0[1]),
        .Q(pushed_commands_reg[1]),
        .R(\pushed_commands[7]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[2] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in__0[2]),
        .Q(pushed_commands_reg[2]),
        .R(\pushed_commands[7]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[3] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in__0[3]),
        .Q(pushed_commands_reg[3]),
        .R(\pushed_commands[7]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[4] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in__0[4]),
        .Q(pushed_commands_reg[4]),
        .R(\pushed_commands[7]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[5] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in__0[5]),
        .Q(pushed_commands_reg[5]),
        .R(\pushed_commands[7]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[6] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in__0[6]),
        .Q(pushed_commands_reg[6]),
        .R(\pushed_commands[7]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \pushed_commands_reg[7] 
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(p_0_in__0[7]),
        .Q(pushed_commands_reg[7]),
        .R(\pushed_commands[7]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \queue_id_reg[0] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(cmd_queue_n_65),
        .Q(\skid_buffer_reg[67] ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT3 #(
    .INIT(8'h40)) 
    si_full_size_q_i_1__0
       (.I0(s_axi_arsize[2]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arsize[0]),
        .O(si_full_size_q_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    si_full_size_q_reg
       (.C(CLK),
        .CE(E),
        .D(si_full_size_q_i_1__0_n_0),
        .Q(si_full_size_q),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair348" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \split_addr_mask_q[0]_i_1__0 
       (.I0(s_axi_arsize[2]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arsize[0]),
        .O(split_addr_mask[0]));
  (* SOFT_HLUTNM = "soft_lutpair357" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \split_addr_mask_q[1]_i_1__0 
       (.I0(s_axi_arsize[1]),
        .I1(s_axi_arsize[2]),
        .O(split_addr_mask[1]));
  (* SOFT_HLUTNM = "soft_lutpair330" *) 
  LUT3 #(
    .INIT(8'h15)) 
    \split_addr_mask_q[2]_i_1__0 
       (.I0(s_axi_arsize[2]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arsize[0]),
        .O(\split_addr_mask_q[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair350" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \split_addr_mask_q[3]_i_1__0 
       (.I0(s_axi_arsize[2]),
        .O(split_addr_mask[3]));
  (* SOFT_HLUTNM = "soft_lutpair338" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \split_addr_mask_q[4]_i_1__0 
       (.I0(s_axi_arsize[0]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arsize[2]),
        .O(split_addr_mask[4]));
  (* SOFT_HLUTNM = "soft_lutpair352" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \split_addr_mask_q[5]_i_1__0 
       (.I0(s_axi_arsize[2]),
        .I1(s_axi_arsize[1]),
        .O(split_addr_mask[5]));
  (* SOFT_HLUTNM = "soft_lutpair343" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \split_addr_mask_q[6]_i_1__0 
       (.I0(s_axi_arsize[0]),
        .I1(s_axi_arsize[1]),
        .I2(s_axi_arsize[2]),
        .O(split_addr_mask[6]));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[0]),
        .Q(\split_addr_mask_q_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[1]),
        .Q(\split_addr_mask_q_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(\split_addr_mask_q[2]_i_1__0_n_0 ),
        .Q(\split_addr_mask_q_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[31] 
       (.C(CLK),
        .CE(E),
        .D(\<const1> ),
        .Q(\split_addr_mask_q_reg_n_0_[31] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[3]),
        .Q(\split_addr_mask_q_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[4]),
        .Q(\split_addr_mask_q_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[5]),
        .Q(\split_addr_mask_q_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \split_addr_mask_q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(split_addr_mask[6]),
        .Q(\split_addr_mask_q_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    split_ongoing_reg
       (.C(CLK),
        .CE(pushed_new_cmd),
        .D(cmd_split_i),
        .Q(split_ongoing),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair342" *) 
  LUT4 #(
    .INIT(16'hAA80)) 
    \unalignment_addr_q[0]_i_1__0 
       (.I0(s_axi_araddr[2]),
        .I1(s_axi_arsize[0]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arsize[2]),
        .O(unalignment_addr[0]));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \unalignment_addr_q[1]_i_1__0 
       (.I0(s_axi_araddr[3]),
        .I1(s_axi_arsize[2]),
        .O(unalignment_addr[1]));
  (* SOFT_HLUTNM = "soft_lutpair342" *) 
  LUT4 #(
    .INIT(16'hA800)) 
    \unalignment_addr_q[2]_i_1__0 
       (.I0(s_axi_araddr[4]),
        .I1(s_axi_arsize[0]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arsize[2]),
        .O(unalignment_addr[2]));
  (* SOFT_HLUTNM = "soft_lutpair352" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \unalignment_addr_q[3]_i_1__0 
       (.I0(s_axi_araddr[5]),
        .I1(s_axi_arsize[2]),
        .I2(s_axi_arsize[1]),
        .O(unalignment_addr[3]));
  (* SOFT_HLUTNM = "soft_lutpair343" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \unalignment_addr_q[4]_i_1__0 
       (.I0(s_axi_araddr[6]),
        .I1(s_axi_arsize[0]),
        .I2(s_axi_arsize[1]),
        .I3(s_axi_arsize[2]),
        .O(unalignment_addr[4]));
  FDRE #(
    .INIT(1'b0)) 
    \unalignment_addr_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(unalignment_addr[0]),
        .Q(unalignment_addr_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \unalignment_addr_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(unalignment_addr[1]),
        .Q(unalignment_addr_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \unalignment_addr_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(unalignment_addr[2]),
        .Q(unalignment_addr_q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \unalignment_addr_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(unalignment_addr[3]),
        .Q(unalignment_addr_q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \unalignment_addr_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(unalignment_addr[4]),
        .Q(unalignment_addr_q[4]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair329" *) 
  LUT5 #(
    .INIT(32'h000000E0)) 
    wrap_need_to_split_q_i_1__0
       (.I0(wrap_need_to_split_q_i_2__0_n_0),
        .I1(wrap_need_to_split_q_i_3__0_n_0),
        .I2(s_axi_arburst[1]),
        .I3(s_axi_arburst[0]),
        .I4(legal_wrap_len_q_i_1__0_n_0),
        .O(wrap_need_to_split));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF888)) 
    wrap_need_to_split_q_i_2__0
       (.I0(s_axi_araddr[8]),
        .I1(\masked_addr_q[8]_i_2__0_n_0 ),
        .I2(s_axi_araddr[9]),
        .I3(\masked_addr_q[9]_i_2__0_n_0 ),
        .I4(wrap_unaligned_len[4]),
        .I5(wrap_unaligned_len[5]),
        .O(wrap_need_to_split_q_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hFEEEFEEEFFFFFEEE)) 
    wrap_need_to_split_q_i_3__0
       (.I0(wrap_unaligned_len[2]),
        .I1(wrap_unaligned_len[3]),
        .I2(s_axi_araddr[2]),
        .I3(cmd_mask_i[2]),
        .I4(s_axi_araddr[3]),
        .I5(\masked_addr_q[3]_i_2__0_n_0 ),
        .O(wrap_need_to_split_q_i_3__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wrap_need_to_split_q_reg
       (.C(CLK),
        .CE(E),
        .D(wrap_need_to_split),
        .Q(wrap_need_to_split_q),
        .R(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \wrap_rest_len[0]_i_1__0 
       (.I0(wrap_unaligned_len_q[0]),
        .O(wrap_rest_len0[0]));
  (* SOFT_HLUTNM = "soft_lutpair353" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \wrap_rest_len[1]_i_1__0 
       (.I0(wrap_unaligned_len_q[0]),
        .I1(wrap_unaligned_len_q[1]),
        .O(\wrap_rest_len[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair353" *) 
  LUT3 #(
    .INIT(8'hA9)) 
    \wrap_rest_len[2]_i_1__0 
       (.I0(wrap_unaligned_len_q[2]),
        .I1(wrap_unaligned_len_q[1]),
        .I2(wrap_unaligned_len_q[0]),
        .O(wrap_rest_len0[2]));
  (* SOFT_HLUTNM = "soft_lutpair337" *) 
  LUT4 #(
    .INIT(16'hAAA9)) 
    \wrap_rest_len[3]_i_1__0 
       (.I0(wrap_unaligned_len_q[3]),
        .I1(wrap_unaligned_len_q[2]),
        .I2(wrap_unaligned_len_q[0]),
        .I3(wrap_unaligned_len_q[1]),
        .O(wrap_rest_len0[3]));
  (* SOFT_HLUTNM = "soft_lutpair337" *) 
  LUT5 #(
    .INIT(32'hAAAAAAA9)) 
    \wrap_rest_len[4]_i_1__0 
       (.I0(wrap_unaligned_len_q[4]),
        .I1(wrap_unaligned_len_q[3]),
        .I2(wrap_unaligned_len_q[1]),
        .I3(wrap_unaligned_len_q[0]),
        .I4(wrap_unaligned_len_q[2]),
        .O(wrap_rest_len0[4]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA9)) 
    \wrap_rest_len[5]_i_1__0 
       (.I0(wrap_unaligned_len_q[5]),
        .I1(wrap_unaligned_len_q[4]),
        .I2(wrap_unaligned_len_q[2]),
        .I3(wrap_unaligned_len_q[0]),
        .I4(wrap_unaligned_len_q[1]),
        .I5(wrap_unaligned_len_q[3]),
        .O(wrap_rest_len0[5]));
  (* SOFT_HLUTNM = "soft_lutpair347" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wrap_rest_len[6]_i_1__0 
       (.I0(wrap_unaligned_len_q[6]),
        .I1(\wrap_rest_len[7]_i_2__0_n_0 ),
        .O(wrap_rest_len0[6]));
  (* SOFT_HLUTNM = "soft_lutpair347" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    \wrap_rest_len[7]_i_1__0 
       (.I0(wrap_unaligned_len_q[7]),
        .I1(wrap_unaligned_len_q[6]),
        .I2(\wrap_rest_len[7]_i_2__0_n_0 ),
        .O(wrap_rest_len0[7]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \wrap_rest_len[7]_i_2__0 
       (.I0(wrap_unaligned_len_q[4]),
        .I1(wrap_unaligned_len_q[2]),
        .I2(wrap_unaligned_len_q[0]),
        .I3(wrap_unaligned_len_q[1]),
        .I4(wrap_unaligned_len_q[3]),
        .I5(wrap_unaligned_len_q[5]),
        .O(\wrap_rest_len[7]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[0] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[0]),
        .Q(wrap_rest_len[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[1] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(\wrap_rest_len[1]_i_1__0_n_0 ),
        .Q(wrap_rest_len[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[2] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[2]),
        .Q(wrap_rest_len[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[3] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[3]),
        .Q(wrap_rest_len[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[4] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[4]),
        .Q(wrap_rest_len[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[5] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[5]),
        .Q(wrap_rest_len[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[6] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[6]),
        .Q(wrap_rest_len[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_rest_len_reg[7] 
       (.C(CLK),
        .CE(\<const1> ),
        .D(wrap_rest_len0[7]),
        .Q(wrap_rest_len[7]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wrap_unaligned_len_q[0]_i_1__0 
       (.I0(s_axi_araddr[2]),
        .I1(cmd_mask_i[2]),
        .O(wrap_unaligned_len[0]));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \wrap_unaligned_len_q[1]_i_1__0 
       (.I0(s_axi_araddr[3]),
        .I1(\masked_addr_q[3]_i_2__0_n_0 ),
        .O(wrap_unaligned_len[1]));
  LUT6 #(
    .INIT(64'hA8A8A8A8A8A8A808)) 
    \wrap_unaligned_len_q[2]_i_1__0 
       (.I0(s_axi_araddr[4]),
        .I1(\masked_addr_q[4]_i_2_n_0 ),
        .I2(s_axi_arsize[2]),
        .I3(s_axi_arsize[0]),
        .I4(s_axi_arsize[1]),
        .I5(s_axi_arlen[0]),
        .O(wrap_unaligned_len[2]));
  (* SOFT_HLUTNM = "soft_lutpair359" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wrap_unaligned_len_q[3]_i_1__0 
       (.I0(s_axi_araddr[5]),
        .I1(\masked_addr_q[5]_i_2__0_n_0 ),
        .O(wrap_unaligned_len[3]));
  (* SOFT_HLUTNM = "soft_lutpair345" *) 
  LUT4 #(
    .INIT(16'hB800)) 
    \wrap_unaligned_len_q[4]_i_1__0 
       (.I0(\masked_addr_q[6]_i_2__0_n_0 ),
        .I1(s_axi_arsize[2]),
        .I2(\num_transactions_q[0]_i_2__0_n_0 ),
        .I3(s_axi_araddr[6]),
        .O(wrap_unaligned_len[4]));
  (* SOFT_HLUTNM = "soft_lutpair344" *) 
  LUT4 #(
    .INIT(16'hB800)) 
    \wrap_unaligned_len_q[5]_i_1__0 
       (.I0(\masked_addr_q[7]_i_2__0_n_0 ),
        .I1(s_axi_arsize[2]),
        .I2(\num_transactions_q[1]_i_2__0_n_0 ),
        .I3(s_axi_araddr[7]),
        .O(wrap_unaligned_len[5]));
  (* SOFT_HLUTNM = "soft_lutpair360" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wrap_unaligned_len_q[6]_i_1 
       (.I0(s_axi_araddr[8]),
        .I1(\masked_addr_q[8]_i_2__0_n_0 ),
        .O(wrap_unaligned_len[6]));
  (* SOFT_HLUTNM = "soft_lutpair358" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wrap_unaligned_len_q[7]_i_1__0 
       (.I0(s_axi_araddr[9]),
        .I1(\masked_addr_q[9]_i_2__0_n_0 ),
        .O(wrap_unaligned_len[7]));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[0]),
        .Q(wrap_unaligned_len_q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[1]),
        .Q(wrap_unaligned_len_q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[2]),
        .Q(wrap_unaligned_len_q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[3]),
        .Q(wrap_unaligned_len_q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[4]),
        .Q(wrap_unaligned_len_q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[5]),
        .Q(wrap_unaligned_len_q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[6]),
        .Q(wrap_unaligned_len_q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \wrap_unaligned_len_q_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(wrap_unaligned_len[7]),
        .Q(wrap_unaligned_len_q[7]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_a_upsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_a_upsizer
   (\USE_WRITE.wr_cmd_valid ,
    p_251_in,
    SR,
    wrap_buffer_available_reg,
    s_axi_wready,
    Q,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 ,
    pop_si_data,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] ,
    E,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] ,
    D,
    \USE_RTL_CURR_WORD.current_word_q_reg[2] ,
    s_ready_i_reg,
    m_axi_awvalid,
    \USE_REGISTER.M_AXI_WVALID_q_reg ,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    clk,
    s_axi_wlast,
    out,
    wrap_buffer_available,
    m_axi_wready,
    \USE_REGISTER.M_AXI_WVALID_q_reg_0 ,
    wstrb_wrap_buffer_7,
    wstrb_wrap_buffer_6,
    wstrb_wrap_buffer_5,
    wstrb_wrap_buffer_4,
    wstrb_wrap_buffer_3,
    wstrb_wrap_buffer_2,
    wstrb_wrap_buffer_1,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] ,
    s_axi_wvalid,
    s_axi_wstrb,
    \USE_REGISTER.M_AXI_WVALID_q_reg_1 ,
    \USE_RTL_CURR_WORD.current_word_q_reg[2]_0 ,
    sr_awvalid,
    \USE_RTL_LENGTH.length_counter_q_reg[3] ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19] ,
    \USE_RTL_LENGTH.length_counter_q_reg[2] ,
    \USE_RTL_CURR_WORD.current_word_q_reg[2]_1 ,
    \USE_RTL_LENGTH.length_counter_q_reg[0] ,
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[2] ,
    \USE_RTL_CURR_WORD.first_word_q ,
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ,
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[1] ,
    m_axi_awready,
    in);
  output \USE_WRITE.wr_cmd_valid ;
  output p_251_in;
  output [0:0]SR;
  output wrap_buffer_available_reg;
  output s_axi_wready;
  output [14:0]Q;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 ;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 ;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 ;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_0 ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 ;
  output pop_si_data;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] ;
  output [0:0]E;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] ;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] ;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] ;
  output [2:0]D;
  output [2:0]\USE_RTL_CURR_WORD.current_word_q_reg[2] ;
  output s_ready_i_reg;
  output m_axi_awvalid;
  output \USE_REGISTER.M_AXI_WVALID_q_reg ;
  input \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  input clk;
  input s_axi_wlast;
  input out;
  input wrap_buffer_available;
  input m_axi_wready;
  input \USE_REGISTER.M_AXI_WVALID_q_reg_0 ;
  input wstrb_wrap_buffer_7;
  input wstrb_wrap_buffer_6;
  input wstrb_wrap_buffer_5;
  input wstrb_wrap_buffer_4;
  input wstrb_wrap_buffer_3;
  input wstrb_wrap_buffer_2;
  input wstrb_wrap_buffer_1;
  input \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] ;
  input s_axi_wvalid;
  input [3:0]s_axi_wstrb;
  input \USE_REGISTER.M_AXI_WVALID_q_reg_1 ;
  input [2:0]\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 ;
  input sr_awvalid;
  input \USE_RTL_LENGTH.length_counter_q_reg[3] ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19] ;
  input \USE_RTL_LENGTH.length_counter_q_reg[2] ;
  input \USE_RTL_CURR_WORD.current_word_q_reg[2]_1 ;
  input \USE_RTL_LENGTH.length_counter_q_reg[0] ;
  input [2:0]\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] ;
  input \USE_RTL_CURR_WORD.first_word_q ;
  input \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ;
  input \USE_RTL_CURR_WORD.pre_next_word_q_reg[1] ;
  input m_axi_awready;
  input [27:0]in;

  wire \<const1> ;
  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire [2:0]D;
  wire [0:0]E;
  wire [14:0]Q;
  wire [0:0]SR;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19] ;
  wire \USE_REGISTER.M_AXI_WVALID_q_reg ;
  wire \USE_REGISTER.M_AXI_WVALID_q_reg_0 ;
  wire \USE_REGISTER.M_AXI_WVALID_q_reg_1 ;
  wire [2:0]\USE_RTL_CURR_WORD.current_word_q_reg[2] ;
  wire [2:0]\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 ;
  wire \USE_RTL_CURR_WORD.current_word_q_reg[2]_1 ;
  wire \USE_RTL_CURR_WORD.first_word_q ;
  wire \USE_RTL_CURR_WORD.pre_next_word_q_reg[1] ;
  wire [2:0]\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] ;
  wire \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ;
  wire \USE_RTL_LENGTH.length_counter_q_reg[0] ;
  wire \USE_RTL_LENGTH.length_counter_q_reg[2] ;
  wire \USE_RTL_LENGTH.length_counter_q_reg[3] ;
  wire \USE_WRITE.wr_cmd_valid ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] ;
  wire clk;
  wire cmd_push_block;
  wire cmd_push_block0;
  wire [27:0]in;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire m_axi_wready;
  wire out;
  wire p_251_in;
  wire pop_si_data;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire s_ready_i_reg;
  wire sr_awvalid;
  wire wrap_buffer_available;
  wire wrap_buffer_available_reg;
  wire wstrb_wrap_buffer_1;
  wire wstrb_wrap_buffer_2;
  wire wstrb_wrap_buffer_3;
  wire wstrb_wrap_buffer_4;
  wire wstrb_wrap_buffer_5;
  wire wstrb_wrap_buffer_6;
  wire wstrb_wrap_buffer_7;

  bd_1_generic_baseblocks_v2_1_0_command_fifo \GEN_CMD_QUEUE.cmd_queue 
       (.\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ),
        .D(D),
        .E(E),
        .Q(Q),
        .SR(SR),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19]_0 (\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19] ),
        .\USE_REGISTER.M_AXI_WVALID_q_reg (\USE_REGISTER.M_AXI_WVALID_q_reg ),
        .\USE_REGISTER.M_AXI_WVALID_q_reg_0 (\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .\USE_REGISTER.M_AXI_WVALID_q_reg_1 (\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .\USE_RTL_CURR_WORD.current_word_q_reg[2] (\USE_RTL_CURR_WORD.current_word_q_reg[2] ),
        .\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 (\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 ),
        .\USE_RTL_CURR_WORD.current_word_q_reg[2]_1 (\USE_RTL_CURR_WORD.current_word_q_reg[2]_1 ),
        .\USE_RTL_CURR_WORD.first_word_q (\USE_RTL_CURR_WORD.first_word_q ),
        .\USE_RTL_CURR_WORD.pre_next_word_q_reg[1] (\USE_RTL_CURR_WORD.pre_next_word_q_reg[1] ),
        .\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] (\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] ),
        .\USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 (\USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ),
        .\USE_RTL_LENGTH.first_mi_word_q_reg (p_251_in),
        .\USE_RTL_LENGTH.length_counter_q_reg[0] (\USE_RTL_LENGTH.length_counter_q_reg[0] ),
        .\USE_RTL_LENGTH.length_counter_q_reg[2] (\USE_RTL_LENGTH.length_counter_q_reg[2] ),
        .\USE_RTL_LENGTH.length_counter_q_reg[3] (\USE_RTL_LENGTH.length_counter_q_reg[3] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_0 (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_0 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] (\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] (\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] ),
        .clk(clk),
        .cmd_push_block(cmd_push_block),
        .cmd_push_block0(cmd_push_block0),
        .in(in),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_wready(m_axi_wready),
        .out(out),
        .pop_si_data(pop_si_data),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .s_ready_i_reg(s_ready_i_reg),
        .sr_awvalid(sr_awvalid),
        .wrap_buffer_available(wrap_buffer_available),
        .wrap_buffer_available_reg(\USE_WRITE.wr_cmd_valid ),
        .wrap_buffer_available_reg_0(wrap_buffer_available_reg),
        .wstrb_wrap_buffer_1(wstrb_wrap_buffer_1),
        .wstrb_wrap_buffer_2(wstrb_wrap_buffer_2),
        .wstrb_wrap_buffer_3(wstrb_wrap_buffer_3),
        .wstrb_wrap_buffer_4(wstrb_wrap_buffer_4),
        .wstrb_wrap_buffer_5(wstrb_wrap_buffer_5),
        .wstrb_wrap_buffer_6(wstrb_wrap_buffer_6),
        .wstrb_wrap_buffer_7(wstrb_wrap_buffer_7));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    cmd_push_block_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(cmd_push_block0),
        .Q(cmd_push_block),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_a_upsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_a_upsizer__parameterized0
   (\USE_READ.rd_cmd_valid ,
    E,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ,
    \skid_buffer_reg[0] ,
    Q,
    pop_mi_data,
    \USE_RTL_LENGTH.first_mi_word_q_reg ,
    first_word_reg,
    D,
    \current_word_1_reg[2] ,
    s_axi_rvalid,
    \M_AXI_RDATA_I_reg[63] ,
    s_ready_i_reg,
    m_axi_arvalid,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    clk,
    wrap_buffer_available,
    \USE_RTL_LENGTH.length_counter_q_reg[7] ,
    use_wrap_buffer,
    first_word,
    \current_word_1_reg[2]_0 ,
    mr_rvalid,
    s_axi_rready,
    wrap_buffer_available_reg,
    sr_arvalid,
    wrap_buffer_available_reg_0,
    \pre_next_word_1_reg[2] ,
    \pre_next_word_1_reg[1] ,
    \pre_next_word_1_reg[2]_0 ,
    \USE_RTL_LENGTH.first_mi_word_q ,
    m_axi_arready,
    out,
    in);
  output \USE_READ.rd_cmd_valid ;
  output [0:0]E;
  output \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ;
  output \skid_buffer_reg[0] ;
  output [12:0]Q;
  output pop_mi_data;
  output \USE_RTL_LENGTH.first_mi_word_q_reg ;
  output first_word_reg;
  output [2:0]D;
  output [2:0]\current_word_1_reg[2] ;
  output s_axi_rvalid;
  output [0:0]\M_AXI_RDATA_I_reg[63] ;
  output s_ready_i_reg;
  output m_axi_arvalid;
  input \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  input clk;
  input wrap_buffer_available;
  input \USE_RTL_LENGTH.length_counter_q_reg[7] ;
  input use_wrap_buffer;
  input first_word;
  input [2:0]\current_word_1_reg[2]_0 ;
  input mr_rvalid;
  input s_axi_rready;
  input wrap_buffer_available_reg;
  input sr_arvalid;
  input wrap_buffer_available_reg_0;
  input \pre_next_word_1_reg[2] ;
  input \pre_next_word_1_reg[1] ;
  input [2:0]\pre_next_word_1_reg[2]_0 ;
  input \USE_RTL_LENGTH.first_mi_word_q ;
  input m_axi_arready;
  input out;
  input [27:0]in;

  wire \<const1> ;
  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire [2:0]D;
  wire [0:0]E;
  wire [0:0]\M_AXI_RDATA_I_reg[63] ;
  wire [12:0]Q;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ;
  wire \USE_READ.rd_cmd_valid ;
  wire \USE_RTL_LENGTH.first_mi_word_q ;
  wire \USE_RTL_LENGTH.first_mi_word_q_reg ;
  wire \USE_RTL_LENGTH.length_counter_q_reg[7] ;
  wire clk;
  wire cmd_push_block;
  wire cmd_push_block0;
  wire [2:0]\current_word_1_reg[2] ;
  wire [2:0]\current_word_1_reg[2]_0 ;
  wire first_word;
  wire first_word_reg;
  wire [27:0]in;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire mr_rvalid;
  wire out;
  wire pop_mi_data;
  wire \pre_next_word_1_reg[1] ;
  wire \pre_next_word_1_reg[2] ;
  wire [2:0]\pre_next_word_1_reg[2]_0 ;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire s_ready_i_reg;
  wire \skid_buffer_reg[0] ;
  wire sr_arvalid;
  wire use_wrap_buffer;
  wire wrap_buffer_available;
  wire wrap_buffer_available_reg;
  wire wrap_buffer_available_reg_0;

  bd_1_generic_baseblocks_v2_1_0_command_fifo_4 \GEN_CMD_QUEUE.cmd_queue 
       (.\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ),
        .D(D),
        .E(E),
        .\M_AXI_RDATA_I_reg[63] (\USE_READ.rd_cmd_valid ),
        .\M_AXI_RDATA_I_reg[63]_0 (\M_AXI_RDATA_I_reg[63] ),
        .Q(Q),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29]_0 (\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ),
        .\USE_RTL_LENGTH.first_mi_word_q (\USE_RTL_LENGTH.first_mi_word_q ),
        .\USE_RTL_LENGTH.first_mi_word_q_reg (\USE_RTL_LENGTH.first_mi_word_q_reg ),
        .\USE_RTL_LENGTH.length_counter_q_reg[7] (\USE_RTL_LENGTH.length_counter_q_reg[7] ),
        .clk(clk),
        .cmd_push_block(cmd_push_block),
        .cmd_push_block0(cmd_push_block0),
        .\current_word_1_reg[2] (\current_word_1_reg[2] ),
        .\current_word_1_reg[2]_0 (\current_word_1_reg[2]_0 ),
        .first_word(first_word),
        .first_word_reg(first_word_reg),
        .in(in),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .mr_rvalid(mr_rvalid),
        .out(out),
        .pop_mi_data(pop_mi_data),
        .\pre_next_word_1_reg[1] (\pre_next_word_1_reg[1] ),
        .\pre_next_word_1_reg[2] (\pre_next_word_1_reg[2] ),
        .\pre_next_word_1_reg[2]_0 (\pre_next_word_1_reg[2]_0 ),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid),
        .s_ready_i_reg(s_ready_i_reg),
        .\skid_buffer_reg[0] (\skid_buffer_reg[0] ),
        .sr_arvalid(sr_arvalid),
        .use_wrap_buffer(use_wrap_buffer),
        .wrap_buffer_available(wrap_buffer_available),
        .wrap_buffer_available_reg(wrap_buffer_available_reg),
        .wrap_buffer_available_reg_0(wrap_buffer_available_reg_0));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    cmd_push_block_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(cmd_push_block0),
        .Q(cmd_push_block),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_axi_downsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_axi_downsizer
   (s_axi_rlast,
    \S_AXI_AREGION_Q_reg[0] ,
    s_axi_bid,
    \S_AXI_AREGION_Q_reg[0]_0 ,
    cmd_push_block_reg,
    s_axi_rresp,
    s_axi_rdata,
    m_axi_rready,
    s_axi_bresp,
    din,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    first_word_reg,
    \m_payload_i_reg[37] ,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    s_axi_bvalid,
    m_axi_bready,
    m_axi_awvalid,
    m_axi_awaddr,
    m_axi_wvalid,
    s_axi_wready,
    \skid_buffer_reg[67] ,
    s_axi_rvalid,
    m_axi_araddr,
    m_axi_awlock,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_arlock,
    m_axi_awburst,
    m_axi_arburst,
    s_axi_awsize,
    s_axi_arsize,
    s_axi_awlen,
    s_axi_arlen,
    m_axi_rlast,
    s_axi_awvalid,
    out,
    m_axi_awready,
    s_axi_awaddr,
    s_axi_arvalid,
    m_axi_arready,
    s_axi_araddr,
    m_axi_rvalid,
    s_axi_rready,
    m_axi_rresp,
    m_axi_rdata,
    s_axi_awburst,
    s_axi_arburst,
    CLK,
    s_axi_awid,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_arid,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    m_axi_bvalid,
    s_axi_bready,
    s_axi_wvalid,
    m_axi_wready,
    m_axi_bresp,
    s_axi_wdata,
    s_axi_wstrb);
  output s_axi_rlast;
  output \S_AXI_AREGION_Q_reg[0] ;
  output [0:0]s_axi_bid;
  output \S_AXI_AREGION_Q_reg[0]_0 ;
  output cmd_push_block_reg;
  output [1:0]s_axi_rresp;
  output [63:0]s_axi_rdata;
  output m_axi_rready;
  output [1:0]s_axi_bresp;
  output [10:0]din;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awregion;
  output [3:0]m_axi_awqos;
  output first_word_reg;
  output [10:0]\m_payload_i_reg[37] ;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arregion;
  output [3:0]m_axi_arqos;
  output s_axi_bvalid;
  output m_axi_bready;
  output m_axi_awvalid;
  output [31:0]m_axi_awaddr;
  output m_axi_wvalid;
  output s_axi_wready;
  output \skid_buffer_reg[67] ;
  output s_axi_rvalid;
  output [31:0]m_axi_araddr;
  output [0:0]m_axi_awlock;
  output [31:0]m_axi_wdata;
  output [3:0]m_axi_wstrb;
  output [0:0]m_axi_arlock;
  output [1:0]m_axi_awburst;
  output [1:0]m_axi_arburst;
  input [2:0]s_axi_awsize;
  input [2:0]s_axi_arsize;
  input [7:0]s_axi_awlen;
  input [7:0]s_axi_arlen;
  input m_axi_rlast;
  input s_axi_awvalid;
  input out;
  input m_axi_awready;
  input [31:0]s_axi_awaddr;
  input s_axi_arvalid;
  input m_axi_arready;
  input [31:0]s_axi_araddr;
  input m_axi_rvalid;
  input s_axi_rready;
  input [1:0]m_axi_rresp;
  input [31:0]m_axi_rdata;
  input [1:0]s_axi_awburst;
  input [1:0]s_axi_arburst;
  input CLK;
  input [0:0]s_axi_awid;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awregion;
  input [3:0]s_axi_awqos;
  input [0:0]s_axi_arid;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arregion;
  input [3:0]s_axi_arqos;
  input m_axi_bvalid;
  input s_axi_bready;
  input s_axi_wvalid;
  input m_axi_wready;
  input [1:0]m_axi_bresp;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;

  wire CLK;
  wire \S_AXI_AREGION_Q_reg[0] ;
  wire \S_AXI_AREGION_Q_reg[0]_0 ;
  wire S_AXI_RDATA_II;
  wire \USE_B_CHANNEL.cmd_b_queue/inst/empty ;
  wire [2:0]\USE_READ.rd_cmd_first_word ;
  wire \USE_READ.rd_cmd_fix ;
  wire [7:0]\USE_READ.rd_cmd_length ;
  wire \USE_READ.rd_cmd_mirror ;
  wire [2:0]\USE_READ.rd_cmd_offset ;
  wire [2:0]\USE_READ.rd_cmd_size ;
  wire \USE_READ.read_addr_inst_n_36 ;
  wire \USE_READ.read_addr_inst_n_47 ;
  wire \USE_READ.read_data_inst_n_67 ;
  wire \USE_READ.read_data_inst_n_68 ;
  wire \USE_READ.read_data_inst_n_69 ;
  wire \USE_READ.read_data_inst_n_70 ;
  wire \USE_READ.read_data_inst_n_71 ;
  wire \USE_WRITE.wr_cmd_b_ready ;
  wire [7:0]\USE_WRITE.wr_cmd_b_repeat ;
  wire \USE_WRITE.wr_cmd_b_split ;
  wire [2:0]\USE_WRITE.wr_cmd_first_word ;
  wire \USE_WRITE.wr_cmd_fix ;
  wire [7:0]\USE_WRITE.wr_cmd_length ;
  wire [2:0]\USE_WRITE.wr_cmd_offset ;
  wire \USE_WRITE.write_addr_inst_n_10 ;
  wire \USE_WRITE.write_addr_inst_n_86 ;
  wire \USE_WRITE.write_data_inst_n_37 ;
  wire \USE_WRITE.write_data_inst_n_38 ;
  wire \USE_WRITE.write_data_inst_n_39 ;
  wire [1:0]areset_d;
  wire cmd_push_block_reg;
  wire [2:0]cmd_size_ii;
  wire [2:0]cmd_size_ii_1;
  wire [10:0]din;
  wire first_word;
  wire first_word_reg;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [31:0]m_axi_wdata;
  wire m_axi_wready;
  wire [3:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire [10:0]\m_payload_i_reg[37] ;
  wire out;
  wire [2:0]p_0_in;
  wire [2:0]p_0_in_0;
  wire p_2_in;
  wire p_2_out;
  wire p_4_out;
  wire pop_mi_data;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [0:0]s_axi_arid;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [0:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire [0:0]s_axi_bid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [63:0]s_axi_rdata;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [63:0]s_axi_wdata;
  wire s_axi_wready;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire \skid_buffer_reg[67] ;

  bd_1_axi_dwidth_converter_v2_1_15_a_downsizer__parameterized0 \USE_READ.read_addr_inst 
       (.CLK(CLK),
        .D(p_0_in),
        .E(\S_AXI_AREGION_Q_reg[0]_0 ),
        .SR(\USE_WRITE.write_addr_inst_n_10 ),
        .\S_AXI_RRESP_ACC_reg[1] (\USE_READ.read_addr_inst_n_47 ),
        .\WORD_LANE[0].S_AXI_RDATA_II_reg[31] (p_4_out),
        .\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 (S_AXI_RDATA_II),
        .\WORD_LANE[1].S_AXI_RDATA_II_reg[63] (p_2_out),
        .areset_d(areset_d),
        .\areset_d_reg[0] (\USE_WRITE.write_addr_inst_n_86 ),
        .cmd_push_block_reg_0(cmd_push_block_reg),
        .command_ongoing_reg_0(\USE_READ.read_addr_inst_n_36 ),
        .\current_word_1_reg[0] (\USE_READ.read_data_inst_n_70 ),
        .\current_word_1_reg[1] (\USE_READ.read_data_inst_n_71 ),
        .dout({\USE_READ.rd_cmd_fix ,\USE_READ.rd_cmd_mirror ,\USE_READ.rd_cmd_first_word ,\USE_READ.rd_cmd_offset ,cmd_size_ii,\USE_READ.rd_cmd_length ,\USE_READ.rd_cmd_size }),
        .first_mi_word_reg(pop_mi_data),
        .first_word(first_word),
        .\goreg_dm.dout_i_reg[12] (\USE_READ.read_data_inst_n_69 ),
        .\goreg_dm.dout_i_reg[19] (\USE_READ.read_data_inst_n_67 ),
        .\goreg_dm.dout_i_reg[9] (\USE_READ.read_data_inst_n_68 ),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arcache(m_axi_arcache),
        .m_axi_arlock(m_axi_arlock),
        .m_axi_arprot(m_axi_arprot),
        .m_axi_arqos(m_axi_arqos),
        .m_axi_arready(m_axi_arready),
        .m_axi_arregion(m_axi_arregion),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rvalid(m_axi_rvalid),
        .\m_payload_i_reg[37] (\m_payload_i_reg[37] ),
        .out(out),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arburst(s_axi_arburst),
        .s_axi_arcache(s_axi_arcache),
        .s_axi_arid(s_axi_arid),
        .s_axi_arlen(s_axi_arlen),
        .s_axi_arlock(s_axi_arlock),
        .s_axi_arprot(s_axi_arprot),
        .s_axi_arqos(s_axi_arqos),
        .s_axi_arregion(s_axi_arregion),
        .s_axi_arsize(s_axi_arsize),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid),
        .\skid_buffer_reg[67] (\skid_buffer_reg[67] ));
  bd_1_axi_dwidth_converter_v2_1_15_r_downsizer \USE_READ.read_data_inst 
       (.\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N (S_AXI_RDATA_II),
        .CLK(CLK),
        .D(p_0_in),
        .E(pop_mi_data),
        .SR(\USE_WRITE.write_addr_inst_n_10 ),
        .\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 (\USE_READ.read_data_inst_n_68 ),
        .\current_word_1_reg[1]_0 (\USE_READ.read_data_inst_n_70 ),
        .\current_word_1_reg[1]_1 (\USE_READ.read_data_inst_n_71 ),
        .\current_word_1_reg[2]_0 (\USE_READ.read_data_inst_n_69 ),
        .dout({\USE_READ.rd_cmd_fix ,\USE_READ.rd_cmd_mirror ,\USE_READ.rd_cmd_first_word ,\USE_READ.rd_cmd_offset ,cmd_size_ii,\USE_READ.rd_cmd_length ,\USE_READ.rd_cmd_size }),
        .first_word(first_word),
        .\goreg_dm.dout_i_reg[0] (\USE_READ.read_addr_inst_n_47 ),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rresp(s_axi_rresp),
        .s_ready_i_reg(p_4_out),
        .s_ready_i_reg_0(p_2_out),
        .\skid_buffer_reg[31] (\USE_READ.read_data_inst_n_67 ));
  bd_1_axi_dwidth_converter_v2_1_15_b_downsizer \USE_WRITE.USE_SPLIT.write_resp_inst 
       (.CLK(CLK),
        .SR(\USE_WRITE.write_addr_inst_n_10 ),
        .\USE_WRITE.wr_cmd_b_ready (\USE_WRITE.wr_cmd_b_ready ),
        .dout({\USE_WRITE.wr_cmd_b_split ,\USE_WRITE.wr_cmd_b_repeat }),
        .empty(\USE_B_CHANNEL.cmd_b_queue/inst/empty ),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid));
  bd_1_axi_dwidth_converter_v2_1_15_a_downsizer \USE_WRITE.write_addr_inst 
       (.CLK(CLK),
        .D(p_0_in_0),
        .E(\S_AXI_AREGION_Q_reg[0] ),
        .SR(\USE_WRITE.write_addr_inst_n_10 ),
        .S_AXI_AREADY_I_reg_0(\USE_WRITE.write_addr_inst_n_86 ),
        .S_AXI_AREADY_I_reg_1(\S_AXI_AREGION_Q_reg[0]_0 ),
        .\USE_WRITE.wr_cmd_b_ready (\USE_WRITE.wr_cmd_b_ready ),
        .areset_d(areset_d),
        .\current_word_1_reg[0] (\USE_WRITE.write_data_inst_n_38 ),
        .\current_word_1_reg[1] (\USE_WRITE.write_data_inst_n_37 ),
        .din(din),
        .dout({\USE_WRITE.wr_cmd_b_split ,\USE_WRITE.wr_cmd_b_repeat }),
        .empty(\USE_B_CHANNEL.cmd_b_queue/inst/empty ),
        .first_word_reg(p_2_in),
        .\goreg_dm.dout_i_reg[13] (\USE_WRITE.write_data_inst_n_39 ),
        .\goreg_dm.dout_i_reg[9] (first_word_reg),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awcache(m_axi_awcache),
        .m_axi_awlock(m_axi_awlock),
        .m_axi_awprot(m_axi_awprot),
        .m_axi_awqos(m_axi_awqos),
        .m_axi_awready(m_axi_awready),
        .m_axi_awregion(m_axi_awregion),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .\m_payload_i_reg[72] ({\USE_WRITE.wr_cmd_fix ,\USE_WRITE.wr_cmd_first_word ,\USE_WRITE.wr_cmd_offset ,cmd_size_ii_1,\USE_WRITE.wr_cmd_length }),
        .out(out),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awburst(s_axi_awburst),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awid(s_axi_awid),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awlock(s_axi_awlock),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awregion(s_axi_awregion),
        .s_axi_awsize(s_axi_awsize),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bid(s_axi_bid),
        .s_axi_wready(s_axi_wready),
        .s_axi_wvalid(s_axi_wvalid),
        .s_ready_i_reg(\USE_READ.read_addr_inst_n_36 ));
  bd_1_axi_dwidth_converter_v2_1_15_w_downsizer \USE_WRITE.write_data_inst 
       (.CLK(CLK),
        .D(p_0_in_0),
        .E(p_2_in),
        .SR(\USE_WRITE.write_addr_inst_n_10 ),
        .\current_word_1_reg[1]_0 (\USE_WRITE.write_data_inst_n_37 ),
        .\current_word_1_reg[1]_1 (\USE_WRITE.write_data_inst_n_38 ),
        .\current_word_1_reg[2]_0 (\USE_WRITE.write_data_inst_n_39 ),
        .first_word_reg_0(first_word_reg),
        .\goreg_dm.dout_i_reg[25] ({\USE_WRITE.wr_cmd_fix ,\USE_WRITE.wr_cmd_first_word ,\USE_WRITE.wr_cmd_offset ,cmd_size_ii_1,\USE_WRITE.wr_cmd_length }),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wstrb(m_axi_wstrb),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wstrb(s_axi_wstrb));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_axi_upsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_axi_upsizer
   (m_axi_wstrb,
    \USE_REGISTER.M_AXI_WLAST_q_reg ,
    m_axi_awlen,
    m_axi_awburst,
    m_axi_awaddr,
    m_axi_arburst,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_wdata,
    Q,
    \skid_buffer_reg[66] ,
    first_word_reg,
    UNCONN_OUT,
    s_axi_awready,
    s_axi_arready,
    s_axi_wready,
    m_axi_awvalid,
    s_axi_rdata,
    s_axi_rvalid,
    m_axi_arvalid,
    s_axi_rresp,
    m_axi_awsize,
    m_axi_arsize,
    m_axi_wlast,
    m_axi_wready,
    s_axi_wlast,
    out,
    clk,
    s_axi_wdata,
    D,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    \m_payload_i_reg[61] ,
    s_axi_awvalid,
    s_axi_arvalid,
    s_axi_wvalid,
    s_axi_wstrb,
    m_axi_awready,
    s_axi_rready,
    m_axi_arready,
    m_axi_rvalid);
  output [7:0]m_axi_wstrb;
  output \USE_REGISTER.M_AXI_WLAST_q_reg ;
  output [7:0]m_axi_awlen;
  output [1:0]m_axi_awburst;
  output [31:0]m_axi_awaddr;
  output [1:0]m_axi_arburst;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [63:0]m_axi_wdata;
  output [15:0]Q;
  output \skid_buffer_reg[66] ;
  output first_word_reg;
  output [15:0]UNCONN_OUT;
  output s_axi_awready;
  output s_axi_arready;
  output s_axi_wready;
  output m_axi_awvalid;
  output [31:0]s_axi_rdata;
  output s_axi_rvalid;
  output m_axi_arvalid;
  output [1:0]s_axi_rresp;
  output [2:0]m_axi_awsize;
  output [2:0]m_axi_arsize;
  output m_axi_wlast;
  input m_axi_wready;
  input s_axi_wlast;
  input out;
  input clk;
  input [31:0]s_axi_wdata;
  input [60:0]D;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;
  input [60:0]\m_payload_i_reg[61] ;
  input s_axi_awvalid;
  input s_axi_arvalid;
  input s_axi_wvalid;
  input [3:0]s_axi_wstrb;
  input m_axi_awready;
  input s_axi_rready;
  input m_axi_arready;
  input m_axi_rvalid;

  wire [60:0]D;
  wire M_AXI_RLAST;
  wire [15:0]Q;
  wire [15:0]UNCONN_OUT;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_10 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_11 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_12 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_13 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_14 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_15 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_16 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_17 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_18 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_19 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_20 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_21 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_22 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_23 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_24 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_25 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_26 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_27 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_28 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_29 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_30 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_31 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_32 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_33 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_34 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_35 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_36 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_37 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_38 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_39 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_40 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_41 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_42 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_43 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_44 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_45 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_46 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_47 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_48 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_49 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_5 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_50 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_51 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_52 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_53 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_54 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_55 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_56 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_57 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_58 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_59 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_6 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_60 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_61 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_62 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_63 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_64 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_65 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_66 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_67 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_68 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_7 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_8 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_9 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_38 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_39 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_43 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_47 ;
  wire \USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_48 ;
  wire [2:2]\USE_READ.rd_cmd_first_word ;
  wire \USE_READ.rd_cmd_fix ;
  wire [2:1]\USE_READ.rd_cmd_next_word ;
  wire \USE_READ.rd_cmd_valid ;
  wire \USE_READ.read_addr_inst_n_10 ;
  wire \USE_READ.read_addr_inst_n_11 ;
  wire \USE_READ.read_addr_inst_n_12 ;
  wire \USE_READ.read_addr_inst_n_13 ;
  wire \USE_READ.read_addr_inst_n_14 ;
  wire \USE_READ.read_addr_inst_n_15 ;
  wire \USE_READ.read_addr_inst_n_16 ;
  wire \USE_READ.read_addr_inst_n_18 ;
  wire \USE_READ.read_addr_inst_n_19 ;
  wire \USE_READ.read_addr_inst_n_2 ;
  wire \USE_READ.read_addr_inst_n_28 ;
  wire \USE_READ.read_addr_inst_n_3 ;
  wire \USE_READ.read_addr_inst_n_8 ;
  wire \USE_READ.read_addr_inst_n_9 ;
  wire \USE_REGISTER.M_AXI_WLAST_q_reg ;
  wire [2:0]\USE_RTL_CURR_WORD.current_word_q ;
  wire \USE_RTL_CURR_WORD.first_word_q ;
  wire [2:0]\USE_RTL_CURR_WORD.pre_next_word_q ;
  wire \USE_RTL_LENGTH.first_mi_word_q ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_1 ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_2 ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_21 ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_22 ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_23 ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_24 ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_25 ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_26 ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_30 ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_34 ;
  wire [2:2]\USE_WRITE.wr_cmd_first_word ;
  wire \USE_WRITE.wr_cmd_fix ;
  wire \USE_WRITE.wr_cmd_modified ;
  wire [2:1]\USE_WRITE.wr_cmd_next_word ;
  wire \USE_WRITE.wr_cmd_packed_wrap ;
  wire \USE_WRITE.wr_cmd_valid ;
  wire \USE_WRITE.write_addr_inst_n_12 ;
  wire \USE_WRITE.write_addr_inst_n_13 ;
  wire \USE_WRITE.write_addr_inst_n_14 ;
  wire \USE_WRITE.write_addr_inst_n_15 ;
  wire \USE_WRITE.write_addr_inst_n_16 ;
  wire \USE_WRITE.write_addr_inst_n_17 ;
  wire \USE_WRITE.write_addr_inst_n_18 ;
  wire \USE_WRITE.write_addr_inst_n_19 ;
  wire \USE_WRITE.write_addr_inst_n_2 ;
  wire \USE_WRITE.write_addr_inst_n_20 ;
  wire \USE_WRITE.write_addr_inst_n_21 ;
  wire \USE_WRITE.write_addr_inst_n_22 ;
  wire \USE_WRITE.write_addr_inst_n_23 ;
  wire \USE_WRITE.write_addr_inst_n_24 ;
  wire \USE_WRITE.write_addr_inst_n_25 ;
  wire \USE_WRITE.write_addr_inst_n_26 ;
  wire \USE_WRITE.write_addr_inst_n_27 ;
  wire \USE_WRITE.write_addr_inst_n_28 ;
  wire \USE_WRITE.write_addr_inst_n_29 ;
  wire \USE_WRITE.write_addr_inst_n_3 ;
  wire \USE_WRITE.write_addr_inst_n_30 ;
  wire \USE_WRITE.write_addr_inst_n_31 ;
  wire \USE_WRITE.write_addr_inst_n_32 ;
  wire \USE_WRITE.write_addr_inst_n_33 ;
  wire \USE_WRITE.write_addr_inst_n_34 ;
  wire \USE_WRITE.write_addr_inst_n_35 ;
  wire \USE_WRITE.write_addr_inst_n_36 ;
  wire \USE_WRITE.write_addr_inst_n_38 ;
  wire \USE_WRITE.write_addr_inst_n_39 ;
  wire \USE_WRITE.write_addr_inst_n_40 ;
  wire \USE_WRITE.write_addr_inst_n_41 ;
  wire \USE_WRITE.write_addr_inst_n_42 ;
  wire \USE_WRITE.write_addr_inst_n_43 ;
  wire \USE_WRITE.write_addr_inst_n_44 ;
  wire \USE_WRITE.write_addr_inst_n_45 ;
  wire \USE_WRITE.write_addr_inst_n_46 ;
  wire \USE_WRITE.write_addr_inst_n_54 ;
  wire \USE_WRITE.write_addr_inst_n_61 ;
  wire \USE_WRITE.write_addr_inst_n_63 ;
  wire clk;
  wire cmd_complete_wrap_i;
  wire cmd_complete_wrap_i_6;
  wire [2:0]cmd_first_word_i;
  wire [2:0]cmd_first_word_i_4;
  wire cmd_fix_i;
  wire cmd_fix_i_8;
  wire [2:2]cmd_last_word;
  wire cmd_modified_i;
  wire cmd_modified_i_7;
  wire cmd_packed_wrap_i;
  wire cmd_packed_wrap_i_5;
  wire [2:0]current_word_1;
  wire first_word;
  wire first_word_reg;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [7:0]m_axi_arlen;
  wire m_axi_arready;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [7:0]m_axi_awlen;
  wire m_axi_awready;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire [63:0]m_axi_rdata;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [63:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire [60:0]\m_payload_i_reg[61] ;
  wire [1:0]mr_rresp;
  wire mr_rvalid;
  wire [2:0]next_word;
  wire [2:0]next_word_1;
  wire out;
  wire p_102_out;
  wire p_131_out;
  wire p_15_in;
  wire p_160_out;
  wire p_189_out;
  wire [22:16]p_1_out;
  wire [22:17]p_1_out_3;
  wire p_222_out;
  wire p_251_in;
  wire p_41_out;
  wire p_71_out;
  wire p_7_in;
  wire pop_mi_data;
  wire pop_si_data;
  wire [2:0]pre_next_word;
  wire [2:0]pre_next_word_1;
  wire [2:0]pre_next_word_2;
  wire \r.r_pipe/p_1_in ;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire [31:0]s_axi_rdata;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire si_register_slice_inst_n_0;
  wire si_register_slice_inst_n_1;
  wire si_register_slice_inst_n_13;
  wire si_register_slice_inst_n_14;
  wire si_register_slice_inst_n_17;
  wire si_register_slice_inst_n_18;
  wire si_register_slice_inst_n_19;
  wire si_register_slice_inst_n_20;
  wire si_register_slice_inst_n_21;
  wire si_register_slice_inst_n_22;
  wire si_register_slice_inst_n_23;
  wire si_register_slice_inst_n_80;
  wire si_register_slice_inst_n_81;
  wire si_register_slice_inst_n_82;
  wire si_register_slice_inst_n_83;
  wire si_register_slice_inst_n_84;
  wire si_register_slice_inst_n_85;
  wire \skid_buffer_reg[66] ;
  wire sr_arvalid;
  wire sr_awvalid;
  wire use_wrap_buffer;
  wire wrap_buffer_available;
  wire wrap_buffer_available_0;
  wire wstrb_wrap_buffer_1;
  wire wstrb_wrap_buffer_2;
  wire wstrb_wrap_buffer_3;
  wire wstrb_wrap_buffer_4;
  wire wstrb_wrap_buffer_5;
  wire wstrb_wrap_buffer_6;
  wire wstrb_wrap_buffer_7;

  bd_1_axi_register_slice_v2_1_15_axi_register_slice \USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst 
       (.E(\r.r_pipe/p_1_in ),
        .Q({M_AXI_RLAST,mr_rresp,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_5 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_6 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_7 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_8 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_9 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_10 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_11 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_12 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_13 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_14 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_15 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_16 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_17 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_18 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_19 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_20 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_21 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_22 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_23 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_24 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_25 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_26 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_27 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_28 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_29 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_30 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_31 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_32 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_33 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_34 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_35 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_36 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_37 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_38 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_39 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_40 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_41 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_42 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_43 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_44 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_45 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_46 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_47 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_48 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_49 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_50 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_51 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_52 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_53 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_54 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_55 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_56 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_57 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_58 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_59 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_60 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_61 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_62 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_63 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_64 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_65 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_66 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_67 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_68 }),
        .\USE_READ.rd_cmd_valid (\USE_READ.rd_cmd_valid ),
        .\aresetn_d_reg[0] (si_register_slice_inst_n_1),
        .\aresetn_d_reg[1] (si_register_slice_inst_n_0),
        .clk(clk),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .mr_rvalid(mr_rvalid),
        .s_ready_i_reg(\USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_38 ),
        .\skid_buffer_reg[66] (\skid_buffer_reg[66] ));
  bd_1_axi_dwidth_converter_v2_1_15_r_upsizer \USE_READ.gen_non_fifo_r_upsizer.read_data_inst 
       (.\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_1 ),
        .D(pre_next_word),
        .E(p_15_in),
        .Q({M_AXI_RLAST,mr_rresp,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_5 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_6 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_7 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_8 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_9 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_10 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_11 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_12 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_13 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_14 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_15 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_16 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_17 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_18 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_19 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_20 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_21 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_22 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_23 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_24 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_25 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_26 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_27 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_28 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_29 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_30 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_31 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_32 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_33 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_34 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_35 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_36 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_37 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_38 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_39 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_40 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_41 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_42 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_43 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_44 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_45 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_46 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_47 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_48 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_49 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_50 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_51 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_52 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_53 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_54 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_55 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_56 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_57 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_58 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_59 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_60 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_61 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_62 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_63 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_64 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_65 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_66 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_67 ,\USE_READ.gen_non_fifo_r_upsizer.mi_register_slice_inst_n_68 }),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] (next_word),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] (\USE_READ.read_addr_inst_n_3 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] (\USE_READ.read_addr_inst_n_18 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ({\USE_READ.rd_cmd_fix ,\USE_READ.rd_cmd_first_word ,\USE_READ.rd_cmd_next_word ,\USE_READ.read_addr_inst_n_8 ,\USE_READ.read_addr_inst_n_9 ,\USE_READ.read_addr_inst_n_10 ,\USE_READ.read_addr_inst_n_11 ,\USE_READ.read_addr_inst_n_12 ,\USE_READ.read_addr_inst_n_13 ,\USE_READ.read_addr_inst_n_14 ,\USE_READ.read_addr_inst_n_15 ,\USE_READ.read_addr_inst_n_16 }),
        .\USE_READ.rd_cmd_valid (\USE_READ.rd_cmd_valid ),
        .\USE_RTL_ADDR.addr_q_reg[4] (\USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_48 ),
        .\USE_RTL_LENGTH.first_mi_word_q (\USE_RTL_LENGTH.first_mi_word_q ),
        .clk(clk),
        .\current_word_1_reg[0]_0 (\USE_READ.read_addr_inst_n_19 ),
        .\current_word_1_reg[2]_0 (pre_next_word_1),
        .\current_word_1_reg[2]_1 (\USE_READ.read_addr_inst_n_2 ),
        .first_word(first_word),
        .first_word_reg_0(first_word_reg),
        .first_word_reg_1(current_word_1),
        .\m_payload_i_reg[0] (\r.r_pipe/p_1_in ),
        .m_valid_i_reg(p_7_in),
        .mr_rvalid(mr_rvalid),
        .pop_mi_data(pop_mi_data),
        .\pre_next_word_1_reg[2]_0 (\USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_43 ),
        .\pre_next_word_1_reg[2]_1 (\USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_47 ),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_ready_i_reg(\USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_38 ),
        .use_wrap_buffer(use_wrap_buffer),
        .use_wrap_buffer_reg_0(\USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_39 ),
        .wrap_buffer_available(wrap_buffer_available));
  bd_1_axi_dwidth_converter_v2_1_15_a_upsizer__parameterized0 \USE_READ.read_addr_inst 
       (.\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_1 ),
        .D(pre_next_word),
        .E(p_15_in),
        .\M_AXI_RDATA_I_reg[63] (p_7_in),
        .Q({\USE_READ.rd_cmd_fix ,\USE_READ.rd_cmd_first_word ,\USE_READ.rd_cmd_next_word ,\USE_READ.read_addr_inst_n_8 ,\USE_READ.read_addr_inst_n_9 ,\USE_READ.read_addr_inst_n_10 ,\USE_READ.read_addr_inst_n_11 ,\USE_READ.read_addr_inst_n_12 ,\USE_READ.read_addr_inst_n_13 ,\USE_READ.read_addr_inst_n_14 ,\USE_READ.read_addr_inst_n_15 ,\USE_READ.read_addr_inst_n_16 }),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] (\USE_READ.read_addr_inst_n_2 ),
        .\USE_READ.rd_cmd_valid (\USE_READ.rd_cmd_valid ),
        .\USE_RTL_LENGTH.first_mi_word_q (\USE_RTL_LENGTH.first_mi_word_q ),
        .\USE_RTL_LENGTH.first_mi_word_q_reg (\USE_READ.read_addr_inst_n_18 ),
        .\USE_RTL_LENGTH.length_counter_q_reg[7] (\USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_39 ),
        .clk(clk),
        .\current_word_1_reg[2] (next_word),
        .\current_word_1_reg[2]_0 (current_word_1),
        .first_word(first_word),
        .first_word_reg(\USE_READ.read_addr_inst_n_19 ),
        .in({cmd_fix_i,cmd_modified_i,cmd_complete_wrap_i,cmd_packed_wrap_i,cmd_first_word_i,p_1_out,si_register_slice_inst_n_80,si_register_slice_inst_n_81,si_register_slice_inst_n_82,si_register_slice_inst_n_83,si_register_slice_inst_n_84,si_register_slice_inst_n_85,m_axi_arlen}),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .mr_rvalid(mr_rvalid),
        .out(out),
        .pop_mi_data(pop_mi_data),
        .\pre_next_word_1_reg[1] (\USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_47 ),
        .\pre_next_word_1_reg[2] (\USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_43 ),
        .\pre_next_word_1_reg[2]_0 (pre_next_word_1),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid),
        .s_ready_i_reg(\USE_READ.read_addr_inst_n_28 ),
        .\skid_buffer_reg[0] (\USE_READ.read_addr_inst_n_3 ),
        .sr_arvalid(sr_arvalid),
        .use_wrap_buffer(use_wrap_buffer),
        .wrap_buffer_available(wrap_buffer_available),
        .wrap_buffer_available_reg(first_word_reg),
        .wrap_buffer_available_reg_0(\USE_READ.gen_non_fifo_r_upsizer.read_data_inst_n_48 ));
  bd_1_axi_dwidth_converter_v2_1_15_w_upsizer \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst 
       (.D(pre_next_word_2),
        .E(\USE_WRITE.write_addr_inst_n_46 ),
        .Q({\USE_WRITE.wr_cmd_fix ,\USE_WRITE.wr_cmd_modified ,\USE_WRITE.wr_cmd_packed_wrap ,\USE_WRITE.wr_cmd_first_word ,\USE_WRITE.wr_cmd_next_word ,cmd_last_word,\USE_WRITE.write_addr_inst_n_12 ,\USE_WRITE.write_addr_inst_n_13 ,\USE_WRITE.write_addr_inst_n_14 ,\USE_WRITE.write_addr_inst_n_15 ,\USE_WRITE.write_addr_inst_n_16 ,\USE_WRITE.write_addr_inst_n_17 ,\USE_WRITE.write_addr_inst_n_18 ,\USE_WRITE.write_addr_inst_n_19 }),
        .SR(\USE_WRITE.write_addr_inst_n_2 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] (next_word_1),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16] (\USE_WRITE.write_addr_inst_n_42 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_0 (\USE_WRITE.write_addr_inst_n_43 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_1 (\USE_WRITE.write_addr_inst_n_44 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_2 (\USE_WRITE.write_addr_inst_n_45 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] (\USE_WRITE.write_addr_inst_n_54 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 (\USE_WRITE.write_addr_inst_n_22 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 (\USE_WRITE.write_addr_inst_n_24 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 (\USE_WRITE.write_addr_inst_n_26 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 (\USE_WRITE.write_addr_inst_n_28 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 (\USE_WRITE.write_addr_inst_n_30 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 (\USE_WRITE.write_addr_inst_n_32 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 (\USE_WRITE.write_addr_inst_n_34 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_VALID_Q_reg (\USE_WRITE.write_addr_inst_n_63 ),
        .\USE_REGISTER.M_AXI_WLAST_q_reg_0 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_1 ),
        .\USE_REGISTER.M_AXI_WLAST_q_reg_1 (\USE_REGISTER.M_AXI_WLAST_q_reg ),
        .\USE_REGISTER.M_AXI_WVALID_q_reg_0 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_25 ),
        .\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 (\USE_RTL_CURR_WORD.pre_next_word_q ),
        .\USE_RTL_CURR_WORD.first_word_q (\USE_RTL_CURR_WORD.first_word_q ),
        .\USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_26 ),
        .\USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_1 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_30 ),
        .\USE_RTL_LENGTH.first_mi_word_q_reg_0 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_21 ),
        .\USE_RTL_LENGTH.first_mi_word_q_reg_1 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_23 ),
        .\USE_RTL_LENGTH.first_mi_word_q_reg_2 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_24 ),
        .\USE_RTL_LENGTH.first_mi_word_q_reg_3 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_34 ),
        .\USE_RTL_LENGTH.length_counter_q_reg[2]_0 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_22 ),
        .\USE_WRITE.wr_cmd_valid (\USE_WRITE.wr_cmd_valid ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0]_0 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_2 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7]_0 (\USE_RTL_CURR_WORD.current_word_q ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 (\USE_WRITE.write_addr_inst_n_35 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 (\USE_WRITE.write_addr_inst_n_33 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 (\USE_WRITE.write_addr_inst_n_31 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 (\USE_WRITE.write_addr_inst_n_29 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 (\USE_WRITE.write_addr_inst_n_27 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 (\USE_WRITE.write_addr_inst_n_25 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 (\USE_WRITE.write_addr_inst_n_23 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 (\USE_WRITE.write_addr_inst_n_20 ),
        .clk(clk),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .\m_payload_i_reg[32] (\USE_WRITE.write_addr_inst_n_41 ),
        .\m_payload_i_reg[32]_0 (\USE_WRITE.write_addr_inst_n_36 ),
        .\m_payload_i_reg[33] (\USE_WRITE.write_addr_inst_n_40 ),
        .\m_payload_i_reg[34] (\USE_WRITE.write_addr_inst_n_39 ),
        .\m_payload_i_reg[35] (\USE_WRITE.write_addr_inst_n_38 ),
        .\m_payload_i_reg[36] (\USE_WRITE.write_addr_inst_n_3 ),
        .out(out),
        .p_251_in(p_251_in),
        .pop_si_data(pop_si_data),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wvalid(s_axi_wvalid),
        .wrap_buffer_available(wrap_buffer_available_0),
        .wrap_buffer_available_reg_0(\USE_WRITE.write_addr_inst_n_21 ),
        .wrap_buffer_available_reg_1(p_41_out),
        .wrap_buffer_available_reg_2(p_71_out),
        .wrap_buffer_available_reg_3(p_102_out),
        .wrap_buffer_available_reg_4(p_131_out),
        .wrap_buffer_available_reg_5(p_160_out),
        .wrap_buffer_available_reg_6(p_189_out),
        .wrap_buffer_available_reg_7(p_222_out),
        .wstrb_wrap_buffer_1(wstrb_wrap_buffer_1),
        .wstrb_wrap_buffer_2(wstrb_wrap_buffer_2),
        .wstrb_wrap_buffer_3(wstrb_wrap_buffer_3),
        .wstrb_wrap_buffer_4(wstrb_wrap_buffer_4),
        .wstrb_wrap_buffer_5(wstrb_wrap_buffer_5),
        .wstrb_wrap_buffer_6(wstrb_wrap_buffer_6),
        .wstrb_wrap_buffer_7(wstrb_wrap_buffer_7));
  bd_1_axi_dwidth_converter_v2_1_15_a_upsizer \USE_WRITE.write_addr_inst 
       (.\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_1 ),
        .D(pre_next_word_2),
        .E(\USE_WRITE.write_addr_inst_n_46 ),
        .Q({\USE_WRITE.wr_cmd_fix ,\USE_WRITE.wr_cmd_modified ,\USE_WRITE.wr_cmd_packed_wrap ,\USE_WRITE.wr_cmd_first_word ,\USE_WRITE.wr_cmd_next_word ,cmd_last_word,\USE_WRITE.write_addr_inst_n_12 ,\USE_WRITE.write_addr_inst_n_13 ,\USE_WRITE.write_addr_inst_n_14 ,\USE_WRITE.write_addr_inst_n_15 ,\USE_WRITE.write_addr_inst_n_16 ,\USE_WRITE.write_addr_inst_n_17 ,\USE_WRITE.write_addr_inst_n_18 ,\USE_WRITE.write_addr_inst_n_19 }),
        .SR(\USE_WRITE.write_addr_inst_n_2 ),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19] (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_23 ),
        .\USE_REGISTER.M_AXI_WVALID_q_reg (\USE_WRITE.write_addr_inst_n_63 ),
        .\USE_REGISTER.M_AXI_WVALID_q_reg_0 (\USE_REGISTER.M_AXI_WLAST_q_reg ),
        .\USE_REGISTER.M_AXI_WVALID_q_reg_1 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_21 ),
        .\USE_RTL_CURR_WORD.current_word_q_reg[2] (next_word_1),
        .\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 (\USE_RTL_CURR_WORD.current_word_q ),
        .\USE_RTL_CURR_WORD.current_word_q_reg[2]_1 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_24 ),
        .\USE_RTL_CURR_WORD.first_word_q (\USE_RTL_CURR_WORD.first_word_q ),
        .\USE_RTL_CURR_WORD.pre_next_word_q_reg[1] (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_30 ),
        .\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] (\USE_RTL_CURR_WORD.pre_next_word_q ),
        .\USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_26 ),
        .\USE_RTL_LENGTH.length_counter_q_reg[0] (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_22 ),
        .\USE_RTL_LENGTH.length_counter_q_reg[2] (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_25 ),
        .\USE_RTL_LENGTH.length_counter_q_reg[3] (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_34 ),
        .\USE_WRITE.wr_cmd_valid (\USE_WRITE.wr_cmd_valid ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] (\USE_WRITE.write_addr_inst_n_54 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] (\USE_WRITE.write_addr_inst_n_21 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_0 (\USE_WRITE.write_addr_inst_n_35 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 (\USE_WRITE.write_addr_inst_n_36 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] (\USE_WRITE.write_addr_inst_n_45 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] (p_222_out),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_2 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] (\USE_WRITE.write_addr_inst_n_33 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 (\USE_WRITE.write_addr_inst_n_34 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] (\USE_WRITE.write_addr_inst_n_44 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] (p_189_out),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] (\USE_WRITE.write_addr_inst_n_31 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 (\USE_WRITE.write_addr_inst_n_32 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] (\USE_WRITE.write_addr_inst_n_43 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] (p_160_out),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] (\USE_WRITE.write_addr_inst_n_29 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 (\USE_WRITE.write_addr_inst_n_30 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] (\USE_WRITE.write_addr_inst_n_42 ),
        .\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] (p_131_out),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] (\USE_WRITE.write_addr_inst_n_27 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 (\USE_WRITE.write_addr_inst_n_28 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] (\USE_WRITE.write_addr_inst_n_41 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] (p_102_out),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] (\USE_WRITE.write_addr_inst_n_25 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 (\USE_WRITE.write_addr_inst_n_26 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] (\USE_WRITE.write_addr_inst_n_40 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] (p_71_out),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] (\USE_WRITE.write_addr_inst_n_23 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 (\USE_WRITE.write_addr_inst_n_24 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] (\USE_WRITE.write_addr_inst_n_39 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] (p_41_out),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] (\USE_WRITE.write_addr_inst_n_20 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 (\USE_WRITE.write_addr_inst_n_22 ),
        .\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] (\USE_WRITE.write_addr_inst_n_38 ),
        .clk(clk),
        .in({cmd_fix_i_8,cmd_modified_i_7,cmd_complete_wrap_i_6,cmd_packed_wrap_i_5,cmd_first_word_i_4,p_1_out_3[22:21],si_register_slice_inst_n_13,si_register_slice_inst_n_14,p_1_out_3[18:17],si_register_slice_inst_n_17,si_register_slice_inst_n_18,si_register_slice_inst_n_19,si_register_slice_inst_n_20,si_register_slice_inst_n_21,si_register_slice_inst_n_22,si_register_slice_inst_n_23,m_axi_awlen}),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_wready(m_axi_wready),
        .out(out),
        .p_251_in(p_251_in),
        .pop_si_data(pop_si_data),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .s_ready_i_reg(\USE_WRITE.write_addr_inst_n_61 ),
        .sr_awvalid(sr_awvalid),
        .wrap_buffer_available(wrap_buffer_available_0),
        .wrap_buffer_available_reg(\USE_WRITE.write_addr_inst_n_3 ),
        .wstrb_wrap_buffer_1(wstrb_wrap_buffer_1),
        .wstrb_wrap_buffer_2(wstrb_wrap_buffer_2),
        .wstrb_wrap_buffer_3(wstrb_wrap_buffer_3),
        .wstrb_wrap_buffer_4(wstrb_wrap_buffer_4),
        .wstrb_wrap_buffer_5(wstrb_wrap_buffer_5),
        .wstrb_wrap_buffer_6(wstrb_wrap_buffer_6),
        .wstrb_wrap_buffer_7(wstrb_wrap_buffer_7));
  bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized2 si_register_slice_inst
       (.\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst_n_1 ),
        .D(D),
        .Q(Q),
        .UNCONN_OUT(UNCONN_OUT),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ({cmd_fix_i,cmd_modified_i,cmd_complete_wrap_i,cmd_packed_wrap_i,cmd_first_word_i,p_1_out,si_register_slice_inst_n_80,si_register_slice_inst_n_81,si_register_slice_inst_n_82,si_register_slice_inst_n_83,si_register_slice_inst_n_84,si_register_slice_inst_n_85,m_axi_arlen}),
        .\aresetn_d_reg[1] (si_register_slice_inst_n_1),
        .clk(clk),
        .cmd_push_block_reg(\USE_READ.read_addr_inst_n_28 ),
        .cmd_push_block_reg_0(\USE_WRITE.write_addr_inst_n_61 ),
        .in({cmd_fix_i_8,cmd_modified_i_7,cmd_complete_wrap_i_6,cmd_packed_wrap_i_5,cmd_first_word_i_4,p_1_out_3[22:21],si_register_slice_inst_n_13,si_register_slice_inst_n_14,p_1_out_3[18:17],si_register_slice_inst_n_17,si_register_slice_inst_n_18,si_register_slice_inst_n_19,si_register_slice_inst_n_20,si_register_slice_inst_n_21,si_register_slice_inst_n_22,si_register_slice_inst_n_23,m_axi_awlen}),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arsize(m_axi_arsize),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awsize(m_axi_awsize),
        .\m_payload_i_reg[61] (\m_payload_i_reg[61] ),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_ready_i_reg(si_register_slice_inst_n_0),
        .sr_arvalid(sr_arvalid),
        .sr_awvalid(sr_awvalid));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_b_downsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_b_downsizer
   (\USE_WRITE.wr_cmd_b_ready ,
    s_axi_bvalid,
    m_axi_bready,
    s_axi_bresp,
    SR,
    CLK,
    dout,
    m_axi_bvalid,
    s_axi_bready,
    empty,
    m_axi_bresp);
  output \USE_WRITE.wr_cmd_b_ready ;
  output s_axi_bvalid;
  output m_axi_bready;
  output [1:0]s_axi_bresp;
  input [0:0]SR;
  input CLK;
  input [8:0]dout;
  input m_axi_bvalid;
  input s_axi_bready;
  input empty;
  input [1:0]m_axi_bresp;

  wire CLK;
  wire [0:0]SR;
  wire [1:0]S_AXI_BRESP_ACC;
  wire \USE_WRITE.wr_cmd_b_ready ;
  wire [8:0]dout;
  wire empty;
  wire first_mi_word;
  wire last_word;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [7:0]next_repeat_cnt;
  wire p_1_in;
  wire \repeat_cnt[1]_i_1_n_0 ;
  wire \repeat_cnt[2]_i_2_n_0 ;
  wire \repeat_cnt[3]_i_2_n_0 ;
  wire \repeat_cnt[4]_i_2_n_0 ;
  wire \repeat_cnt[5]_i_2_n_0 ;
  wire \repeat_cnt[6]_i_2_n_0 ;
  wire \repeat_cnt[7]_i_2_n_0 ;
  wire [7:0]repeat_cnt_reg__0;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire s_axi_bvalid_INST_0_i_1_n_0;
  wire s_axi_bvalid_INST_0_i_2_n_0;

  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_BRESP_ACC_reg[0] 
       (.C(CLK),
        .CE(p_1_in),
        .D(s_axi_bresp[0]),
        .Q(S_AXI_BRESP_ACC[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_BRESP_ACC_reg[1] 
       (.C(CLK),
        .CE(p_1_in),
        .D(s_axi_bresp[1]),
        .Q(S_AXI_BRESP_ACC[1]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair398" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    fifo_gen_inst_i_7
       (.I0(s_axi_bvalid_INST_0_i_1_n_0),
        .I1(m_axi_bvalid),
        .I2(s_axi_bready),
        .I3(empty),
        .O(\USE_WRITE.wr_cmd_b_ready ));
  LUT3 #(
    .INIT(8'hA8)) 
    first_mi_word_i_1
       (.I0(m_axi_bvalid),
        .I1(s_axi_bvalid_INST_0_i_1_n_0),
        .I2(s_axi_bready),
        .O(p_1_in));
  (* SOFT_HLUTNM = "soft_lutpair400" *) 
  LUT1 #(
    .INIT(2'h1)) 
    first_mi_word_i_2
       (.I0(s_axi_bvalid_INST_0_i_1_n_0),
        .O(last_word));
  FDSE #(
    .INIT(1'b1)) 
    first_mi_word_reg
       (.C(CLK),
        .CE(p_1_in),
        .D(last_word),
        .Q(first_mi_word),
        .S(SR));
  (* SOFT_HLUTNM = "soft_lutpair400" *) 
  LUT2 #(
    .INIT(4'hE)) 
    m_axi_bready_INST_0
       (.I0(s_axi_bvalid_INST_0_i_1_n_0),
        .I1(s_axi_bready),
        .O(m_axi_bready));
  (* SOFT_HLUTNM = "soft_lutpair399" *) 
  LUT3 #(
    .INIT(8'h1D)) 
    \repeat_cnt[0]_i_1 
       (.I0(repeat_cnt_reg__0[0]),
        .I1(first_mi_word),
        .I2(dout[0]),
        .O(next_repeat_cnt[0]));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT5 #(
    .INIT(32'hCCA533A5)) 
    \repeat_cnt[1]_i_1 
       (.I0(repeat_cnt_reg__0[1]),
        .I1(dout[1]),
        .I2(repeat_cnt_reg__0[0]),
        .I3(first_mi_word),
        .I4(dout[0]),
        .O(\repeat_cnt[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEFA051111FA05)) 
    \repeat_cnt[2]_i_1 
       (.I0(\repeat_cnt[2]_i_2_n_0 ),
        .I1(dout[1]),
        .I2(repeat_cnt_reg__0[1]),
        .I3(repeat_cnt_reg__0[2]),
        .I4(first_mi_word),
        .I5(dout[2]),
        .O(next_repeat_cnt[2]));
  (* SOFT_HLUTNM = "soft_lutpair399" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \repeat_cnt[2]_i_2 
       (.I0(dout[0]),
        .I1(first_mi_word),
        .I2(repeat_cnt_reg__0[0]),
        .O(\repeat_cnt[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \repeat_cnt[3]_i_1 
       (.I0(dout[2]),
        .I1(repeat_cnt_reg__0[2]),
        .I2(\repeat_cnt[3]_i_2_n_0 ),
        .I3(repeat_cnt_reg__0[3]),
        .I4(first_mi_word),
        .I5(dout[3]),
        .O(next_repeat_cnt[3]));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \repeat_cnt[3]_i_2 
       (.I0(repeat_cnt_reg__0[1]),
        .I1(dout[1]),
        .I2(repeat_cnt_reg__0[0]),
        .I3(first_mi_word),
        .I4(dout[0]),
        .O(\repeat_cnt[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \repeat_cnt[4]_i_1 
       (.I0(dout[3]),
        .I1(repeat_cnt_reg__0[3]),
        .I2(\repeat_cnt[4]_i_2_n_0 ),
        .I3(repeat_cnt_reg__0[4]),
        .I4(first_mi_word),
        .I5(dout[4]),
        .O(next_repeat_cnt[4]));
  LUT6 #(
    .INIT(64'h0000000511110005)) 
    \repeat_cnt[4]_i_2 
       (.I0(\repeat_cnt[2]_i_2_n_0 ),
        .I1(dout[1]),
        .I2(repeat_cnt_reg__0[1]),
        .I3(repeat_cnt_reg__0[2]),
        .I4(first_mi_word),
        .I5(dout[2]),
        .O(\repeat_cnt[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \repeat_cnt[5]_i_1 
       (.I0(dout[4]),
        .I1(repeat_cnt_reg__0[4]),
        .I2(\repeat_cnt[5]_i_2_n_0 ),
        .I3(repeat_cnt_reg__0[5]),
        .I4(first_mi_word),
        .I5(dout[5]),
        .O(next_repeat_cnt[5]));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    \repeat_cnt[5]_i_2 
       (.I0(dout[2]),
        .I1(repeat_cnt_reg__0[2]),
        .I2(\repeat_cnt[3]_i_2_n_0 ),
        .I3(repeat_cnt_reg__0[3]),
        .I4(first_mi_word),
        .I5(dout[3]),
        .O(\repeat_cnt[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \repeat_cnt[6]_i_1 
       (.I0(dout[5]),
        .I1(repeat_cnt_reg__0[5]),
        .I2(\repeat_cnt[6]_i_2_n_0 ),
        .I3(repeat_cnt_reg__0[6]),
        .I4(first_mi_word),
        .I5(dout[6]),
        .O(next_repeat_cnt[6]));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    \repeat_cnt[6]_i_2 
       (.I0(dout[3]),
        .I1(repeat_cnt_reg__0[3]),
        .I2(\repeat_cnt[4]_i_2_n_0 ),
        .I3(repeat_cnt_reg__0[4]),
        .I4(first_mi_word),
        .I5(dout[4]),
        .O(\repeat_cnt[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \repeat_cnt[7]_i_1 
       (.I0(dout[6]),
        .I1(repeat_cnt_reg__0[6]),
        .I2(\repeat_cnt[7]_i_2_n_0 ),
        .I3(repeat_cnt_reg__0[7]),
        .I4(first_mi_word),
        .I5(dout[7]),
        .O(next_repeat_cnt[7]));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    \repeat_cnt[7]_i_2 
       (.I0(dout[4]),
        .I1(repeat_cnt_reg__0[4]),
        .I2(\repeat_cnt[5]_i_2_n_0 ),
        .I3(repeat_cnt_reg__0[5]),
        .I4(first_mi_word),
        .I5(dout[5]),
        .O(\repeat_cnt[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \repeat_cnt_reg[0] 
       (.C(CLK),
        .CE(p_1_in),
        .D(next_repeat_cnt[0]),
        .Q(repeat_cnt_reg__0[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \repeat_cnt_reg[1] 
       (.C(CLK),
        .CE(p_1_in),
        .D(\repeat_cnt[1]_i_1_n_0 ),
        .Q(repeat_cnt_reg__0[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \repeat_cnt_reg[2] 
       (.C(CLK),
        .CE(p_1_in),
        .D(next_repeat_cnt[2]),
        .Q(repeat_cnt_reg__0[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \repeat_cnt_reg[3] 
       (.C(CLK),
        .CE(p_1_in),
        .D(next_repeat_cnt[3]),
        .Q(repeat_cnt_reg__0[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \repeat_cnt_reg[4] 
       (.C(CLK),
        .CE(p_1_in),
        .D(next_repeat_cnt[4]),
        .Q(repeat_cnt_reg__0[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \repeat_cnt_reg[5] 
       (.C(CLK),
        .CE(p_1_in),
        .D(next_repeat_cnt[5]),
        .Q(repeat_cnt_reg__0[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \repeat_cnt_reg[6] 
       (.C(CLK),
        .CE(p_1_in),
        .D(next_repeat_cnt[6]),
        .Q(repeat_cnt_reg__0[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \repeat_cnt_reg[7] 
       (.C(CLK),
        .CE(p_1_in),
        .D(next_repeat_cnt[7]),
        .Q(repeat_cnt_reg__0[7]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFFBFF08000A00)) 
    \s_axi_bresp[0]_INST_0 
       (.I0(S_AXI_BRESP_ACC[0]),
        .I1(S_AXI_BRESP_ACC[1]),
        .I2(first_mi_word),
        .I3(dout[8]),
        .I4(m_axi_bresp[1]),
        .I5(m_axi_bresp[0]),
        .O(s_axi_bresp[0]));
  LUT4 #(
    .INIT(16'hBAAA)) 
    \s_axi_bresp[1]_INST_0 
       (.I0(m_axi_bresp[1]),
        .I1(first_mi_word),
        .I2(dout[8]),
        .I3(S_AXI_BRESP_ACC[1]),
        .O(s_axi_bresp[1]));
  (* SOFT_HLUTNM = "soft_lutpair398" *) 
  LUT2 #(
    .INIT(4'h2)) 
    s_axi_bvalid_INST_0
       (.I0(m_axi_bvalid),
        .I1(s_axi_bvalid_INST_0_i_1_n_0),
        .O(s_axi_bvalid));
  LUT5 #(
    .INIT(32'hAAAAAAA8)) 
    s_axi_bvalid_INST_0_i_1
       (.I0(dout[8]),
        .I1(s_axi_bvalid_INST_0_i_2_n_0),
        .I2(repeat_cnt_reg__0[7]),
        .I3(repeat_cnt_reg__0[2]),
        .I4(repeat_cnt_reg__0[1]),
        .O(s_axi_bvalid_INST_0_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    s_axi_bvalid_INST_0_i_2
       (.I0(repeat_cnt_reg__0[4]),
        .I1(first_mi_word),
        .I2(repeat_cnt_reg__0[0]),
        .I3(repeat_cnt_reg__0[5]),
        .I4(repeat_cnt_reg__0[3]),
        .I5(repeat_cnt_reg__0[6]),
        .O(s_axi_bvalid_INST_0_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_r_downsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_r_downsizer
   (first_word,
    s_axi_rresp,
    s_axi_rdata,
    \skid_buffer_reg[31] ,
    \WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ,
    \current_word_1_reg[2]_0 ,
    \current_word_1_reg[1]_0 ,
    \current_word_1_reg[1]_1 ,
    SR,
    E,
    m_axi_rlast,
    CLK,
    dout,
    \goreg_dm.dout_i_reg[0] ,
    m_axi_rresp,
    m_axi_rdata,
    D,
    \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ,
    s_ready_i_reg,
    s_ready_i_reg_0);
  output first_word;
  output [1:0]s_axi_rresp;
  output [63:0]s_axi_rdata;
  output \skid_buffer_reg[31] ;
  output \WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ;
  output \current_word_1_reg[2]_0 ;
  output \current_word_1_reg[1]_0 ;
  output \current_word_1_reg[1]_1 ;
  input [0:0]SR;
  input [0:0]E;
  input m_axi_rlast;
  input CLK;
  input [21:0]dout;
  input \goreg_dm.dout_i_reg[0] ;
  input [1:0]m_axi_rresp;
  input [31:0]m_axi_rdata;
  input [2:0]D;
  input [0:0]\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ;
  input [0:0]s_ready_i_reg;
  input [0:0]s_ready_i_reg_0;

  wire [0:0]\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ;
  wire CLK;
  wire [2:0]D;
  wire [0:0]E;
  wire [0:0]SR;
  wire [1:0]S_AXI_RRESP_ACC;
  wire \WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ;
  wire [2:0]current_word_1;
  wire \current_word_1_reg[1]_0 ;
  wire \current_word_1_reg[1]_1 ;
  wire \current_word_1_reg[2]_0 ;
  wire [21:0]dout;
  wire first_word;
  wire \goreg_dm.dout_i_reg[0] ;
  wire \length_counter_1[1]_i_1__0_n_0 ;
  wire \length_counter_1[2]_i_2__0_n_0 ;
  wire \length_counter_1[3]_i_2__0_n_0 ;
  wire \length_counter_1[4]_i_2__0_n_0 ;
  wire \length_counter_1[5]_i_2_n_0 ;
  wire \length_counter_1[6]_i_2__0_n_0 ;
  wire \length_counter_1[6]_i_3_n_0 ;
  wire \length_counter_1[6]_i_4_n_0 ;
  wire \length_counter_1[7]_i_2_n_0 ;
  wire [7:0]length_counter_1_reg;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire [7:0]next_length_counter__0;
  wire [63:0]p_1_in;
  wire [63:0]s_axi_rdata;
  wire \s_axi_rdata[63]_INST_0_i_2_n_0 ;
  wire [1:0]s_axi_rresp;
  wire \s_axi_rresp[1]_INST_0_i_1_n_0 ;
  wire s_axi_rvalid_INST_0_i_7_n_0;
  wire s_axi_rvalid_INST_0_i_8_n_0;
  wire s_axi_rvalid_INST_0_i_9_n_0;
  wire [0:0]s_ready_i_reg;
  wire [0:0]s_ready_i_reg_0;
  wire \skid_buffer_reg[31] ;

  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_RRESP_ACC_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_rresp[0]),
        .Q(S_AXI_RRESP_ACC[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \S_AXI_RRESP_ACC_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(s_axi_rresp[1]),
        .Q(S_AXI_RRESP_ACC[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[0] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[0]),
        .Q(p_1_in[0]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[10] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[10]),
        .Q(p_1_in[10]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[11] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[11]),
        .Q(p_1_in[11]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[12] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[12]),
        .Q(p_1_in[12]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[13] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[13]),
        .Q(p_1_in[13]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[14] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[14]),
        .Q(p_1_in[14]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[15] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[15]),
        .Q(p_1_in[15]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[16] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[16]),
        .Q(p_1_in[16]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[17] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[17]),
        .Q(p_1_in[17]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[18] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[18]),
        .Q(p_1_in[18]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[19] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[19]),
        .Q(p_1_in[19]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[1] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[1]),
        .Q(p_1_in[1]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[20] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[20]),
        .Q(p_1_in[20]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[21] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[21]),
        .Q(p_1_in[21]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[22] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[22]),
        .Q(p_1_in[22]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[23] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[23]),
        .Q(p_1_in[23]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[24] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[24]),
        .Q(p_1_in[24]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[25] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[25]),
        .Q(p_1_in[25]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[26] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[26]),
        .Q(p_1_in[26]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[27] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[27]),
        .Q(p_1_in[27]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[28] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[28]),
        .Q(p_1_in[28]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[29] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[29]),
        .Q(p_1_in[29]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[2] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[2]),
        .Q(p_1_in[2]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[30] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[30]),
        .Q(p_1_in[30]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[31] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[31]),
        .Q(p_1_in[31]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[3] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[3]),
        .Q(p_1_in[3]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[4] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[4]),
        .Q(p_1_in[4]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[5] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[5]),
        .Q(p_1_in[5]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[6] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[6]),
        .Q(p_1_in[6]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[7] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[7]),
        .Q(p_1_in[7]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[8] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[8]),
        .Q(p_1_in[8]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].S_AXI_RDATA_II_reg[9] 
       (.C(CLK),
        .CE(s_ready_i_reg),
        .D(m_axi_rdata[9]),
        .Q(p_1_in[9]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[32] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[0]),
        .Q(p_1_in[32]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[33] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[1]),
        .Q(p_1_in[33]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[34] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[2]),
        .Q(p_1_in[34]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[35] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[3]),
        .Q(p_1_in[35]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[36] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[4]),
        .Q(p_1_in[36]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[37] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[5]),
        .Q(p_1_in[37]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[38] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[6]),
        .Q(p_1_in[38]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[39] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[7]),
        .Q(p_1_in[39]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[40] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[8]),
        .Q(p_1_in[40]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[41] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[9]),
        .Q(p_1_in[41]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[42] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[10]),
        .Q(p_1_in[42]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[43] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[11]),
        .Q(p_1_in[43]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[44] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[12]),
        .Q(p_1_in[44]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[45] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[13]),
        .Q(p_1_in[45]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[46] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[14]),
        .Q(p_1_in[46]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[47] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[15]),
        .Q(p_1_in[47]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[48] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[16]),
        .Q(p_1_in[48]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[49] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[17]),
        .Q(p_1_in[49]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[50] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[18]),
        .Q(p_1_in[50]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[51] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[19]),
        .Q(p_1_in[51]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[52] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[20]),
        .Q(p_1_in[52]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[53] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[21]),
        .Q(p_1_in[53]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[54] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[22]),
        .Q(p_1_in[54]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[55] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[23]),
        .Q(p_1_in[55]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[56] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[24]),
        .Q(p_1_in[56]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[57] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[25]),
        .Q(p_1_in[57]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[58] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[26]),
        .Q(p_1_in[58]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[59] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[27]),
        .Q(p_1_in[59]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[60] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[28]),
        .Q(p_1_in[60]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[61] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[29]),
        .Q(p_1_in[61]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[62] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[30]),
        .Q(p_1_in[62]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].S_AXI_RDATA_II_reg[63] 
       (.C(CLK),
        .CE(s_ready_i_reg_0),
        .D(m_axi_rdata[31]),
        .Q(p_1_in[63]),
        .R(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  LUT6 #(
    .INIT(64'h000300F2FFFCFF0D)) 
    \current_word_1[2]_i_2 
       (.I0(\current_word_1_reg[1]_0 ),
        .I1(\current_word_1_reg[1]_1 ),
        .I2(dout[12]),
        .I3(dout[13]),
        .I4(dout[11]),
        .I5(\s_axi_rdata[63]_INST_0_i_2_n_0 ),
        .O(\current_word_1_reg[2]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \current_word_1_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(D[0]),
        .Q(current_word_1[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \current_word_1_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(D[1]),
        .Q(current_word_1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \current_word_1_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(D[2]),
        .Q(current_word_1[2]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    first_mi_word_reg
       (.C(CLK),
        .CE(E),
        .D(m_axi_rlast),
        .Q(first_word),
        .S(SR));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT3 #(
    .INIT(8'h1D)) 
    \length_counter_1[0]_i_1__0 
       (.I0(length_counter_1_reg[0]),
        .I1(first_word),
        .I2(dout[3]),
        .O(next_length_counter__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair361" *) 
  LUT5 #(
    .INIT(32'hCCA533A5)) 
    \length_counter_1[1]_i_1__0 
       (.I0(length_counter_1_reg[1]),
        .I1(dout[4]),
        .I2(length_counter_1_reg[0]),
        .I3(first_word),
        .I4(dout[3]),
        .O(\length_counter_1[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEFA051111FA05)) 
    \length_counter_1[2]_i_1__0 
       (.I0(\length_counter_1[2]_i_2__0_n_0 ),
        .I1(dout[4]),
        .I2(length_counter_1_reg[1]),
        .I3(length_counter_1_reg[2]),
        .I4(first_word),
        .I5(dout[5]),
        .O(next_length_counter__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \length_counter_1[2]_i_2__0 
       (.I0(dout[3]),
        .I1(first_word),
        .I2(length_counter_1_reg[0]),
        .O(\length_counter_1[2]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hC3AAC355CCAACCAA)) 
    \length_counter_1[3]_i_1__0 
       (.I0(length_counter_1_reg[3]),
        .I1(dout[6]),
        .I2(dout[5]),
        .I3(first_word),
        .I4(length_counter_1_reg[2]),
        .I5(\length_counter_1[3]_i_2__0_n_0 ),
        .O(next_length_counter__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair361" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \length_counter_1[3]_i_2__0 
       (.I0(length_counter_1_reg[1]),
        .I1(dout[4]),
        .I2(length_counter_1_reg[0]),
        .I3(first_word),
        .I4(dout[3]),
        .O(\length_counter_1[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \length_counter_1[4]_i_1__0 
       (.I0(dout[6]),
        .I1(length_counter_1_reg[3]),
        .I2(\length_counter_1[4]_i_2__0_n_0 ),
        .I3(length_counter_1_reg[4]),
        .I4(first_word),
        .I5(dout[7]),
        .O(next_length_counter__0[4]));
  LUT6 #(
    .INIT(64'h0000000511110005)) 
    \length_counter_1[4]_i_2__0 
       (.I0(\length_counter_1[2]_i_2__0_n_0 ),
        .I1(dout[4]),
        .I2(length_counter_1_reg[1]),
        .I3(length_counter_1_reg[2]),
        .I4(first_word),
        .I5(dout[5]),
        .O(\length_counter_1[4]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hC3AAC355CCAACCAA)) 
    \length_counter_1[5]_i_1__0 
       (.I0(length_counter_1_reg[5]),
        .I1(dout[8]),
        .I2(dout[7]),
        .I3(first_word),
        .I4(length_counter_1_reg[4]),
        .I5(\length_counter_1[5]_i_2_n_0 ),
        .O(next_length_counter__0[5]));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    \length_counter_1[5]_i_2 
       (.I0(dout[5]),
        .I1(length_counter_1_reg[2]),
        .I2(\length_counter_1[3]_i_2__0_n_0 ),
        .I3(length_counter_1_reg[3]),
        .I4(first_word),
        .I5(dout[6]),
        .O(\length_counter_1[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hC3AAC355CCAACCAA)) 
    \length_counter_1[6]_i_1__0 
       (.I0(length_counter_1_reg[6]),
        .I1(dout[9]),
        .I2(dout[8]),
        .I3(first_word),
        .I4(length_counter_1_reg[5]),
        .I5(\length_counter_1[6]_i_2__0_n_0 ),
        .O(next_length_counter__0[6]));
  LUT6 #(
    .INIT(64'h0000000000044404)) 
    \length_counter_1[6]_i_2__0 
       (.I0(\length_counter_1[6]_i_3_n_0 ),
        .I1(\length_counter_1[3]_i_2__0_n_0 ),
        .I2(length_counter_1_reg[2]),
        .I3(first_word),
        .I4(dout[5]),
        .I5(\length_counter_1[6]_i_4_n_0 ),
        .O(\length_counter_1[6]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \length_counter_1[6]_i_3 
       (.I0(dout[6]),
        .I1(first_word),
        .I2(length_counter_1_reg[3]),
        .O(\length_counter_1[6]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \length_counter_1[6]_i_4 
       (.I0(dout[7]),
        .I1(first_word),
        .I2(length_counter_1_reg[4]),
        .O(\length_counter_1[6]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \length_counter_1[7]_i_1__0 
       (.I0(length_counter_1_reg[7]),
        .I1(first_word),
        .I2(dout[10]),
        .I3(\length_counter_1[7]_i_2_n_0 ),
        .O(next_length_counter__0[7]));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    \length_counter_1[7]_i_2 
       (.I0(dout[8]),
        .I1(length_counter_1_reg[5]),
        .I2(\length_counter_1[6]_i_2__0_n_0 ),
        .I3(length_counter_1_reg[6]),
        .I4(first_word),
        .I5(dout[9]),
        .O(\length_counter_1[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter__0[0]),
        .Q(length_counter_1_reg[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(\length_counter_1[1]_i_1__0_n_0 ),
        .Q(length_counter_1_reg[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter__0[2]),
        .Q(length_counter_1_reg[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter__0[3]),
        .Q(length_counter_1_reg[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter__0[4]),
        .Q(length_counter_1_reg[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter__0[5]),
        .Q(length_counter_1_reg[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter__0[6]),
        .Q(length_counter_1_reg[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter__0[7]),
        .Q(length_counter_1_reg[7]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair388" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[0]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[0]),
        .I3(m_axi_rdata[0]),
        .O(s_axi_rdata[0]));
  (* SOFT_HLUTNM = "soft_lutpair378" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[10]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[10]),
        .I3(m_axi_rdata[10]),
        .O(s_axi_rdata[10]));
  (* SOFT_HLUTNM = "soft_lutpair377" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[11]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[11]),
        .I3(m_axi_rdata[11]),
        .O(s_axi_rdata[11]));
  (* SOFT_HLUTNM = "soft_lutpair376" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[12]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[12]),
        .I3(m_axi_rdata[12]),
        .O(s_axi_rdata[12]));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[13]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[13]),
        .I3(m_axi_rdata[13]),
        .O(s_axi_rdata[13]));
  (* SOFT_HLUTNM = "soft_lutpair374" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[14]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[14]),
        .I3(m_axi_rdata[14]),
        .O(s_axi_rdata[14]));
  (* SOFT_HLUTNM = "soft_lutpair373" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[15]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[15]),
        .I3(m_axi_rdata[15]),
        .O(s_axi_rdata[15]));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[16]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[16]),
        .I3(m_axi_rdata[16]),
        .O(s_axi_rdata[16]));
  (* SOFT_HLUTNM = "soft_lutpair371" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[17]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[17]),
        .I3(m_axi_rdata[17]),
        .O(s_axi_rdata[17]));
  (* SOFT_HLUTNM = "soft_lutpair370" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[18]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[18]),
        .I3(m_axi_rdata[18]),
        .O(s_axi_rdata[18]));
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[19]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[19]),
        .I3(m_axi_rdata[19]),
        .O(s_axi_rdata[19]));
  (* SOFT_HLUTNM = "soft_lutpair387" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[1]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[1]),
        .I3(m_axi_rdata[1]),
        .O(s_axi_rdata[1]));
  (* SOFT_HLUTNM = "soft_lutpair368" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[20]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[20]),
        .I3(m_axi_rdata[20]),
        .O(s_axi_rdata[20]));
  (* SOFT_HLUTNM = "soft_lutpair367" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[21]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[21]),
        .I3(m_axi_rdata[21]),
        .O(s_axi_rdata[21]));
  (* SOFT_HLUTNM = "soft_lutpair366" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[22]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[22]),
        .I3(m_axi_rdata[22]),
        .O(s_axi_rdata[22]));
  (* SOFT_HLUTNM = "soft_lutpair365" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[23]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[23]),
        .I3(m_axi_rdata[23]),
        .O(s_axi_rdata[23]));
  (* SOFT_HLUTNM = "soft_lutpair364" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[24]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[24]),
        .I3(m_axi_rdata[24]),
        .O(s_axi_rdata[24]));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[25]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[25]),
        .I3(m_axi_rdata[25]),
        .O(s_axi_rdata[25]));
  (* SOFT_HLUTNM = "soft_lutpair362" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[26]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[26]),
        .I3(m_axi_rdata[26]),
        .O(s_axi_rdata[26]));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[27]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[27]),
        .I3(m_axi_rdata[27]),
        .O(s_axi_rdata[27]));
  (* SOFT_HLUTNM = "soft_lutpair391" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[28]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[28]),
        .I3(m_axi_rdata[28]),
        .O(s_axi_rdata[28]));
  (* SOFT_HLUTNM = "soft_lutpair392" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[29]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[29]),
        .I3(m_axi_rdata[29]),
        .O(s_axi_rdata[29]));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[2]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[2]),
        .I3(m_axi_rdata[2]),
        .O(s_axi_rdata[2]));
  (* SOFT_HLUTNM = "soft_lutpair390" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[30]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[30]),
        .I3(m_axi_rdata[30]),
        .O(s_axi_rdata[30]));
  (* SOFT_HLUTNM = "soft_lutpair393" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[31]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[31]),
        .I3(m_axi_rdata[31]),
        .O(s_axi_rdata[31]));
  (* SOFT_HLUTNM = "soft_lutpair388" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[32]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[0]),
        .I3(p_1_in[32]),
        .O(s_axi_rdata[32]));
  (* SOFT_HLUTNM = "soft_lutpair387" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[33]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[1]),
        .I3(p_1_in[33]),
        .O(s_axi_rdata[33]));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[34]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[2]),
        .I3(p_1_in[34]),
        .O(s_axi_rdata[34]));
  (* SOFT_HLUTNM = "soft_lutpair385" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[35]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[3]),
        .I3(p_1_in[35]),
        .O(s_axi_rdata[35]));
  (* SOFT_HLUTNM = "soft_lutpair384" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[36]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[4]),
        .I3(p_1_in[36]),
        .O(s_axi_rdata[36]));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[37]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[5]),
        .I3(p_1_in[37]),
        .O(s_axi_rdata[37]));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[38]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[6]),
        .I3(p_1_in[38]),
        .O(s_axi_rdata[38]));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[39]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[7]),
        .I3(p_1_in[39]),
        .O(s_axi_rdata[39]));
  (* SOFT_HLUTNM = "soft_lutpair385" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[3]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[3]),
        .I3(m_axi_rdata[3]),
        .O(s_axi_rdata[3]));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[40]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[8]),
        .I3(p_1_in[40]),
        .O(s_axi_rdata[40]));
  (* SOFT_HLUTNM = "soft_lutpair379" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[41]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[9]),
        .I3(p_1_in[41]),
        .O(s_axi_rdata[41]));
  (* SOFT_HLUTNM = "soft_lutpair378" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[42]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[10]),
        .I3(p_1_in[42]),
        .O(s_axi_rdata[42]));
  (* SOFT_HLUTNM = "soft_lutpair377" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[43]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[11]),
        .I3(p_1_in[43]),
        .O(s_axi_rdata[43]));
  (* SOFT_HLUTNM = "soft_lutpair376" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[44]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[12]),
        .I3(p_1_in[44]),
        .O(s_axi_rdata[44]));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[45]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[13]),
        .I3(p_1_in[45]),
        .O(s_axi_rdata[45]));
  (* SOFT_HLUTNM = "soft_lutpair374" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[46]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[14]),
        .I3(p_1_in[46]),
        .O(s_axi_rdata[46]));
  (* SOFT_HLUTNM = "soft_lutpair373" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[47]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[15]),
        .I3(p_1_in[47]),
        .O(s_axi_rdata[47]));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[48]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[16]),
        .I3(p_1_in[48]),
        .O(s_axi_rdata[48]));
  (* SOFT_HLUTNM = "soft_lutpair371" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[49]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[17]),
        .I3(p_1_in[49]),
        .O(s_axi_rdata[49]));
  (* SOFT_HLUTNM = "soft_lutpair384" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[4]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[4]),
        .I3(m_axi_rdata[4]),
        .O(s_axi_rdata[4]));
  (* SOFT_HLUTNM = "soft_lutpair370" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[50]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[18]),
        .I3(p_1_in[50]),
        .O(s_axi_rdata[50]));
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[51]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[19]),
        .I3(p_1_in[51]),
        .O(s_axi_rdata[51]));
  (* SOFT_HLUTNM = "soft_lutpair368" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[52]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[20]),
        .I3(p_1_in[52]),
        .O(s_axi_rdata[52]));
  (* SOFT_HLUTNM = "soft_lutpair367" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[53]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[21]),
        .I3(p_1_in[53]),
        .O(s_axi_rdata[53]));
  (* SOFT_HLUTNM = "soft_lutpair366" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[54]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[22]),
        .I3(p_1_in[54]),
        .O(s_axi_rdata[54]));
  (* SOFT_HLUTNM = "soft_lutpair365" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[55]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[23]),
        .I3(p_1_in[55]),
        .O(s_axi_rdata[55]));
  (* SOFT_HLUTNM = "soft_lutpair364" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[56]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[24]),
        .I3(p_1_in[56]),
        .O(s_axi_rdata[56]));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[57]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[25]),
        .I3(p_1_in[57]),
        .O(s_axi_rdata[57]));
  (* SOFT_HLUTNM = "soft_lutpair362" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[58]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[26]),
        .I3(p_1_in[58]),
        .O(s_axi_rdata[58]));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[59]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[27]),
        .I3(p_1_in[59]),
        .O(s_axi_rdata[59]));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[5]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[5]),
        .I3(m_axi_rdata[5]),
        .O(s_axi_rdata[5]));
  (* SOFT_HLUTNM = "soft_lutpair391" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[60]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[28]),
        .I3(p_1_in[60]),
        .O(s_axi_rdata[60]));
  (* SOFT_HLUTNM = "soft_lutpair392" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[61]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[29]),
        .I3(p_1_in[61]),
        .O(s_axi_rdata[61]));
  (* SOFT_HLUTNM = "soft_lutpair390" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[62]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[30]),
        .I3(p_1_in[62]),
        .O(s_axi_rdata[62]));
  (* SOFT_HLUTNM = "soft_lutpair393" *) 
  LUT4 #(
    .INIT(16'hF1E0)) 
    \s_axi_rdata[63]_INST_0 
       (.I0(dout[20]),
        .I1(\skid_buffer_reg[31] ),
        .I2(m_axi_rdata[31]),
        .I3(p_1_in[63]),
        .O(s_axi_rdata[63]));
  LUT6 #(
    .INIT(64'h9699669666966696)) 
    \s_axi_rdata[63]_INST_0_i_1 
       (.I0(\s_axi_rdata[63]_INST_0_i_2_n_0 ),
        .I1(dout[16]),
        .I2(dout[15]),
        .I3(\current_word_1_reg[1]_1 ),
        .I4(\current_word_1_reg[1]_0 ),
        .I5(dout[14]),
        .O(\skid_buffer_reg[31] ));
  LUT4 #(
    .INIT(16'hFE02)) 
    \s_axi_rdata[63]_INST_0_i_2 
       (.I0(current_word_1[2]),
        .I1(first_word),
        .I2(dout[21]),
        .I3(dout[19]),
        .O(\s_axi_rdata[63]_INST_0_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h01FD)) 
    \s_axi_rdata[63]_INST_0_i_3 
       (.I0(current_word_1[1]),
        .I1(first_word),
        .I2(dout[21]),
        .I3(dout[18]),
        .O(\current_word_1_reg[1]_1 ));
  LUT4 #(
    .INIT(16'hFE02)) 
    \s_axi_rdata[63]_INST_0_i_4 
       (.I0(current_word_1[0]),
        .I1(first_word),
        .I2(dout[21]),
        .I3(dout[17]),
        .O(\current_word_1_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[6]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[6]),
        .I3(m_axi_rdata[6]),
        .O(s_axi_rdata[6]));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[7]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[7]),
        .I3(m_axi_rdata[7]),
        .O(s_axi_rdata[7]));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[8]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[8]),
        .I3(m_axi_rdata[8]),
        .O(s_axi_rdata[8]));
  (* SOFT_HLUTNM = "soft_lutpair379" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \s_axi_rdata[9]_INST_0 
       (.I0(\skid_buffer_reg[31] ),
        .I1(dout[20]),
        .I2(p_1_in[9]),
        .I3(m_axi_rdata[9]),
        .O(s_axi_rdata[9]));
  LUT6 #(
    .INIT(64'hFF22FD00FF00FD00)) 
    \s_axi_rresp[0]_INST_0 
       (.I0(\s_axi_rresp[1]_INST_0_i_1_n_0 ),
        .I1(\goreg_dm.dout_i_reg[0] ),
        .I2(m_axi_rresp[1]),
        .I3(m_axi_rresp[0]),
        .I4(S_AXI_RRESP_ACC[0]),
        .I5(S_AXI_RRESP_ACC[1]),
        .O(s_axi_rresp[0]));
  LUT4 #(
    .INIT(16'hF2F0)) 
    \s_axi_rresp[1]_INST_0 
       (.I0(\s_axi_rresp[1]_INST_0_i_1_n_0 ),
        .I1(\goreg_dm.dout_i_reg[0] ),
        .I2(m_axi_rresp[1]),
        .I3(S_AXI_RRESP_ACC[1]),
        .O(s_axi_rresp[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFDDD5DD00)) 
    \s_axi_rresp[1]_INST_0_i_1 
       (.I0(\current_word_1_reg[1]_1 ),
        .I1(\s_axi_rdata[63]_INST_0_i_2_n_0 ),
        .I2(dout[0]),
        .I3(dout[2]),
        .I4(dout[1]),
        .I5(\current_word_1_reg[1]_0 ),
        .O(\s_axi_rresp[1]_INST_0_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    s_axi_rvalid_INST_0_i_4
       (.I0(dout[9]),
        .I1(length_counter_1_reg[6]),
        .I2(s_axi_rvalid_INST_0_i_7_n_0),
        .I3(length_counter_1_reg[7]),
        .I4(first_word),
        .I5(dout[10]),
        .O(\WORD_LANE[0].S_AXI_RDATA_II_reg[31]_0 ));
  LUT5 #(
    .INIT(32'h00000010)) 
    s_axi_rvalid_INST_0_i_7
       (.I0(\length_counter_1[6]_i_4_n_0 ),
        .I1(s_axi_rvalid_INST_0_i_8_n_0),
        .I2(\length_counter_1[3]_i_2__0_n_0 ),
        .I3(\length_counter_1[6]_i_3_n_0 ),
        .I4(s_axi_rvalid_INST_0_i_9_n_0),
        .O(s_axi_rvalid_INST_0_i_7_n_0));
  (* SOFT_HLUTNM = "soft_lutpair394" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    s_axi_rvalid_INST_0_i_8
       (.I0(dout[5]),
        .I1(first_word),
        .I2(length_counter_1_reg[2]),
        .O(s_axi_rvalid_INST_0_i_8_n_0));
  (* SOFT_HLUTNM = "soft_lutpair394" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    s_axi_rvalid_INST_0_i_9
       (.I0(dout[8]),
        .I1(first_word),
        .I2(length_counter_1_reg[5]),
        .O(s_axi_rvalid_INST_0_i_9_n_0));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_r_upsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_r_upsizer
   (\USE_RTL_LENGTH.first_mi_word_q ,
    first_word,
    first_word_reg_0,
    use_wrap_buffer,
    wrap_buffer_available,
    s_axi_rdata,
    \m_payload_i_reg[0] ,
    s_ready_i_reg,
    use_wrap_buffer_reg_0,
    first_word_reg_1,
    \pre_next_word_1_reg[2]_0 ,
    \current_word_1_reg[2]_0 ,
    \pre_next_word_1_reg[2]_1 ,
    \USE_RTL_ADDR.addr_q_reg[4] ,
    s_axi_rresp,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    pop_mi_data,
    Q,
    clk,
    E,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ,
    s_axi_rready,
    \USE_READ.rd_cmd_valid ,
    mr_rvalid,
    \current_word_1_reg[2]_1 ,
    \current_word_1_reg[0]_0 ,
    m_valid_i_reg,
    D,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] );
  output \USE_RTL_LENGTH.first_mi_word_q ;
  output first_word;
  output first_word_reg_0;
  output use_wrap_buffer;
  output wrap_buffer_available;
  output [31:0]s_axi_rdata;
  output [0:0]\m_payload_i_reg[0] ;
  output s_ready_i_reg;
  output use_wrap_buffer_reg_0;
  output [2:0]first_word_reg_1;
  output \pre_next_word_1_reg[2]_0 ;
  output [2:0]\current_word_1_reg[2]_0 ;
  output \pre_next_word_1_reg[2]_1 ;
  output \USE_RTL_ADDR.addr_q_reg[4] ;
  output [1:0]s_axi_rresp;
  input \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  input pop_mi_data;
  input [66:0]Q;
  input clk;
  input [0:0]E;
  input [12:0]\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ;
  input s_axi_rready;
  input \USE_READ.rd_cmd_valid ;
  input mr_rvalid;
  input \current_word_1_reg[2]_1 ;
  input \current_word_1_reg[0]_0 ;
  input [0:0]m_valid_i_reg;
  input [2:0]D;
  input [2:0]\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] ;

  wire \<const1> ;
  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire [2:0]D;
  wire [0:0]E;
  wire [63:0]M_AXI_RDATA_I;
  wire [66:0]Q;
  wire [2:0]\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ;
  wire [12:0]\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ;
  wire \USE_READ.rd_cmd_valid ;
  wire \USE_RTL_ADDR.addr_q[4]_i_5_n_0 ;
  wire \USE_RTL_ADDR.addr_q[4]_i_6_n_0 ;
  wire \USE_RTL_ADDR.addr_q[4]_i_7_n_0 ;
  wire \USE_RTL_ADDR.addr_q_reg[4] ;
  wire \USE_RTL_LENGTH.first_mi_word_q ;
  wire \USE_RTL_LENGTH.length_counter_q[0]_i_1__0_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[1]_i_1__0_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[2]_i_1__0_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[2]_i_2_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[3]_i_1__0_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[3]_i_2__0_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[4]_i_1__0_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[5]_i_1__0_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[6]_i_1__0_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[7]_i_1__0_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[7]_i_2__0_n_0 ;
  wire [7:0]\USE_RTL_LENGTH.length_counter_q_reg ;
  wire clk;
  wire \current_word_1_reg[0]_0 ;
  wire [2:0]\current_word_1_reg[2]_0 ;
  wire \current_word_1_reg[2]_1 ;
  wire first_word;
  wire first_word_reg_0;
  wire [2:0]first_word_reg_1;
  wire [0:0]\m_payload_i_reg[0] ;
  wire [0:0]m_valid_i_reg;
  wire mr_rvalid;
  wire pop_mi_data;
  wire \pre_next_word_1_reg[2]_0 ;
  wire \pre_next_word_1_reg[2]_1 ;
  wire [1:0]rresp_wrap_buffer;
  wire [31:0]s_axi_rdata;
  wire s_axi_rlast_INST_0_i_3_n_0;
  wire s_axi_rlast_INST_0_i_4_n_0;
  wire s_axi_rlast_INST_0_i_5_n_0;
  wire s_axi_rlast_INST_0_i_6_n_0;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_ready_i_reg;
  wire use_wrap_buffer;
  wire use_wrap_buffer_i_1_n_0;
  wire use_wrap_buffer_i_2_n_0;
  wire use_wrap_buffer_reg_0;
  wire wrap_buffer_available;
  wire wrap_buffer_available_i_1_n_0;
  wire wrap_buffer_available_i_2__0_n_0;

  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[0] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[0]),
        .Q(M_AXI_RDATA_I[0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[10] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[10]),
        .Q(M_AXI_RDATA_I[10]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[11] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[11]),
        .Q(M_AXI_RDATA_I[11]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[12] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[12]),
        .Q(M_AXI_RDATA_I[12]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[13] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[13]),
        .Q(M_AXI_RDATA_I[13]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[14] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[14]),
        .Q(M_AXI_RDATA_I[14]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[15] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[15]),
        .Q(M_AXI_RDATA_I[15]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[16] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[16]),
        .Q(M_AXI_RDATA_I[16]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[17] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[17]),
        .Q(M_AXI_RDATA_I[17]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[18] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[18]),
        .Q(M_AXI_RDATA_I[18]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[19] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[19]),
        .Q(M_AXI_RDATA_I[19]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[1] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[1]),
        .Q(M_AXI_RDATA_I[1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[20] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[20]),
        .Q(M_AXI_RDATA_I[20]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[21] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[21]),
        .Q(M_AXI_RDATA_I[21]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[22] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[22]),
        .Q(M_AXI_RDATA_I[22]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[23] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[23]),
        .Q(M_AXI_RDATA_I[23]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[24] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[24]),
        .Q(M_AXI_RDATA_I[24]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[25] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[25]),
        .Q(M_AXI_RDATA_I[25]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[26] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[26]),
        .Q(M_AXI_RDATA_I[26]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[27] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[27]),
        .Q(M_AXI_RDATA_I[27]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[28] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[28]),
        .Q(M_AXI_RDATA_I[28]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[29] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[29]),
        .Q(M_AXI_RDATA_I[29]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[2] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[2]),
        .Q(M_AXI_RDATA_I[2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[30] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[30]),
        .Q(M_AXI_RDATA_I[30]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[31] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[31]),
        .Q(M_AXI_RDATA_I[31]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[32] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[32]),
        .Q(M_AXI_RDATA_I[32]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[33] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[33]),
        .Q(M_AXI_RDATA_I[33]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[34] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[34]),
        .Q(M_AXI_RDATA_I[34]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[35] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[35]),
        .Q(M_AXI_RDATA_I[35]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[36] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[36]),
        .Q(M_AXI_RDATA_I[36]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[37] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[37]),
        .Q(M_AXI_RDATA_I[37]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[38] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[38]),
        .Q(M_AXI_RDATA_I[38]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[39] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[39]),
        .Q(M_AXI_RDATA_I[39]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[3] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[3]),
        .Q(M_AXI_RDATA_I[3]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[40] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[40]),
        .Q(M_AXI_RDATA_I[40]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[41] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[41]),
        .Q(M_AXI_RDATA_I[41]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[42] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[42]),
        .Q(M_AXI_RDATA_I[42]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[43] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[43]),
        .Q(M_AXI_RDATA_I[43]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[44] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[44]),
        .Q(M_AXI_RDATA_I[44]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[45] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[45]),
        .Q(M_AXI_RDATA_I[45]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[46] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[46]),
        .Q(M_AXI_RDATA_I[46]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[47] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[47]),
        .Q(M_AXI_RDATA_I[47]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[48] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[48]),
        .Q(M_AXI_RDATA_I[48]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[49] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[49]),
        .Q(M_AXI_RDATA_I[49]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[4] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[4]),
        .Q(M_AXI_RDATA_I[4]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[50] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[50]),
        .Q(M_AXI_RDATA_I[50]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[51] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[51]),
        .Q(M_AXI_RDATA_I[51]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[52] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[52]),
        .Q(M_AXI_RDATA_I[52]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[53] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[53]),
        .Q(M_AXI_RDATA_I[53]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[54] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[54]),
        .Q(M_AXI_RDATA_I[54]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[55] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[55]),
        .Q(M_AXI_RDATA_I[55]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[56] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[56]),
        .Q(M_AXI_RDATA_I[56]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[57] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[57]),
        .Q(M_AXI_RDATA_I[57]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[58] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[58]),
        .Q(M_AXI_RDATA_I[58]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[59] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[59]),
        .Q(M_AXI_RDATA_I[59]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[5] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[5]),
        .Q(M_AXI_RDATA_I[5]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[60] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[60]),
        .Q(M_AXI_RDATA_I[60]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[61] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[61]),
        .Q(M_AXI_RDATA_I[61]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[62] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[62]),
        .Q(M_AXI_RDATA_I[62]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[63] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[63]),
        .Q(M_AXI_RDATA_I[63]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[6] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[6]),
        .Q(M_AXI_RDATA_I[6]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[7] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[7]),
        .Q(M_AXI_RDATA_I[7]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[8] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[8]),
        .Q(M_AXI_RDATA_I[8]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \M_AXI_RDATA_I_reg[9] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[9]),
        .Q(M_AXI_RDATA_I[9]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \USE_RTL_ADDR.addr_q[4]_i_4 
       (.I0(wrap_buffer_available),
        .I1(s_axi_rlast_INST_0_i_6_n_0),
        .I2(\USE_RTL_ADDR.addr_q[4]_i_5_n_0 ),
        .I3(s_axi_rlast_INST_0_i_5_n_0),
        .I4(\USE_RTL_ADDR.addr_q[4]_i_6_n_0 ),
        .I5(\USE_RTL_ADDR.addr_q[4]_i_7_n_0 ),
        .O(\USE_RTL_ADDR.addr_q_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair687" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_RTL_ADDR.addr_q[4]_i_5 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [7]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [7]),
        .O(\USE_RTL_ADDR.addr_q[4]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair685" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_RTL_ADDR.addr_q[4]_i_6 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [4]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .O(\USE_RTL_ADDR.addr_q[4]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair684" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_RTL_ADDR.addr_q[4]_i_7 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [5]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [5]),
        .O(\USE_RTL_ADDR.addr_q[4]_i_7_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \USE_RTL_LENGTH.first_mi_word_q_reg 
       (.C(clk),
        .CE(pop_mi_data),
        .D(Q[66]),
        .Q(\USE_RTL_LENGTH.first_mi_word_q ),
        .S(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT3 #(
    .INIT(8'h1D)) 
    \USE_RTL_LENGTH.length_counter_q[0]_i_1__0 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [0]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [0]),
        .O(\USE_RTL_LENGTH.length_counter_q[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair683" *) 
  LUT5 #(
    .INIT(32'hCCA533A5)) 
    \USE_RTL_LENGTH.length_counter_q[1]_i_1__0 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [1]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [1]),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [0]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [0]),
        .O(\USE_RTL_LENGTH.length_counter_q[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEFA051111FA05)) 
    \USE_RTL_LENGTH.length_counter_q[2]_i_1__0 
       (.I0(\USE_RTL_LENGTH.length_counter_q[2]_i_2_n_0 ),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [1]),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [1]),
        .I3(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .I4(\USE_RTL_LENGTH.first_mi_word_q ),
        .I5(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [2]),
        .O(\USE_RTL_LENGTH.length_counter_q[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair687" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_RTL_LENGTH.length_counter_q[2]_i_2 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [0]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [0]),
        .O(\USE_RTL_LENGTH.length_counter_q[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hC3AAC355CCAACCAA)) 
    \USE_RTL_LENGTH.length_counter_q[3]_i_1__0 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [3]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [3]),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [2]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .I5(\USE_RTL_LENGTH.length_counter_q[3]_i_2__0_n_0 ),
        .O(\USE_RTL_LENGTH.length_counter_q[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair683" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \USE_RTL_LENGTH.length_counter_q[3]_i_2__0 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [1]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [1]),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [0]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [0]),
        .O(\USE_RTL_LENGTH.length_counter_q[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair685" *) 
  LUT4 #(
    .INIT(16'h56A6)) 
    \USE_RTL_LENGTH.length_counter_q[4]_i_1__0 
       (.I0(s_axi_rlast_INST_0_i_6_n_0),
        .I1(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .I2(\USE_RTL_LENGTH.first_mi_word_q ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [4]),
        .O(\USE_RTL_LENGTH.length_counter_q[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hC3AAC355CCAACCAA)) 
    \USE_RTL_LENGTH.length_counter_q[5]_i_1__0 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [5]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [5]),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [4]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .I5(s_axi_rlast_INST_0_i_6_n_0),
        .O(\USE_RTL_LENGTH.length_counter_q[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair686" *) 
  LUT4 #(
    .INIT(16'h1DE2)) 
    \USE_RTL_LENGTH.length_counter_q[6]_i_1__0 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [6]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [6]),
        .I3(\USE_RTL_LENGTH.length_counter_q[7]_i_2__0_n_0 ),
        .O(\USE_RTL_LENGTH.length_counter_q[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hC3AAC355CCAACCAA)) 
    \USE_RTL_LENGTH.length_counter_q[7]_i_1__0 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [7]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [7]),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [6]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_RTL_LENGTH.length_counter_q_reg [6]),
        .I5(\USE_RTL_LENGTH.length_counter_q[7]_i_2__0_n_0 ),
        .O(\USE_RTL_LENGTH.length_counter_q[7]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    \USE_RTL_LENGTH.length_counter_q[7]_i_2__0 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [4]),
        .I1(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .I2(s_axi_rlast_INST_0_i_6_n_0),
        .I3(\USE_RTL_LENGTH.length_counter_q_reg [5]),
        .I4(\USE_RTL_LENGTH.first_mi_word_q ),
        .I5(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [5]),
        .O(\USE_RTL_LENGTH.length_counter_q[7]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[0] 
       (.C(clk),
        .CE(pop_mi_data),
        .D(\USE_RTL_LENGTH.length_counter_q[0]_i_1__0_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[1] 
       (.C(clk),
        .CE(pop_mi_data),
        .D(\USE_RTL_LENGTH.length_counter_q[1]_i_1__0_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[2] 
       (.C(clk),
        .CE(pop_mi_data),
        .D(\USE_RTL_LENGTH.length_counter_q[2]_i_1__0_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[3] 
       (.C(clk),
        .CE(pop_mi_data),
        .D(\USE_RTL_LENGTH.length_counter_q[3]_i_1__0_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [3]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[4] 
       (.C(clk),
        .CE(pop_mi_data),
        .D(\USE_RTL_LENGTH.length_counter_q[4]_i_1__0_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[5] 
       (.C(clk),
        .CE(pop_mi_data),
        .D(\USE_RTL_LENGTH.length_counter_q[5]_i_1__0_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [5]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[6] 
       (.C(clk),
        .CE(pop_mi_data),
        .D(\USE_RTL_LENGTH.length_counter_q[6]_i_1__0_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [6]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[7] 
       (.C(clk),
        .CE(pop_mi_data),
        .D(\USE_RTL_LENGTH.length_counter_q[7]_i_1__0_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [7]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    \current_word_1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] [0]),
        .Q(first_word_reg_1[0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \current_word_1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] [1]),
        .Q(first_word_reg_1[1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \current_word_1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] [2]),
        .Q(first_word_reg_1[2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDSE #(
    .INIT(1'b1)) 
    first_word_reg
       (.C(clk),
        .CE(E),
        .D(first_word_reg_0),
        .Q(first_word),
        .S(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT6 #(
    .INIT(64'hF2000000FFFFFFFF)) 
    \m_payload_i[66]_i_1 
       (.I0(first_word_reg_0),
        .I1(use_wrap_buffer),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I3(s_axi_rready),
        .I4(\USE_READ.rd_cmd_valid ),
        .I5(mr_rvalid),
        .O(\m_payload_i_reg[0] ));
  LUT4 #(
    .INIT(16'h01FD)) 
    \pre_next_word_1[2]_i_3 
       (.I0(\current_word_1_reg[2]_0 [2]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [12]),
        .I2(first_word),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [10]),
        .O(\pre_next_word_1_reg[2]_0 ));
  LUT4 #(
    .INIT(16'hFE02)) 
    \pre_next_word_1[2]_i_4 
       (.I0(\current_word_1_reg[2]_0 [1]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [12]),
        .I2(first_word),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [9]),
        .O(\pre_next_word_1_reg[2]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \pre_next_word_1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(D[0]),
        .Q(\current_word_1_reg[2]_0 [0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \pre_next_word_1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(D[1]),
        .Q(\current_word_1_reg[2]_0 [1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \pre_next_word_1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(D[2]),
        .Q(\current_word_1_reg[2]_0 [2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \rresp_wrap_buffer_reg[0] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[64]),
        .Q(rresp_wrap_buffer[0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \rresp_wrap_buffer_reg[1] 
       (.C(clk),
        .CE(m_valid_i_reg),
        .D(Q[65]),
        .Q(rresp_wrap_buffer[1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[0]_INST_0 
       (.I0(M_AXI_RDATA_I[0]),
        .I1(M_AXI_RDATA_I[32]),
        .I2(use_wrap_buffer),
        .I3(Q[0]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[32]),
        .O(s_axi_rdata[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[10]_INST_0 
       (.I0(M_AXI_RDATA_I[10]),
        .I1(M_AXI_RDATA_I[42]),
        .I2(use_wrap_buffer),
        .I3(Q[10]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[42]),
        .O(s_axi_rdata[10]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[11]_INST_0 
       (.I0(M_AXI_RDATA_I[11]),
        .I1(M_AXI_RDATA_I[43]),
        .I2(use_wrap_buffer),
        .I3(Q[11]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[43]),
        .O(s_axi_rdata[11]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[12]_INST_0 
       (.I0(M_AXI_RDATA_I[12]),
        .I1(M_AXI_RDATA_I[44]),
        .I2(use_wrap_buffer),
        .I3(Q[12]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[44]),
        .O(s_axi_rdata[12]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[13]_INST_0 
       (.I0(M_AXI_RDATA_I[13]),
        .I1(M_AXI_RDATA_I[45]),
        .I2(use_wrap_buffer),
        .I3(Q[13]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[45]),
        .O(s_axi_rdata[13]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[14]_INST_0 
       (.I0(M_AXI_RDATA_I[14]),
        .I1(M_AXI_RDATA_I[46]),
        .I2(use_wrap_buffer),
        .I3(Q[14]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[46]),
        .O(s_axi_rdata[14]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[15]_INST_0 
       (.I0(M_AXI_RDATA_I[15]),
        .I1(M_AXI_RDATA_I[47]),
        .I2(use_wrap_buffer),
        .I3(Q[15]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[47]),
        .O(s_axi_rdata[15]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[16]_INST_0 
       (.I0(M_AXI_RDATA_I[16]),
        .I1(M_AXI_RDATA_I[48]),
        .I2(use_wrap_buffer),
        .I3(Q[16]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[48]),
        .O(s_axi_rdata[16]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[17]_INST_0 
       (.I0(M_AXI_RDATA_I[17]),
        .I1(M_AXI_RDATA_I[49]),
        .I2(use_wrap_buffer),
        .I3(Q[17]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[49]),
        .O(s_axi_rdata[17]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[18]_INST_0 
       (.I0(M_AXI_RDATA_I[18]),
        .I1(M_AXI_RDATA_I[50]),
        .I2(use_wrap_buffer),
        .I3(Q[18]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[50]),
        .O(s_axi_rdata[18]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[19]_INST_0 
       (.I0(M_AXI_RDATA_I[19]),
        .I1(M_AXI_RDATA_I[51]),
        .I2(use_wrap_buffer),
        .I3(Q[19]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[51]),
        .O(s_axi_rdata[19]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[1]_INST_0 
       (.I0(M_AXI_RDATA_I[1]),
        .I1(M_AXI_RDATA_I[33]),
        .I2(use_wrap_buffer),
        .I3(Q[1]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[33]),
        .O(s_axi_rdata[1]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[20]_INST_0 
       (.I0(M_AXI_RDATA_I[20]),
        .I1(M_AXI_RDATA_I[52]),
        .I2(use_wrap_buffer),
        .I3(Q[20]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[52]),
        .O(s_axi_rdata[20]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[21]_INST_0 
       (.I0(M_AXI_RDATA_I[21]),
        .I1(M_AXI_RDATA_I[53]),
        .I2(use_wrap_buffer),
        .I3(Q[21]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[53]),
        .O(s_axi_rdata[21]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[22]_INST_0 
       (.I0(M_AXI_RDATA_I[22]),
        .I1(M_AXI_RDATA_I[54]),
        .I2(use_wrap_buffer),
        .I3(Q[22]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[54]),
        .O(s_axi_rdata[22]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[23]_INST_0 
       (.I0(M_AXI_RDATA_I[23]),
        .I1(M_AXI_RDATA_I[55]),
        .I2(use_wrap_buffer),
        .I3(Q[23]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[55]),
        .O(s_axi_rdata[23]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[24]_INST_0 
       (.I0(M_AXI_RDATA_I[24]),
        .I1(M_AXI_RDATA_I[56]),
        .I2(use_wrap_buffer),
        .I3(Q[24]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[56]),
        .O(s_axi_rdata[24]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[25]_INST_0 
       (.I0(M_AXI_RDATA_I[25]),
        .I1(M_AXI_RDATA_I[57]),
        .I2(use_wrap_buffer),
        .I3(Q[25]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[57]),
        .O(s_axi_rdata[25]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[26]_INST_0 
       (.I0(M_AXI_RDATA_I[26]),
        .I1(M_AXI_RDATA_I[58]),
        .I2(use_wrap_buffer),
        .I3(Q[26]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[58]),
        .O(s_axi_rdata[26]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[27]_INST_0 
       (.I0(M_AXI_RDATA_I[27]),
        .I1(M_AXI_RDATA_I[59]),
        .I2(use_wrap_buffer),
        .I3(Q[27]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[59]),
        .O(s_axi_rdata[27]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[28]_INST_0 
       (.I0(M_AXI_RDATA_I[28]),
        .I1(M_AXI_RDATA_I[60]),
        .I2(use_wrap_buffer),
        .I3(Q[28]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[60]),
        .O(s_axi_rdata[28]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[29]_INST_0 
       (.I0(M_AXI_RDATA_I[29]),
        .I1(M_AXI_RDATA_I[61]),
        .I2(use_wrap_buffer),
        .I3(Q[29]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[61]),
        .O(s_axi_rdata[29]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[2]_INST_0 
       (.I0(M_AXI_RDATA_I[2]),
        .I1(M_AXI_RDATA_I[34]),
        .I2(use_wrap_buffer),
        .I3(Q[2]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[34]),
        .O(s_axi_rdata[2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[30]_INST_0 
       (.I0(M_AXI_RDATA_I[30]),
        .I1(M_AXI_RDATA_I[62]),
        .I2(use_wrap_buffer),
        .I3(Q[30]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[62]),
        .O(s_axi_rdata[30]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[31]_INST_0 
       (.I0(M_AXI_RDATA_I[31]),
        .I1(M_AXI_RDATA_I[63]),
        .I2(use_wrap_buffer),
        .I3(Q[31]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[63]),
        .O(s_axi_rdata[31]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[3]_INST_0 
       (.I0(M_AXI_RDATA_I[3]),
        .I1(M_AXI_RDATA_I[35]),
        .I2(use_wrap_buffer),
        .I3(Q[3]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[35]),
        .O(s_axi_rdata[3]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[4]_INST_0 
       (.I0(M_AXI_RDATA_I[4]),
        .I1(M_AXI_RDATA_I[36]),
        .I2(use_wrap_buffer),
        .I3(Q[4]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[36]),
        .O(s_axi_rdata[4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[5]_INST_0 
       (.I0(M_AXI_RDATA_I[5]),
        .I1(M_AXI_RDATA_I[37]),
        .I2(use_wrap_buffer),
        .I3(Q[5]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[37]),
        .O(s_axi_rdata[5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[6]_INST_0 
       (.I0(M_AXI_RDATA_I[6]),
        .I1(M_AXI_RDATA_I[38]),
        .I2(use_wrap_buffer),
        .I3(Q[6]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[38]),
        .O(s_axi_rdata[6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[7]_INST_0 
       (.I0(M_AXI_RDATA_I[7]),
        .I1(M_AXI_RDATA_I[39]),
        .I2(use_wrap_buffer),
        .I3(Q[7]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[39]),
        .O(s_axi_rdata[7]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[8]_INST_0 
       (.I0(M_AXI_RDATA_I[8]),
        .I1(M_AXI_RDATA_I[40]),
        .I2(use_wrap_buffer),
        .I3(Q[8]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[40]),
        .O(s_axi_rdata[8]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \s_axi_rdata[9]_INST_0 
       (.I0(M_AXI_RDATA_I[9]),
        .I1(M_AXI_RDATA_I[41]),
        .I2(use_wrap_buffer),
        .I3(Q[9]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] ),
        .I5(Q[41]),
        .O(s_axi_rdata[9]));
  LUT6 #(
    .INIT(64'h0000F100F1000000)) 
    s_axi_rlast_INST_0
       (.I0(wrap_buffer_available),
        .I1(use_wrap_buffer_reg_0),
        .I2(use_wrap_buffer),
        .I3(\current_word_1_reg[0]_0 ),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I5(s_axi_rlast_INST_0_i_3_n_0),
        .O(first_word_reg_0));
  LUT6 #(
    .INIT(64'hFFFEEEFEFFFFFFFF)) 
    s_axi_rlast_INST_0_i_1
       (.I0(s_axi_rlast_INST_0_i_4_n_0),
        .I1(s_axi_rlast_INST_0_i_5_n_0),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [7]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [7]),
        .I5(s_axi_rlast_INST_0_i_6_n_0),
        .O(use_wrap_buffer_reg_0));
  LUT4 #(
    .INIT(16'h01FD)) 
    s_axi_rlast_INST_0_i_3
       (.I0(first_word_reg_1[2]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [12]),
        .I2(first_word),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [11]),
        .O(s_axi_rlast_INST_0_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair684" *) 
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    s_axi_rlast_INST_0_i_4
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [5]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [5]),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [4]),
        .O(s_axi_rlast_INST_0_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair686" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    s_axi_rlast_INST_0_i_5
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [6]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [6]),
        .O(s_axi_rlast_INST_0_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    s_axi_rlast_INST_0_i_6
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [2]),
        .I1(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .I2(\USE_RTL_LENGTH.length_counter_q[3]_i_2__0_n_0 ),
        .I3(\USE_RTL_LENGTH.length_counter_q_reg [3]),
        .I4(\USE_RTL_LENGTH.first_mi_word_q ),
        .I5(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [3]),
        .O(s_axi_rlast_INST_0_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair688" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \s_axi_rresp[0]_INST_0 
       (.I0(rresp_wrap_buffer[0]),
        .I1(use_wrap_buffer),
        .I2(Q[64]),
        .O(s_axi_rresp[0]));
  (* SOFT_HLUTNM = "soft_lutpair688" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \s_axi_rresp[1]_INST_0 
       (.I0(rresp_wrap_buffer[1]),
        .I1(use_wrap_buffer),
        .I2(Q[65]),
        .O(s_axi_rresp[1]));
  LUT6 #(
    .INIT(64'h888888888888888A)) 
    s_ready_i_i_2__0
       (.I0(s_axi_rready),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I2(\current_word_1_reg[2]_1 ),
        .I3(use_wrap_buffer),
        .I4(use_wrap_buffer_reg_0),
        .I5(wrap_buffer_available),
        .O(s_ready_i_reg));
  LUT6 #(
    .INIT(64'hCC0CCCBECC0CCC0C)) 
    use_wrap_buffer_i_1
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I1(use_wrap_buffer),
        .I2(first_word_reg_0),
        .I3(use_wrap_buffer_i_2_n_0),
        .I4(use_wrap_buffer_reg_0),
        .I5(wrap_buffer_available),
        .O(use_wrap_buffer_i_1_n_0));
  LUT4 #(
    .INIT(16'h1FFF)) 
    use_wrap_buffer_i_2
       (.I0(use_wrap_buffer),
        .I1(mr_rvalid),
        .I2(\USE_READ.rd_cmd_valid ),
        .I3(s_axi_rready),
        .O(use_wrap_buffer_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    use_wrap_buffer_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(use_wrap_buffer_i_1_n_0),
        .Q(use_wrap_buffer),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT6 #(
    .INIT(64'hFFFFFFF800008888)) 
    wrap_buffer_available_i_1
       (.I0(m_valid_i_reg),
        .I1(s_axi_rready),
        .I2(use_wrap_buffer_reg_0),
        .I3(use_wrap_buffer_i_2_n_0),
        .I4(wrap_buffer_available_i_2__0_n_0),
        .I5(wrap_buffer_available),
        .O(wrap_buffer_available_i_1_n_0));
  LUT5 #(
    .INIT(32'h0000FFFE)) 
    wrap_buffer_available_i_2__0
       (.I0(wrap_buffer_available),
        .I1(use_wrap_buffer_reg_0),
        .I2(use_wrap_buffer),
        .I3(\current_word_1_reg[2]_1 ),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .O(wrap_buffer_available_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wrap_buffer_available_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(wrap_buffer_available_i_1_n_0),
        .Q(wrap_buffer_available),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
endmodule

(* C_AXI_ADDR_WIDTH = "32" *) (* C_AXI_IS_ACLK_ASYNC = "0" *) (* C_AXI_PROTOCOL = "0" *) 
(* C_AXI_SUPPORTS_READ = "1" *) (* C_AXI_SUPPORTS_WRITE = "1" *) (* C_FAMILY = "artix7" *) 
(* C_FIFO_MODE = "0" *) (* C_MAX_SPLIT_BEATS = "256" *) (* C_M_AXI_ACLK_RATIO = "2" *) 
(* C_M_AXI_BYTES_LOG = "2" *) (* C_M_AXI_DATA_WIDTH = "32" *) (* C_PACKING_LEVEL = "1" *) 
(* C_RATIO = "2" *) (* C_RATIO_LOG = "1" *) (* C_SUPPORTS_ID = "1" *) 
(* C_SYNCHRONIZER_STAGE = "3" *) (* C_S_AXI_ACLK_RATIO = "1" *) (* C_S_AXI_BYTES_LOG = "3" *) 
(* C_S_AXI_DATA_WIDTH = "64" *) (* C_S_AXI_ID_WIDTH = "1" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_top" *) (* P_AXI3 = "1" *) (* P_AXI4 = "0" *) 
(* P_AXILITE = "2" *) (* P_CONVERSION = "2" *) (* P_MAX_SPLIT_BEATS = "256" *) 
module bd_1_axi_dwidth_converter_v2_1_15_top
   (s_axi_aclk,
    s_axi_aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_aclk,
    m_axi_aresetn,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* keep = "true" *) input s_axi_aclk;
  (* keep = "true" *) input s_axi_aresetn;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awregion;
  input [3:0]s_axi_awqos;
  input s_axi_awvalid;
  output s_axi_awready;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output s_axi_bvalid;
  input s_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arregion;
  input [3:0]s_axi_arqos;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output s_axi_rvalid;
  input s_axi_rready;
  (* keep = "true" *) input m_axi_aclk;
  (* keep = "true" *) input m_axi_aresetn;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awregion;
  output [3:0]m_axi_awqos;
  output m_axi_awvalid;
  input m_axi_awready;
  output [31:0]m_axi_wdata;
  output [3:0]m_axi_wstrb;
  output m_axi_wlast;
  output m_axi_wvalid;
  input m_axi_wready;
  input [1:0]m_axi_bresp;
  input m_axi_bvalid;
  output m_axi_bready;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arregion;
  output [3:0]m_axi_arqos;
  output m_axi_arvalid;
  input m_axi_arready;
  input [31:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input m_axi_rvalid;
  output m_axi_rready;

  (* RTL_KEEP = "true" *) wire m_axi_aclk;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  (* RTL_KEEP = "true" *) wire m_axi_aresetn;
  wire [7:0]m_axi_arlen;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [31:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [3:0]m_axi_wstrb;
  wire m_axi_wvalid;
  (* RTL_KEEP = "true" *) wire s_axi_aclk;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  (* RTL_KEEP = "true" *) wire s_axi_aresetn;
  wire [0:0]s_axi_arid;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire s_axi_arready;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [0:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire [0:0]s_axi_bid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [63:0]s_axi_rdata;
  wire [0:0]s_axi_rid;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [63:0]s_axi_wdata;
  wire s_axi_wready;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;

  bd_1_axi_dwidth_converter_v2_1_15_axi_downsizer \gen_downsizer.gen_simple_downsizer.axi_downsizer_inst 
       (.CLK(s_axi_aclk),
        .\S_AXI_AREGION_Q_reg[0] (s_axi_awready),
        .\S_AXI_AREGION_Q_reg[0]_0 (s_axi_arready),
        .cmd_push_block_reg(m_axi_arvalid),
        .din({m_axi_awsize,m_axi_awlen}),
        .first_word_reg(m_axi_wlast),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arcache(m_axi_arcache),
        .m_axi_arlock(m_axi_arlock),
        .m_axi_arprot(m_axi_arprot),
        .m_axi_arqos(m_axi_arqos),
        .m_axi_arready(m_axi_arready),
        .m_axi_arregion(m_axi_arregion),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awcache(m_axi_awcache),
        .m_axi_awlock(m_axi_awlock),
        .m_axi_awprot(m_axi_awprot),
        .m_axi_awqos(m_axi_awqos),
        .m_axi_awready(m_axi_awready),
        .m_axi_awregion(m_axi_awregion),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wvalid(m_axi_wvalid),
        .\m_payload_i_reg[37] ({m_axi_arsize,m_axi_arlen}),
        .out(s_axi_aresetn),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arburst(s_axi_arburst),
        .s_axi_arcache(s_axi_arcache),
        .s_axi_arid(s_axi_arid),
        .s_axi_arlen(s_axi_arlen),
        .s_axi_arlock(s_axi_arlock),
        .s_axi_arprot(s_axi_arprot),
        .s_axi_arqos(s_axi_arqos),
        .s_axi_arregion(s_axi_arregion),
        .s_axi_arsize(s_axi_arsize),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awburst(s_axi_awburst),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awid(s_axi_awid),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awlock(s_axi_awlock),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awregion(s_axi_awregion),
        .s_axi_awsize(s_axi_awsize),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bid(s_axi_bid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[67] (s_axi_rid));
endmodule

(* C_AXI_ADDR_WIDTH = "32" *) (* C_AXI_IS_ACLK_ASYNC = "0" *) (* C_AXI_PROTOCOL = "0" *) 
(* C_AXI_SUPPORTS_READ = "1" *) (* C_AXI_SUPPORTS_WRITE = "1" *) (* C_FAMILY = "artix7" *) 
(* C_FIFO_MODE = "0" *) (* C_MAX_SPLIT_BEATS = "16" *) (* C_M_AXI_ACLK_RATIO = "2" *) 
(* C_M_AXI_BYTES_LOG = "3" *) (* C_M_AXI_DATA_WIDTH = "64" *) (* C_PACKING_LEVEL = "1" *) 
(* C_RATIO = "0" *) (* C_RATIO_LOG = "0" *) (* C_SUPPORTS_ID = "0" *) 
(* C_SYNCHRONIZER_STAGE = "3" *) (* C_S_AXI_ACLK_RATIO = "1" *) (* C_S_AXI_BYTES_LOG = "2" *) 
(* C_S_AXI_DATA_WIDTH = "32" *) (* C_S_AXI_ID_WIDTH = "1" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_top" *) (* P_AXI3 = "1" *) (* P_AXI4 = "0" *) 
(* P_AXILITE = "2" *) (* P_CONVERSION = "2" *) (* P_MAX_SPLIT_BEATS = "16" *) 
module bd_1_axi_dwidth_converter_v2_1_15_top__parameterized0
   (s_axi_aclk,
    s_axi_aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_aclk,
    m_axi_aresetn,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* keep = "true" *) input s_axi_aclk;
  (* keep = "true" *) input s_axi_aresetn;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awregion;
  input [3:0]s_axi_awqos;
  input s_axi_awvalid;
  output s_axi_awready;
  input [31:0]s_axi_wdata;
  input [3:0]s_axi_wstrb;
  input s_axi_wlast;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output s_axi_bvalid;
  input s_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arregion;
  input [3:0]s_axi_arqos;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [31:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output s_axi_rvalid;
  input s_axi_rready;
  (* keep = "true" *) input m_axi_aclk;
  (* keep = "true" *) input m_axi_aresetn;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awregion;
  output [3:0]m_axi_awqos;
  output m_axi_awvalid;
  input m_axi_awready;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output m_axi_wvalid;
  input m_axi_wready;
  input [1:0]m_axi_bresp;
  input m_axi_bvalid;
  output m_axi_bready;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arregion;
  output [3:0]m_axi_arqos;
  output m_axi_arvalid;
  input m_axi_arready;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input m_axi_rvalid;
  output m_axi_rready;

  wire \<const0> ;
  (* RTL_KEEP = "true" *) wire m_axi_aclk;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  (* RTL_KEEP = "true" *) wire m_axi_aresetn;
  wire [7:0]m_axi_arlen;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [63:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire m_axi_wvalid;
  (* RTL_KEEP = "true" *) wire s_axi_aclk;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  (* RTL_KEEP = "true" *) wire s_axi_aresetn;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire s_axi_arready;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [31:0]s_axi_rdata;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;

  assign m_axi_bready = s_axi_bready;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1:0] = m_axi_bresp;
  assign s_axi_bvalid = m_axi_bvalid;
  assign s_axi_rid[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  bd_1_axi_dwidth_converter_v2_1_15_axi_upsizer \gen_upsizer.gen_full_upsizer.axi_upsizer_inst 
       (.D({s_axi_awregion,s_axi_awqos,s_axi_awlock,s_axi_awlen,s_axi_awcache,s_axi_awburst,s_axi_awsize,s_axi_awprot,s_axi_awaddr}),
        .Q({m_axi_awregion,m_axi_awqos,m_axi_awlock,m_axi_awcache,m_axi_awprot}),
        .UNCONN_OUT({m_axi_arregion,m_axi_arqos,m_axi_arlock,m_axi_arcache,m_axi_arprot}),
        .\USE_REGISTER.M_AXI_WLAST_q_reg (m_axi_wvalid),
        .clk(s_axi_aclk),
        .first_word_reg(s_axi_rlast),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arlen(m_axi_arlen),
        .m_axi_arready(m_axi_arready),
        .m_axi_arsize(m_axi_arsize),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awlen(m_axi_awlen),
        .m_axi_awready(m_axi_awready),
        .m_axi_awsize(m_axi_awsize),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .\m_payload_i_reg[61] ({s_axi_arregion,s_axi_arqos,s_axi_arlock,s_axi_arlen,s_axi_arcache,s_axi_arburst,s_axi_arsize,s_axi_arprot,s_axi_araddr}),
        .out(s_axi_aresetn),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[66] (m_axi_rready));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_w_downsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_w_downsizer
   (first_word_reg_0,
    m_axi_wdata,
    m_axi_wstrb,
    \current_word_1_reg[1]_0 ,
    \current_word_1_reg[1]_1 ,
    \current_word_1_reg[2]_0 ,
    SR,
    E,
    CLK,
    \goreg_dm.dout_i_reg[25] ,
    s_axi_wdata,
    s_axi_wstrb,
    D);
  output first_word_reg_0;
  output [31:0]m_axi_wdata;
  output [3:0]m_axi_wstrb;
  output \current_word_1_reg[1]_0 ;
  output \current_word_1_reg[1]_1 ;
  output \current_word_1_reg[2]_0 ;
  input [0:0]SR;
  input [0:0]E;
  input CLK;
  input [17:0]\goreg_dm.dout_i_reg[25] ;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input [2:0]D;

  wire CLK;
  wire [2:0]D;
  wire [0:0]E;
  wire [0:0]SR;
  wire [2:0]current_word_1;
  wire \current_word_1_reg[1]_0 ;
  wire \current_word_1_reg[1]_1 ;
  wire \current_word_1_reg[2]_0 ;
  wire first_mi_word;
  wire first_word_reg_0;
  wire [17:0]\goreg_dm.dout_i_reg[25] ;
  wire \length_counter_1[1]_i_1_n_0 ;
  wire \length_counter_1[2]_i_2_n_0 ;
  wire \length_counter_1[3]_i_2_n_0 ;
  wire \length_counter_1[4]_i_2_n_0 ;
  wire \length_counter_1[6]_i_2_n_0 ;
  wire [7:0]length_counter_1_reg__0;
  wire [31:0]m_axi_wdata;
  wire \m_axi_wdata[31]_INST_0_i_1_n_0 ;
  wire \m_axi_wdata[31]_INST_0_i_2_n_0 ;
  wire m_axi_wlast_INST_0_i_1_n_0;
  wire m_axi_wlast_INST_0_i_2_n_0;
  wire [3:0]m_axi_wstrb;
  wire [7:0]next_length_counter;
  wire [63:0]s_axi_wdata;
  wire [7:0]s_axi_wstrb;

  LUT6 #(
    .INIT(64'hF0F0F00FF03CF0B4)) 
    \current_word_1[2]_i_2__0 
       (.I0(\current_word_1_reg[1]_1 ),
        .I1(\current_word_1_reg[1]_0 ),
        .I2(\m_axi_wdata[31]_INST_0_i_2_n_0 ),
        .I3(\goreg_dm.dout_i_reg[25] [10]),
        .I4(\goreg_dm.dout_i_reg[25] [8]),
        .I5(\goreg_dm.dout_i_reg[25] [9]),
        .O(\current_word_1_reg[2]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \current_word_1_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(D[0]),
        .Q(current_word_1[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \current_word_1_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(D[1]),
        .Q(current_word_1[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \current_word_1_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(D[2]),
        .Q(current_word_1[2]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    first_word_reg
       (.C(CLK),
        .CE(E),
        .D(first_word_reg_0),
        .Q(first_mi_word),
        .S(SR));
  (* SOFT_HLUTNM = "soft_lutpair471" *) 
  LUT3 #(
    .INIT(8'h1D)) 
    \length_counter_1[0]_i_1 
       (.I0(length_counter_1_reg__0[0]),
        .I1(first_mi_word),
        .I2(\goreg_dm.dout_i_reg[25] [0]),
        .O(next_length_counter[0]));
  (* SOFT_HLUTNM = "soft_lutpair452" *) 
  LUT5 #(
    .INIT(32'hCCA533A5)) 
    \length_counter_1[1]_i_1 
       (.I0(length_counter_1_reg__0[1]),
        .I1(\goreg_dm.dout_i_reg[25] [1]),
        .I2(length_counter_1_reg__0[0]),
        .I3(first_mi_word),
        .I4(\goreg_dm.dout_i_reg[25] [0]),
        .O(\length_counter_1[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEFA051111FA05)) 
    \length_counter_1[2]_i_1 
       (.I0(\length_counter_1[2]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[25] [1]),
        .I2(length_counter_1_reg__0[1]),
        .I3(length_counter_1_reg__0[2]),
        .I4(first_mi_word),
        .I5(\goreg_dm.dout_i_reg[25] [2]),
        .O(next_length_counter[2]));
  (* SOFT_HLUTNM = "soft_lutpair471" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \length_counter_1[2]_i_2 
       (.I0(\goreg_dm.dout_i_reg[25] [0]),
        .I1(first_mi_word),
        .I2(length_counter_1_reg__0[0]),
        .O(\length_counter_1[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hC3AAC355CCAACCAA)) 
    \length_counter_1[3]_i_1 
       (.I0(length_counter_1_reg__0[3]),
        .I1(\goreg_dm.dout_i_reg[25] [3]),
        .I2(\goreg_dm.dout_i_reg[25] [2]),
        .I3(first_mi_word),
        .I4(length_counter_1_reg__0[2]),
        .I5(\length_counter_1[3]_i_2_n_0 ),
        .O(next_length_counter[3]));
  (* SOFT_HLUTNM = "soft_lutpair452" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \length_counter_1[3]_i_2 
       (.I0(length_counter_1_reg__0[1]),
        .I1(\goreg_dm.dout_i_reg[25] [1]),
        .I2(length_counter_1_reg__0[0]),
        .I3(first_mi_word),
        .I4(\goreg_dm.dout_i_reg[25] [0]),
        .O(\length_counter_1[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \length_counter_1[4]_i_1 
       (.I0(\goreg_dm.dout_i_reg[25] [3]),
        .I1(length_counter_1_reg__0[3]),
        .I2(\length_counter_1[4]_i_2_n_0 ),
        .I3(length_counter_1_reg__0[4]),
        .I4(first_mi_word),
        .I5(\goreg_dm.dout_i_reg[25] [4]),
        .O(next_length_counter[4]));
  LUT6 #(
    .INIT(64'h0000000511110005)) 
    \length_counter_1[4]_i_2 
       (.I0(\length_counter_1[2]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[25] [1]),
        .I2(length_counter_1_reg__0[1]),
        .I3(length_counter_1_reg__0[2]),
        .I4(first_mi_word),
        .I5(\goreg_dm.dout_i_reg[25] [2]),
        .O(\length_counter_1[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \length_counter_1[5]_i_1 
       (.I0(\goreg_dm.dout_i_reg[25] [4]),
        .I1(length_counter_1_reg__0[4]),
        .I2(m_axi_wlast_INST_0_i_2_n_0),
        .I3(length_counter_1_reg__0[5]),
        .I4(first_mi_word),
        .I5(\goreg_dm.dout_i_reg[25] [5]),
        .O(next_length_counter[5]));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \length_counter_1[6]_i_1 
       (.I0(\goreg_dm.dout_i_reg[25] [5]),
        .I1(length_counter_1_reg__0[5]),
        .I2(\length_counter_1[6]_i_2_n_0 ),
        .I3(length_counter_1_reg__0[6]),
        .I4(first_mi_word),
        .I5(\goreg_dm.dout_i_reg[25] [6]),
        .O(next_length_counter[6]));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    \length_counter_1[6]_i_2 
       (.I0(\goreg_dm.dout_i_reg[25] [3]),
        .I1(length_counter_1_reg__0[3]),
        .I2(\length_counter_1[4]_i_2_n_0 ),
        .I3(length_counter_1_reg__0[4]),
        .I4(first_mi_word),
        .I5(\goreg_dm.dout_i_reg[25] [4]),
        .O(\length_counter_1[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \length_counter_1[7]_i_1 
       (.I0(\goreg_dm.dout_i_reg[25] [6]),
        .I1(length_counter_1_reg__0[6]),
        .I2(m_axi_wlast_INST_0_i_1_n_0),
        .I3(length_counter_1_reg__0[7]),
        .I4(first_mi_word),
        .I5(\goreg_dm.dout_i_reg[25] [7]),
        .O(next_length_counter[7]));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter[0]),
        .Q(length_counter_1_reg__0[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(\length_counter_1[1]_i_1_n_0 ),
        .Q(length_counter_1_reg__0[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter[2]),
        .Q(length_counter_1_reg__0[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter[3]),
        .Q(length_counter_1_reg__0[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter[4]),
        .Q(length_counter_1_reg__0[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter[5]),
        .Q(length_counter_1_reg__0[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter[6]),
        .Q(length_counter_1_reg__0[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \length_counter_1_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(next_length_counter[7]),
        .Q(length_counter_1_reg__0[7]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair453" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[0]_INST_0 
       (.I0(s_axi_wdata[0]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[32]),
        .O(m_axi_wdata[0]));
  (* SOFT_HLUTNM = "soft_lutpair455" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[10]_INST_0 
       (.I0(s_axi_wdata[10]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[42]),
        .O(m_axi_wdata[10]));
  (* SOFT_HLUTNM = "soft_lutpair456" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[11]_INST_0 
       (.I0(s_axi_wdata[11]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[43]),
        .O(m_axi_wdata[11]));
  (* SOFT_HLUTNM = "soft_lutpair453" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[12]_INST_0 
       (.I0(s_axi_wdata[12]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[44]),
        .O(m_axi_wdata[12]));
  (* SOFT_HLUTNM = "soft_lutpair457" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[13]_INST_0 
       (.I0(s_axi_wdata[13]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[45]),
        .O(m_axi_wdata[13]));
  (* SOFT_HLUTNM = "soft_lutpair458" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[14]_INST_0 
       (.I0(s_axi_wdata[14]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[46]),
        .O(m_axi_wdata[14]));
  (* SOFT_HLUTNM = "soft_lutpair461" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[15]_INST_0 
       (.I0(s_axi_wdata[15]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[47]),
        .O(m_axi_wdata[15]));
  (* SOFT_HLUTNM = "soft_lutpair462" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[16]_INST_0 
       (.I0(s_axi_wdata[16]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[48]),
        .O(m_axi_wdata[16]));
  (* SOFT_HLUTNM = "soft_lutpair460" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[17]_INST_0 
       (.I0(s_axi_wdata[17]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[49]),
        .O(m_axi_wdata[17]));
  (* SOFT_HLUTNM = "soft_lutpair461" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[18]_INST_0 
       (.I0(s_axi_wdata[18]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[50]),
        .O(m_axi_wdata[18]));
  (* SOFT_HLUTNM = "soft_lutpair463" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[19]_INST_0 
       (.I0(s_axi_wdata[19]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[51]),
        .O(m_axi_wdata[19]));
  (* SOFT_HLUTNM = "soft_lutpair454" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[1]_INST_0 
       (.I0(s_axi_wdata[1]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[33]),
        .O(m_axi_wdata[1]));
  (* SOFT_HLUTNM = "soft_lutpair464" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[20]_INST_0 
       (.I0(s_axi_wdata[20]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[52]),
        .O(m_axi_wdata[20]));
  (* SOFT_HLUTNM = "soft_lutpair462" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[21]_INST_0 
       (.I0(s_axi_wdata[21]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[53]),
        .O(m_axi_wdata[21]));
  (* SOFT_HLUTNM = "soft_lutpair463" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[22]_INST_0 
       (.I0(s_axi_wdata[22]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[54]),
        .O(m_axi_wdata[22]));
  (* SOFT_HLUTNM = "soft_lutpair464" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[23]_INST_0 
       (.I0(s_axi_wdata[23]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[55]),
        .O(m_axi_wdata[23]));
  (* SOFT_HLUTNM = "soft_lutpair465" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[24]_INST_0 
       (.I0(s_axi_wdata[24]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[56]),
        .O(m_axi_wdata[24]));
  (* SOFT_HLUTNM = "soft_lutpair466" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[25]_INST_0 
       (.I0(s_axi_wdata[25]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[57]),
        .O(m_axi_wdata[25]));
  (* SOFT_HLUTNM = "soft_lutpair465" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[26]_INST_0 
       (.I0(s_axi_wdata[26]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[58]),
        .O(m_axi_wdata[26]));
  (* SOFT_HLUTNM = "soft_lutpair466" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[27]_INST_0 
       (.I0(s_axi_wdata[27]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[59]),
        .O(m_axi_wdata[27]));
  (* SOFT_HLUTNM = "soft_lutpair467" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[28]_INST_0 
       (.I0(s_axi_wdata[28]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[60]),
        .O(m_axi_wdata[28]));
  (* SOFT_HLUTNM = "soft_lutpair467" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[29]_INST_0 
       (.I0(s_axi_wdata[29]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[61]),
        .O(m_axi_wdata[29]));
  (* SOFT_HLUTNM = "soft_lutpair455" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[2]_INST_0 
       (.I0(s_axi_wdata[2]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[34]),
        .O(m_axi_wdata[2]));
  (* SOFT_HLUTNM = "soft_lutpair468" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[30]_INST_0 
       (.I0(s_axi_wdata[30]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[62]),
        .O(m_axi_wdata[30]));
  (* SOFT_HLUTNM = "soft_lutpair468" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[31]_INST_0 
       (.I0(s_axi_wdata[31]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[63]),
        .O(m_axi_wdata[31]));
  LUT6 #(
    .INIT(64'h9666999696669666)) 
    \m_axi_wdata[31]_INST_0_i_1 
       (.I0(\m_axi_wdata[31]_INST_0_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[25] [13]),
        .I2(\current_word_1_reg[1]_0 ),
        .I3(\goreg_dm.dout_i_reg[25] [12]),
        .I4(\current_word_1_reg[1]_1 ),
        .I5(\goreg_dm.dout_i_reg[25] [11]),
        .O(\m_axi_wdata[31]_INST_0_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h01FD)) 
    \m_axi_wdata[31]_INST_0_i_2 
       (.I0(current_word_1[2]),
        .I1(\goreg_dm.dout_i_reg[25] [17]),
        .I2(first_mi_word),
        .I3(\goreg_dm.dout_i_reg[25] [16]),
        .O(\m_axi_wdata[31]_INST_0_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFE02)) 
    \m_axi_wdata[31]_INST_0_i_3 
       (.I0(current_word_1[1]),
        .I1(\goreg_dm.dout_i_reg[25] [17]),
        .I2(first_mi_word),
        .I3(\goreg_dm.dout_i_reg[25] [15]),
        .O(\current_word_1_reg[1]_0 ));
  LUT4 #(
    .INIT(16'h01FD)) 
    \m_axi_wdata[31]_INST_0_i_4 
       (.I0(current_word_1[0]),
        .I1(\goreg_dm.dout_i_reg[25] [17]),
        .I2(first_mi_word),
        .I3(\goreg_dm.dout_i_reg[25] [14]),
        .O(\current_word_1_reg[1]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair456" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[3]_INST_0 
       (.I0(s_axi_wdata[3]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[35]),
        .O(m_axi_wdata[3]));
  (* SOFT_HLUTNM = "soft_lutpair457" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[4]_INST_0 
       (.I0(s_axi_wdata[4]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[36]),
        .O(m_axi_wdata[4]));
  (* SOFT_HLUTNM = "soft_lutpair458" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[5]_INST_0 
       (.I0(s_axi_wdata[5]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[37]),
        .O(m_axi_wdata[5]));
  (* SOFT_HLUTNM = "soft_lutpair459" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[6]_INST_0 
       (.I0(s_axi_wdata[6]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[38]),
        .O(m_axi_wdata[6]));
  (* SOFT_HLUTNM = "soft_lutpair460" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[7]_INST_0 
       (.I0(s_axi_wdata[7]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[39]),
        .O(m_axi_wdata[7]));
  (* SOFT_HLUTNM = "soft_lutpair459" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[8]_INST_0 
       (.I0(s_axi_wdata[8]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[40]),
        .O(m_axi_wdata[8]));
  (* SOFT_HLUTNM = "soft_lutpair454" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wdata[9]_INST_0 
       (.I0(s_axi_wdata[9]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wdata[41]),
        .O(m_axi_wdata[9]));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    m_axi_wlast_INST_0
       (.I0(\goreg_dm.dout_i_reg[25] [6]),
        .I1(length_counter_1_reg__0[6]),
        .I2(m_axi_wlast_INST_0_i_1_n_0),
        .I3(length_counter_1_reg__0[7]),
        .I4(first_mi_word),
        .I5(\goreg_dm.dout_i_reg[25] [7]),
        .O(first_word_reg_0));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    m_axi_wlast_INST_0_i_1
       (.I0(\goreg_dm.dout_i_reg[25] [4]),
        .I1(length_counter_1_reg__0[4]),
        .I2(m_axi_wlast_INST_0_i_2_n_0),
        .I3(length_counter_1_reg__0[5]),
        .I4(first_mi_word),
        .I5(\goreg_dm.dout_i_reg[25] [5]),
        .O(m_axi_wlast_INST_0_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    m_axi_wlast_INST_0_i_2
       (.I0(\goreg_dm.dout_i_reg[25] [2]),
        .I1(length_counter_1_reg__0[2]),
        .I2(\length_counter_1[3]_i_2_n_0 ),
        .I3(length_counter_1_reg__0[3]),
        .I4(first_mi_word),
        .I5(\goreg_dm.dout_i_reg[25] [3]),
        .O(m_axi_wlast_INST_0_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair469" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[0]_INST_0 
       (.I0(s_axi_wstrb[0]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wstrb[4]),
        .O(m_axi_wstrb[0]));
  (* SOFT_HLUTNM = "soft_lutpair469" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[1]_INST_0 
       (.I0(s_axi_wstrb[1]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wstrb[5]),
        .O(m_axi_wstrb[1]));
  (* SOFT_HLUTNM = "soft_lutpair470" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[2]_INST_0 
       (.I0(s_axi_wstrb[2]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wstrb[6]),
        .O(m_axi_wstrb[2]));
  (* SOFT_HLUTNM = "soft_lutpair470" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_wstrb[3]_INST_0 
       (.I0(s_axi_wstrb[3]),
        .I1(\m_axi_wdata[31]_INST_0_i_1_n_0 ),
        .I2(s_axi_wstrb[7]),
        .O(m_axi_wstrb[3]));
endmodule

(* ORIG_REF_NAME = "axi_dwidth_converter_v2_1_15_w_upsizer" *) 
module bd_1_axi_dwidth_converter_v2_1_15_w_upsizer
   (\USE_RTL_CURR_WORD.first_word_q ,
    \USE_REGISTER.M_AXI_WLAST_q_reg_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0]_0 ,
    wstrb_wrap_buffer_1,
    wstrb_wrap_buffer_2,
    wstrb_wrap_buffer_3,
    wstrb_wrap_buffer_4,
    wstrb_wrap_buffer_5,
    wstrb_wrap_buffer_6,
    wstrb_wrap_buffer_7,
    m_axi_wstrb,
    wrap_buffer_available,
    \USE_REGISTER.M_AXI_WLAST_q_reg_1 ,
    m_axi_wlast,
    \USE_RTL_LENGTH.first_mi_word_q_reg_0 ,
    \USE_RTL_LENGTH.length_counter_q_reg[2]_0 ,
    \USE_RTL_LENGTH.first_mi_word_q_reg_1 ,
    \USE_RTL_LENGTH.first_mi_word_q_reg_2 ,
    \USE_REGISTER.M_AXI_WVALID_q_reg_0 ,
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ,
    \USE_RTL_CURR_WORD.current_word_q_reg[2]_0 ,
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_1 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7]_0 ,
    \USE_RTL_LENGTH.first_mi_word_q_reg_3 ,
    m_axi_wdata,
    pop_si_data,
    s_axi_wlast,
    clk,
    p_251_in,
    SR,
    \m_payload_i_reg[36] ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_VALID_Q_reg ,
    wrap_buffer_available_reg_0,
    m_axi_wready,
    \m_payload_i_reg[35] ,
    \m_payload_i_reg[34] ,
    \m_payload_i_reg[33] ,
    \m_payload_i_reg[32] ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16] ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_0 ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_1 ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_2 ,
    E,
    wrap_buffer_available_reg_1,
    wrap_buffer_available_reg_2,
    wrap_buffer_available_reg_3,
    wrap_buffer_available_reg_4,
    wrap_buffer_available_reg_5,
    wrap_buffer_available_reg_6,
    wrap_buffer_available_reg_7,
    Q,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ,
    s_axi_wdata,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ,
    \m_payload_i_reg[32]_0 ,
    \USE_WRITE.wr_cmd_valid ,
    s_axi_wvalid,
    out,
    D,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 );
  output \USE_RTL_CURR_WORD.first_word_q ;
  output \USE_REGISTER.M_AXI_WLAST_q_reg_0 ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0]_0 ;
  output wstrb_wrap_buffer_1;
  output wstrb_wrap_buffer_2;
  output wstrb_wrap_buffer_3;
  output wstrb_wrap_buffer_4;
  output wstrb_wrap_buffer_5;
  output wstrb_wrap_buffer_6;
  output wstrb_wrap_buffer_7;
  output [7:0]m_axi_wstrb;
  output wrap_buffer_available;
  output \USE_REGISTER.M_AXI_WLAST_q_reg_1 ;
  output m_axi_wlast;
  output \USE_RTL_LENGTH.first_mi_word_q_reg_0 ;
  output \USE_RTL_LENGTH.length_counter_q_reg[2]_0 ;
  output \USE_RTL_LENGTH.first_mi_word_q_reg_1 ;
  output \USE_RTL_LENGTH.first_mi_word_q_reg_2 ;
  output \USE_REGISTER.M_AXI_WVALID_q_reg_0 ;
  output \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ;
  output [2:0]\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 ;
  output \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_1 ;
  output [2:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7]_0 ;
  output \USE_RTL_LENGTH.first_mi_word_q_reg_3 ;
  output [63:0]m_axi_wdata;
  input pop_si_data;
  input s_axi_wlast;
  input clk;
  input p_251_in;
  input [0:0]SR;
  input \m_payload_i_reg[36] ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_VALID_Q_reg ;
  input wrap_buffer_available_reg_0;
  input m_axi_wready;
  input \m_payload_i_reg[35] ;
  input \m_payload_i_reg[34] ;
  input \m_payload_i_reg[33] ;
  input \m_payload_i_reg[32] ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16] ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_0 ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_1 ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_2 ;
  input [0:0]E;
  input [0:0]wrap_buffer_available_reg_1;
  input [0:0]wrap_buffer_available_reg_2;
  input [0:0]wrap_buffer_available_reg_3;
  input [0:0]wrap_buffer_available_reg_4;
  input [0:0]wrap_buffer_available_reg_5;
  input [0:0]wrap_buffer_available_reg_6;
  input [0:0]wrap_buffer_available_reg_7;
  input [14:0]Q;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ;
  input [31:0]s_axi_wdata;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ;
  input \m_payload_i_reg[32]_0 ;
  input \USE_WRITE.wr_cmd_valid ;
  input s_axi_wvalid;
  input out;
  input [2:0]D;
  input [2:0]\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] ;
  input [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ;
  input [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ;
  input [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ;
  input [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ;
  input [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ;
  input [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ;
  input [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ;
  input [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 ;

  wire \<const1> ;
  wire [2:0]D;
  wire [0:0]E;
  wire [14:0]Q;
  wire [0:0]SR;
  wire [2:0]\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16] ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_0 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_1 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_2 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_VALID_Q_reg ;
  wire \USE_REGISTER.M_AXI_WLAST_q_i_1_n_0 ;
  wire \USE_REGISTER.M_AXI_WLAST_q_reg_0 ;
  wire \USE_REGISTER.M_AXI_WLAST_q_reg_1 ;
  wire \USE_REGISTER.M_AXI_WVALID_q_reg_0 ;
  wire [2:0]\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 ;
  wire \USE_RTL_CURR_WORD.first_word_q ;
  wire \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ;
  wire \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_1 ;
  wire \USE_RTL_LENGTH.first_mi_word_q ;
  wire \USE_RTL_LENGTH.first_mi_word_q_reg_0 ;
  wire \USE_RTL_LENGTH.first_mi_word_q_reg_1 ;
  wire \USE_RTL_LENGTH.first_mi_word_q_reg_2 ;
  wire \USE_RTL_LENGTH.first_mi_word_q_reg_3 ;
  wire \USE_RTL_LENGTH.length_counter_q[0]_i_1_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[1]_i_1_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[2]_i_1_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[3]_i_1_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[4]_i_1_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[5]_i_1_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[6]_i_1_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[6]_i_2_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[6]_i_3_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[7]_i_1_n_0 ;
  wire \USE_RTL_LENGTH.length_counter_q[7]_i_2_n_0 ;
  wire [7:0]\USE_RTL_LENGTH.length_counter_q_reg ;
  wire \USE_RTL_LENGTH.length_counter_q_reg[2]_0 ;
  wire \USE_WRITE.wr_cmd_valid ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[0]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0]_0 ;
  wire [7:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg ;
  wire [2:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q[0]_i_1_n_0 ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[10]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[11]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[12]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[13]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[14]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_2_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[8]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[9]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[1]_i_1_n_0 ;
  wire [7:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q[1]_i_1_n_0 ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[16]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[17]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[18]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[19]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[20]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[21]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[22]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_2_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[2]_i_1_n_0 ;
  wire [7:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q[2]_i_1_n_0 ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[24]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[25]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[26]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[27]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[28]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[29]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[30]_i_1_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_2_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4_n_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[3]_i_1_n_0 ;
  wire [7:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q[3]_i_1_n_0 ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[32]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[33]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[34]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[35]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[36]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[37]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[38]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_2_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[4]_i_1_n_0 ;
  wire [7:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q[4]_i_1_n_0 ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[40]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[41]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[42]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[43]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[44]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[45]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[46]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_2_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[5]_i_1_n_0 ;
  wire [7:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q[5]_i_1_n_0 ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[48]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[49]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[50]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[51]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[52]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[53]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[54]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_2_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[6]_i_1_n_0 ;
  wire [7:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q[6]_i_1_n_0 ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[56]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[57]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[58]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[59]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[60]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[61]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[62]_i_1_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_3_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[7]_i_1_n_0 ;
  wire [7:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q[7]_i_1_n_0 ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 ;
  wire clk;
  wire [63:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire \m_payload_i_reg[32] ;
  wire \m_payload_i_reg[32]_0 ;
  wire \m_payload_i_reg[33] ;
  wire \m_payload_i_reg[34] ;
  wire \m_payload_i_reg[35] ;
  wire \m_payload_i_reg[36] ;
  wire out;
  wire [7:0]p_1_in;
  wire p_251_in;
  wire pop_si_data;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wvalid;
  wire wrap_buffer_available;
  wire wrap_buffer_available_reg_0;
  wire [0:0]wrap_buffer_available_reg_1;
  wire [0:0]wrap_buffer_available_reg_2;
  wire [0:0]wrap_buffer_available_reg_3;
  wire [0:0]wrap_buffer_available_reg_4;
  wire [0:0]wrap_buffer_available_reg_5;
  wire [0:0]wrap_buffer_available_reg_6;
  wire [0:0]wrap_buffer_available_reg_7;
  wire wstrb_wrap_buffer_1;
  wire wstrb_wrap_buffer_2;
  wire wstrb_wrap_buffer_3;
  wire wstrb_wrap_buffer_4;
  wire wstrb_wrap_buffer_5;
  wire wstrb_wrap_buffer_6;
  wire wstrb_wrap_buffer_7;

  LUT4 #(
    .INIT(16'hBA8A)) 
    \USE_REGISTER.M_AXI_WLAST_q_i_1 
       (.I0(s_axi_wlast),
        .I1(m_axi_wready),
        .I2(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .I3(m_axi_wlast),
        .O(\USE_REGISTER.M_AXI_WLAST_q_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_REGISTER.M_AXI_WLAST_q_reg 
       (.C(clk),
        .CE(\<const1> ),
        .D(\USE_REGISTER.M_AXI_WLAST_q_i_1_n_0 ),
        .Q(m_axi_wlast),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair695" *) 
  LUT4 #(
    .INIT(16'hFEAE)) 
    \USE_REGISTER.M_AXI_WVALID_q_i_5 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg[2]_0 ),
        .I1(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .I2(\USE_RTL_LENGTH.first_mi_word_q ),
        .I3(Q[2]),
        .O(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_REGISTER.M_AXI_WVALID_q_reg 
       (.C(clk),
        .CE(\<const1> ),
        .D(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_VALID_Q_reg ),
        .Q(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_CURR_WORD.current_word_q_reg[0] 
       (.C(clk),
        .CE(pop_si_data),
        .D(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] [0]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7]_0 [0]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_CURR_WORD.current_word_q_reg[1] 
       (.C(clk),
        .CE(pop_si_data),
        .D(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] [1]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7]_0 [1]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_CURR_WORD.current_word_q_reg[2] 
       (.C(clk),
        .CE(pop_si_data),
        .D(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] [2]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7]_0 [2]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \USE_RTL_CURR_WORD.first_word_q_reg 
       (.C(clk),
        .CE(pop_si_data),
        .D(s_axi_wlast),
        .Q(\USE_RTL_CURR_WORD.first_word_q ),
        .S(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT4 #(
    .INIT(16'h01FD)) 
    \USE_RTL_CURR_WORD.pre_next_word_q[2]_i_2 
       (.I0(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .I1(Q[14]),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[10]),
        .O(\USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ));
  LUT4 #(
    .INIT(16'h01FD)) 
    \USE_RTL_CURR_WORD.pre_next_word_q[2]_i_4 
       (.I0(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [1]),
        .I1(Q[14]),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[9]),
        .O(\USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[0] 
       (.C(clk),
        .CE(pop_si_data),
        .D(D[0]),
        .Q(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [0]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[1] 
       (.C(clk),
        .CE(pop_si_data),
        .D(D[1]),
        .Q(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [1]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[2] 
       (.C(clk),
        .CE(pop_si_data),
        .D(D[2]),
        .Q(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEAEFFFF)) 
    \USE_RTL_LENGTH.first_mi_word_q_i_3 
       (.I0(\USE_RTL_LENGTH.length_counter_q[6]_i_2_n_0 ),
        .I1(\USE_RTL_LENGTH.length_counter_q_reg [3]),
        .I2(\USE_RTL_LENGTH.first_mi_word_q ),
        .I3(Q[3]),
        .I4(Q[13]),
        .I5(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ),
        .O(\USE_RTL_LENGTH.first_mi_word_q_reg_3 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF4FFF444)) 
    \USE_RTL_LENGTH.first_mi_word_q_i_4 
       (.I0(\USE_RTL_LENGTH.first_mi_word_q_reg_2 ),
        .I1(Q[8]),
        .I2(Q[2]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .I5(\USE_RTL_LENGTH.length_counter_q_reg[2]_0 ),
        .O(\USE_RTL_LENGTH.first_mi_word_q_reg_1 ));
  LUT6 #(
    .INIT(64'hD0DD000000000000)) 
    \USE_RTL_LENGTH.first_mi_word_q_i_7 
       (.I0(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .I1(m_axi_wready),
        .I2(wrap_buffer_available),
        .I3(Q[12]),
        .I4(\USE_WRITE.wr_cmd_valid ),
        .I5(s_axi_wvalid),
        .O(\USE_RTL_LENGTH.first_mi_word_q_reg_0 ));
  LUT4 #(
    .INIT(16'hFE02)) 
    \USE_RTL_LENGTH.first_mi_word_q_i_8 
       (.I0(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7]_0 [2]),
        .I1(Q[14]),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[11]),
        .O(\USE_RTL_LENGTH.first_mi_word_q_reg_2 ));
  FDSE #(
    .INIT(1'b1)) 
    \USE_RTL_LENGTH.first_mi_word_q_reg 
       (.C(clk),
        .CE(p_251_in),
        .D(s_axi_wlast),
        .Q(\USE_RTL_LENGTH.first_mi_word_q ),
        .S(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT3 #(
    .INIT(8'h1D)) 
    \USE_RTL_LENGTH.length_counter_q[0]_i_1 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [0]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(Q[0]),
        .O(\USE_RTL_LENGTH.length_counter_q[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair694" *) 
  LUT5 #(
    .INIT(32'hCCA533A5)) 
    \USE_RTL_LENGTH.length_counter_q[1]_i_1 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [0]),
        .I1(Q[0]),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [1]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(Q[1]),
        .O(\USE_RTL_LENGTH.length_counter_q[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair695" *) 
  LUT4 #(
    .INIT(16'hB847)) 
    \USE_RTL_LENGTH.length_counter_q[2]_i_1 
       (.I0(Q[2]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .I3(\USE_RTL_LENGTH.length_counter_q_reg[2]_0 ),
        .O(\USE_RTL_LENGTH.length_counter_q[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEAE0E5EF1A10151)) 
    \USE_RTL_LENGTH.length_counter_q[3]_i_1 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg[2]_0 ),
        .I1(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .I2(\USE_RTL_LENGTH.first_mi_word_q ),
        .I3(Q[2]),
        .I4(Q[3]),
        .I5(\USE_RTL_LENGTH.length_counter_q_reg [3]),
        .O(\USE_RTL_LENGTH.length_counter_q[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair694" *) 
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    \USE_RTL_LENGTH.length_counter_q[3]_i_2 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [0]),
        .I1(Q[0]),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [1]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(Q[1]),
        .O(\USE_RTL_LENGTH.length_counter_q_reg[2]_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \USE_RTL_LENGTH.length_counter_q[4]_i_1 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(Q[4]),
        .I3(\USE_RTL_LENGTH.length_counter_q[6]_i_3_n_0 ),
        .O(\USE_RTL_LENGTH.length_counter_q[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hC3AAC355CCAACCAA)) 
    \USE_RTL_LENGTH.length_counter_q[5]_i_1 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [5]),
        .I1(Q[5]),
        .I2(Q[4]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .I5(\USE_RTL_LENGTH.length_counter_q[6]_i_3_n_0 ),
        .O(\USE_RTL_LENGTH.length_counter_q[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE21DE2E2)) 
    \USE_RTL_LENGTH.length_counter_q[6]_i_1 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [6]),
        .I1(\USE_RTL_LENGTH.first_mi_word_q ),
        .I2(Q[6]),
        .I3(\USE_RTL_LENGTH.length_counter_q[6]_i_2_n_0 ),
        .I4(\USE_RTL_LENGTH.length_counter_q[6]_i_3_n_0 ),
        .O(\USE_RTL_LENGTH.length_counter_q[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    \USE_RTL_LENGTH.length_counter_q[6]_i_2 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [5]),
        .I1(Q[5]),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(Q[4]),
        .O(\USE_RTL_LENGTH.length_counter_q[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000003000355)) 
    \USE_RTL_LENGTH.length_counter_q[6]_i_3 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [3]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .I5(\USE_RTL_LENGTH.length_counter_q_reg[2]_0 ),
        .O(\USE_RTL_LENGTH.length_counter_q[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hC3AAC355CCAACCAA)) 
    \USE_RTL_LENGTH.length_counter_q[7]_i_1 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [7]),
        .I1(Q[7]),
        .I2(Q[6]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(\USE_RTL_LENGTH.length_counter_q_reg [6]),
        .I5(\USE_RTL_LENGTH.length_counter_q[7]_i_2_n_0 ),
        .O(\USE_RTL_LENGTH.length_counter_q[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00002020000A202A)) 
    \USE_RTL_LENGTH.length_counter_q[7]_i_2 
       (.I0(\USE_RTL_LENGTH.length_counter_q[6]_i_3_n_0 ),
        .I1(Q[4]),
        .I2(\USE_RTL_LENGTH.first_mi_word_q ),
        .I3(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .I4(Q[5]),
        .I5(\USE_RTL_LENGTH.length_counter_q_reg [5]),
        .O(\USE_RTL_LENGTH.length_counter_q[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[0] 
       (.C(clk),
        .CE(p_251_in),
        .D(\USE_RTL_LENGTH.length_counter_q[0]_i_1_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [0]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[1] 
       (.C(clk),
        .CE(p_251_in),
        .D(\USE_RTL_LENGTH.length_counter_q[1]_i_1_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [1]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[2] 
       (.C(clk),
        .CE(p_251_in),
        .D(\USE_RTL_LENGTH.length_counter_q[2]_i_1_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[3] 
       (.C(clk),
        .CE(p_251_in),
        .D(\USE_RTL_LENGTH.length_counter_q[3]_i_1_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [3]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[4] 
       (.C(clk),
        .CE(p_251_in),
        .D(\USE_RTL_LENGTH.length_counter_q[4]_i_1_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [4]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[5] 
       (.C(clk),
        .CE(p_251_in),
        .D(\USE_RTL_LENGTH.length_counter_q[5]_i_1_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [5]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[6] 
       (.C(clk),
        .CE(p_251_in),
        .D(\USE_RTL_LENGTH.length_counter_q[6]_i_1_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [6]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_LENGTH.length_counter_q_reg[7] 
       (.C(clk),
        .CE(p_251_in),
        .D(\USE_RTL_LENGTH.length_counter_q[7]_i_1_n_0 ),
        .Q(\USE_RTL_LENGTH.length_counter_q_reg [7]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  VCC VCC
       (.P(\<const1> ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(\m_payload_i_reg[32]_0 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4_n_0 ),
        .O(p_1_in[0]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(\m_payload_i_reg[32]_0 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4_n_0 ),
        .O(p_1_in[1]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[2]_i_1 
       (.I0(s_axi_wdata[2]),
        .I1(\m_payload_i_reg[32]_0 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4_n_0 ),
        .O(p_1_in[2]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[3]_i_1 
       (.I0(s_axi_wdata[3]),
        .I1(\m_payload_i_reg[32]_0 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4_n_0 ),
        .O(p_1_in[3]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[4]_i_1 
       (.I0(s_axi_wdata[4]),
        .I1(\m_payload_i_reg[32]_0 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4_n_0 ),
        .O(p_1_in[4]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[5]_i_1 
       (.I0(s_axi_wdata[5]),
        .I1(\m_payload_i_reg[32]_0 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4_n_0 ),
        .O(p_1_in[5]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[6]_i_1 
       (.I0(s_axi_wdata[6]),
        .I1(\m_payload_i_reg[32]_0 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4_n_0 ),
        .O(p_1_in[6]));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_2 
       (.I0(s_axi_wdata[7]),
        .I1(\m_payload_i_reg[32]_0 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4_n_0 ),
        .O(p_1_in[7]));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4 
       (.I0(pop_si_data),
        .I1(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9_n_0 ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I4(wrap_buffer_available),
        .I5(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0]_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ),
        .D(p_1_in[0]),
        .Q(m_axi_wdata[0]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[1] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ),
        .D(p_1_in[1]),
        .Q(m_axi_wdata[1]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[2] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ),
        .D(p_1_in[2]),
        .Q(m_axi_wdata[2]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[3] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ),
        .D(p_1_in[3]),
        .Q(m_axi_wdata[3]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[4] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ),
        .D(p_1_in[4]),
        .Q(m_axi_wdata[4]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[5] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ),
        .D(p_1_in[5]),
        .Q(m_axi_wdata[5]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[6] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ),
        .D(p_1_in[6]),
        .Q(m_axi_wdata[6]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0]_0 ),
        .D(p_1_in[7]),
        .Q(m_axi_wdata[7]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF44F4F4F4)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[0]_i_1 
       (.I0(wrap_buffer_available_reg_0),
        .I1(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0]_0 ),
        .I2(m_axi_wstrb[0]),
        .I3(m_axi_wready),
        .I4(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .I5(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_2 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[0]_i_1_n_0 ),
        .Q(m_axi_wstrb[0]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[0] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_7),
        .D(s_axi_wdata[0]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[1] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_7),
        .D(s_axi_wdata[1]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[2] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_7),
        .D(s_axi_wdata[2]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[3] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_7),
        .D(s_axi_wdata[3]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[4] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_7),
        .D(s_axi_wdata[4]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[5] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_7),
        .D(s_axi_wdata[5]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[6] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_7),
        .D(s_axi_wdata[6]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_7),
        .D(s_axi_wdata[7]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .R(SR));
  LUT2 #(
    .INIT(4'hE)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q[0]_i_1 
       (.I0(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0]_0 ),
        .I1(wrap_buffer_available_reg_7),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q[0]_i_1_n_0 ),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0]_0 ),
        .R(SR));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[10]_i_1 
       (.I0(s_axi_wdata[10]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[10]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[11]_i_1 
       (.I0(s_axi_wdata[11]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[12]_i_1 
       (.I0(s_axi_wdata[12]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[13]_i_1 
       (.I0(s_axi_wdata[13]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[14]_i_1 
       (.I0(s_axi_wdata[14]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_2 
       (.I0(s_axi_wdata[15]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4 
       (.I0(pop_si_data),
        .I1(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9_n_0 ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I4(wrap_buffer_available),
        .I5(wstrb_wrap_buffer_1),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[8]_i_1 
       (.I0(s_axi_wdata[8]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[9]_i_1 
       (.I0(s_axi_wdata[9]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_6 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[10] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[10]_i_1_n_0 ),
        .Q(m_axi_wdata[10]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[11] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[11]_i_1_n_0 ),
        .Q(m_axi_wdata[11]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[12] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[12]_i_1_n_0 ),
        .Q(m_axi_wdata[12]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[13] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[13]_i_1_n_0 ),
        .Q(m_axi_wdata[13]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[14] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[14]_i_1_n_0 ),
        .Q(m_axi_wdata[14]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_2_n_0 ),
        .Q(m_axi_wdata[15]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[8] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[8]_i_1_n_0 ),
        .Q(m_axi_wdata[8]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[9] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[9]_i_1_n_0 ),
        .Q(m_axi_wdata[9]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF44F4F4F4)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[1]_i_1 
       (.I0(wrap_buffer_available_reg_0),
        .I1(wstrb_wrap_buffer_1),
        .I2(m_axi_wstrb[1]),
        .I3(m_axi_wready),
        .I4(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .I5(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_1 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[1]_i_1_n_0 ),
        .Q(m_axi_wstrb[1]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[10] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_6),
        .D(s_axi_wdata[10]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[11] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_6),
        .D(s_axi_wdata[11]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[12] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_6),
        .D(s_axi_wdata[12]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[13] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_6),
        .D(s_axi_wdata[13]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[14] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_6),
        .D(s_axi_wdata[14]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_6),
        .D(s_axi_wdata[15]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[8] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_6),
        .D(s_axi_wdata[8]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[9] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_6),
        .D(s_axi_wdata[9]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .R(SR));
  LUT2 #(
    .INIT(4'hE)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q[1]_i_1 
       (.I0(wstrb_wrap_buffer_1),
        .I1(wrap_buffer_available_reg_6),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[1] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q[1]_i_1_n_0 ),
        .Q(wstrb_wrap_buffer_1),
        .R(SR));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[16]_i_1 
       (.I0(s_axi_wdata[16]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[16]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[17]_i_1 
       (.I0(s_axi_wdata[17]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[17]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[18]_i_1 
       (.I0(s_axi_wdata[18]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[18]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[19]_i_1 
       (.I0(s_axi_wdata[19]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[19]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[20]_i_1 
       (.I0(s_axi_wdata[20]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[20]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[21]_i_1 
       (.I0(s_axi_wdata[21]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[22]_i_1 
       (.I0(s_axi_wdata[22]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[22]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_2 
       (.I0(s_axi_wdata[23]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_5 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4 
       (.I0(pop_si_data),
        .I1(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9_n_0 ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I4(wrap_buffer_available),
        .I5(wstrb_wrap_buffer_2),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[16] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[16]_i_1_n_0 ),
        .Q(m_axi_wdata[16]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[17] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[17]_i_1_n_0 ),
        .Q(m_axi_wdata[17]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[18] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[18]_i_1_n_0 ),
        .Q(m_axi_wdata[18]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[19] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[19]_i_1_n_0 ),
        .Q(m_axi_wdata[19]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[20] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[20]_i_1_n_0 ),
        .Q(m_axi_wdata[20]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[21] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[21]_i_1_n_0 ),
        .Q(m_axi_wdata[21]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[22] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[22]_i_1_n_0 ),
        .Q(m_axi_wdata[22]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_2_n_0 ),
        .Q(m_axi_wdata[23]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF44F4F4F4)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[2]_i_1 
       (.I0(wrap_buffer_available_reg_0),
        .I1(wstrb_wrap_buffer_2),
        .I2(m_axi_wstrb[2]),
        .I3(m_axi_wready),
        .I4(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .I5(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16]_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[2]_i_1_n_0 ),
        .Q(m_axi_wstrb[2]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[16] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_5),
        .D(s_axi_wdata[16]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[17] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_5),
        .D(s_axi_wdata[17]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[18] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_5),
        .D(s_axi_wdata[18]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[19] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_5),
        .D(s_axi_wdata[19]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[20] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_5),
        .D(s_axi_wdata[20]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[21] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_5),
        .D(s_axi_wdata[21]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[22] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_5),
        .D(s_axi_wdata[22]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_5),
        .D(s_axi_wdata[23]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .R(SR));
  LUT2 #(
    .INIT(4'hE)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q[2]_i_1 
       (.I0(wstrb_wrap_buffer_2),
        .I1(wrap_buffer_available_reg_5),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[2] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q[2]_i_1_n_0 ),
        .Q(wstrb_wrap_buffer_2),
        .R(SR));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[24]_i_1 
       (.I0(s_axi_wdata[24]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[25]_i_1 
       (.I0(s_axi_wdata[25]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[25]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[26]_i_1 
       (.I0(s_axi_wdata[26]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[27]_i_1 
       (.I0(s_axi_wdata[27]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[28]_i_1 
       (.I0(s_axi_wdata[28]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[28]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[29]_i_1 
       (.I0(s_axi_wdata[29]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[29]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[30]_i_1 
       (.I0(s_axi_wdata[30]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[30]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_2 
       (.I0(s_axi_wdata[31]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_4 ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .I3(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4 
       (.I0(pop_si_data),
        .I1(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9_n_0 ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I4(wrap_buffer_available),
        .I5(wstrb_wrap_buffer_3),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[24] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[24]_i_1_n_0 ),
        .Q(m_axi_wdata[24]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[25] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[25]_i_1_n_0 ),
        .Q(m_axi_wdata[25]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[26] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[26]_i_1_n_0 ),
        .Q(m_axi_wdata[26]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[27] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[27]_i_1_n_0 ),
        .Q(m_axi_wdata[27]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[28] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[28]_i_1_n_0 ),
        .Q(m_axi_wdata[28]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[29] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[29]_i_1_n_0 ),
        .Q(m_axi_wdata[29]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[30] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[30]_i_1_n_0 ),
        .Q(m_axi_wdata[30]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] 
       (.C(clk),
        .CE(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3]_0 ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_2_n_0 ),
        .Q(m_axi_wdata[31]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF44F4F4F4)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[3]_i_1 
       (.I0(wrap_buffer_available_reg_0),
        .I1(wstrb_wrap_buffer_3),
        .I2(m_axi_wstrb[3]),
        .I3(m_axi_wready),
        .I4(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .I5(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16] ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[3]_i_1_n_0 ),
        .Q(m_axi_wstrb[3]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[24] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_4),
        .D(s_axi_wdata[24]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[25] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_4),
        .D(s_axi_wdata[25]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[26] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_4),
        .D(s_axi_wdata[26]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[27] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_4),
        .D(s_axi_wdata[27]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[28] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_4),
        .D(s_axi_wdata[28]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[29] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_4),
        .D(s_axi_wdata[29]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[30] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_4),
        .D(s_axi_wdata[30]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_4),
        .D(s_axi_wdata[31]),
        .Q(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .R(SR));
  LUT2 #(
    .INIT(4'hE)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q[3]_i_1 
       (.I0(wstrb_wrap_buffer_3),
        .I1(wrap_buffer_available_reg_4),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[3] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q[3]_i_1_n_0 ),
        .Q(wstrb_wrap_buffer_3),
        .R(SR));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[32]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[32]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[33]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[33]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[34]_i_1 
       (.I0(s_axi_wdata[2]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[34]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[35]_i_1 
       (.I0(s_axi_wdata[3]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[35]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[36]_i_1 
       (.I0(s_axi_wdata[4]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[36]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[37]_i_1 
       (.I0(s_axi_wdata[5]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[37]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[38]_i_1 
       (.I0(s_axi_wdata[6]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[38]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_2 
       (.I0(s_axi_wdata[7]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_3 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4 
       (.I0(pop_si_data),
        .I1(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9_n_0 ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I4(wrap_buffer_available),
        .I5(wstrb_wrap_buffer_4),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[32] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[32]_i_1_n_0 ),
        .Q(m_axi_wdata[32]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[33] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[33]_i_1_n_0 ),
        .Q(m_axi_wdata[33]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[34] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[34]_i_1_n_0 ),
        .Q(m_axi_wdata[34]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[35] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[35]_i_1_n_0 ),
        .Q(m_axi_wdata[35]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[36] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[36]_i_1_n_0 ),
        .Q(m_axi_wdata[36]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[37] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[37]_i_1_n_0 ),
        .Q(m_axi_wdata[37]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[38] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[38]_i_1_n_0 ),
        .Q(m_axi_wdata[38]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_2_n_0 ),
        .Q(m_axi_wdata[39]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF44F4F4F4)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[4]_i_1 
       (.I0(wrap_buffer_available_reg_0),
        .I1(wstrb_wrap_buffer_4),
        .I2(m_axi_wstrb[4]),
        .I3(m_axi_wready),
        .I4(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .I5(\m_payload_i_reg[32] ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[4]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[4]_i_1_n_0 ),
        .Q(m_axi_wstrb[4]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[32] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_3),
        .D(s_axi_wdata[0]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[33] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_3),
        .D(s_axi_wdata[1]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[34] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_3),
        .D(s_axi_wdata[2]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[35] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_3),
        .D(s_axi_wdata[3]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[36] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_3),
        .D(s_axi_wdata[4]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[37] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_3),
        .D(s_axi_wdata[5]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[38] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_3),
        .D(s_axi_wdata[6]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_3),
        .D(s_axi_wdata[7]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .R(SR));
  LUT2 #(
    .INIT(4'hE)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q[4]_i_1 
       (.I0(wstrb_wrap_buffer_4),
        .I1(wrap_buffer_available_reg_3),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q[4]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[4] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q[4]_i_1_n_0 ),
        .Q(wstrb_wrap_buffer_4),
        .R(SR));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[40]_i_1 
       (.I0(s_axi_wdata[8]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[40]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[41]_i_1 
       (.I0(s_axi_wdata[9]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[41]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[42]_i_1 
       (.I0(s_axi_wdata[10]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[42]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[43]_i_1 
       (.I0(s_axi_wdata[11]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[43]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[44]_i_1 
       (.I0(s_axi_wdata[12]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[44]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[45]_i_1 
       (.I0(s_axi_wdata[13]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[45]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[46]_i_1 
       (.I0(s_axi_wdata[14]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[46]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_2 
       (.I0(s_axi_wdata[15]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_2 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4 
       (.I0(pop_si_data),
        .I1(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9_n_0 ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I4(wrap_buffer_available),
        .I5(wstrb_wrap_buffer_5),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[40] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[40]_i_1_n_0 ),
        .Q(m_axi_wdata[40]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[41] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[41]_i_1_n_0 ),
        .Q(m_axi_wdata[41]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[42] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[42]_i_1_n_0 ),
        .Q(m_axi_wdata[42]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[43] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[43]_i_1_n_0 ),
        .Q(m_axi_wdata[43]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[44] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[44]_i_1_n_0 ),
        .Q(m_axi_wdata[44]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[45] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[45]_i_1_n_0 ),
        .Q(m_axi_wdata[45]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[46] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[46]_i_1_n_0 ),
        .Q(m_axi_wdata[46]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_2_n_0 ),
        .Q(m_axi_wdata[47]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF44F4F4F4)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[5]_i_1 
       (.I0(wrap_buffer_available_reg_0),
        .I1(wstrb_wrap_buffer_5),
        .I2(m_axi_wstrb[5]),
        .I3(m_axi_wready),
        .I4(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .I5(\m_payload_i_reg[33] ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[5]_i_1_n_0 ),
        .Q(m_axi_wstrb[5]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[40] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_2),
        .D(s_axi_wdata[8]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[41] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_2),
        .D(s_axi_wdata[9]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[42] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_2),
        .D(s_axi_wdata[10]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[43] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_2),
        .D(s_axi_wdata[11]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[44] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_2),
        .D(s_axi_wdata[12]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[45] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_2),
        .D(s_axi_wdata[13]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[46] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_2),
        .D(s_axi_wdata[14]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_2),
        .D(s_axi_wdata[15]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .R(SR));
  LUT2 #(
    .INIT(4'hE)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q[5]_i_1 
       (.I0(wstrb_wrap_buffer_5),
        .I1(wrap_buffer_available_reg_2),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[5] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wstrb_wrap_buffer_q[5]_i_1_n_0 ),
        .Q(wstrb_wrap_buffer_5),
        .R(SR));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[48]_i_1 
       (.I0(s_axi_wdata[16]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[48]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[49]_i_1 
       (.I0(s_axi_wdata[17]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[49]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[50]_i_1 
       (.I0(s_axi_wdata[18]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[50]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[51]_i_1 
       (.I0(s_axi_wdata[19]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[51]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[52]_i_1 
       (.I0(s_axi_wdata[20]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[52]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[53]_i_1 
       (.I0(s_axi_wdata[21]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[53]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[54]_i_1 
       (.I0(s_axi_wdata[22]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[54]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_2 
       (.I0(s_axi_wdata[23]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_1 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4 
       (.I0(pop_si_data),
        .I1(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9_n_0 ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I4(wrap_buffer_available),
        .I5(wstrb_wrap_buffer_6),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[48] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[48]_i_1_n_0 ),
        .Q(m_axi_wdata[48]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[49] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[49]_i_1_n_0 ),
        .Q(m_axi_wdata[49]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[50] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[50]_i_1_n_0 ),
        .Q(m_axi_wdata[50]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[51] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[51]_i_1_n_0 ),
        .Q(m_axi_wdata[51]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[52] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[52]_i_1_n_0 ),
        .Q(m_axi_wdata[52]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[53] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[53]_i_1_n_0 ),
        .Q(m_axi_wdata[53]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[54] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[54]_i_1_n_0 ),
        .Q(m_axi_wdata[54]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_2_n_0 ),
        .Q(m_axi_wdata[55]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF44F4F4F4)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[6]_i_1 
       (.I0(wrap_buffer_available_reg_0),
        .I1(wstrb_wrap_buffer_6),
        .I2(m_axi_wstrb[6]),
        .I3(m_axi_wready),
        .I4(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .I5(\m_payload_i_reg[34] ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[6]_i_1_n_0 ),
        .Q(m_axi_wstrb[6]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[48] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_1),
        .D(s_axi_wdata[16]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[49] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_1),
        .D(s_axi_wdata[17]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[50] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_1),
        .D(s_axi_wdata[18]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[51] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_1),
        .D(s_axi_wdata[19]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[52] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_1),
        .D(s_axi_wdata[20]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[53] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_1),
        .D(s_axi_wdata[21]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[54] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_1),
        .D(s_axi_wdata[22]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] 
       (.C(clk),
        .CE(wrap_buffer_available_reg_1),
        .D(s_axi_wdata[23]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .R(SR));
  LUT2 #(
    .INIT(4'hE)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q[6]_i_1 
       (.I0(wstrb_wrap_buffer_6),
        .I1(wrap_buffer_available_reg_1),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q[6]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[6] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wstrb_wrap_buffer_q[6]_i_1_n_0 ),
        .Q(wstrb_wrap_buffer_6),
        .R(SR));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[56]_i_1 
       (.I0(s_axi_wdata[24]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[56]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[57]_i_1 
       (.I0(s_axi_wdata[25]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[57]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[58]_i_1 
       (.I0(s_axi_wdata[26]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[58]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[59]_i_1 
       (.I0(s_axi_wdata[27]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[59]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[60]_i_1 
       (.I0(s_axi_wdata[28]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[60]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[61]_i_1 
       (.I0(s_axi_wdata[29]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[61]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[62]_i_1 
       (.I0(s_axi_wdata[30]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[62]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_1 
       (.I0(out),
        .O(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_3 
       (.I0(s_axi_wdata[31]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28]_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .I3(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6 
       (.I0(pop_si_data),
        .I1(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9_n_0 ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] ),
        .I4(wrap_buffer_available),
        .I5(wstrb_wrap_buffer_7),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg [6]),
        .I1(Q[6]),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg [7]),
        .I3(\USE_RTL_LENGTH.first_mi_word_q ),
        .I4(Q[7]),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFEFEFFFFAEFEA)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9 
       (.I0(\USE_RTL_LENGTH.length_counter_q[6]_i_2_n_0 ),
        .I1(Q[2]),
        .I2(\USE_RTL_LENGTH.first_mi_word_q ),
        .I3(\USE_RTL_LENGTH.length_counter_q_reg [2]),
        .I4(Q[3]),
        .I5(\USE_RTL_LENGTH.length_counter_q_reg [3]),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[56] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[56]_i_1_n_0 ),
        .Q(m_axi_wdata[56]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[57] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[57]_i_1_n_0 ),
        .Q(m_axi_wdata[57]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[58] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[58]_i_1_n_0 ),
        .Q(m_axi_wdata[58]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[59] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[59]_i_1_n_0 ),
        .Q(m_axi_wdata[59]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[60] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[60]_i_1_n_0 ),
        .Q(m_axi_wdata[60]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[61] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[61]_i_1_n_0 ),
        .Q(m_axi_wdata[61]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[62] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[62]_i_1_n_0 ),
        .Q(m_axi_wdata[62]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] 
       (.C(clk),
        .CE(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7]_0 ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_3_n_0 ),
        .Q(m_axi_wdata[63]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF44F4F4F4)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[7]_i_1 
       (.I0(wrap_buffer_available_reg_0),
        .I1(wstrb_wrap_buffer_7),
        .I2(m_axi_wstrb[7]),
        .I3(m_axi_wready),
        .I4(\USE_REGISTER.M_AXI_WLAST_q_reg_1 ),
        .I5(\m_payload_i_reg[35] ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[7]_i_1_n_0 ),
        .Q(m_axi_wstrb[7]),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[56] 
       (.C(clk),
        .CE(E),
        .D(s_axi_wdata[24]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[57] 
       (.C(clk),
        .CE(E),
        .D(s_axi_wdata[25]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[58] 
       (.C(clk),
        .CE(E),
        .D(s_axi_wdata[26]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[59] 
       (.C(clk),
        .CE(E),
        .D(s_axi_wdata[27]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[60] 
       (.C(clk),
        .CE(E),
        .D(s_axi_wdata[28]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[61] 
       (.C(clk),
        .CE(E),
        .D(s_axi_wdata[29]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[62] 
       (.C(clk),
        .CE(E),
        .D(s_axi_wdata[30]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[63] 
       (.C(clk),
        .CE(E),
        .D(s_axi_wdata[31]),
        .Q(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg [7]),
        .R(SR));
  LUT2 #(
    .INIT(4'hE)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q[7]_i_1 
       (.I0(wstrb_wrap_buffer_7),
        .I1(E),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[7] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wstrb_wrap_buffer_q[7]_i_1_n_0 ),
        .Q(wstrb_wrap_buffer_7),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    wrap_buffer_available_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(\m_payload_i_reg[36] ),
        .Q(wrap_buffer_available),
        .R(\USE_REGISTER.M_AXI_WLAST_q_reg_0 ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice
   (\skid_buffer_reg[66] ,
    mr_rvalid,
    Q,
    clk,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    m_axi_rvalid,
    \USE_READ.rd_cmd_valid ,
    s_ready_i_reg,
    \aresetn_d_reg[1] ,
    \aresetn_d_reg[0] ,
    E);
  output \skid_buffer_reg[66] ;
  output mr_rvalid;
  output [66:0]Q;
  input clk;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;
  input m_axi_rvalid;
  input \USE_READ.rd_cmd_valid ;
  input s_ready_i_reg;
  input \aresetn_d_reg[1] ;
  input \aresetn_d_reg[0] ;
  input [0:0]E;

  wire [0:0]E;
  wire [66:0]Q;
  wire \USE_READ.rd_cmd_valid ;
  wire \aresetn_d_reg[0] ;
  wire \aresetn_d_reg[1] ;
  wire clk;
  wire [63:0]m_axi_rdata;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire mr_rvalid;
  wire s_ready_i_reg;
  wire \skid_buffer_reg[66] ;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2 \r.r_pipe 
       (.E(E),
        .Q(Q),
        .\USE_READ.rd_cmd_valid (\USE_READ.rd_cmd_valid ),
        .\aresetn_d_reg[0] (\aresetn_d_reg[0] ),
        .\aresetn_d_reg[1] (\aresetn_d_reg[1] ),
        .clk(clk),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .mr_rvalid(mr_rvalid),
        .s_ready_i_reg_0(s_ready_i_reg),
        .\skid_buffer_reg[66]_0 (\skid_buffer_reg[66] ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice_35
   (m_axi_awvalid,
    s_axi_bvalid,
    m_axi_arvalid,
    m_axi_wvalid,
    s_axi_rvalid,
    s_axi_awready,
    Q,
    s_axi_wready,
    M00_AXI_0_wlast,
    m_axi_bready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_arready,
    \M00_AXI_0_arregion[3] ,
    m_axi_rready,
    \skid_buffer_reg[67] ,
    s_axi_awvalid,
    m_axi_awready,
    m_axi_bvalid,
    s_axi_bready,
    s_axi_arvalid,
    m_axi_arready,
    m_axi_wready,
    s_axi_rready,
    aclk,
    D,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata,
    m_axi_bid,
    m_axi_bresp,
    UNCONN_IN,
    m_axi_rid,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    s_axi_wvalid,
    m_axi_rvalid,
    aresetn);
  output m_axi_awvalid;
  output s_axi_bvalid;
  output m_axi_arvalid;
  output m_axi_wvalid;
  output s_axi_rvalid;
  output s_axi_awready;
  output [61:0]Q;
  output s_axi_wready;
  output [72:0]M00_AXI_0_wlast;
  output m_axi_bready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output s_axi_arready;
  output [61:0]\M00_AXI_0_arregion[3] ;
  output m_axi_rready;
  output [67:0]\skid_buffer_reg[67] ;
  input s_axi_awvalid;
  input m_axi_awready;
  input m_axi_bvalid;
  input s_axi_bready;
  input s_axi_arvalid;
  input m_axi_arready;
  input m_axi_wready;
  input s_axi_rready;
  input aclk;
  input [61:0]D;
  input s_axi_wlast;
  input [7:0]s_axi_wstrb;
  input [63:0]s_axi_wdata;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [61:0]UNCONN_IN;
  input [0:0]m_axi_rid;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;
  input s_axi_wvalid;
  input m_axi_rvalid;
  input aresetn;

  wire [61:0]D;
  wire [61:0]\M00_AXI_0_arregion[3] ;
  wire [72:0]M00_AXI_0_wlast;
  wire [61:0]Q;
  wire [61:0]UNCONN_IN;
  wire aclk;
  wire aresetn;
  wire \aw.aw_pipe_n_3 ;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire [0:0]m_axi_bid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire [0:0]m_axi_rid;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire p_1_in;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire [0:0]s_axi_bid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire [67:0]\skid_buffer_reg[67] ;
  wire \w.w_pipe_n_1 ;
  wire \w.w_pipe_n_3 ;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice_36 \ar.ar_pipe 
       (.\M00_AXI_0_arregion[3] (\M00_AXI_0_arregion[3] ),
        .UNCONN_IN(UNCONN_IN),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_3 ),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .p_1_in(p_1_in),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice_37 \aw.aw_pipe 
       (.D(D),
        .Q(Q),
        .aclk(aclk),
        .aresetn(aresetn),
        .\aresetn_d_reg[1] (\aw.aw_pipe_n_3 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_1 (\w.w_pipe_n_3 ),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .p_1_in(p_1_in),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_38 \b.b_pipe 
       (.aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_3 ),
        .m_axi_bid(m_axi_bid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .p_1_in(p_1_in),
        .s_axi_bid(s_axi_bid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_ready_i_reg_0(s_axi_bvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2_39 \r.r_pipe 
       (.M00_AXI_0_rready(m_axi_rready),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rid(m_axi_rid),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .\m_payload_i_reg[67]_0 (s_axi_rvalid),
        .p_1_in(p_1_in),
        .s_axi_rready(s_axi_rready),
        .\skid_buffer_reg[67]_0 (\skid_buffer_reg[67] ));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized0_40 \w.w_pipe 
       (.M00_AXI_0_wlast(M00_AXI_0_wlast),
        .M00_AXI_0_wvalid(m_axi_wvalid),
        .aclk(aclk),
        .\aresetn_d_reg[0] (\aw.aw_pipe_n_3 ),
        .m_axi_wready(m_axi_wready),
        .m_valid_i_reg_0(\w.w_pipe_n_1 ),
        .m_valid_i_reg_1(\w.w_pipe_n_3 ),
        .p_1_in(p_1_in),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[0]_0 (s_axi_wready));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice_5
   (m_axi_awvalid,
    s_axi_bvalid,
    m_axi_arvalid,
    m_axi_wvalid,
    s_axi_rvalid,
    s_axi_awready,
    Q,
    s_axi_wready,
    \skid_buffer_reg[72] ,
    m_axi_bready,
    s_axi_bresp,
    s_axi_arready,
    UNCONN_OUT,
    m_axi_rready,
    S00_AXI_0_rlast,
    s_axi_awvalid,
    m_axi_awready,
    m_axi_bvalid,
    s_axi_bready,
    s_axi_arvalid,
    m_axi_arready,
    m_axi_wready,
    s_axi_rready,
    aclk,
    D,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata,
    m_axi_bresp,
    \S00_AXI_0_arregion[3] ,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    s_axi_wvalid,
    m_axi_rvalid,
    aresetn);
  output m_axi_awvalid;
  output s_axi_bvalid;
  output m_axi_arvalid;
  output m_axi_wvalid;
  output s_axi_rvalid;
  output s_axi_awready;
  output [60:0]Q;
  output s_axi_wready;
  output [72:0]\skid_buffer_reg[72] ;
  output m_axi_bready;
  output [1:0]s_axi_bresp;
  output s_axi_arready;
  output [60:0]UNCONN_OUT;
  output m_axi_rready;
  output [66:0]S00_AXI_0_rlast;
  input s_axi_awvalid;
  input m_axi_awready;
  input m_axi_bvalid;
  input s_axi_bready;
  input s_axi_arvalid;
  input m_axi_arready;
  input m_axi_wready;
  input s_axi_rready;
  input aclk;
  input [60:0]D;
  input s_axi_wlast;
  input [7:0]s_axi_wstrb;
  input [63:0]s_axi_wdata;
  input [1:0]m_axi_bresp;
  input [60:0]\S00_AXI_0_arregion[3] ;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;
  input s_axi_wvalid;
  input m_axi_rvalid;
  input aresetn;

  wire [60:0]D;
  wire [60:0]Q;
  wire [60:0]\S00_AXI_0_arregion[3] ;
  wire [66:0]S00_AXI_0_rlast;
  wire [60:0]UNCONN_OUT;
  wire aclk;
  wire aresetn;
  wire \aw.aw_pipe_n_3 ;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire p_1_in;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire [72:0]\skid_buffer_reg[72] ;
  wire \w.w_pipe_n_1 ;
  wire \w.w_pipe_n_3 ;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice_6 \ar.ar_pipe 
       (.\S00_AXI_0_arregion[3] (\S00_AXI_0_arregion[3] ),
        .UNCONN_OUT(UNCONN_OUT),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_3 ),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .p_1_in(p_1_in),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice_7 \aw.aw_pipe 
       (.D(D),
        .Q(Q),
        .aclk(aclk),
        .aresetn(aresetn),
        .\aresetn_d_reg[1] (\aw.aw_pipe_n_3 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_1 (\w.w_pipe_n_3 ),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .p_1_in(p_1_in),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_8 \b.b_pipe 
       (.S00_AXI_0_bvalid(s_axi_bvalid),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_3 ),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .p_1_in(p_1_in),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2_9 \r.r_pipe 
       (.S00_AXI_0_rlast(S00_AXI_0_rlast),
        .S00_AXI_0_rvalid(s_axi_rvalid),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .p_1_in(p_1_in),
        .s_axi_rready(s_axi_rready),
        .\skid_buffer_reg[0]_0 (m_axi_rready));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized0_10 \w.w_pipe 
       (.S00_AXI_0_wready(s_axi_wready),
        .aclk(aclk),
        .\aresetn_d_reg[0] (\aw.aw_pipe_n_3 ),
        .m_axi_wready(m_axi_wready),
        .\m_payload_i_reg[72]_0 (m_axi_wvalid),
        .m_valid_i_reg_0(\w.w_pipe_n_1 ),
        .m_valid_i_reg_1(\w.w_pipe_n_3 ),
        .p_1_in(p_1_in),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[72]_0 (\skid_buffer_reg[72] ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized0
   (\m_payload_i_reg[72] ,
    \skid_buffer_reg[0] ,
    Q,
    s_axi_wvalid,
    m_axi_wready,
    aresetn,
    aclk,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata);
  output \m_payload_i_reg[72] ;
  output \skid_buffer_reg[0] ;
  output [72:0]Q;
  input s_axi_wvalid;
  input m_axi_wready;
  input aresetn;
  input aclk;
  input s_axi_wlast;
  input [7:0]s_axi_wstrb;
  input [63:0]s_axi_wdata;

  wire [72:0]Q;
  wire aclk;
  wire aresetn;
  wire m_axi_wready;
  wire \m_payload_i_reg[72] ;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire \skid_buffer_reg[0] ;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized0 \w.w_pipe 
       (.Q(Q),
        .aclk(aclk),
        .aresetn(aresetn),
        .m_axi_wready(m_axi_wready),
        .\m_payload_i_reg[72]_0 (\m_payload_i_reg[72] ),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[0]_0 (\skid_buffer_reg[0] ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized0_17
   (\m_payload_i_reg[72] ,
    \skid_buffer_reg[0] ,
    Q,
    s_axi_wvalid,
    m_axi_wready,
    aresetn,
    aclk,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata);
  output \m_payload_i_reg[72] ;
  output \skid_buffer_reg[0] ;
  output [72:0]Q;
  input s_axi_wvalid;
  input m_axi_wready;
  input aresetn;
  input aclk;
  input s_axi_wlast;
  input [7:0]s_axi_wstrb;
  input [63:0]s_axi_wdata;

  wire [72:0]Q;
  wire aclk;
  wire aresetn;
  wire m_axi_wready;
  wire \m_payload_i_reg[72] ;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire \skid_buffer_reg[0] ;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized0_18 \w.w_pipe 
       (.Q(Q),
        .aclk(aclk),
        .aresetn(aresetn),
        .m_axi_wready(m_axi_wready),
        .\m_payload_i_reg[72]_0 (\m_payload_i_reg[72] ),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[0]_0 (\skid_buffer_reg[0] ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized1
   (m_axi_awvalid,
    s_axi_bvalid,
    m_axi_arvalid,
    m_axi_wvalid,
    s_axi_rvalid,
    s_axi_awready,
    Q,
    s_axi_wready,
    \USE_RTL_CURR_WORD.first_word_q_reg ,
    m_axi_bready,
    s_axi_bresp,
    s_axi_arready,
    \m_payload_i_reg[61] ,
    m_axi_rready,
    S01_AXI_0_rlast,
    s_axi_awvalid,
    m_axi_awready,
    m_axi_bvalid,
    s_axi_bready,
    s_axi_arvalid,
    m_axi_arready,
    m_axi_wready,
    s_axi_rready,
    aclk,
    D,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata,
    m_axi_bresp,
    \S01_AXI_0_arregion[3] ,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    s_axi_wvalid,
    m_axi_rvalid,
    aresetn);
  output m_axi_awvalid;
  output s_axi_bvalid;
  output m_axi_arvalid;
  output m_axi_wvalid;
  output s_axi_rvalid;
  output s_axi_awready;
  output [60:0]Q;
  output s_axi_wready;
  output [36:0]\USE_RTL_CURR_WORD.first_word_q_reg ;
  output m_axi_bready;
  output [1:0]s_axi_bresp;
  output s_axi_arready;
  output [60:0]\m_payload_i_reg[61] ;
  output m_axi_rready;
  output [34:0]S01_AXI_0_rlast;
  input s_axi_awvalid;
  input m_axi_awready;
  input m_axi_bvalid;
  input s_axi_bready;
  input s_axi_arvalid;
  input m_axi_arready;
  input m_axi_wready;
  input s_axi_rready;
  input aclk;
  input [60:0]D;
  input s_axi_wlast;
  input [3:0]s_axi_wstrb;
  input [31:0]s_axi_wdata;
  input [1:0]m_axi_bresp;
  input [60:0]\S01_AXI_0_arregion[3] ;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [31:0]m_axi_rdata;
  input s_axi_wvalid;
  input m_axi_rvalid;
  input aresetn;

  wire [60:0]D;
  wire [60:0]Q;
  wire [60:0]\S01_AXI_0_arregion[3] ;
  wire [34:0]S01_AXI_0_rlast;
  wire [36:0]\USE_RTL_CURR_WORD.first_word_q_reg ;
  wire aclk;
  wire aresetn;
  wire \aw.aw_pipe_n_3 ;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire [60:0]\m_payload_i_reg[61] ;
  wire p_1_in;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire \w.w_pipe_n_1 ;
  wire \w.w_pipe_n_3 ;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice \ar.ar_pipe 
       (.\S01_AXI_0_arregion[3] (\S01_AXI_0_arregion[3] ),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_3 ),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .\m_payload_i_reg[61]_0 (\m_payload_i_reg[61] ),
        .p_1_in(p_1_in),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice_1 \aw.aw_pipe 
       (.D(D),
        .Q(Q),
        .aclk(aclk),
        .aresetn(aresetn),
        .\aresetn_d_reg[1] (\aw.aw_pipe_n_3 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_1 (\w.w_pipe_n_3 ),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .p_1_in(p_1_in),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1 \b.b_pipe 
       (.S01_AXI_0_bvalid(s_axi_bvalid),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_3 ),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .p_1_in(p_1_in),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized7 \r.r_pipe 
       (.S01_AXI_0_rlast(S01_AXI_0_rlast),
        .S01_AXI_0_rvalid(s_axi_rvalid),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .p_1_in(p_1_in),
        .s_axi_rready(s_axi_rready),
        .\skid_buffer_reg[0]_0 (m_axi_rready));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized6 \w.w_pipe 
       (.S01_AXI_0_wready(s_axi_wready),
        .\USE_RTL_CURR_WORD.first_word_q_reg (\USE_RTL_CURR_WORD.first_word_q_reg ),
        .aclk(aclk),
        .\aresetn_d_reg[0] (\aw.aw_pipe_n_3 ),
        .m_axi_wready(m_axi_wready),
        .\m_payload_i_reg[36]_0 (m_axi_wvalid),
        .m_valid_i_reg_0(\w.w_pipe_n_1 ),
        .m_valid_i_reg_1(\w.w_pipe_n_3 ),
        .p_1_in(p_1_in),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized1_11
   (m_axi_awvalid,
    s_axi_bvalid,
    m_axi_arvalid,
    m_axi_wvalid,
    s_axi_rvalid,
    s_axi_awready,
    Q,
    s_axi_wready,
    M01_AXI_0_wlast,
    m_axi_bready,
    s_axi_bresp,
    s_axi_arready,
    \M01_AXI_0_arregion[3] ,
    m_axi_rready,
    first_mi_word_reg,
    s_axi_awvalid,
    m_axi_awready,
    m_axi_bvalid,
    s_axi_bready,
    s_axi_arvalid,
    m_axi_arready,
    m_axi_wready,
    s_axi_rready,
    aclk,
    D,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata,
    m_axi_bresp,
    \S_AXI_AREGION_Q_reg[3] ,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    s_axi_wvalid,
    m_axi_rvalid,
    aresetn);
  output m_axi_awvalid;
  output s_axi_bvalid;
  output m_axi_arvalid;
  output m_axi_wvalid;
  output s_axi_rvalid;
  output s_axi_awready;
  output [60:0]Q;
  output s_axi_wready;
  output [36:0]M01_AXI_0_wlast;
  output m_axi_bready;
  output [1:0]s_axi_bresp;
  output s_axi_arready;
  output [60:0]\M01_AXI_0_arregion[3] ;
  output m_axi_rready;
  output [34:0]first_mi_word_reg;
  input s_axi_awvalid;
  input m_axi_awready;
  input m_axi_bvalid;
  input s_axi_bready;
  input s_axi_arvalid;
  input m_axi_arready;
  input m_axi_wready;
  input s_axi_rready;
  input aclk;
  input [60:0]D;
  input s_axi_wlast;
  input [3:0]s_axi_wstrb;
  input [31:0]s_axi_wdata;
  input [1:0]m_axi_bresp;
  input [60:0]\S_AXI_AREGION_Q_reg[3] ;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [31:0]m_axi_rdata;
  input s_axi_wvalid;
  input m_axi_rvalid;
  input aresetn;

  wire [60:0]D;
  wire [60:0]\M01_AXI_0_arregion[3] ;
  wire [36:0]M01_AXI_0_wlast;
  wire [60:0]Q;
  wire [60:0]\S_AXI_AREGION_Q_reg[3] ;
  wire aclk;
  wire aresetn;
  wire \aw.aw_pipe_n_3 ;
  wire [34:0]first_mi_word_reg;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire p_1_in;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire \w.w_pipe_n_1 ;
  wire \w.w_pipe_n_3 ;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice_12 \ar.ar_pipe 
       (.\M01_AXI_0_arregion[3] (\M01_AXI_0_arregion[3] ),
        .\S_AXI_AREGION_Q_reg[3] (\S_AXI_AREGION_Q_reg[3] ),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_3 ),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .p_1_in(p_1_in),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice_13 \aw.aw_pipe 
       (.D(D),
        .Q(Q),
        .aclk(aclk),
        .aresetn(aresetn),
        .\aresetn_d_reg[1] (\aw.aw_pipe_n_3 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_1 (\w.w_pipe_n_3 ),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .p_1_in(p_1_in),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_14 \b.b_pipe 
       (.aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .\aresetn_d_reg[1]_0 (\w.w_pipe_n_3 ),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .p_1_in(p_1_in),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_ready_i_reg_0(s_axi_bvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized7_15 \r.r_pipe 
       (.M01_AXI_0_rready(m_axi_rready),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\w.w_pipe_n_1 ),
        .first_mi_word_reg(first_mi_word_reg),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .\m_payload_i_reg[34]_0 (s_axi_rvalid),
        .p_1_in(p_1_in),
        .s_axi_rready(s_axi_rready));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized6_16 \w.w_pipe 
       (.M01_AXI_0_wlast(M01_AXI_0_wlast),
        .M01_AXI_0_wvalid(m_axi_wvalid),
        .aclk(aclk),
        .\aresetn_d_reg[0] (\aw.aw_pipe_n_3 ),
        .m_axi_wready(m_axi_wready),
        .m_valid_i_reg_0(\w.w_pipe_n_1 ),
        .m_valid_i_reg_1(\w.w_pipe_n_3 ),
        .p_1_in(p_1_in),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[0]_0 (s_axi_wready));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized2
   (s_ready_i_reg,
    \aresetn_d_reg[1] ,
    sr_awvalid,
    sr_arvalid,
    in,
    m_axi_awburst,
    m_axi_awaddr,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ,
    m_axi_arburst,
    m_axi_araddr,
    s_axi_arready,
    s_axi_awready,
    Q,
    UNCONN_OUT,
    m_axi_awsize,
    m_axi_arsize,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    clk,
    cmd_push_block_reg,
    s_axi_arvalid,
    cmd_push_block_reg_0,
    s_axi_awvalid,
    D,
    \m_payload_i_reg[61] );
  output s_ready_i_reg;
  output \aresetn_d_reg[1] ;
  output sr_awvalid;
  output sr_arvalid;
  output [27:0]in;
  output [1:0]m_axi_awburst;
  output [31:0]m_axi_awaddr;
  output [27:0]\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ;
  output [1:0]m_axi_arburst;
  output [31:0]m_axi_araddr;
  output s_axi_arready;
  output s_axi_awready;
  output [15:0]Q;
  output [15:0]UNCONN_OUT;
  output [2:0]m_axi_awsize;
  output [2:0]m_axi_arsize;
  input \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  input clk;
  input cmd_push_block_reg;
  input s_axi_arvalid;
  input cmd_push_block_reg_0;
  input s_axi_awvalid;
  input [60:0]D;
  input [60:0]\m_payload_i_reg[61] ;

  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire [60:0]D;
  wire [15:0]Q;
  wire [15:0]UNCONN_OUT;
  wire [27:0]\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ;
  wire \aresetn_d_reg[1] ;
  wire clk;
  wire cmd_push_block_reg;
  wire cmd_push_block_reg_0;
  wire [27:0]in;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [2:0]m_axi_arsize;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [2:0]m_axi_awsize;
  wire [60:0]\m_payload_i_reg[61] ;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_ready_i_reg;
  wire sr_arvalid;
  wire sr_awvalid;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice_2 \ar.ar_pipe 
       (.\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ),
        .UNCONN_OUT(UNCONN_OUT),
        .\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] (\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ),
        .\aresetn_d_reg[0] (\aresetn_d_reg[1] ),
        .clk(clk),
        .cmd_push_block_reg(cmd_push_block_reg),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arsize(m_axi_arsize),
        .\m_payload_i_reg[61]_0 (\m_payload_i_reg[61] ),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid),
        .s_ready_i_reg_0(s_ready_i_reg),
        .sr_arvalid(sr_arvalid));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice_3 \aw.aw_pipe 
       (.\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ),
        .D(D),
        .Q(Q),
        .\aresetn_d_reg[1] (\aresetn_d_reg[1] ),
        .\aresetn_d_reg[1]_0 (s_ready_i_reg),
        .clk(clk),
        .cmd_push_block_reg(cmd_push_block_reg_0),
        .in(in),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awsize(m_axi_awsize),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .sr_awvalid(sr_awvalid));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized3
   (st_mr_bvalid,
    m_axi_bready,
    st_mr_rvalid,
    \skid_buffer_reg[0] ,
    \gen_master_slots[0].w_issuing_cnt_reg[0] ,
    w_cmd_pop_0__0,
    \gen_arbiter.qual_reg_reg[1] ,
    grant_hot0,
    valid_qual_i3__2,
    st_mr_bid,
    grant_hot0_0,
    D,
    valid_qual_i3__2_1,
    \m_payload_i_reg[0] ,
    r_cmd_pop_0__1,
    st_mr_bmesg,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    m_axi_bvalid,
    bready_carry,
    \aresetn_d_reg[1]_0 ,
    m_axi_rvalid,
    w_issuing_cnt,
    \m_ready_d_reg[1] ,
    Q,
    m_axi_awready,
    st_aa_awvalid_qual,
    \m_ready_d_reg[0] ,
    s_axi_awvalid,
    \gen_arbiter.last_rr_hot_reg[0] ,
    \gen_arbiter.last_rr_hot_reg[1] ,
    \m_ready_d_reg[0]_0 ,
    st_aa_awtarget_hot,
    \m_payload_i_reg[18] ,
    \gen_master_slots[2].w_issuing_cnt_reg[16] ,
    \m_payload_i_reg[18]_0 ,
    \m_payload_i_reg[18]_1 ,
    \m_payload_i_reg[18]_2 ,
    \gen_single_thread.active_target_hot_reg[0] ,
    s_axi_bready,
    \gen_single_thread.active_target_hot_reg[0]_0 ,
    st_aa_arvalid_qual,
    \gen_arbiter.last_rr_hot_reg[0]_0 ,
    \gen_arbiter.last_rr_hot_reg[1]_0 ,
    s_axi_arvalid,
    st_aa_artarget_hot,
    \m_payload_i_reg[18]_3 ,
    m_valid_i_reg,
    match_13,
    \m_payload_i_reg[18]_4 ,
    match_14,
    \gen_single_thread.active_target_hot_reg[0]_1 ,
    s_axi_rready,
    \gen_single_thread.active_target_hot_reg[0]_2 ,
    r_issuing_cnt,
    rready_carry,
    m_axi_rid,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    m_axi_bid,
    m_axi_bresp);
  output [0:0]st_mr_bvalid;
  output [0:0]m_axi_bready;
  output [0:0]st_mr_rvalid;
  output \skid_buffer_reg[0] ;
  output \gen_master_slots[0].w_issuing_cnt_reg[0] ;
  output w_cmd_pop_0__0;
  output [1:0]\gen_arbiter.qual_reg_reg[1] ;
  output grant_hot0;
  output [0:0]valid_qual_i3__2;
  output [0:0]st_mr_bid;
  output grant_hot0_0;
  output [1:0]D;
  output [0:0]valid_qual_i3__2_1;
  output [67:0]\m_payload_i_reg[0] ;
  output r_cmd_pop_0__1;
  output [1:0]st_mr_bmesg;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input [0:0]m_axi_bvalid;
  input [0:0]bready_carry;
  input \aresetn_d_reg[1]_0 ;
  input [0:0]m_axi_rvalid;
  input [1:0]w_issuing_cnt;
  input \m_ready_d_reg[1] ;
  input [0:0]Q;
  input [0:0]m_axi_awready;
  input [1:0]st_aa_awvalid_qual;
  input \m_ready_d_reg[0] ;
  input [1:0]s_axi_awvalid;
  input \gen_arbiter.last_rr_hot_reg[0] ;
  input \gen_arbiter.last_rr_hot_reg[1] ;
  input \m_ready_d_reg[0]_0 ;
  input [1:0]st_aa_awtarget_hot;
  input \m_payload_i_reg[18] ;
  input [1:0]\gen_master_slots[2].w_issuing_cnt_reg[16] ;
  input \m_payload_i_reg[18]_0 ;
  input \m_payload_i_reg[18]_1 ;
  input \m_payload_i_reg[18]_2 ;
  input \gen_single_thread.active_target_hot_reg[0] ;
  input [1:0]s_axi_bready;
  input \gen_single_thread.active_target_hot_reg[0]_0 ;
  input [1:0]st_aa_arvalid_qual;
  input \gen_arbiter.last_rr_hot_reg[0]_0 ;
  input \gen_arbiter.last_rr_hot_reg[1]_0 ;
  input [1:0]s_axi_arvalid;
  input [1:0]st_aa_artarget_hot;
  input \m_payload_i_reg[18]_3 ;
  input [1:0]m_valid_i_reg;
  input match_13;
  input \m_payload_i_reg[18]_4 ;
  input match_14;
  input \gen_single_thread.active_target_hot_reg[0]_1 ;
  input [1:0]s_axi_rready;
  input \gen_single_thread.active_target_hot_reg[0]_2 ;
  input [1:0]r_issuing_cnt;
  input [0:0]rready_carry;
  input [0:0]m_axi_rid;
  input [0:0]m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;

  wire [1:0]D;
  wire [0:0]Q;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire [0:0]bready_carry;
  wire \gen_arbiter.last_rr_hot_reg[0] ;
  wire \gen_arbiter.last_rr_hot_reg[0]_0 ;
  wire \gen_arbiter.last_rr_hot_reg[1] ;
  wire \gen_arbiter.last_rr_hot_reg[1]_0 ;
  wire [1:0]\gen_arbiter.qual_reg_reg[1] ;
  wire \gen_master_slots[0].w_issuing_cnt_reg[0] ;
  wire [1:0]\gen_master_slots[2].w_issuing_cnt_reg[16] ;
  wire \gen_single_thread.active_target_hot_reg[0] ;
  wire \gen_single_thread.active_target_hot_reg[0]_0 ;
  wire \gen_single_thread.active_target_hot_reg[0]_1 ;
  wire \gen_single_thread.active_target_hot_reg[0]_2 ;
  wire grant_hot0;
  wire grant_hot0_0;
  wire [0:0]m_axi_awready;
  wire [0:0]m_axi_bid;
  wire [0:0]m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire [0:0]m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire [0:0]m_axi_rid;
  wire [0:0]m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire [0:0]m_axi_rvalid;
  wire [67:0]\m_payload_i_reg[0] ;
  wire \m_payload_i_reg[18] ;
  wire \m_payload_i_reg[18]_0 ;
  wire \m_payload_i_reg[18]_1 ;
  wire \m_payload_i_reg[18]_2 ;
  wire \m_payload_i_reg[18]_3 ;
  wire \m_payload_i_reg[18]_4 ;
  wire \m_ready_d_reg[0] ;
  wire \m_ready_d_reg[0]_0 ;
  wire \m_ready_d_reg[1] ;
  wire [1:0]m_valid_i_reg;
  wire match_13;
  wire match_14;
  wire p_1_in;
  wire r_cmd_pop_0__1;
  wire [1:0]r_issuing_cnt;
  wire [0:0]rready_carry;
  wire [1:0]s_axi_arvalid;
  wire [1:0]s_axi_awvalid;
  wire [1:0]s_axi_bready;
  wire [1:0]s_axi_rready;
  wire \skid_buffer_reg[0] ;
  wire [1:0]st_aa_artarget_hot;
  wire [1:0]st_aa_arvalid_qual;
  wire [1:0]st_aa_awtarget_hot;
  wire [1:0]st_aa_awvalid_qual;
  wire [0:0]st_mr_bid;
  wire [1:0]st_mr_bmesg;
  wire [0:0]st_mr_bvalid;
  wire [0:0]st_mr_rvalid;
  wire [0:0]valid_qual_i3__2;
  wire [0:0]valid_qual_i3__2_1;
  wire w_cmd_pop_0__0;
  wire [1:0]w_issuing_cnt;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_58 \b.b_pipe 
       (.Q(Q),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\aresetn_d_reg[1] ),
        .\aresetn_d_reg[1]_0 (\aresetn_d_reg[1]_0 ),
        .bready_carry(bready_carry),
        .\gen_arbiter.last_rr_hot_reg[0] (\gen_arbiter.last_rr_hot_reg[0] ),
        .\gen_arbiter.last_rr_hot_reg[1] (\gen_arbiter.last_rr_hot_reg[1] ),
        .\gen_arbiter.qual_reg_reg[1] (\gen_arbiter.qual_reg_reg[1] ),
        .\gen_master_slots[0].w_issuing_cnt_reg[0] (\gen_master_slots[0].w_issuing_cnt_reg[0] ),
        .\gen_master_slots[2].w_issuing_cnt_reg[16] (\gen_master_slots[2].w_issuing_cnt_reg[16] ),
        .\gen_single_thread.active_target_hot_reg[0] (\gen_single_thread.active_target_hot_reg[0] ),
        .\gen_single_thread.active_target_hot_reg[0]_0 (\gen_single_thread.active_target_hot_reg[0]_0 ),
        .grant_hot0(grant_hot0),
        .m_axi_awready(m_axi_awready),
        .m_axi_bid(m_axi_bid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .\m_payload_i_reg[18] (\m_payload_i_reg[18] ),
        .\m_payload_i_reg[18]_0 (\m_payload_i_reg[18]_0 ),
        .\m_payload_i_reg[18]_1 (\m_payload_i_reg[18]_1 ),
        .\m_payload_i_reg[18]_2 (\m_payload_i_reg[18]_2 ),
        .\m_ready_d_reg[0] (\m_ready_d_reg[0] ),
        .\m_ready_d_reg[0]_0 (\m_ready_d_reg[0]_0 ),
        .\m_ready_d_reg[1] (\m_ready_d_reg[1] ),
        .p_1_in(p_1_in),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_ready_i_reg_0(st_mr_bvalid),
        .st_aa_awtarget_hot(st_aa_awtarget_hot),
        .st_aa_awvalid_qual(st_aa_awvalid_qual),
        .st_mr_bid(st_mr_bid),
        .st_mr_bmesg(st_mr_bmesg),
        .valid_qual_i3__2(valid_qual_i3__2),
        .w_cmd_pop_0__0(w_cmd_pop_0__0),
        .w_issuing_cnt(w_issuing_cnt));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2_59 \r.r_pipe 
       (.D(D),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\aresetn_d_reg[1] ),
        .\gen_arbiter.last_rr_hot_reg[0] (\gen_arbiter.last_rr_hot_reg[0]_0 ),
        .\gen_arbiter.last_rr_hot_reg[1] (\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .\gen_single_thread.active_target_hot_reg[0] (\gen_single_thread.active_target_hot_reg[0]_1 ),
        .\gen_single_thread.active_target_hot_reg[0]_0 (\gen_single_thread.active_target_hot_reg[0]_2 ),
        .grant_hot0_0(grant_hot0_0),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rid(m_axi_rid),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .\m_payload_i_reg[0]_0 (st_mr_rvalid),
        .\m_payload_i_reg[0]_1 (\m_payload_i_reg[0] ),
        .\m_payload_i_reg[18]_0 (\m_payload_i_reg[18]_3 ),
        .\m_payload_i_reg[18]_1 (\m_payload_i_reg[18]_4 ),
        .m_valid_i_reg_0(m_valid_i_reg),
        .match_13(match_13),
        .match_14(match_14),
        .p_1_in(p_1_in),
        .r_cmd_pop_0__1(r_cmd_pop_0__1),
        .r_issuing_cnt(r_issuing_cnt),
        .rready_carry(rready_carry),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_rready(s_axi_rready),
        .\skid_buffer_reg[0]_0 (\skid_buffer_reg[0] ),
        .st_aa_artarget_hot(st_aa_artarget_hot),
        .st_aa_arvalid_qual(st_aa_arvalid_qual),
        .valid_qual_i3__2_1(valid_qual_i3__2_1));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized3_43
   (st_mr_bvalid,
    m_axi_bready,
    st_mr_rvalid,
    \skid_buffer_reg[0] ,
    p_0_in,
    \gen_master_slots[1].w_issuing_cnt_reg[8] ,
    w_cmd_pop_1__0,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    st_mr_bid,
    \m_payload_i_reg[0] ,
    \gen_arbiter.m_grant_enc_i_reg[0]_0 ,
    r_cmd_pop_1__1,
    p_2_in,
    s_axi_rvalid,
    st_mr_bmesg,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    aresetn,
    m_axi_bvalid,
    bready_carry,
    \aresetn_d_reg[1]_0 ,
    m_axi_rvalid,
    w_issuing_cnt,
    \m_ready_d_reg[1] ,
    Q,
    m_axi_awready,
    \gen_single_thread.active_target_enc_reg[0] ,
    s_axi_bready,
    \gen_single_thread.active_target_enc_reg[0]_0 ,
    \gen_single_thread.active_target_enc_reg[0]_1 ,
    s_axi_rready,
    \gen_single_thread.active_target_enc_reg[0]_2 ,
    r_issuing_cnt,
    rready_carry,
    m_valid_i_reg,
    s_axi_rlast,
    m_axi_rid,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    m_axi_bid,
    m_axi_bresp);
  output [0:0]st_mr_bvalid;
  output [0:0]m_axi_bready;
  output [0:0]st_mr_rvalid;
  output \skid_buffer_reg[0] ;
  output [0:0]p_0_in;
  output \gen_master_slots[1].w_issuing_cnt_reg[8] ;
  output w_cmd_pop_1__0;
  output [0:0]\gen_arbiter.m_grant_enc_i_reg[0] ;
  output [0:0]st_mr_bid;
  output [67:0]\m_payload_i_reg[0] ;
  output [0:0]\gen_arbiter.m_grant_enc_i_reg[0]_0 ;
  output r_cmd_pop_1__1;
  output p_2_in;
  output [0:0]s_axi_rvalid;
  output [1:0]st_mr_bmesg;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input aresetn;
  input [0:0]m_axi_bvalid;
  input [0:0]bready_carry;
  input \aresetn_d_reg[1]_0 ;
  input [0:0]m_axi_rvalid;
  input [1:0]w_issuing_cnt;
  input \m_ready_d_reg[1] ;
  input [0:0]Q;
  input [0:0]m_axi_awready;
  input \gen_single_thread.active_target_enc_reg[0] ;
  input [1:0]s_axi_bready;
  input \gen_single_thread.active_target_enc_reg[0]_0 ;
  input \gen_single_thread.active_target_enc_reg[0]_1 ;
  input [1:0]s_axi_rready;
  input \gen_single_thread.active_target_enc_reg[0]_2 ;
  input [1:0]r_issuing_cnt;
  input [0:0]rready_carry;
  input m_valid_i_reg;
  input [0:0]s_axi_rlast;
  input [0:0]m_axi_rid;
  input [0:0]m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;

  wire [0:0]Q;
  wire aclk;
  wire aresetn;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire [0:0]bready_carry;
  wire [0:0]\gen_arbiter.m_grant_enc_i_reg[0] ;
  wire [0:0]\gen_arbiter.m_grant_enc_i_reg[0]_0 ;
  wire \gen_master_slots[1].w_issuing_cnt_reg[8] ;
  wire \gen_single_thread.active_target_enc_reg[0] ;
  wire \gen_single_thread.active_target_enc_reg[0]_0 ;
  wire \gen_single_thread.active_target_enc_reg[0]_1 ;
  wire \gen_single_thread.active_target_enc_reg[0]_2 ;
  wire [0:0]m_axi_awready;
  wire [0:0]m_axi_bid;
  wire [0:0]m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire [0:0]m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire [0:0]m_axi_rid;
  wire [0:0]m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire [0:0]m_axi_rvalid;
  wire [67:0]\m_payload_i_reg[0] ;
  wire \m_ready_d_reg[1] ;
  wire m_valid_i_reg;
  wire [0:0]p_0_in;
  wire p_1_in;
  wire p_2_in;
  wire r_cmd_pop_1__1;
  wire [1:0]r_issuing_cnt;
  wire [0:0]rready_carry;
  wire [1:0]s_axi_bready;
  wire [0:0]s_axi_rlast;
  wire [1:0]s_axi_rready;
  wire [0:0]s_axi_rvalid;
  wire \skid_buffer_reg[0] ;
  wire [0:0]st_mr_bid;
  wire [1:0]st_mr_bmesg;
  wire [0:0]st_mr_bvalid;
  wire [0:0]st_mr_rvalid;
  wire w_cmd_pop_1__0;
  wire [1:0]w_issuing_cnt;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_55 \b.b_pipe 
       (.Q(Q),
        .aclk(aclk),
        .aresetn(aresetn),
        .\aresetn_d_reg[1] (\aresetn_d_reg[1] ),
        .\aresetn_d_reg[1]_0 (\aresetn_d_reg[1]_0 ),
        .bready_carry(bready_carry),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_arbiter.m_grant_enc_i_reg[0] ),
        .\gen_master_slots[1].w_issuing_cnt_reg[8] (\gen_master_slots[1].w_issuing_cnt_reg[8] ),
        .\gen_single_thread.active_target_enc_reg[0] (\gen_single_thread.active_target_enc_reg[0] ),
        .\gen_single_thread.active_target_enc_reg[0]_0 (\gen_single_thread.active_target_enc_reg[0]_0 ),
        .m_axi_awready(m_axi_awready),
        .m_axi_bid(m_axi_bid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .\m_ready_d_reg[1] (\m_ready_d_reg[1] ),
        .p_0_in(p_0_in),
        .p_1_in(p_1_in),
        .s_axi_bready(s_axi_bready),
        .s_ready_i_reg_0(st_mr_bvalid),
        .st_mr_bid(st_mr_bid),
        .st_mr_bmesg(st_mr_bmesg),
        .w_cmd_pop_1__0(w_cmd_pop_1__0),
        .w_issuing_cnt(w_issuing_cnt));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2_56 \r.r_pipe 
       (.Q(\m_payload_i_reg[0] ),
        .aclk(aclk),
        .\aresetn_d_reg[1] (\aresetn_d_reg[1] ),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_arbiter.m_grant_enc_i_reg[0]_0 ),
        .\gen_single_thread.active_target_enc_reg[0] (\gen_single_thread.active_target_enc_reg[0]_1 ),
        .\gen_single_thread.active_target_enc_reg[0]_0 (\gen_single_thread.active_target_enc_reg[0]_2 ),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rid(m_axi_rid),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .\m_payload_i_reg[0]_0 (st_mr_rvalid),
        .m_valid_i_reg_0(m_valid_i_reg),
        .p_1_in(p_1_in),
        .p_2_in(p_2_in),
        .r_cmd_pop_1__1(r_cmd_pop_1__1),
        .r_issuing_cnt(r_issuing_cnt),
        .rready_carry(rready_carry),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid),
        .\skid_buffer_reg[0]_0 (\skid_buffer_reg[0] ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axi_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized3_44
   (s_ready_i_reg,
    mi_bready_2,
    st_mr_rvalid,
    \m_payload_i_reg[67] ,
    \m_payload_i_reg[2] ,
    s_ready_i_reg_0,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    \gen_arbiter.m_grant_enc_i_reg[0]_0 ,
    \gen_arbiter.m_grant_enc_i_reg[0]_1 ,
    w_cmd_pop_2__0,
    \gen_arbiter.m_grant_enc_i_reg[0]_2 ,
    \gen_arbiter.m_grant_enc_i_reg[0]_3 ,
    \gen_arbiter.m_grant_enc_i_reg[0]_4 ,
    st_mr_rid,
    st_mr_rlast,
    r_cmd_pop_2__1,
    s_ready_i_reg_1,
    \aresetn_d_reg[1] ,
    \gen_axi.s_axi_bvalid_i_reg ,
    aclk,
    p_1_in,
    \m_payload_i_reg[2]_0 ,
    \aresetn_d_reg[0] ,
    p_21_in,
    bready_carry,
    \gen_axi.read_cs_reg[0] ,
    st_aa_awtarget_hot,
    target_mi_enc,
    valid_qual_i3__2,
    \gen_arbiter.last_rr_hot_reg[0] ,
    target_mi_enc_0,
    \gen_arbiter.last_rr_hot_reg[1] ,
    \gen_master_slots[2].w_issuing_cnt_reg[16] ,
    \gen_single_thread.active_target_enc_reg[1] ,
    s_axi_bready,
    \gen_single_thread.active_target_enc_reg[1]_0 ,
    st_aa_artarget_hot,
    target_mi_enc_1,
    valid_qual_i3__2_2,
    \gen_arbiter.last_rr_hot_reg[0]_0 ,
    target_mi_enc_3,
    \gen_arbiter.last_rr_hot_reg[1]_0 ,
    \gen_single_thread.active_target_enc_reg[1]_1 ,
    s_axi_rready,
    \gen_single_thread.active_target_enc_reg[1]_2 ,
    rready_carry,
    \gen_master_slots[2].r_issuing_cnt_reg[16] ,
    m_valid_i_reg,
    \gen_single_thread.active_target_hot_reg[0] ,
    \m_payload_i_reg[67]_0 ,
    p_20_in,
    p_17_in);
  output s_ready_i_reg;
  output mi_bready_2;
  output [0:0]st_mr_rvalid;
  output \m_payload_i_reg[67] ;
  output \m_payload_i_reg[2] ;
  output s_ready_i_reg_0;
  output \gen_arbiter.m_grant_enc_i_reg[0] ;
  output [0:0]\gen_arbiter.m_grant_enc_i_reg[0]_0 ;
  output \gen_arbiter.m_grant_enc_i_reg[0]_1 ;
  output w_cmd_pop_2__0;
  output \gen_arbiter.m_grant_enc_i_reg[0]_2 ;
  output [0:0]\gen_arbiter.m_grant_enc_i_reg[0]_3 ;
  output \gen_arbiter.m_grant_enc_i_reg[0]_4 ;
  output [0:0]st_mr_rid;
  output [0:0]st_mr_rlast;
  output r_cmd_pop_2__1;
  output s_ready_i_reg_1;
  input \aresetn_d_reg[1] ;
  input \gen_axi.s_axi_bvalid_i_reg ;
  input aclk;
  input p_1_in;
  input \m_payload_i_reg[2]_0 ;
  input \aresetn_d_reg[0] ;
  input p_21_in;
  input [0:0]bready_carry;
  input \gen_axi.read_cs_reg[0] ;
  input [1:0]st_aa_awtarget_hot;
  input target_mi_enc;
  input [1:0]valid_qual_i3__2;
  input \gen_arbiter.last_rr_hot_reg[0] ;
  input target_mi_enc_0;
  input \gen_arbiter.last_rr_hot_reg[1] ;
  input [0:0]\gen_master_slots[2].w_issuing_cnt_reg[16] ;
  input \gen_single_thread.active_target_enc_reg[1] ;
  input [1:0]s_axi_bready;
  input \gen_single_thread.active_target_enc_reg[1]_0 ;
  input [1:0]st_aa_artarget_hot;
  input target_mi_enc_1;
  input [1:0]valid_qual_i3__2_2;
  input \gen_arbiter.last_rr_hot_reg[0]_0 ;
  input target_mi_enc_3;
  input \gen_arbiter.last_rr_hot_reg[1]_0 ;
  input \gen_single_thread.active_target_enc_reg[1]_1 ;
  input [1:0]s_axi_rready;
  input \gen_single_thread.active_target_enc_reg[1]_2 ;
  input [0:0]rready_carry;
  input [0:0]\gen_master_slots[2].r_issuing_cnt_reg[16] ;
  input [0:0]m_valid_i_reg;
  input \gen_single_thread.active_target_hot_reg[0] ;
  input [0:0]\m_payload_i_reg[67]_0 ;
  input p_20_in;
  input p_17_in;

  wire aclk;
  wire \aresetn_d_reg[0] ;
  wire \aresetn_d_reg[1] ;
  wire [0:0]bready_carry;
  wire \gen_arbiter.last_rr_hot_reg[0] ;
  wire \gen_arbiter.last_rr_hot_reg[0]_0 ;
  wire \gen_arbiter.last_rr_hot_reg[1] ;
  wire \gen_arbiter.last_rr_hot_reg[1]_0 ;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire [0:0]\gen_arbiter.m_grant_enc_i_reg[0]_0 ;
  wire \gen_arbiter.m_grant_enc_i_reg[0]_1 ;
  wire \gen_arbiter.m_grant_enc_i_reg[0]_2 ;
  wire [0:0]\gen_arbiter.m_grant_enc_i_reg[0]_3 ;
  wire \gen_arbiter.m_grant_enc_i_reg[0]_4 ;
  wire \gen_axi.read_cs_reg[0] ;
  wire \gen_axi.s_axi_bvalid_i_reg ;
  wire [0:0]\gen_master_slots[2].r_issuing_cnt_reg[16] ;
  wire [0:0]\gen_master_slots[2].w_issuing_cnt_reg[16] ;
  wire \gen_single_thread.active_target_enc_reg[1] ;
  wire \gen_single_thread.active_target_enc_reg[1]_0 ;
  wire \gen_single_thread.active_target_enc_reg[1]_1 ;
  wire \gen_single_thread.active_target_enc_reg[1]_2 ;
  wire \gen_single_thread.active_target_hot_reg[0] ;
  wire \m_payload_i_reg[2] ;
  wire \m_payload_i_reg[2]_0 ;
  wire \m_payload_i_reg[67] ;
  wire [0:0]\m_payload_i_reg[67]_0 ;
  wire [0:0]m_valid_i_reg;
  wire mi_bready_2;
  wire p_17_in;
  wire p_1_in;
  wire p_20_in;
  wire p_21_in;
  wire r_cmd_pop_2__1;
  wire [0:0]rready_carry;
  wire [1:0]s_axi_bready;
  wire [1:0]s_axi_rready;
  wire s_ready_i_reg;
  wire s_ready_i_reg_0;
  wire s_ready_i_reg_1;
  wire [1:0]st_aa_artarget_hot;
  wire [1:0]st_aa_awtarget_hot;
  wire [0:0]st_mr_rid;
  wire [0:0]st_mr_rlast;
  wire [0:0]st_mr_rvalid;
  wire target_mi_enc;
  wire target_mi_enc_0;
  wire target_mi_enc_1;
  wire target_mi_enc_3;
  wire [1:0]valid_qual_i3__2;
  wire [1:0]valid_qual_i3__2_2;
  wire w_cmd_pop_2__0;

  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_52 \b.b_pipe 
       (.aclk(aclk),
        .\aresetn_d_reg[0] (\aresetn_d_reg[0] ),
        .\aresetn_d_reg[1]_0 (\aresetn_d_reg[1] ),
        .bready_carry(bready_carry),
        .\gen_arbiter.last_rr_hot_reg[0] (\gen_arbiter.last_rr_hot_reg[0] ),
        .\gen_arbiter.last_rr_hot_reg[1] (\gen_arbiter.last_rr_hot_reg[1] ),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_arbiter.m_grant_enc_i_reg[0] ),
        .\gen_arbiter.m_grant_enc_i_reg[0]_0 (\gen_arbiter.m_grant_enc_i_reg[0]_0 ),
        .\gen_arbiter.m_grant_enc_i_reg[0]_1 (\gen_arbiter.m_grant_enc_i_reg[0]_1 ),
        .\gen_axi.s_axi_bvalid_i_reg (\gen_axi.s_axi_bvalid_i_reg ),
        .\gen_master_slots[2].w_issuing_cnt_reg[16] (\gen_master_slots[2].w_issuing_cnt_reg[16] ),
        .\gen_single_thread.active_target_enc_reg[1] (\gen_single_thread.active_target_enc_reg[1] ),
        .\gen_single_thread.active_target_enc_reg[1]_0 (\gen_single_thread.active_target_enc_reg[1]_0 ),
        .\m_payload_i_reg[2]_0 (\m_payload_i_reg[2] ),
        .\m_payload_i_reg[2]_1 (\m_payload_i_reg[2]_0 ),
        .mi_bready_2(mi_bready_2),
        .p_1_in(p_1_in),
        .p_21_in(p_21_in),
        .s_axi_bready(s_axi_bready),
        .s_ready_i_reg_0(s_ready_i_reg),
        .s_ready_i_reg_1(s_ready_i_reg_0),
        .st_aa_awtarget_hot(st_aa_awtarget_hot),
        .target_mi_enc(target_mi_enc),
        .target_mi_enc_0(target_mi_enc_0),
        .valid_qual_i3__2(valid_qual_i3__2),
        .w_cmd_pop_2__0(w_cmd_pop_2__0));
  bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2_53 \r.r_pipe 
       (.aclk(aclk),
        .\aresetn_d_reg[1] (\aresetn_d_reg[1] ),
        .\gen_arbiter.last_rr_hot_reg[0] (\gen_arbiter.last_rr_hot_reg[0]_0 ),
        .\gen_arbiter.last_rr_hot_reg[1] (\gen_arbiter.last_rr_hot_reg[1]_0 ),
        .\gen_arbiter.m_grant_enc_i_reg[0] (\gen_arbiter.m_grant_enc_i_reg[0]_2 ),
        .\gen_arbiter.m_grant_enc_i_reg[0]_0 (\gen_arbiter.m_grant_enc_i_reg[0]_3 ),
        .\gen_arbiter.m_grant_enc_i_reg[0]_1 (\gen_arbiter.m_grant_enc_i_reg[0]_4 ),
        .\gen_axi.read_cs_reg[0] (\gen_axi.read_cs_reg[0] ),
        .\gen_master_slots[2].r_issuing_cnt_reg[16] (st_mr_rvalid),
        .\gen_master_slots[2].r_issuing_cnt_reg[16]_0 (\gen_master_slots[2].r_issuing_cnt_reg[16] ),
        .\gen_single_thread.active_target_enc_reg[1] (\gen_single_thread.active_target_enc_reg[1]_1 ),
        .\gen_single_thread.active_target_enc_reg[1]_0 (\gen_single_thread.active_target_enc_reg[1]_2 ),
        .\gen_single_thread.active_target_hot_reg[0] (\gen_single_thread.active_target_hot_reg[0] ),
        .\m_payload_i_reg[66]_0 (st_mr_rlast),
        .\m_payload_i_reg[67]_0 (\m_payload_i_reg[67] ),
        .\m_payload_i_reg[67]_1 (st_mr_rid),
        .\m_payload_i_reg[67]_2 (\m_payload_i_reg[67]_0 ),
        .m_valid_i_reg_0(m_valid_i_reg),
        .p_17_in(p_17_in),
        .p_1_in(p_1_in),
        .p_20_in(p_20_in),
        .r_cmd_pop_2__1(r_cmd_pop_2__1),
        .rready_carry(rready_carry),
        .s_axi_rready(s_axi_rready),
        .s_ready_i_reg_0(s_ready_i_reg_1),
        .st_aa_artarget_hot(st_aa_artarget_hot),
        .target_mi_enc_1(target_mi_enc_1),
        .target_mi_enc_3(target_mi_enc_3),
        .valid_qual_i3__2_2(valid_qual_i3__2_2));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice
   (m_axi_arvalid,
    s_axi_arready,
    \m_payload_i_reg[61]_0 ,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    s_axi_arvalid,
    m_axi_arready,
    \aresetn_d_reg[1]_0 ,
    \S01_AXI_0_arregion[3] );
  output m_axi_arvalid;
  output s_axi_arready;
  output [60:0]\m_payload_i_reg[61]_0 ;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input s_axi_arvalid;
  input m_axi_arready;
  input \aresetn_d_reg[1]_0 ;
  input [60:0]\S01_AXI_0_arregion[3] ;

  wire \<const0> ;
  wire \<const1> ;
  wire [60:0]\S01_AXI_0_arregion[3] ;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire \m_payload_i[31]_i_1__0_n_0 ;
  wire [60:0]\m_payload_i_reg[61]_0 ;
  wire m_valid_i_i_1__0_n_0;
  wire p_1_in;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_ready_i_i_1__3_n_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT1 #(
    .INIT(2'h1)) 
    \m_payload_i[31]_i_1__0 
       (.I0(m_axi_arvalid),
        .O(\m_payload_i[31]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [0]),
        .Q(\m_payload_i_reg[61]_0 [0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [10]),
        .Q(\m_payload_i_reg[61]_0 [10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [11]),
        .Q(\m_payload_i_reg[61]_0 [11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [12]),
        .Q(\m_payload_i_reg[61]_0 [12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [13]),
        .Q(\m_payload_i_reg[61]_0 [13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [14]),
        .Q(\m_payload_i_reg[61]_0 [14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [15]),
        .Q(\m_payload_i_reg[61]_0 [15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [16]),
        .Q(\m_payload_i_reg[61]_0 [16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [17]),
        .Q(\m_payload_i_reg[61]_0 [17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [18]),
        .Q(\m_payload_i_reg[61]_0 [18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [19]),
        .Q(\m_payload_i_reg[61]_0 [19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [1]),
        .Q(\m_payload_i_reg[61]_0 [1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [20]),
        .Q(\m_payload_i_reg[61]_0 [20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [21]),
        .Q(\m_payload_i_reg[61]_0 [21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [22]),
        .Q(\m_payload_i_reg[61]_0 [22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [23]),
        .Q(\m_payload_i_reg[61]_0 [23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [24]),
        .Q(\m_payload_i_reg[61]_0 [24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [25]),
        .Q(\m_payload_i_reg[61]_0 [25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [26]),
        .Q(\m_payload_i_reg[61]_0 [26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [27]),
        .Q(\m_payload_i_reg[61]_0 [27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [28]),
        .Q(\m_payload_i_reg[61]_0 [28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [29]),
        .Q(\m_payload_i_reg[61]_0 [29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [2]),
        .Q(\m_payload_i_reg[61]_0 [2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [30]),
        .Q(\m_payload_i_reg[61]_0 [30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [31]),
        .Q(\m_payload_i_reg[61]_0 [31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [32]),
        .Q(\m_payload_i_reg[61]_0 [32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [33]),
        .Q(\m_payload_i_reg[61]_0 [33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [34]),
        .Q(\m_payload_i_reg[61]_0 [34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [35]),
        .Q(\m_payload_i_reg[61]_0 [35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [36]),
        .Q(\m_payload_i_reg[61]_0 [36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [37]),
        .Q(\m_payload_i_reg[61]_0 [37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [38]),
        .Q(\m_payload_i_reg[61]_0 [38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [39]),
        .Q(\m_payload_i_reg[61]_0 [39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [3]),
        .Q(\m_payload_i_reg[61]_0 [3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [40]),
        .Q(\m_payload_i_reg[61]_0 [40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [41]),
        .Q(\m_payload_i_reg[61]_0 [41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [42]),
        .Q(\m_payload_i_reg[61]_0 [42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [43]),
        .Q(\m_payload_i_reg[61]_0 [43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [44]),
        .Q(\m_payload_i_reg[61]_0 [44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [45]),
        .Q(\m_payload_i_reg[61]_0 [45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [46]),
        .Q(\m_payload_i_reg[61]_0 [46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [47]),
        .Q(\m_payload_i_reg[61]_0 [47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [48]),
        .Q(\m_payload_i_reg[61]_0 [48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [49]),
        .Q(\m_payload_i_reg[61]_0 [49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [4]),
        .Q(\m_payload_i_reg[61]_0 [4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [50]),
        .Q(\m_payload_i_reg[61]_0 [50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [51]),
        .Q(\m_payload_i_reg[61]_0 [51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [52]),
        .Q(\m_payload_i_reg[61]_0 [52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [53]),
        .Q(\m_payload_i_reg[61]_0 [53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [54]),
        .Q(\m_payload_i_reg[61]_0 [54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [55]),
        .Q(\m_payload_i_reg[61]_0 [55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [56]),
        .Q(\m_payload_i_reg[61]_0 [56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [57]),
        .Q(\m_payload_i_reg[61]_0 [57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [58]),
        .Q(\m_payload_i_reg[61]_0 [58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [5]),
        .Q(\m_payload_i_reg[61]_0 [5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [59]),
        .Q(\m_payload_i_reg[61]_0 [59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [60]),
        .Q(\m_payload_i_reg[61]_0 [60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [6]),
        .Q(\m_payload_i_reg[61]_0 [6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [7]),
        .Q(\m_payload_i_reg[61]_0 [7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [8]),
        .Q(\m_payload_i_reg[61]_0 [8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S01_AXI_0_arregion[3] [9]),
        .Q(\m_payload_i_reg[61]_0 [9]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_1__0
       (.I0(s_axi_arvalid),
        .I1(s_axi_arready),
        .I2(m_axi_arready),
        .O(m_valid_i_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1__0_n_0),
        .Q(m_axi_arvalid),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_1__3
       (.I0(s_axi_arvalid),
        .I1(m_axi_arvalid),
        .I2(m_axi_arready),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(s_ready_i_i_1__3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__3_n_0),
        .Q(s_axi_arready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice_1
   (m_axi_awvalid,
    s_axi_awready,
    p_1_in,
    \aresetn_d_reg[1] ,
    Q,
    \aresetn_d_reg[1]_0 ,
    aclk,
    aresetn,
    s_axi_awvalid,
    m_axi_awready,
    \aresetn_d_reg[1]_1 ,
    D);
  output m_axi_awvalid;
  output s_axi_awready;
  output p_1_in;
  output \aresetn_d_reg[1] ;
  output [60:0]Q;
  input \aresetn_d_reg[1]_0 ;
  input aclk;
  input aresetn;
  input s_axi_awvalid;
  input m_axi_awready;
  input \aresetn_d_reg[1]_1 ;
  input [60:0]D;

  wire \<const0> ;
  wire \<const1> ;
  wire [60:0]D;
  wire [60:0]Q;
  wire aclk;
  wire aresetn;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire \aresetn_d_reg[1]_1 ;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire \m_payload_i[31]_i_1_n_0 ;
  wire m_valid_i_i_1_n_0;
  wire [1:1]p_0_in;
  wire p_1_in;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_ready_i_i_2_n_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT2 #(
    .INIT(4'h8)) 
    \aresetn_d[1]_i_1 
       (.I0(p_0_in),
        .I1(aresetn),
        .O(\aresetn_d_reg[1] ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(aresetn),
        .Q(p_0_in),
        .R(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \m_payload_i[31]_i_1 
       (.I0(m_axi_awvalid),
        .O(\m_payload_i[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[0]),
        .Q(Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[10]),
        .Q(Q[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[11]),
        .Q(Q[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[12]),
        .Q(Q[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[13]),
        .Q(Q[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[14]),
        .Q(Q[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[15]),
        .Q(Q[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[16]),
        .Q(Q[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[17]),
        .Q(Q[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[18]),
        .Q(Q[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[19]),
        .Q(Q[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[1]),
        .Q(Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[20]),
        .Q(Q[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[21]),
        .Q(Q[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[22]),
        .Q(Q[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[23]),
        .Q(Q[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[24]),
        .Q(Q[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[25]),
        .Q(Q[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[26]),
        .Q(Q[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[27]),
        .Q(Q[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[28]),
        .Q(Q[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[29]),
        .Q(Q[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[2]),
        .Q(Q[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[30]),
        .Q(Q[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[31]),
        .Q(Q[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[32]),
        .Q(Q[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[33]),
        .Q(Q[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[34]),
        .Q(Q[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[35]),
        .Q(Q[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[36]),
        .Q(Q[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[37]),
        .Q(Q[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[38]),
        .Q(Q[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[39]),
        .Q(Q[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[3]),
        .Q(Q[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[40]),
        .Q(Q[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[41]),
        .Q(Q[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[42]),
        .Q(Q[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[43]),
        .Q(Q[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[44]),
        .Q(Q[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[45]),
        .Q(Q[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[46]),
        .Q(Q[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[47]),
        .Q(Q[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[48]),
        .Q(Q[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[49]),
        .Q(Q[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[4]),
        .Q(Q[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[50]),
        .Q(Q[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[51]),
        .Q(Q[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[52]),
        .Q(Q[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[53]),
        .Q(Q[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[54]),
        .Q(Q[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[55]),
        .Q(Q[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[56]),
        .Q(Q[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[57]),
        .Q(Q[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[58]),
        .Q(Q[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[5]),
        .Q(Q[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[59]),
        .Q(Q[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[60]),
        .Q(Q[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[6]),
        .Q(Q[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[7]),
        .Q(Q[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[8]),
        .Q(Q[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[9]),
        .Q(Q[9]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_1
       (.I0(s_axi_awvalid),
        .I1(s_axi_awready),
        .I2(m_axi_awready),
        .O(m_valid_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1_n_0),
        .Q(m_axi_awvalid),
        .R(\aresetn_d_reg[1]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    s_ready_i_i_1__1
       (.I0(p_0_in),
        .O(p_1_in));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_2
       (.I0(s_axi_awvalid),
        .I1(m_axi_awvalid),
        .I2(m_axi_awready),
        .I3(\aresetn_d_reg[1]_1 ),
        .O(s_ready_i_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_2_n_0),
        .Q(s_axi_awready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice_12
   (m_axi_arvalid,
    s_axi_arready,
    \M01_AXI_0_arregion[3] ,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    s_axi_arvalid,
    m_axi_arready,
    \aresetn_d_reg[1]_0 ,
    \S_AXI_AREGION_Q_reg[3] );
  output m_axi_arvalid;
  output s_axi_arready;
  output [60:0]\M01_AXI_0_arregion[3] ;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input s_axi_arvalid;
  input m_axi_arready;
  input \aresetn_d_reg[1]_0 ;
  input [60:0]\S_AXI_AREGION_Q_reg[3] ;

  wire \<const0> ;
  wire \<const1> ;
  wire [60:0]\M01_AXI_0_arregion[3] ;
  wire [60:0]\S_AXI_AREGION_Q_reg[3] ;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire \m_payload_i[31]_i_1__0_n_0 ;
  wire m_valid_i_i_1__0_n_0;
  wire p_1_in;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_ready_i_i_1__3_n_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT1 #(
    .INIT(2'h1)) 
    \m_payload_i[31]_i_1__0 
       (.I0(m_axi_arvalid),
        .O(\m_payload_i[31]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [0]),
        .Q(\M01_AXI_0_arregion[3] [0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [10]),
        .Q(\M01_AXI_0_arregion[3] [10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [11]),
        .Q(\M01_AXI_0_arregion[3] [11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [12]),
        .Q(\M01_AXI_0_arregion[3] [12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [13]),
        .Q(\M01_AXI_0_arregion[3] [13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [14]),
        .Q(\M01_AXI_0_arregion[3] [14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [15]),
        .Q(\M01_AXI_0_arregion[3] [15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [16]),
        .Q(\M01_AXI_0_arregion[3] [16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [17]),
        .Q(\M01_AXI_0_arregion[3] [17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [18]),
        .Q(\M01_AXI_0_arregion[3] [18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [19]),
        .Q(\M01_AXI_0_arregion[3] [19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [1]),
        .Q(\M01_AXI_0_arregion[3] [1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [20]),
        .Q(\M01_AXI_0_arregion[3] [20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [21]),
        .Q(\M01_AXI_0_arregion[3] [21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [22]),
        .Q(\M01_AXI_0_arregion[3] [22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [23]),
        .Q(\M01_AXI_0_arregion[3] [23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [24]),
        .Q(\M01_AXI_0_arregion[3] [24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [25]),
        .Q(\M01_AXI_0_arregion[3] [25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [26]),
        .Q(\M01_AXI_0_arregion[3] [26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [27]),
        .Q(\M01_AXI_0_arregion[3] [27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [28]),
        .Q(\M01_AXI_0_arregion[3] [28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [29]),
        .Q(\M01_AXI_0_arregion[3] [29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [2]),
        .Q(\M01_AXI_0_arregion[3] [2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [30]),
        .Q(\M01_AXI_0_arregion[3] [30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [31]),
        .Q(\M01_AXI_0_arregion[3] [31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [32]),
        .Q(\M01_AXI_0_arregion[3] [32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [33]),
        .Q(\M01_AXI_0_arregion[3] [33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [34]),
        .Q(\M01_AXI_0_arregion[3] [34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [35]),
        .Q(\M01_AXI_0_arregion[3] [35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [36]),
        .Q(\M01_AXI_0_arregion[3] [36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [37]),
        .Q(\M01_AXI_0_arregion[3] [37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [38]),
        .Q(\M01_AXI_0_arregion[3] [38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [39]),
        .Q(\M01_AXI_0_arregion[3] [39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [3]),
        .Q(\M01_AXI_0_arregion[3] [3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [40]),
        .Q(\M01_AXI_0_arregion[3] [40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [41]),
        .Q(\M01_AXI_0_arregion[3] [41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [42]),
        .Q(\M01_AXI_0_arregion[3] [42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [43]),
        .Q(\M01_AXI_0_arregion[3] [43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [44]),
        .Q(\M01_AXI_0_arregion[3] [44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [45]),
        .Q(\M01_AXI_0_arregion[3] [45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [46]),
        .Q(\M01_AXI_0_arregion[3] [46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [47]),
        .Q(\M01_AXI_0_arregion[3] [47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [48]),
        .Q(\M01_AXI_0_arregion[3] [48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [49]),
        .Q(\M01_AXI_0_arregion[3] [49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [4]),
        .Q(\M01_AXI_0_arregion[3] [4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [50]),
        .Q(\M01_AXI_0_arregion[3] [50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [51]),
        .Q(\M01_AXI_0_arregion[3] [51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [52]),
        .Q(\M01_AXI_0_arregion[3] [52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [53]),
        .Q(\M01_AXI_0_arregion[3] [53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [54]),
        .Q(\M01_AXI_0_arregion[3] [54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [55]),
        .Q(\M01_AXI_0_arregion[3] [55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [56]),
        .Q(\M01_AXI_0_arregion[3] [56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [57]),
        .Q(\M01_AXI_0_arregion[3] [57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [58]),
        .Q(\M01_AXI_0_arregion[3] [58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [5]),
        .Q(\M01_AXI_0_arregion[3] [5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [59]),
        .Q(\M01_AXI_0_arregion[3] [59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [60]),
        .Q(\M01_AXI_0_arregion[3] [60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [6]),
        .Q(\M01_AXI_0_arregion[3] [6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [7]),
        .Q(\M01_AXI_0_arregion[3] [7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [8]),
        .Q(\M01_AXI_0_arregion[3] [8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S_AXI_AREGION_Q_reg[3] [9]),
        .Q(\M01_AXI_0_arregion[3] [9]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_1__0
       (.I0(s_axi_arvalid),
        .I1(s_axi_arready),
        .I2(m_axi_arready),
        .O(m_valid_i_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1__0_n_0),
        .Q(m_axi_arvalid),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_1__3
       (.I0(s_axi_arvalid),
        .I1(m_axi_arvalid),
        .I2(m_axi_arready),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(s_ready_i_i_1__3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__3_n_0),
        .Q(s_axi_arready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice_13
   (m_axi_awvalid,
    s_axi_awready,
    p_1_in,
    \aresetn_d_reg[1] ,
    Q,
    \aresetn_d_reg[1]_0 ,
    aclk,
    aresetn,
    s_axi_awvalid,
    m_axi_awready,
    \aresetn_d_reg[1]_1 ,
    D);
  output m_axi_awvalid;
  output s_axi_awready;
  output p_1_in;
  output \aresetn_d_reg[1] ;
  output [60:0]Q;
  input \aresetn_d_reg[1]_0 ;
  input aclk;
  input aresetn;
  input s_axi_awvalid;
  input m_axi_awready;
  input \aresetn_d_reg[1]_1 ;
  input [60:0]D;

  wire \<const0> ;
  wire \<const1> ;
  wire [60:0]D;
  wire [60:0]Q;
  wire aclk;
  wire aresetn;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire \aresetn_d_reg[1]_1 ;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire \m_payload_i[31]_i_1_n_0 ;
  wire m_valid_i_i_1_n_0;
  wire [1:1]p_0_in;
  wire p_1_in;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_ready_i_i_2_n_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT2 #(
    .INIT(4'h8)) 
    \aresetn_d[1]_i_1 
       (.I0(p_0_in),
        .I1(aresetn),
        .O(\aresetn_d_reg[1] ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(aresetn),
        .Q(p_0_in),
        .R(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \m_payload_i[31]_i_1 
       (.I0(m_axi_awvalid),
        .O(\m_payload_i[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[0]),
        .Q(Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[10]),
        .Q(Q[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[11]),
        .Q(Q[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[12]),
        .Q(Q[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[13]),
        .Q(Q[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[14]),
        .Q(Q[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[15]),
        .Q(Q[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[16]),
        .Q(Q[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[17]),
        .Q(Q[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[18]),
        .Q(Q[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[19]),
        .Q(Q[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[1]),
        .Q(Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[20]),
        .Q(Q[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[21]),
        .Q(Q[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[22]),
        .Q(Q[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[23]),
        .Q(Q[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[24]),
        .Q(Q[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[25]),
        .Q(Q[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[26]),
        .Q(Q[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[27]),
        .Q(Q[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[28]),
        .Q(Q[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[29]),
        .Q(Q[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[2]),
        .Q(Q[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[30]),
        .Q(Q[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[31]),
        .Q(Q[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[32]),
        .Q(Q[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[33]),
        .Q(Q[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[34]),
        .Q(Q[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[35]),
        .Q(Q[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[36]),
        .Q(Q[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[37]),
        .Q(Q[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[38]),
        .Q(Q[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[39]),
        .Q(Q[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[3]),
        .Q(Q[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[40]),
        .Q(Q[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[41]),
        .Q(Q[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[42]),
        .Q(Q[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[43]),
        .Q(Q[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[44]),
        .Q(Q[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[45]),
        .Q(Q[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[46]),
        .Q(Q[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[47]),
        .Q(Q[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[48]),
        .Q(Q[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[49]),
        .Q(Q[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[4]),
        .Q(Q[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[50]),
        .Q(Q[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[51]),
        .Q(Q[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[52]),
        .Q(Q[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[53]),
        .Q(Q[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[54]),
        .Q(Q[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[55]),
        .Q(Q[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[56]),
        .Q(Q[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[57]),
        .Q(Q[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[58]),
        .Q(Q[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[5]),
        .Q(Q[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[59]),
        .Q(Q[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[60]),
        .Q(Q[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[6]),
        .Q(Q[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[7]),
        .Q(Q[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[8]),
        .Q(Q[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[9]),
        .Q(Q[9]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_1
       (.I0(s_axi_awvalid),
        .I1(s_axi_awready),
        .I2(m_axi_awready),
        .O(m_valid_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1_n_0),
        .Q(m_axi_awvalid),
        .R(\aresetn_d_reg[1]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    s_ready_i_i_1__1
       (.I0(p_0_in),
        .O(p_1_in));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_2
       (.I0(s_axi_awvalid),
        .I1(m_axi_awvalid),
        .I2(m_axi_awready),
        .I3(\aresetn_d_reg[1]_1 ),
        .O(s_ready_i_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_2_n_0),
        .Q(s_axi_awready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice_2
   (s_ready_i_reg_0,
    sr_arvalid,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ,
    m_axi_arburst,
    m_axi_araddr,
    s_axi_arready,
    UNCONN_OUT,
    m_axi_arsize,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    \aresetn_d_reg[0] ,
    clk,
    cmd_push_block_reg,
    s_axi_arvalid,
    \m_payload_i_reg[61]_0 );
  output s_ready_i_reg_0;
  output sr_arvalid;
  output [27:0]\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ;
  output [1:0]m_axi_arburst;
  output [31:0]m_axi_araddr;
  output s_axi_arready;
  output [15:0]UNCONN_OUT;
  output [2:0]m_axi_arsize;
  input \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  input \aresetn_d_reg[0] ;
  input clk;
  input cmd_push_block_reg;
  input s_axi_arvalid;
  input [60:0]\m_payload_i_reg[61]_0 ;

  wire \<const0> ;
  wire \<const1> ;
  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire [15:0]UNCONN_OUT;
  wire [27:0]\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] ;
  wire \USE_READ.read_addr_inst/access_need_extra_word__3 ;
  wire [1:1]\USE_READ.read_addr_inst/cmd_mask_i__5 ;
  wire [2:0]\USE_READ.read_addr_inst/mi_word_intra_len ;
  wire \USE_READ.read_addr_inst/p_5_in ;
  wire \USE_READ.read_addr_inst/upsized_length1__0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2__0_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][19]_srl32_i_2__0_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][22]_srl32_i_2__0_n_0 ;
  wire \aresetn_d_reg[0] ;
  wire clk;
  wire cmd_push_block_reg;
  wire [31:0]m_axi_araddr;
  wire \m_axi_araddr[2]_INST_0_i_2_n_0 ;
  wire \m_axi_araddr[2]_INST_0_i_5_n_0 ;
  wire \m_axi_araddr[2]_INST_0_i_6_n_0 ;
  wire \m_axi_araddr[2]_INST_0_i_7_n_0 ;
  wire \m_axi_araddr[2]_INST_0_i_8_n_0 ;
  wire [1:0]m_axi_arburst;
  wire \m_axi_arlen[0]_INST_0_i_10_n_0 ;
  wire \m_axi_arlen[0]_INST_0_i_12_n_0 ;
  wire \m_axi_arlen[0]_INST_0_i_13_n_0 ;
  wire \m_axi_arlen[0]_INST_0_i_14_n_0 ;
  wire \m_axi_arlen[0]_INST_0_i_1_n_0 ;
  wire \m_axi_arlen[0]_INST_0_i_5_n_0 ;
  wire \m_axi_arlen[0]_INST_0_i_6_n_0 ;
  wire \m_axi_arlen[0]_INST_0_i_7_n_0 ;
  wire \m_axi_arlen[0]_INST_0_i_8_n_0 ;
  wire \m_axi_arlen[5]_INST_0_i_1_n_0 ;
  wire \m_axi_arlen[5]_INST_0_i_2_n_0 ;
  wire \m_axi_arlen[6]_INST_0_i_1_n_0 ;
  wire \m_axi_arlen[6]_INST_0_i_2_n_0 ;
  wire \m_axi_arlen[6]_INST_0_i_3_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_10_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_11_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_12_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_13_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_14_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_15_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_16_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_17_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_18_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_19_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_1_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_2_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_3_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_4_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_5_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_6_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_7_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_8_n_0 ;
  wire \m_axi_arlen[7]_INST_0_i_9_n_0 ;
  wire [2:0]m_axi_arsize;
  wire \m_payload_i[31]_i_1__0_n_0 ;
  wire [60:0]\m_payload_i_reg[61]_0 ;
  wire m_valid_i_i_1_n_0;
  wire [7:0]s_axi_arlen_ii;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_ready_i_i_1_n_0;
  wire s_ready_i_reg_0;
  wire [2:0]sr_araddr;
  wire [1:0]sr_arburst;
  wire [2:0]sr_arsize;
  wire sr_arvalid;

  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair721" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_RTL_FIFO.data_srl_reg[31][10]_srl32_i_1 
       (.I0(sr_arsize[1]),
        .I1(sr_arsize[2]),
        .I2(sr_arsize[0]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [10]));
  (* SOFT_HLUTNM = "soft_lutpair710" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \USE_RTL_FIFO.data_srl_reg[31][16]_srl32_i_1 
       (.I0(sr_araddr[2]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [13]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [14]));
  LUT6 #(
    .INIT(64'h10C010C010C0D000)) 
    \USE_RTL_FIFO.data_srl_reg[31][17]_srl32_i_1__0 
       (.I0(\USE_READ.read_addr_inst/p_5_in ),
        .I1(s_axi_arlen_ii[0]),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I3(sr_araddr[0]),
        .I4(sr_arburst[1]),
        .I5(sr_arburst[0]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [15]));
  (* SOFT_HLUTNM = "soft_lutpair715" *) 
  LUT4 #(
    .INIT(16'h9060)) 
    \USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_1__0 
       (.I0(\m_axi_arlen[0]_INST_0_i_6_n_0 ),
        .I1(sr_araddr[1]),
        .I2(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2__0_n_0 ),
        .I3(\m_axi_arlen[0]_INST_0_i_7_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [16]));
  LUT6 #(
    .INIT(64'h00000000FFFFFBFF)) 
    \USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2__0 
       (.I0(sr_arburst[0]),
        .I1(sr_arburst[1]),
        .I2(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I3(\m_axi_araddr[2]_INST_0_i_6_n_0 ),
        .I4(\USE_READ.read_addr_inst/cmd_mask_i__5 ),
        .I5(\m_axi_arlen[0]_INST_0_i_14_n_0 ),
        .O(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hA1A1A151525252A2)) 
    \USE_RTL_FIFO.data_srl_reg[31][19]_srl32_i_1 
       (.I0(sr_araddr[2]),
        .I1(\USE_READ.read_addr_inst/p_5_in ),
        .I2(\m_axi_araddr[2]_INST_0_i_8_n_0 ),
        .I3(sr_arburst[0]),
        .I4(sr_arburst[1]),
        .I5(\USE_RTL_FIFO.data_srl_reg[31][19]_srl32_i_2__0_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [17]));
  (* SOFT_HLUTNM = "soft_lutpair715" *) 
  LUT4 #(
    .INIT(16'h088F)) 
    \USE_RTL_FIFO.data_srl_reg[31][19]_srl32_i_2__0 
       (.I0(sr_araddr[1]),
        .I1(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2__0_n_0 ),
        .I2(\m_axi_arlen[0]_INST_0_i_7_n_0 ),
        .I3(\m_axi_arlen[0]_INST_0_i_6_n_0 ),
        .O(\USE_RTL_FIFO.data_srl_reg[31][19]_srl32_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000500000001)) 
    \USE_RTL_FIFO.data_srl_reg[31][20]_srl32_i_1 
       (.I0(sr_araddr[0]),
        .I1(\USE_READ.read_addr_inst/p_5_in ),
        .I2(sr_arsize[0]),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(s_axi_arlen_ii[0]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [18]));
  LUT6 #(
    .INIT(64'h8882888288828888)) 
    \USE_RTL_FIFO.data_srl_reg[31][21]_srl32_i_1__0 
       (.I0(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2__0_n_0 ),
        .I1(sr_araddr[1]),
        .I2(sr_arsize[2]),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[0]),
        .I5(sr_araddr[0]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [19]));
  LUT6 #(
    .INIT(64'h10EFEF1000000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][22]_srl32_i_1__0 
       (.I0(sr_arsize[0]),
        .I1(sr_arsize[2]),
        .I2(sr_arsize[1]),
        .I3(\USE_RTL_FIFO.data_srl_reg[31][22]_srl32_i_2__0_n_0 ),
        .I4(sr_araddr[2]),
        .I5(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [13]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [20]));
  (* SOFT_HLUTNM = "soft_lutpair712" *) 
  LUT5 #(
    .INIT(32'h02020200)) 
    \USE_RTL_FIFO.data_srl_reg[31][22]_srl32_i_2__0 
       (.I0(sr_araddr[1]),
        .I1(sr_arsize[2]),
        .I2(sr_arsize[1]),
        .I3(sr_arsize[0]),
        .I4(sr_araddr[0]),
        .O(\USE_RTL_FIFO.data_srl_reg[31][22]_srl32_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFEF000000000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][23]_srl32_i_1__0 
       (.I0(\m_axi_araddr[2]_INST_0_i_7_n_0 ),
        .I1(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I2(\m_axi_araddr[2]_INST_0_i_6_n_0 ),
        .I3(s_axi_arlen_ii[0]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I5(sr_araddr[0]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [21]));
  LUT2 #(
    .INIT(4'h8)) 
    \USE_RTL_FIFO.data_srl_reg[31][24]_srl32_i_1__0 
       (.I0(sr_araddr[1]),
        .I1(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2__0_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [22]));
  LUT6 #(
    .INIT(64'hFFFFFBFF00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][25]_srl32_i_1__0 
       (.I0(sr_arburst[0]),
        .I1(sr_arburst[1]),
        .I2(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I3(\m_axi_araddr[2]_INST_0_i_6_n_0 ),
        .I4(\m_axi_araddr[2]_INST_0_i_8_n_0 ),
        .I5(sr_araddr[2]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [23]));
  (* SOFT_HLUTNM = "soft_lutpair708" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \USE_RTL_FIFO.data_srl_reg[31][26]_srl32_i_1 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]),
        .I1(\m_axi_araddr[2]_INST_0_i_2_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [24]));
  (* SOFT_HLUTNM = "soft_lutpair707" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \USE_RTL_FIFO.data_srl_reg[31][27]_srl32_i_1__0 
       (.I0(\USE_READ.read_addr_inst/p_5_in ),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [25]));
  (* SOFT_HLUTNM = "soft_lutpair711" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \USE_RTL_FIFO.data_srl_reg[31][29]_srl32_i_1__0 
       (.I0(sr_arburst[1]),
        .I1(sr_arburst[0]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [27]));
  (* SOFT_HLUTNM = "soft_lutpair717" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_RTL_FIFO.data_srl_reg[31][9]_srl32_i_1__0 
       (.I0(sr_arsize[0]),
        .I1(sr_arsize[1]),
        .I2(sr_arsize[2]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [9]));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[1] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\aresetn_d_reg[0] ),
        .Q(s_ready_i_reg_0),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  (* SOFT_HLUTNM = "soft_lutpair707" *) 
  LUT5 #(
    .INIT(32'h4FFF0000)) 
    \m_axi_araddr[0]_INST_0 
       (.I0(\USE_READ.read_addr_inst/p_5_in ),
        .I1(\m_axi_araddr[2]_INST_0_i_2_n_0 ),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [11]),
        .I4(sr_araddr[0]),
        .O(m_axi_araddr[0]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF8FFFFF)) 
    \m_axi_araddr[0]_INST_0_i_1 
       (.I0(s_axi_arlen_ii[0]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I2(\m_axi_araddr[2]_INST_0_i_6_n_0 ),
        .I3(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I4(sr_arburst[1]),
        .I5(sr_arburst[0]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [11]));
  (* SOFT_HLUTNM = "soft_lutpair708" *) 
  LUT5 #(
    .INIT(32'h4FFF0000)) 
    \m_axi_araddr[1]_INST_0 
       (.I0(\USE_READ.read_addr_inst/p_5_in ),
        .I1(\m_axi_araddr[2]_INST_0_i_2_n_0 ),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [12]),
        .I4(sr_araddr[1]),
        .O(m_axi_araddr[1]));
  (* SOFT_HLUTNM = "soft_lutpair714" *) 
  LUT5 #(
    .INIT(32'hFFFFFBFF)) 
    \m_axi_araddr[1]_INST_0_i_1 
       (.I0(\USE_READ.read_addr_inst/cmd_mask_i__5 ),
        .I1(\m_axi_araddr[2]_INST_0_i_6_n_0 ),
        .I2(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I3(sr_arburst[1]),
        .I4(sr_arburst[0]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [12]));
  (* SOFT_HLUTNM = "soft_lutpair713" *) 
  LUT5 #(
    .INIT(32'h03020002)) 
    \m_axi_araddr[1]_INST_0_i_2 
       (.I0(s_axi_arlen_ii[1]),
        .I1(sr_arsize[2]),
        .I2(sr_arsize[1]),
        .I3(sr_arsize[0]),
        .I4(s_axi_arlen_ii[0]),
        .O(\USE_READ.read_addr_inst/cmd_mask_i__5 ));
  (* SOFT_HLUTNM = "soft_lutpair710" *) 
  LUT5 #(
    .INIT(32'h4FFF0000)) 
    \m_axi_araddr[2]_INST_0 
       (.I0(\USE_READ.read_addr_inst/p_5_in ),
        .I1(\m_axi_araddr[2]_INST_0_i_2_n_0 ),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [13]),
        .I4(sr_araddr[2]),
        .O(m_axi_araddr[2]));
  (* SOFT_HLUTNM = "soft_lutpair709" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    \m_axi_araddr[2]_INST_0_i_1 
       (.I0(sr_arburst[0]),
        .I1(sr_arburst[1]),
        .I2(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I3(\m_axi_araddr[2]_INST_0_i_6_n_0 ),
        .O(\USE_READ.read_addr_inst/p_5_in ));
  LUT6 #(
    .INIT(64'hAEAEAEAEAEAEAEFF)) 
    \m_axi_araddr[2]_INST_0_i_2 
       (.I0(\m_axi_araddr[2]_INST_0_i_7_n_0 ),
        .I1(\m_axi_araddr[2]_INST_0_i_6_n_0 ),
        .I2(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I3(sr_araddr[2]),
        .I4(sr_araddr[1]),
        .I5(sr_araddr[0]),
        .O(\m_axi_araddr[2]_INST_0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0F000F000F000E00)) 
    \m_axi_araddr[2]_INST_0_i_3 
       (.I0(s_axi_arlen_ii[2]),
        .I1(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [27]),
        .I3(UNCONN_OUT[4]),
        .I4(s_axi_arlen_ii[0]),
        .I5(s_axi_arlen_ii[1]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]));
  (* SOFT_HLUTNM = "soft_lutpair709" *) 
  LUT5 #(
    .INIT(32'hFFFFFBFF)) 
    \m_axi_araddr[2]_INST_0_i_4 
       (.I0(\m_axi_araddr[2]_INST_0_i_8_n_0 ),
        .I1(\m_axi_araddr[2]_INST_0_i_6_n_0 ),
        .I2(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I3(sr_arburst[1]),
        .I4(sr_arburst[0]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [13]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \m_axi_araddr[2]_INST_0_i_5 
       (.I0(s_axi_arlen_ii[6]),
        .I1(s_axi_arlen_ii[4]),
        .I2(s_axi_arlen_ii[3]),
        .I3(s_axi_arlen_ii[7]),
        .I4(s_axi_arlen_ii[5]),
        .O(\m_axi_araddr[2]_INST_0_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0101010F010501FF)) 
    \m_axi_araddr[2]_INST_0_i_6 
       (.I0(s_axi_arlen_ii[1]),
        .I1(s_axi_arlen_ii[0]),
        .I2(s_axi_arlen_ii[2]),
        .I3(sr_arsize[2]),
        .I4(sr_arsize[1]),
        .I5(sr_arsize[0]),
        .O(\m_axi_araddr[2]_INST_0_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair714" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_araddr[2]_INST_0_i_7 
       (.I0(sr_arburst[0]),
        .I1(sr_arburst[1]),
        .O(\m_axi_araddr[2]_INST_0_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h000F00CA000000CA)) 
    \m_axi_araddr[2]_INST_0_i_8 
       (.I0(s_axi_arlen_ii[2]),
        .I1(s_axi_arlen_ii[0]),
        .I2(sr_arsize[1]),
        .I3(sr_arsize[2]),
        .I4(sr_arsize[0]),
        .I5(s_axi_arlen_ii[1]),
        .O(\m_axi_araddr[2]_INST_0_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair718" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \m_axi_arburst[0]_INST_0 
       (.I0(\USE_READ.read_addr_inst/p_5_in ),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]),
        .I2(sr_arburst[0]),
        .O(m_axi_arburst[0]));
  (* SOFT_HLUTNM = "soft_lutpair720" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \m_axi_arburst[1]_INST_0 
       (.I0(\USE_READ.read_addr_inst/p_5_in ),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]),
        .I2(sr_arburst[1]),
        .O(m_axi_arburst[1]));
  LUT6 #(
    .INIT(64'h11110555EEEEFAAA)) 
    \m_axi_arlen[0]_INST_0 
       (.I0(\m_axi_arlen[0]_INST_0_i_1_n_0 ),
        .I1(s_axi_arlen_ii[0]),
        .I2(s_axi_arlen_ii[3]),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I4(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I5(\USE_READ.read_addr_inst/access_need_extra_word__3 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [0]));
  LUT6 #(
    .INIT(64'h0000000A00000C00)) 
    \m_axi_arlen[0]_INST_0_i_1 
       (.I0(s_axi_arlen_ii[2]),
        .I1(s_axi_arlen_ii[1]),
        .I2(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(sr_arsize[0]),
        .O(\m_axi_arlen[0]_INST_0_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair711" *) 
  LUT5 #(
    .INIT(32'hE0E0E000)) 
    \m_axi_arlen[0]_INST_0_i_10 
       (.I0(s_axi_arlen_ii[1]),
        .I1(s_axi_arlen_ii[0]),
        .I2(UNCONN_OUT[4]),
        .I3(sr_arburst[0]),
        .I4(sr_arburst[1]),
        .O(\m_axi_arlen[0]_INST_0_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000E0)) 
    \m_axi_arlen[0]_INST_0_i_11 
       (.I0(sr_arburst[1]),
        .I1(sr_arburst[0]),
        .I2(s_axi_arlen_ii[0]),
        .I3(sr_arsize[0]),
        .I4(sr_arsize[1]),
        .I5(sr_arsize[2]),
        .O(\USE_READ.read_addr_inst/mi_word_intra_len [0]));
  (* SOFT_HLUTNM = "soft_lutpair712" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    \m_axi_arlen[0]_INST_0_i_12 
       (.I0(sr_araddr[0]),
        .I1(sr_arsize[0]),
        .I2(sr_arsize[1]),
        .I3(sr_arsize[2]),
        .O(\m_axi_arlen[0]_INST_0_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair713" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    \m_axi_arlen[0]_INST_0_i_13 
       (.I0(sr_arsize[0]),
        .I1(sr_arsize[1]),
        .I2(sr_arsize[2]),
        .I3(s_axi_arlen_ii[0]),
        .O(\m_axi_arlen[0]_INST_0_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair721" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \m_axi_arlen[0]_INST_0_i_14 
       (.I0(sr_arsize[1]),
        .I1(sr_arsize[2]),
        .O(\m_axi_arlen[0]_INST_0_i_14_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair716" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \m_axi_arlen[0]_INST_0_i_2 
       (.I0(sr_arsize[2]),
        .I1(sr_arsize[1]),
        .I2(sr_arsize[0]),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]));
  LUT6 #(
    .INIT(64'hFF0FFF0FFF0FFF1F)) 
    \m_axi_arlen[0]_INST_0_i_3 
       (.I0(s_axi_arlen_ii[1]),
        .I1(s_axi_arlen_ii[0]),
        .I2(UNCONN_OUT[4]),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [27]),
        .I4(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I5(s_axi_arlen_ii[2]),
        .O(\USE_READ.read_addr_inst/upsized_length1__0 ));
  LUT6 #(
    .INIT(64'hAAAA022A022A0000)) 
    \m_axi_arlen[0]_INST_0_i_4 
       (.I0(\m_axi_arlen[0]_INST_0_i_5_n_0 ),
        .I1(\m_axi_arlen[0]_INST_0_i_6_n_0 ),
        .I2(\m_axi_arlen[0]_INST_0_i_7_n_0 ),
        .I3(\m_axi_arlen[0]_INST_0_i_8_n_0 ),
        .I4(\USE_READ.read_addr_inst/mi_word_intra_len [2]),
        .I5(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [23]),
        .O(\USE_READ.read_addr_inst/access_need_extra_word__3 ));
  LUT6 #(
    .INIT(64'h00000000FEAA0000)) 
    \m_axi_arlen[0]_INST_0_i_5 
       (.I0(\m_axi_arlen[0]_INST_0_i_10_n_0 ),
        .I1(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I2(s_axi_arlen_ii[2]),
        .I3(UNCONN_OUT[4]),
        .I4(sr_arburst[0]),
        .I5(sr_arburst[1]),
        .O(\m_axi_arlen[0]_INST_0_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFBAFFFFFFBF)) 
    \m_axi_arlen[0]_INST_0_i_6 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [27]),
        .I1(s_axi_arlen_ii[0]),
        .I2(sr_arsize[0]),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(s_axi_arlen_ii[1]),
        .O(\m_axi_arlen[0]_INST_0_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hDDDDDDDDDDDDDFDD)) 
    \m_axi_arlen[0]_INST_0_i_7 
       (.I0(\USE_READ.read_addr_inst/mi_word_intra_len [0]),
        .I1(\m_axi_arlen[0]_INST_0_i_12_n_0 ),
        .I2(\m_axi_arlen[0]_INST_0_i_13_n_0 ),
        .I3(\m_axi_araddr[2]_INST_0_i_6_n_0 ),
        .I4(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I5(\m_axi_araddr[2]_INST_0_i_7_n_0 ),
        .O(\m_axi_arlen[0]_INST_0_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAABAFFFFFFFF)) 
    \m_axi_arlen[0]_INST_0_i_8 
       (.I0(\m_axi_arlen[0]_INST_0_i_14_n_0 ),
        .I1(\USE_READ.read_addr_inst/cmd_mask_i__5 ),
        .I2(\m_axi_araddr[2]_INST_0_i_6_n_0 ),
        .I3(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I4(\m_axi_araddr[2]_INST_0_i_7_n_0 ),
        .I5(sr_araddr[1]),
        .O(\m_axi_arlen[0]_INST_0_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair718" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \m_axi_arlen[0]_INST_0_i_9 
       (.I0(\m_axi_araddr[2]_INST_0_i_8_n_0 ),
        .I1(sr_arburst[0]),
        .I2(sr_arburst[1]),
        .O(\USE_READ.read_addr_inst/mi_word_intra_len [2]));
  (* SOFT_HLUTNM = "soft_lutpair719" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \m_axi_arlen[1]_INST_0 
       (.I0(\m_axi_arlen[5]_INST_0_i_1_n_0 ),
        .I1(\m_axi_arlen[5]_INST_0_i_2_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [1]));
  (* SOFT_HLUTNM = "soft_lutpair719" *) 
  LUT3 #(
    .INIT(8'hD2)) 
    \m_axi_arlen[2]_INST_0 
       (.I0(\m_axi_arlen[5]_INST_0_i_2_n_0 ),
        .I1(\m_axi_arlen[5]_INST_0_i_1_n_0 ),
        .I2(\m_axi_arlen[6]_INST_0_i_2_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [2]));
  (* SOFT_HLUTNM = "soft_lutpair706" *) 
  LUT4 #(
    .INIT(16'hDF20)) 
    \m_axi_arlen[3]_INST_0 
       (.I0(\m_axi_arlen[6]_INST_0_i_2_n_0 ),
        .I1(\m_axi_arlen[5]_INST_0_i_1_n_0 ),
        .I2(\m_axi_arlen[5]_INST_0_i_2_n_0 ),
        .I3(\m_axi_arlen[7]_INST_0_i_2_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [3]));
  (* SOFT_HLUTNM = "soft_lutpair706" *) 
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \m_axi_arlen[4]_INST_0 
       (.I0(\m_axi_arlen[5]_INST_0_i_2_n_0 ),
        .I1(\m_axi_arlen[5]_INST_0_i_1_n_0 ),
        .I2(\m_axi_arlen[6]_INST_0_i_2_n_0 ),
        .I3(\m_axi_arlen[7]_INST_0_i_2_n_0 ),
        .I4(\m_axi_arlen[7]_INST_0_i_4_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [4]));
  LUT6 #(
    .INIT(64'hF7FFFFFF08000000)) 
    \m_axi_arlen[5]_INST_0 
       (.I0(\m_axi_arlen[7]_INST_0_i_2_n_0 ),
        .I1(\m_axi_arlen[6]_INST_0_i_2_n_0 ),
        .I2(\m_axi_arlen[5]_INST_0_i_1_n_0 ),
        .I3(\m_axi_arlen[5]_INST_0_i_2_n_0 ),
        .I4(\m_axi_arlen[7]_INST_0_i_4_n_0 ),
        .I5(\m_axi_arlen[7]_INST_0_i_5_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [5]));
  LUT6 #(
    .INIT(64'h5757575755777777)) 
    \m_axi_arlen[5]_INST_0_i_1 
       (.I0(\USE_READ.read_addr_inst/access_need_extra_word__3 ),
        .I1(\m_axi_arlen[0]_INST_0_i_1_n_0 ),
        .I2(s_axi_arlen_ii[0]),
        .I3(s_axi_arlen_ii[3]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I5(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .O(\m_axi_arlen[5]_INST_0_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFEA40)) 
    \m_axi_arlen[5]_INST_0_i_2 
       (.I0(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I2(s_axi_arlen_ii[4]),
        .I3(s_axi_arlen_ii[1]),
        .I4(\m_axi_arlen[7]_INST_0_i_9_n_0 ),
        .O(\m_axi_arlen[5]_INST_0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFFFFF08000000)) 
    \m_axi_arlen[6]_INST_0 
       (.I0(\m_axi_arlen[7]_INST_0_i_5_n_0 ),
        .I1(\m_axi_arlen[7]_INST_0_i_4_n_0 ),
        .I2(\m_axi_arlen[6]_INST_0_i_1_n_0 ),
        .I3(\m_axi_arlen[6]_INST_0_i_2_n_0 ),
        .I4(\m_axi_arlen[7]_INST_0_i_2_n_0 ),
        .I5(\m_axi_arlen[7]_INST_0_i_1_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [6]));
  LUT5 #(
    .INIT(32'h1F1F1FFF)) 
    \m_axi_arlen[6]_INST_0_i_1 
       (.I0(\m_axi_arlen[6]_INST_0_i_3_n_0 ),
        .I1(\m_axi_arlen[0]_INST_0_i_1_n_0 ),
        .I2(\USE_READ.read_addr_inst/access_need_extra_word__3 ),
        .I3(\m_axi_arlen[7]_INST_0_i_9_n_0 ),
        .I4(\m_axi_arlen[7]_INST_0_i_8_n_0 ),
        .O(\m_axi_arlen[6]_INST_0_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFEA40)) 
    \m_axi_arlen[6]_INST_0_i_2 
       (.I0(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I2(s_axi_arlen_ii[5]),
        .I3(s_axi_arlen_ii[2]),
        .I4(\m_axi_arlen[7]_INST_0_i_11_n_0 ),
        .O(\m_axi_arlen[6]_INST_0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA0000000C)) 
    \m_axi_arlen[6]_INST_0_i_3 
       (.I0(s_axi_arlen_ii[0]),
        .I1(s_axi_arlen_ii[3]),
        .I2(sr_arsize[0]),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .O(\m_axi_arlen[6]_INST_0_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h08000000F7FFFFFF)) 
    \m_axi_arlen[7]_INST_0 
       (.I0(\m_axi_arlen[7]_INST_0_i_1_n_0 ),
        .I1(\m_axi_arlen[7]_INST_0_i_2_n_0 ),
        .I2(\m_axi_arlen[7]_INST_0_i_3_n_0 ),
        .I3(\m_axi_arlen[7]_INST_0_i_4_n_0 ),
        .I4(\m_axi_arlen[7]_INST_0_i_5_n_0 ),
        .I5(\m_axi_arlen[7]_INST_0_i_6_n_0 ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [7]));
  LUT6 #(
    .INIT(64'hA0A0A0A0A0A0ACA0)) 
    \m_axi_arlen[7]_INST_0_i_1 
       (.I0(s_axi_arlen_ii[6]),
        .I1(s_axi_arlen_ii[7]),
        .I2(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(sr_arsize[0]),
        .O(\m_axi_arlen[7]_INST_0_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFF8F8F8)) 
    \m_axi_arlen[7]_INST_0_i_10 
       (.I0(\m_axi_arlen[7]_INST_0_i_16_n_0 ),
        .I1(s_axi_arlen_ii[3]),
        .I2(\m_axi_arlen[7]_INST_0_i_17_n_0 ),
        .I3(\m_axi_arlen[7]_INST_0_i_18_n_0 ),
        .I4(s_axi_arlen_ii[1]),
        .I5(\m_axi_arlen[7]_INST_0_i_19_n_0 ),
        .O(\m_axi_arlen[7]_INST_0_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h0000000A00000C00)) 
    \m_axi_arlen[7]_INST_0_i_11 
       (.I0(s_axi_arlen_ii[4]),
        .I1(s_axi_arlen_ii[3]),
        .I2(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(sr_arsize[0]),
        .O(\m_axi_arlen[7]_INST_0_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA0000000C)) 
    \m_axi_arlen[7]_INST_0_i_12 
       (.I0(s_axi_arlen_ii[2]),
        .I1(s_axi_arlen_ii[5]),
        .I2(sr_arsize[0]),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .O(\m_axi_arlen[7]_INST_0_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h0000000A00000C00)) 
    \m_axi_arlen[7]_INST_0_i_13 
       (.I0(s_axi_arlen_ii[6]),
        .I1(s_axi_arlen_ii[5]),
        .I2(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(sr_arsize[0]),
        .O(\m_axi_arlen[7]_INST_0_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair716" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \m_axi_arlen[7]_INST_0_i_14 
       (.I0(sr_arsize[0]),
        .I1(sr_arsize[2]),
        .I2(sr_arsize[1]),
        .O(\m_axi_arlen[7]_INST_0_i_14_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair717" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \m_axi_arlen[7]_INST_0_i_15 
       (.I0(sr_arsize[2]),
        .I1(sr_arsize[1]),
        .I2(sr_arsize[0]),
        .O(\m_axi_arlen[7]_INST_0_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h2222222220202000)) 
    \m_axi_arlen[7]_INST_0_i_16 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [27]),
        .I2(UNCONN_OUT[4]),
        .I3(s_axi_arlen_ii[2]),
        .I4(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I5(\m_axi_arlen[0]_INST_0_i_10_n_0 ),
        .O(\m_axi_arlen[7]_INST_0_i_16_n_0 ));
  LUT3 #(
    .INIT(8'hB0)) 
    \m_axi_arlen[7]_INST_0_i_17 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [27]),
        .I1(UNCONN_OUT[4]),
        .I2(s_axi_arlen_ii[0]),
        .O(\m_axi_arlen[7]_INST_0_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h0000000055554440)) 
    \m_axi_arlen[7]_INST_0_i_18 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [27]),
        .I1(UNCONN_OUT[4]),
        .I2(s_axi_arlen_ii[2]),
        .I3(\m_axi_araddr[2]_INST_0_i_5_n_0 ),
        .I4(\m_axi_arlen[0]_INST_0_i_10_n_0 ),
        .I5(\m_axi_arlen[7]_INST_0_i_14_n_0 ),
        .O(\m_axi_arlen[7]_INST_0_i_18_n_0 ));
  LUT5 #(
    .INIT(32'h00540000)) 
    \m_axi_arlen[7]_INST_0_i_19 
       (.I0(\m_axi_arlen[7]_INST_0_i_15_n_0 ),
        .I1(\m_axi_arlen[0]_INST_0_i_10_n_0 ),
        .I2(UNCONN_OUT[4]),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [27]),
        .I4(s_axi_arlen_ii[2]),
        .O(\m_axi_arlen[7]_INST_0_i_19_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFEA40)) 
    \m_axi_arlen[7]_INST_0_i_2 
       (.I0(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I2(s_axi_arlen_ii[6]),
        .I3(s_axi_arlen_ii[3]),
        .I4(\m_axi_arlen[7]_INST_0_i_7_n_0 ),
        .O(\m_axi_arlen[7]_INST_0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h1FFF1FFF1FFFFFFF)) 
    \m_axi_arlen[7]_INST_0_i_3 
       (.I0(\m_axi_arlen[7]_INST_0_i_8_n_0 ),
        .I1(\m_axi_arlen[7]_INST_0_i_9_n_0 ),
        .I2(\USE_READ.read_addr_inst/access_need_extra_word__3 ),
        .I3(\m_axi_arlen[7]_INST_0_i_10_n_0 ),
        .I4(\m_axi_arlen[7]_INST_0_i_11_n_0 ),
        .I5(\m_axi_arlen[7]_INST_0_i_12_n_0 ),
        .O(\m_axi_arlen[7]_INST_0_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair705" *) 
  LUT5 #(
    .INIT(32'hFFFFEA40)) 
    \m_axi_arlen[7]_INST_0_i_4 
       (.I0(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [8]),
        .I2(s_axi_arlen_ii[7]),
        .I3(s_axi_arlen_ii[4]),
        .I4(\m_axi_arlen[7]_INST_0_i_13_n_0 ),
        .O(\m_axi_arlen[7]_INST_0_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF00004F444F44)) 
    \m_axi_arlen[7]_INST_0_i_5 
       (.I0(\m_axi_arlen[7]_INST_0_i_14_n_0 ),
        .I1(s_axi_arlen_ii[6]),
        .I2(\m_axi_arlen[7]_INST_0_i_15_n_0 ),
        .I3(s_axi_arlen_ii[7]),
        .I4(s_axi_arlen_ii[5]),
        .I5(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .O(\m_axi_arlen[7]_INST_0_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair705" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \m_axi_arlen[7]_INST_0_i_6 
       (.I0(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I1(s_axi_arlen_ii[7]),
        .O(\m_axi_arlen[7]_INST_0_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000A00000C00)) 
    \m_axi_arlen[7]_INST_0_i_7 
       (.I0(s_axi_arlen_ii[5]),
        .I1(s_axi_arlen_ii[4]),
        .I2(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(sr_arsize[0]),
        .O(\m_axi_arlen[7]_INST_0_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA0000000C)) 
    \m_axi_arlen[7]_INST_0_i_8 
       (.I0(s_axi_arlen_ii[1]),
        .I1(s_axi_arlen_ii[4]),
        .I2(sr_arsize[0]),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .O(\m_axi_arlen[7]_INST_0_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h0000000A00000C00)) 
    \m_axi_arlen[7]_INST_0_i_9 
       (.I0(s_axi_arlen_ii[3]),
        .I1(s_axi_arlen_ii[2]),
        .I2(\USE_READ.read_addr_inst/upsized_length1__0 ),
        .I3(sr_arsize[1]),
        .I4(sr_arsize[2]),
        .I5(sr_arsize[0]),
        .O(\m_axi_arlen[7]_INST_0_i_9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair722" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \m_axi_arsize[0]_INST_0 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]),
        .I1(sr_arsize[0]),
        .O(m_axi_arsize[0]));
  (* SOFT_HLUTNM = "soft_lutpair722" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \m_axi_arsize[1]_INST_0 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]),
        .I1(sr_arsize[1]),
        .O(m_axi_arsize[1]));
  (* SOFT_HLUTNM = "soft_lutpair720" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_axi_arsize[2]_INST_0 
       (.I0(sr_arsize[2]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] [26]),
        .O(m_axi_arsize[2]));
  LUT1 #(
    .INIT(2'h1)) 
    \m_payload_i[31]_i_1__0 
       (.I0(sr_arvalid),
        .O(\m_payload_i[31]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [0]),
        .Q(sr_araddr[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [10]),
        .Q(m_axi_araddr[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [11]),
        .Q(m_axi_araddr[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [12]),
        .Q(m_axi_araddr[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [13]),
        .Q(m_axi_araddr[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [14]),
        .Q(m_axi_araddr[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [15]),
        .Q(m_axi_araddr[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [16]),
        .Q(m_axi_araddr[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [17]),
        .Q(m_axi_araddr[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [18]),
        .Q(m_axi_araddr[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [19]),
        .Q(m_axi_araddr[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [1]),
        .Q(sr_araddr[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [20]),
        .Q(m_axi_araddr[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [21]),
        .Q(m_axi_araddr[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [22]),
        .Q(m_axi_araddr[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [23]),
        .Q(m_axi_araddr[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [24]),
        .Q(m_axi_araddr[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [25]),
        .Q(m_axi_araddr[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [26]),
        .Q(m_axi_araddr[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [27]),
        .Q(m_axi_araddr[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [28]),
        .Q(m_axi_araddr[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [29]),
        .Q(m_axi_araddr[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [2]),
        .Q(sr_araddr[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [30]),
        .Q(m_axi_araddr[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [31]),
        .Q(m_axi_araddr[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [32]),
        .Q(UNCONN_OUT[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [33]),
        .Q(UNCONN_OUT[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [34]),
        .Q(UNCONN_OUT[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [35]),
        .Q(sr_arsize[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [36]),
        .Q(sr_arsize[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [37]),
        .Q(sr_arsize[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [38]),
        .Q(sr_arburst[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [39]),
        .Q(sr_arburst[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [3]),
        .Q(m_axi_araddr[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [40]),
        .Q(UNCONN_OUT[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [41]),
        .Q(UNCONN_OUT[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [42]),
        .Q(UNCONN_OUT[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [43]),
        .Q(UNCONN_OUT[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [44]),
        .Q(s_axi_arlen_ii[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [45]),
        .Q(s_axi_arlen_ii[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [46]),
        .Q(s_axi_arlen_ii[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [47]),
        .Q(s_axi_arlen_ii[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [48]),
        .Q(s_axi_arlen_ii[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [49]),
        .Q(s_axi_arlen_ii[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [4]),
        .Q(m_axi_araddr[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [50]),
        .Q(s_axi_arlen_ii[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [51]),
        .Q(s_axi_arlen_ii[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [52]),
        .Q(UNCONN_OUT[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [53]),
        .Q(UNCONN_OUT[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [54]),
        .Q(UNCONN_OUT[9]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [55]),
        .Q(UNCONN_OUT[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [56]),
        .Q(UNCONN_OUT[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [57]),
        .Q(UNCONN_OUT[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [58]),
        .Q(UNCONN_OUT[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [5]),
        .Q(m_axi_araddr[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [59]),
        .Q(UNCONN_OUT[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [60]),
        .Q(UNCONN_OUT[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [6]),
        .Q(m_axi_araddr[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [7]),
        .Q(m_axi_araddr[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [8]),
        .Q(m_axi_araddr[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\m_payload_i_reg[61]_0 [9]),
        .Q(m_axi_araddr[9]),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hB100)) 
    m_valid_i_i_1
       (.I0(s_axi_arready),
        .I1(cmd_push_block_reg),
        .I2(s_axi_arvalid),
        .I3(s_ready_i_reg_0),
        .O(m_valid_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1_n_0),
        .Q(sr_arvalid),
        .R(\<const0> ));
  LUT5 #(
    .INIT(32'hDD5F0000)) 
    s_ready_i_i_1
       (.I0(s_ready_i_reg_0),
        .I1(cmd_push_block_reg),
        .I2(s_axi_arvalid),
        .I3(sr_arvalid),
        .I4(\aresetn_d_reg[0] ),
        .O(s_ready_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1_n_0),
        .Q(s_axi_arready),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice_3
   (\aresetn_d_reg[1] ,
    sr_awvalid,
    in,
    m_axi_awburst,
    m_axi_awaddr,
    s_axi_awready,
    Q,
    m_axi_awsize,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    clk,
    cmd_push_block_reg,
    s_axi_awvalid,
    \aresetn_d_reg[1]_0 ,
    D);
  output \aresetn_d_reg[1] ;
  output sr_awvalid;
  output [27:0]in;
  output [1:0]m_axi_awburst;
  output [31:0]m_axi_awaddr;
  output s_axi_awready;
  output [15:0]Q;
  output [2:0]m_axi_awsize;
  input \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  input clk;
  input cmd_push_block_reg;
  input s_axi_awvalid;
  input \aresetn_d_reg[1]_0 ;
  input [60:0]D;

  wire \<const0> ;
  wire \<const1> ;
  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire [60:0]D;
  wire [15:0]Q;
  wire \USE_RTL_FIFO.data_srl_reg[31][11]_srl32_i_2_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][19]_srl32_i_2_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][21]_srl32_i_2_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][22]_srl32_i_2_n_0 ;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire clk;
  wire cmd_push_block_reg;
  wire [27:0]in;
  wire [31:0]m_axi_awaddr;
  wire \m_axi_awaddr[1]_INST_0_i_1_n_0 ;
  wire \m_axi_awaddr[2]_INST_0_i_1_n_0 ;
  wire \m_axi_awaddr[2]_INST_0_i_3_n_0 ;
  wire \m_axi_awaddr[2]_INST_0_i_4_n_0 ;
  wire \m_axi_awaddr[2]_INST_0_i_5_n_0 ;
  wire \m_axi_awaddr[2]_INST_0_i_6_n_0 ;
  wire \m_axi_awaddr[3]_INST_0_i_1_n_0 ;
  wire \m_axi_awaddr[3]_INST_0_i_2_n_0 ;
  wire \m_axi_awaddr[4]_INST_0_i_1_n_0 ;
  wire \m_axi_awaddr[5]_INST_0_i_1_n_0 ;
  wire \m_axi_awaddr[5]_INST_0_i_3_n_0 ;
  wire \m_axi_awaddr[5]_INST_0_i_4_n_0 ;
  wire \m_axi_awaddr[5]_INST_0_i_5_n_0 ;
  wire \m_axi_awaddr[5]_INST_0_i_6_n_0 ;
  wire \m_axi_awaddr[5]_INST_0_i_7_n_0 ;
  wire [1:0]m_axi_awburst;
  wire \m_axi_awlen[0]_INST_0_i_1_n_0 ;
  wire \m_axi_awlen[0]_INST_0_i_2_n_0 ;
  wire \m_axi_awlen[0]_INST_0_i_3_n_0 ;
  wire \m_axi_awlen[0]_INST_0_i_4_n_0 ;
  wire \m_axi_awlen[0]_INST_0_i_5_n_0 ;
  wire \m_axi_awlen[0]_INST_0_i_6_n_0 ;
  wire \m_axi_awlen[0]_INST_0_i_7_n_0 ;
  wire \m_axi_awlen[2]_INST_0_i_1_n_0 ;
  wire \m_axi_awlen[2]_INST_0_i_2_n_0 ;
  wire \m_axi_awlen[2]_INST_0_i_3_n_0 ;
  wire \m_axi_awlen[4]_INST_0_i_1_n_0 ;
  wire \m_axi_awlen[5]_INST_0_i_1_n_0 ;
  wire \m_axi_awlen[6]_INST_0_i_1_n_0 ;
  wire \m_axi_awlen[6]_INST_0_i_2_n_0 ;
  wire \m_axi_awlen[6]_INST_0_i_3_n_0 ;
  wire \m_axi_awlen[6]_INST_0_i_4_n_0 ;
  wire \m_axi_awlen[7]_INST_0_i_2_n_0 ;
  wire \m_axi_awlen[7]_INST_0_i_3_n_0 ;
  wire \m_axi_awlen[7]_INST_0_i_4_n_0 ;
  wire \m_axi_awlen[7]_INST_0_i_5_n_0 ;
  wire \m_axi_awlen[7]_INST_0_i_6_n_0 ;
  wire \m_axi_awlen[7]_INST_0_i_7_n_0 ;
  wire \m_axi_awlen[7]_INST_0_i_8_n_0 ;
  wire [2:0]m_axi_awsize;
  wire \m_payload_i[31]_i_1_n_0 ;
  wire m_valid_i_i_1__1_n_0;
  wire [7:0]s_axi_awlen_ii;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_ready_i_i_1_n_0;
  wire [5:0]sr_awaddr;
  wire [1:0]sr_awburst;
  wire [2:0]sr_awsize;
  wire sr_awvalid;

  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \USE_RTL_FIFO.data_srl_reg[31][11]_srl32_i_1 
       (.I0(\USE_RTL_FIFO.data_srl_reg[31][11]_srl32_i_2_n_0 ),
        .O(in[11]));
  (* SOFT_HLUTNM = "soft_lutpair728" *) 
  LUT5 #(
    .INIT(32'hAAA8AAAA)) 
    \USE_RTL_FIFO.data_srl_reg[31][11]_srl32_i_2 
       (.I0(\m_axi_awaddr[2]_INST_0_i_1_n_0 ),
        .I1(sr_awsize[0]),
        .I2(sr_awsize[1]),
        .I3(sr_awsize[2]),
        .I4(s_axi_awlen_ii[0]),
        .O(\USE_RTL_FIFO.data_srl_reg[31][11]_srl32_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h000000E2FFFFFFFF)) 
    \USE_RTL_FIFO.data_srl_reg[31][12]_srl32_i_1 
       (.I0(s_axi_awlen_ii[1]),
        .I1(sr_awsize[0]),
        .I2(s_axi_awlen_ii[0]),
        .I3(sr_awsize[1]),
        .I4(sr_awsize[2]),
        .I5(\m_axi_awaddr[2]_INST_0_i_1_n_0 ),
        .O(in[12]));
  LUT1 #(
    .INIT(2'h1)) 
    \USE_RTL_FIFO.data_srl_reg[31][13]_srl32_i_1 
       (.I0(\m_axi_awaddr[2]_INST_0_i_3_n_0 ),
        .O(in[13]));
  (* SOFT_HLUTNM = "soft_lutpair732" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \USE_RTL_FIFO.data_srl_reg[31][16]_srl32_i_1__0 
       (.I0(\m_axi_awaddr[2]_INST_0_i_3_n_0 ),
        .I1(sr_awaddr[2]),
        .O(in[14]));
  LUT6 #(
    .INIT(64'h000000001FE00000)) 
    \USE_RTL_FIFO.data_srl_reg[31][17]_srl32_i_1 
       (.I0(sr_awburst[1]),
        .I1(sr_awburst[0]),
        .I2(s_axi_awlen_ii[0]),
        .I3(sr_awaddr[0]),
        .I4(in[8]),
        .I5(\USE_RTL_FIFO.data_srl_reg[31][11]_srl32_i_2_n_0 ),
        .O(in[15]));
  LUT6 #(
    .INIT(64'h0045450044010144)) 
    \USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_1 
       (.I0(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2_n_0 ),
        .I1(\m_axi_awaddr[1]_INST_0_i_1_n_0 ),
        .I2(\m_axi_awaddr[2]_INST_0_i_1_n_0 ),
        .I3(sr_awaddr[1]),
        .I4(\m_axi_awlen[0]_INST_0_i_3_n_0 ),
        .I5(in[27]),
        .O(in[16]));
  (* SOFT_HLUTNM = "soft_lutpair739" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2 
       (.I0(sr_awsize[2]),
        .I1(sr_awsize[1]),
        .O(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h000057A80000A857)) 
    \USE_RTL_FIFO.data_srl_reg[31][19]_srl32_i_1__0 
       (.I0(\m_axi_awaddr[2]_INST_0_i_6_n_0 ),
        .I1(sr_awburst[1]),
        .I2(sr_awburst[0]),
        .I3(sr_awaddr[2]),
        .I4(\m_axi_awaddr[2]_INST_0_i_3_n_0 ),
        .I5(\USE_RTL_FIFO.data_srl_reg[31][19]_srl32_i_2_n_0 ),
        .O(in[17]));
  (* SOFT_HLUTNM = "soft_lutpair730" *) 
  LUT5 #(
    .INIT(32'h001F1FFF)) 
    \USE_RTL_FIFO.data_srl_reg[31][19]_srl32_i_2 
       (.I0(sr_awburst[1]),
        .I1(sr_awburst[0]),
        .I2(\m_axi_awaddr[1]_INST_0_i_1_n_0 ),
        .I3(in[22]),
        .I4(\m_axi_awlen[0]_INST_0_i_3_n_0 ),
        .O(\USE_RTL_FIFO.data_srl_reg[31][19]_srl32_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair723" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \USE_RTL_FIFO.data_srl_reg[31][20]_srl32_i_1__0 
       (.I0(sr_awaddr[0]),
        .I1(sr_awsize[0]),
        .I2(sr_awsize[1]),
        .I3(sr_awsize[2]),
        .I4(\USE_RTL_FIFO.data_srl_reg[31][11]_srl32_i_2_n_0 ),
        .O(in[18]));
  LUT6 #(
    .INIT(64'h0000000100000054)) 
    \USE_RTL_FIFO.data_srl_reg[31][21]_srl32_i_1 
       (.I0(\USE_RTL_FIFO.data_srl_reg[31][21]_srl32_i_2_n_0 ),
        .I1(sr_awaddr[0]),
        .I2(sr_awsize[0]),
        .I3(sr_awsize[1]),
        .I4(sr_awsize[2]),
        .I5(sr_awaddr[1]),
        .O(in[19]));
  LUT5 #(
    .INIT(32'h00000002)) 
    \USE_RTL_FIFO.data_srl_reg[31][21]_srl32_i_2 
       (.I0(sr_awburst[1]),
        .I1(sr_awburst[0]),
        .I2(\m_axi_awaddr[2]_INST_0_i_5_n_0 ),
        .I3(\m_axi_awaddr[2]_INST_0_i_4_n_0 ),
        .I4(\m_axi_awaddr[1]_INST_0_i_1_n_0 ),
        .O(\USE_RTL_FIFO.data_srl_reg[31][21]_srl32_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair736" *) 
  LUT5 #(
    .INIT(32'h00006696)) 
    \USE_RTL_FIFO.data_srl_reg[31][22]_srl32_i_1 
       (.I0(sr_awaddr[2]),
        .I1(in[10]),
        .I2(sr_awaddr[1]),
        .I3(\USE_RTL_FIFO.data_srl_reg[31][22]_srl32_i_2_n_0 ),
        .I4(\m_axi_awaddr[2]_INST_0_i_3_n_0 ),
        .O(in[20]));
  (* SOFT_HLUTNM = "soft_lutpair739" *) 
  LUT4 #(
    .INIT(16'hFFF1)) 
    \USE_RTL_FIFO.data_srl_reg[31][22]_srl32_i_2 
       (.I0(sr_awaddr[0]),
        .I1(sr_awsize[0]),
        .I2(sr_awsize[1]),
        .I3(sr_awsize[2]),
        .O(\USE_RTL_FIFO.data_srl_reg[31][22]_srl32_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair723" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    \USE_RTL_FIFO.data_srl_reg[31][23]_srl32_i_1 
       (.I0(sr_awaddr[0]),
        .I1(sr_awsize[0]),
        .I2(sr_awsize[1]),
        .I3(sr_awsize[2]),
        .I4(\USE_RTL_FIFO.data_srl_reg[31][11]_srl32_i_2_n_0 ),
        .O(in[21]));
  LUT6 #(
    .INIT(64'h00000000AAAAAAA8)) 
    \USE_RTL_FIFO.data_srl_reg[31][24]_srl32_i_1 
       (.I0(sr_awaddr[1]),
        .I1(\m_axi_awaddr[5]_INST_0_i_5_n_0 ),
        .I2(\m_axi_awaddr[2]_INST_0_i_5_n_0 ),
        .I3(\m_axi_awaddr[2]_INST_0_i_4_n_0 ),
        .I4(\m_axi_awaddr[1]_INST_0_i_1_n_0 ),
        .I5(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2_n_0 ),
        .O(in[22]));
  (* SOFT_HLUTNM = "soft_lutpair736" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \USE_RTL_FIFO.data_srl_reg[31][25]_srl32_i_1 
       (.I0(sr_awaddr[2]),
        .I1(\m_axi_awaddr[2]_INST_0_i_3_n_0 ),
        .O(in[23]));
  (* SOFT_HLUTNM = "soft_lutpair731" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \USE_RTL_FIFO.data_srl_reg[31][27]_srl32_i_1 
       (.I0(\m_axi_awaddr[2]_INST_0_i_1_n_0 ),
        .I1(in[26]),
        .O(in[25]));
  (* SOFT_HLUTNM = "soft_lutpair730" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \USE_RTL_FIFO.data_srl_reg[31][29]_srl32_i_1 
       (.I0(sr_awburst[0]),
        .I1(sr_awburst[1]),
        .O(in[27]));
  (* SOFT_HLUTNM = "soft_lutpair728" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_RTL_FIFO.data_srl_reg[31][9]_srl32_i_1 
       (.I0(sr_awsize[0]),
        .I1(sr_awsize[2]),
        .I2(sr_awsize[1]),
        .O(in[9]));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[0] 
       (.C(clk),
        .CE(\<const1> ),
        .D(\<const1> ),
        .Q(\aresetn_d_reg[1] ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT6 #(
    .INIT(64'h222AA2AAA2AAA2AA)) 
    \m_axi_awaddr[0]_INST_0 
       (.I0(sr_awaddr[0]),
        .I1(in[26]),
        .I2(\m_axi_awaddr[2]_INST_0_i_1_n_0 ),
        .I3(in[24]),
        .I4(s_axi_awlen_ii[0]),
        .I5(in[8]),
        .O(m_axi_awaddr[0]));
  (* SOFT_HLUTNM = "soft_lutpair727" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \m_axi_awaddr[0]_INST_0_i_1 
       (.I0(sr_awsize[0]),
        .I1(sr_awsize[1]),
        .I2(sr_awsize[2]),
        .O(in[8]));
  (* SOFT_HLUTNM = "soft_lutpair731" *) 
  LUT5 #(
    .INIT(32'h222AA2AA)) 
    \m_axi_awaddr[1]_INST_0 
       (.I0(sr_awaddr[1]),
        .I1(in[26]),
        .I2(\m_axi_awaddr[2]_INST_0_i_1_n_0 ),
        .I3(in[24]),
        .I4(\m_axi_awaddr[1]_INST_0_i_1_n_0 ),
        .O(m_axi_awaddr[1]));
  (* SOFT_HLUTNM = "soft_lutpair735" *) 
  LUT5 #(
    .INIT(32'h000000E2)) 
    \m_axi_awaddr[1]_INST_0_i_1 
       (.I0(s_axi_awlen_ii[1]),
        .I1(sr_awsize[0]),
        .I2(s_axi_awlen_ii[0]),
        .I3(sr_awsize[1]),
        .I4(sr_awsize[2]),
        .O(\m_axi_awaddr[1]_INST_0_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair732" *) 
  LUT5 #(
    .INIT(32'hF0F03070)) 
    \m_axi_awaddr[2]_INST_0 
       (.I0(\m_axi_awaddr[2]_INST_0_i_1_n_0 ),
        .I1(in[26]),
        .I2(sr_awaddr[2]),
        .I3(in[24]),
        .I4(\m_axi_awaddr[2]_INST_0_i_3_n_0 ),
        .O(m_axi_awaddr[2]));
  (* SOFT_HLUTNM = "soft_lutpair734" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    \m_axi_awaddr[2]_INST_0_i_1 
       (.I0(\m_axi_awaddr[2]_INST_0_i_4_n_0 ),
        .I1(\m_axi_awaddr[2]_INST_0_i_5_n_0 ),
        .I2(sr_awburst[0]),
        .I3(sr_awburst[1]),
        .O(\m_axi_awaddr[2]_INST_0_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair724" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \m_axi_awaddr[2]_INST_0_i_2 
       (.I0(sr_awburst[1]),
        .I1(sr_awburst[0]),
        .I2(\m_axi_awaddr[5]_INST_0_i_6_n_0 ),
        .O(in[26]));
  (* SOFT_HLUTNM = "soft_lutpair734" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    \m_axi_awaddr[2]_INST_0_i_3 
       (.I0(sr_awburst[1]),
        .I1(sr_awburst[0]),
        .I2(\m_axi_awaddr[2]_INST_0_i_5_n_0 ),
        .I3(\m_axi_awaddr[2]_INST_0_i_4_n_0 ),
        .I4(\m_axi_awaddr[2]_INST_0_i_6_n_0 ),
        .O(\m_axi_awaddr[2]_INST_0_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFF0EEEEEA00)) 
    \m_axi_awaddr[2]_INST_0_i_4 
       (.I0(s_axi_awlen_ii[1]),
        .I1(s_axi_awlen_ii[0]),
        .I2(sr_awsize[0]),
        .I3(sr_awsize[1]),
        .I4(sr_awsize[2]),
        .I5(s_axi_awlen_ii[2]),
        .O(\m_axi_awaddr[2]_INST_0_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \m_axi_awaddr[2]_INST_0_i_5 
       (.I0(s_axi_awlen_ii[4]),
        .I1(s_axi_awlen_ii[7]),
        .I2(s_axi_awlen_ii[5]),
        .I3(s_axi_awlen_ii[3]),
        .I4(s_axi_awlen_ii[6]),
        .O(\m_axi_awaddr[2]_INST_0_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h03000B0B03000808)) 
    \m_axi_awaddr[2]_INST_0_i_6 
       (.I0(s_axi_awlen_ii[1]),
        .I1(sr_awsize[0]),
        .I2(sr_awsize[2]),
        .I3(s_axi_awlen_ii[0]),
        .I4(sr_awsize[1]),
        .I5(s_axi_awlen_ii[2]),
        .O(\m_axi_awaddr[2]_INST_0_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h95999999AAAAAAAA)) 
    \m_axi_awaddr[3]_INST_0 
       (.I0(sr_awaddr[3]),
        .I1(\m_axi_awaddr[3]_INST_0_i_1_n_0 ),
        .I2(sr_awsize[2]),
        .I3(sr_awsize[1]),
        .I4(\m_axi_awaddr[3]_INST_0_i_2_n_0 ),
        .I5(in[24]),
        .O(m_axi_awaddr[3]));
  (* SOFT_HLUTNM = "soft_lutpair733" *) 
  LUT5 #(
    .INIT(32'hEEEFFFEF)) 
    \m_axi_awaddr[3]_INST_0_i_1 
       (.I0(sr_awsize[1]),
        .I1(sr_awsize[2]),
        .I2(s_axi_awlen_ii[3]),
        .I3(sr_awsize[0]),
        .I4(s_axi_awlen_ii[2]),
        .O(\m_axi_awaddr[3]_INST_0_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair735" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_awaddr[3]_INST_0_i_2 
       (.I0(s_axi_awlen_ii[0]),
        .I1(sr_awsize[0]),
        .I2(s_axi_awlen_ii[1]),
        .O(\m_axi_awaddr[3]_INST_0_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h9AAA)) 
    \m_axi_awaddr[4]_INST_0 
       (.I0(sr_awaddr[4]),
        .I1(\m_axi_awaddr[4]_INST_0_i_1_n_0 ),
        .I2(sr_awaddr[3]),
        .I3(in[24]),
        .O(m_axi_awaddr[4]));
  LUT6 #(
    .INIT(64'h00000000BFDDBFFF)) 
    \m_axi_awaddr[4]_INST_0_i_1 
       (.I0(sr_awsize[2]),
        .I1(sr_awsize[0]),
        .I2(s_axi_awlen_ii[1]),
        .I3(sr_awsize[1]),
        .I4(s_axi_awlen_ii[0]),
        .I5(\m_axi_awlen[2]_INST_0_i_2_n_0 ),
        .O(\m_axi_awaddr[4]_INST_0_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \m_axi_awaddr[5]_INST_0 
       (.I0(sr_awaddr[5]),
        .I1(sr_awaddr[4]),
        .I2(\m_axi_awaddr[5]_INST_0_i_1_n_0 ),
        .I3(sr_awaddr[3]),
        .I4(in[24]),
        .O(m_axi_awaddr[5]));
  LUT6 #(
    .INIT(64'hAEAFAAAAAEAAAAAA)) 
    \m_axi_awaddr[5]_INST_0_i_1 
       (.I0(\m_axi_awaddr[5]_INST_0_i_3_n_0 ),
        .I1(s_axi_awlen_ii[0]),
        .I2(sr_awsize[1]),
        .I3(sr_awsize[0]),
        .I4(sr_awsize[2]),
        .I5(s_axi_awlen_ii[1]),
        .O(\m_axi_awaddr[5]_INST_0_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000011111110)) 
    \m_axi_awaddr[5]_INST_0_i_2 
       (.I0(\m_axi_awaddr[5]_INST_0_i_4_n_0 ),
        .I1(\m_axi_awaddr[5]_INST_0_i_5_n_0 ),
        .I2(sr_awaddr[0]),
        .I3(sr_awaddr[1]),
        .I4(sr_awaddr[2]),
        .I5(\m_axi_awaddr[5]_INST_0_i_6_n_0 ),
        .O(in[24]));
  LUT6 #(
    .INIT(64'h00FF00D8000000D8)) 
    \m_axi_awaddr[5]_INST_0_i_3 
       (.I0(sr_awsize[0]),
        .I1(s_axi_awlen_ii[4]),
        .I2(s_axi_awlen_ii[5]),
        .I3(sr_awsize[2]),
        .I4(sr_awsize[1]),
        .I5(\m_axi_awaddr[5]_INST_0_i_7_n_0 ),
        .O(\m_axi_awaddr[5]_INST_0_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \m_axi_awaddr[5]_INST_0_i_4 
       (.I0(s_axi_awlen_ii[5]),
        .I1(s_axi_awlen_ii[3]),
        .I2(\m_axi_awaddr[2]_INST_0_i_4_n_0 ),
        .I3(s_axi_awlen_ii[4]),
        .I4(s_axi_awlen_ii[6]),
        .I5(s_axi_awlen_ii[7]),
        .O(\m_axi_awaddr[5]_INST_0_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair729" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axi_awaddr[5]_INST_0_i_5 
       (.I0(sr_awburst[0]),
        .I1(sr_awburst[1]),
        .O(\m_axi_awaddr[5]_INST_0_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair726" *) 
  LUT5 #(
    .INIT(32'h55555557)) 
    \m_axi_awaddr[5]_INST_0_i_6 
       (.I0(Q[4]),
        .I1(s_axi_awlen_ii[2]),
        .I2(s_axi_awlen_ii[1]),
        .I3(s_axi_awlen_ii[0]),
        .I4(\m_axi_awaddr[2]_INST_0_i_5_n_0 ),
        .O(\m_axi_awaddr[5]_INST_0_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair733" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axi_awaddr[5]_INST_0_i_7 
       (.I0(s_axi_awlen_ii[2]),
        .I1(sr_awsize[0]),
        .I2(s_axi_awlen_ii[3]),
        .O(\m_axi_awaddr[5]_INST_0_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair740" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \m_axi_awburst[0]_INST_0 
       (.I0(\m_axi_awaddr[2]_INST_0_i_1_n_0 ),
        .I1(in[26]),
        .I2(sr_awburst[0]),
        .O(m_axi_awburst[0]));
  (* SOFT_HLUTNM = "soft_lutpair740" *) 
  LUT3 #(
    .INIT(8'h70)) 
    \m_axi_awburst[1]_INST_0 
       (.I0(\m_axi_awaddr[2]_INST_0_i_1_n_0 ),
        .I1(in[26]),
        .I2(sr_awburst[1]),
        .O(m_axi_awburst[1]));
  LUT6 #(
    .INIT(64'h599955555999AAAA)) 
    \m_axi_awlen[0]_INST_0 
       (.I0(\m_axi_awlen[0]_INST_0_i_1_n_0 ),
        .I1(\m_axi_awaddr[3]_INST_0_i_1_n_0 ),
        .I2(s_axi_awlen_ii[1]),
        .I3(in[10]),
        .I4(in[26]),
        .I5(s_axi_awlen_ii[0]),
        .O(in[0]));
  LUT6 #(
    .INIT(64'h000000000000FFD4)) 
    \m_axi_awlen[0]_INST_0_i_1 
       (.I0(\m_axi_awlen[0]_INST_0_i_2_n_0 ),
        .I1(in[22]),
        .I2(\m_axi_awlen[0]_INST_0_i_3_n_0 ),
        .I3(\m_axi_awlen[0]_INST_0_i_4_n_0 ),
        .I4(\m_axi_awlen[0]_INST_0_i_5_n_0 ),
        .I5(\m_axi_awlen[0]_INST_0_i_6_n_0 ),
        .O(\m_axi_awlen[0]_INST_0_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF1FFF1F1F1FFFFFF)) 
    \m_axi_awlen[0]_INST_0_i_2 
       (.I0(sr_awburst[1]),
        .I1(sr_awburst[0]),
        .I2(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2_n_0 ),
        .I3(s_axi_awlen_ii[0]),
        .I4(sr_awsize[0]),
        .I5(s_axi_awlen_ii[1]),
        .O(\m_axi_awlen[0]_INST_0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0008000800080000)) 
    \m_axi_awlen[0]_INST_0_i_3 
       (.I0(sr_awaddr[0]),
        .I1(s_axi_awlen_ii[0]),
        .I2(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_i_2_n_0 ),
        .I3(sr_awsize[0]),
        .I4(sr_awburst[0]),
        .I5(sr_awburst[1]),
        .O(\m_axi_awlen[0]_INST_0_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hE000)) 
    \m_axi_awlen[0]_INST_0_i_4 
       (.I0(sr_awburst[0]),
        .I1(sr_awburst[1]),
        .I2(\m_axi_awaddr[2]_INST_0_i_6_n_0 ),
        .I3(sr_awaddr[2]),
        .O(\m_axi_awlen[0]_INST_0_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF04FFFFFF)) 
    \m_axi_awlen[0]_INST_0_i_5 
       (.I0(\m_axi_awaddr[2]_INST_0_i_5_n_0 ),
        .I1(\m_axi_awlen[0]_INST_0_i_7_n_0 ),
        .I2(s_axi_awlen_ii[2]),
        .I3(Q[4]),
        .I4(sr_awburst[0]),
        .I5(sr_awburst[1]),
        .O(\m_axi_awlen[0]_INST_0_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000005555575555)) 
    \m_axi_awlen[0]_INST_0_i_6 
       (.I0(sr_awaddr[2]),
        .I1(\m_axi_awaddr[2]_INST_0_i_5_n_0 ),
        .I2(\m_axi_awaddr[2]_INST_0_i_4_n_0 ),
        .I3(sr_awburst[0]),
        .I4(sr_awburst[1]),
        .I5(\m_axi_awaddr[2]_INST_0_i_6_n_0 ),
        .O(\m_axi_awlen[0]_INST_0_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair726" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \m_axi_awlen[0]_INST_0_i_7 
       (.I0(s_axi_awlen_ii[0]),
        .I1(s_axi_awlen_ii[1]),
        .O(\m_axi_awlen[0]_INST_0_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair737" *) 
  LUT4 #(
    .INIT(16'h56A6)) 
    \m_axi_awlen[1]_INST_0 
       (.I0(\m_axi_awlen[2]_INST_0_i_1_n_0 ),
        .I1(s_axi_awlen_ii[1]),
        .I2(in[26]),
        .I3(\m_axi_awlen[2]_INST_0_i_2_n_0 ),
        .O(in[1]));
  LUT6 #(
    .INIT(64'hA70757F7A80858F8)) 
    \m_axi_awlen[2]_INST_0 
       (.I0(\m_axi_awlen[2]_INST_0_i_1_n_0 ),
        .I1(s_axi_awlen_ii[1]),
        .I2(in[26]),
        .I3(\m_axi_awlen[2]_INST_0_i_2_n_0 ),
        .I4(\m_axi_awlen[2]_INST_0_i_3_n_0 ),
        .I5(s_axi_awlen_ii[2]),
        .O(in[2]));
  LUT6 #(
    .INIT(64'hA8080808A8A8A8A8)) 
    \m_axi_awlen[2]_INST_0_i_1 
       (.I0(\m_axi_awlen[0]_INST_0_i_1_n_0 ),
        .I1(s_axi_awlen_ii[0]),
        .I2(in[26]),
        .I3(in[10]),
        .I4(s_axi_awlen_ii[1]),
        .I5(\m_axi_awaddr[3]_INST_0_i_1_n_0 ),
        .O(\m_axi_awlen[2]_INST_0_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000033E200E2)) 
    \m_axi_awlen[2]_INST_0_i_2 
       (.I0(s_axi_awlen_ii[4]),
        .I1(sr_awsize[1]),
        .I2(s_axi_awlen_ii[2]),
        .I3(sr_awsize[0]),
        .I4(s_axi_awlen_ii[3]),
        .I5(sr_awsize[2]),
        .O(\m_axi_awlen[2]_INST_0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFDCCFDFCFDCFFDFF)) 
    \m_axi_awlen[2]_INST_0_i_3 
       (.I0(s_axi_awlen_ii[3]),
        .I1(sr_awsize[2]),
        .I2(sr_awsize[0]),
        .I3(sr_awsize[1]),
        .I4(s_axi_awlen_ii[4]),
        .I5(s_axi_awlen_ii[5]),
        .O(\m_axi_awlen[2]_INST_0_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair738" *) 
  LUT4 #(
    .INIT(16'hA656)) 
    \m_axi_awlen[3]_INST_0 
       (.I0(\m_axi_awlen[6]_INST_0_i_1_n_0 ),
        .I1(s_axi_awlen_ii[3]),
        .I2(in[26]),
        .I3(\m_axi_awlen[5]_INST_0_i_1_n_0 ),
        .O(in[3]));
  LUT6 #(
    .INIT(64'h22225FA0DDDD5FA0)) 
    \m_axi_awlen[4]_INST_0 
       (.I0(\m_axi_awlen[6]_INST_0_i_1_n_0 ),
        .I1(\m_axi_awlen[5]_INST_0_i_1_n_0 ),
        .I2(s_axi_awlen_ii[3]),
        .I3(s_axi_awlen_ii[4]),
        .I4(in[26]),
        .I5(\m_axi_awlen[4]_INST_0_i_1_n_0 ),
        .O(in[4]));
  LUT6 #(
    .INIT(64'hFAFAABFBFFFFABFB)) 
    \m_axi_awlen[4]_INST_0_i_1 
       (.I0(sr_awsize[2]),
        .I1(s_axi_awlen_ii[7]),
        .I2(sr_awsize[1]),
        .I3(s_axi_awlen_ii[5]),
        .I4(sr_awsize[0]),
        .I5(s_axi_awlen_ii[6]),
        .O(\m_axi_awlen[4]_INST_0_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFBABFFFF04540000)) 
    \m_axi_awlen[5]_INST_0 
       (.I0(\m_axi_awlen[6]_INST_0_i_3_n_0 ),
        .I1(s_axi_awlen_ii[3]),
        .I2(in[26]),
        .I3(\m_axi_awlen[5]_INST_0_i_1_n_0 ),
        .I4(\m_axi_awlen[6]_INST_0_i_1_n_0 ),
        .I5(\m_axi_awlen[7]_INST_0_i_3_n_0 ),
        .O(in[5]));
  LUT6 #(
    .INIT(64'hFCFFF4F4FCFFF7F7)) 
    \m_axi_awlen[5]_INST_0_i_1 
       (.I0(s_axi_awlen_ii[5]),
        .I1(sr_awsize[0]),
        .I2(sr_awsize[2]),
        .I3(s_axi_awlen_ii[4]),
        .I4(sr_awsize[1]),
        .I5(s_axi_awlen_ii[6]),
        .O(\m_axi_awlen[5]_INST_0_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0008FFF7)) 
    \m_axi_awlen[6]_INST_0 
       (.I0(\m_axi_awlen[7]_INST_0_i_3_n_0 ),
        .I1(\m_axi_awlen[6]_INST_0_i_1_n_0 ),
        .I2(\m_axi_awlen[6]_INST_0_i_2_n_0 ),
        .I3(\m_axi_awlen[6]_INST_0_i_3_n_0 ),
        .I4(\m_axi_awlen[6]_INST_0_i_4_n_0 ),
        .O(in[6]));
  LUT6 #(
    .INIT(64'h000000000000B800)) 
    \m_axi_awlen[6]_INST_0_i_1 
       (.I0(\m_axi_awlen[2]_INST_0_i_2_n_0 ),
        .I1(in[26]),
        .I2(s_axi_awlen_ii[1]),
        .I3(\m_axi_awlen[0]_INST_0_i_1_n_0 ),
        .I4(\m_axi_awlen[7]_INST_0_i_5_n_0 ),
        .I5(\m_axi_awlen[7]_INST_0_i_6_n_0 ),
        .O(\m_axi_awlen[6]_INST_0_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair729" *) 
  LUT5 #(
    .INIT(32'h00A8FFAB)) 
    \m_axi_awlen[6]_INST_0_i_2 
       (.I0(\m_axi_awlen[5]_INST_0_i_1_n_0 ),
        .I1(sr_awburst[1]),
        .I2(sr_awburst[0]),
        .I3(\m_axi_awaddr[5]_INST_0_i_6_n_0 ),
        .I4(s_axi_awlen_ii[3]),
        .O(\m_axi_awlen[6]_INST_0_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair724" *) 
  LUT5 #(
    .INIT(32'h00A8FFAB)) 
    \m_axi_awlen[6]_INST_0_i_3 
       (.I0(\m_axi_awlen[4]_INST_0_i_1_n_0 ),
        .I1(sr_awburst[1]),
        .I2(sr_awburst[0]),
        .I3(\m_axi_awaddr[5]_INST_0_i_6_n_0 ),
        .I4(s_axi_awlen_ii[4]),
        .O(\m_axi_awlen[6]_INST_0_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFDFF0000FDFFFFFF)) 
    \m_axi_awlen[6]_INST_0_i_4 
       (.I0(s_axi_awlen_ii[7]),
        .I1(sr_awsize[0]),
        .I2(sr_awsize[2]),
        .I3(sr_awsize[1]),
        .I4(in[26]),
        .I5(s_axi_awlen_ii[6]),
        .O(\m_axi_awlen[6]_INST_0_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h8F8A0A0A0A0A0A0A)) 
    \m_axi_awlen[7]_INST_0 
       (.I0(s_axi_awlen_ii[7]),
        .I1(in[10]),
        .I2(in[26]),
        .I3(s_axi_awlen_ii[6]),
        .I4(\m_axi_awlen[7]_INST_0_i_2_n_0 ),
        .I5(\m_axi_awlen[7]_INST_0_i_3_n_0 ),
        .O(in[7]));
  (* SOFT_HLUTNM = "soft_lutpair725" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \m_axi_awlen[7]_INST_0_i_1 
       (.I0(sr_awsize[1]),
        .I1(sr_awsize[2]),
        .I2(sr_awsize[0]),
        .O(in[10]));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \m_axi_awlen[7]_INST_0_i_2 
       (.I0(\m_axi_awlen[7]_INST_0_i_4_n_0 ),
        .I1(\m_axi_awlen[0]_INST_0_i_1_n_0 ),
        .I2(\m_axi_awlen[7]_INST_0_i_5_n_0 ),
        .I3(\m_axi_awlen[7]_INST_0_i_6_n_0 ),
        .I4(\m_axi_awlen[6]_INST_0_i_2_n_0 ),
        .I5(\m_axi_awlen[6]_INST_0_i_3_n_0 ),
        .O(\m_axi_awlen[7]_INST_0_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair741" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \m_axi_awlen[7]_INST_0_i_3 
       (.I0(\m_axi_awlen[7]_INST_0_i_7_n_0 ),
        .I1(in[26]),
        .I2(s_axi_awlen_ii[5]),
        .O(\m_axi_awlen[7]_INST_0_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFAB00A8)) 
    \m_axi_awlen[7]_INST_0_i_4 
       (.I0(\m_axi_awlen[2]_INST_0_i_2_n_0 ),
        .I1(sr_awburst[1]),
        .I2(sr_awburst[0]),
        .I3(\m_axi_awaddr[5]_INST_0_i_6_n_0 ),
        .I4(s_axi_awlen_ii[1]),
        .O(\m_axi_awlen[7]_INST_0_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000002AFFFFFF2A)) 
    \m_axi_awlen[7]_INST_0_i_5 
       (.I0(\m_axi_awaddr[3]_INST_0_i_1_n_0 ),
        .I1(s_axi_awlen_ii[1]),
        .I2(in[10]),
        .I3(in[27]),
        .I4(\m_axi_awaddr[5]_INST_0_i_6_n_0 ),
        .I5(s_axi_awlen_ii[0]),
        .O(\m_axi_awlen[7]_INST_0_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00000007FFFFFF07)) 
    \m_axi_awlen[7]_INST_0_i_6 
       (.I0(s_axi_awlen_ii[3]),
        .I1(in[10]),
        .I2(\m_axi_awlen[7]_INST_0_i_8_n_0 ),
        .I3(in[27]),
        .I4(\m_axi_awaddr[5]_INST_0_i_6_n_0 ),
        .I5(s_axi_awlen_ii[2]),
        .O(\m_axi_awlen[7]_INST_0_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair725" *) 
  LUT5 #(
    .INIT(32'hFFFFCF77)) 
    \m_axi_awlen[7]_INST_0_i_7 
       (.I0(s_axi_awlen_ii[6]),
        .I1(sr_awsize[1]),
        .I2(s_axi_awlen_ii[7]),
        .I3(sr_awsize[0]),
        .I4(sr_awsize[2]),
        .O(\m_axi_awlen[7]_INST_0_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair727" *) 
  LUT5 #(
    .INIT(32'h00000C0A)) 
    \m_axi_awlen[7]_INST_0_i_8 
       (.I0(s_axi_awlen_ii[5]),
        .I1(s_axi_awlen_ii[4]),
        .I2(sr_awsize[1]),
        .I3(sr_awsize[0]),
        .I4(sr_awsize[2]),
        .O(\m_axi_awlen[7]_INST_0_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair741" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \m_axi_awsize[0]_INST_0 
       (.I0(sr_awsize[0]),
        .I1(in[26]),
        .O(m_axi_awsize[0]));
  (* SOFT_HLUTNM = "soft_lutpair738" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \m_axi_awsize[1]_INST_0 
       (.I0(sr_awsize[1]),
        .I1(in[26]),
        .O(m_axi_awsize[1]));
  (* SOFT_HLUTNM = "soft_lutpair737" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_axi_awsize[2]_INST_0 
       (.I0(sr_awsize[2]),
        .I1(in[26]),
        .O(m_axi_awsize[2]));
  LUT1 #(
    .INIT(2'h1)) 
    \m_payload_i[31]_i_1 
       (.I0(sr_awvalid),
        .O(\m_payload_i[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[0]),
        .Q(sr_awaddr[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[10]),
        .Q(m_axi_awaddr[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[11]),
        .Q(m_axi_awaddr[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[12]),
        .Q(m_axi_awaddr[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[13]),
        .Q(m_axi_awaddr[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[14]),
        .Q(m_axi_awaddr[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[15]),
        .Q(m_axi_awaddr[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[16]),
        .Q(m_axi_awaddr[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[17]),
        .Q(m_axi_awaddr[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[18]),
        .Q(m_axi_awaddr[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[19]),
        .Q(m_axi_awaddr[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[1]),
        .Q(sr_awaddr[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[20]),
        .Q(m_axi_awaddr[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[21]),
        .Q(m_axi_awaddr[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[22]),
        .Q(m_axi_awaddr[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[23]),
        .Q(m_axi_awaddr[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[24]),
        .Q(m_axi_awaddr[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[25]),
        .Q(m_axi_awaddr[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[26]),
        .Q(m_axi_awaddr[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[27]),
        .Q(m_axi_awaddr[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[28]),
        .Q(m_axi_awaddr[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[29]),
        .Q(m_axi_awaddr[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[2]),
        .Q(sr_awaddr[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[30]),
        .Q(m_axi_awaddr[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[31]),
        .Q(m_axi_awaddr[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[32]),
        .Q(Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[33]),
        .Q(Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[34]),
        .Q(Q[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[35]),
        .Q(sr_awsize[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[36]),
        .Q(sr_awsize[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[37]),
        .Q(sr_awsize[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[38]),
        .Q(sr_awburst[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[39]),
        .Q(sr_awburst[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[3]),
        .Q(sr_awaddr[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[40]),
        .Q(Q[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[41]),
        .Q(Q[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[42]),
        .Q(Q[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[43]),
        .Q(Q[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[44]),
        .Q(s_axi_awlen_ii[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[45]),
        .Q(s_axi_awlen_ii[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[46]),
        .Q(s_axi_awlen_ii[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[47]),
        .Q(s_axi_awlen_ii[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[48]),
        .Q(s_axi_awlen_ii[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[49]),
        .Q(s_axi_awlen_ii[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[4]),
        .Q(sr_awaddr[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[50]),
        .Q(s_axi_awlen_ii[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[51]),
        .Q(s_axi_awlen_ii[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[52]),
        .Q(Q[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[53]),
        .Q(Q[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[54]),
        .Q(Q[9]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[55]),
        .Q(Q[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[56]),
        .Q(Q[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[57]),
        .Q(Q[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[58]),
        .Q(Q[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[5]),
        .Q(sr_awaddr[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[59]),
        .Q(Q[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[60]),
        .Q(Q[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[6]),
        .Q(m_axi_awaddr[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[7]),
        .Q(m_axi_awaddr[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[8]),
        .Q(m_axi_awaddr[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(clk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[9]),
        .Q(m_axi_awaddr[9]),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hB100)) 
    m_valid_i_i_1__1
       (.I0(s_axi_awready),
        .I1(cmd_push_block_reg),
        .I2(s_axi_awvalid),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(m_valid_i_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1__1_n_0),
        .Q(sr_awvalid),
        .R(\<const0> ));
  LUT5 #(
    .INIT(32'hDD5F0000)) 
    s_ready_i_i_1
       (.I0(\aresetn_d_reg[1]_0 ),
        .I1(cmd_push_block_reg),
        .I2(s_axi_awvalid),
        .I3(sr_awvalid),
        .I4(\aresetn_d_reg[1] ),
        .O(s_ready_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1_n_0),
        .Q(s_axi_awready),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice_36
   (m_axi_arvalid,
    s_axi_arready,
    \M00_AXI_0_arregion[3] ,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    s_axi_arvalid,
    m_axi_arready,
    \aresetn_d_reg[1]_0 ,
    UNCONN_IN);
  output m_axi_arvalid;
  output s_axi_arready;
  output [61:0]\M00_AXI_0_arregion[3] ;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input s_axi_arvalid;
  input m_axi_arready;
  input \aresetn_d_reg[1]_0 ;
  input [61:0]UNCONN_IN;

  wire \<const0> ;
  wire \<const1> ;
  wire [61:0]\M00_AXI_0_arregion[3] ;
  wire [61:0]UNCONN_IN;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire \m_payload_i[53]_i_1__0_n_0 ;
  wire m_valid_i_i_1__0_n_0;
  wire p_1_in;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_ready_i_i_1__3_n_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT1 #(
    .INIT(2'h1)) 
    \m_payload_i[53]_i_1__0 
       (.I0(m_axi_arvalid),
        .O(\m_payload_i[53]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[0]),
        .Q(\M00_AXI_0_arregion[3] [0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[10]),
        .Q(\M00_AXI_0_arregion[3] [10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[11]),
        .Q(\M00_AXI_0_arregion[3] [11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[12]),
        .Q(\M00_AXI_0_arregion[3] [12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[13]),
        .Q(\M00_AXI_0_arregion[3] [13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[14]),
        .Q(\M00_AXI_0_arregion[3] [14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[15]),
        .Q(\M00_AXI_0_arregion[3] [15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[16]),
        .Q(\M00_AXI_0_arregion[3] [16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[17]),
        .Q(\M00_AXI_0_arregion[3] [17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[18]),
        .Q(\M00_AXI_0_arregion[3] [18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[19]),
        .Q(\M00_AXI_0_arregion[3] [19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[1]),
        .Q(\M00_AXI_0_arregion[3] [1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[20]),
        .Q(\M00_AXI_0_arregion[3] [20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[21]),
        .Q(\M00_AXI_0_arregion[3] [21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[22]),
        .Q(\M00_AXI_0_arregion[3] [22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[23]),
        .Q(\M00_AXI_0_arregion[3] [23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[24]),
        .Q(\M00_AXI_0_arregion[3] [24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[25]),
        .Q(\M00_AXI_0_arregion[3] [25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[26]),
        .Q(\M00_AXI_0_arregion[3] [26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[27]),
        .Q(\M00_AXI_0_arregion[3] [27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[28]),
        .Q(\M00_AXI_0_arregion[3] [28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[29]),
        .Q(\M00_AXI_0_arregion[3] [29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[2]),
        .Q(\M00_AXI_0_arregion[3] [2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[30]),
        .Q(\M00_AXI_0_arregion[3] [30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[31]),
        .Q(\M00_AXI_0_arregion[3] [31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[32]),
        .Q(\M00_AXI_0_arregion[3] [32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[33]),
        .Q(\M00_AXI_0_arregion[3] [33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[34]),
        .Q(\M00_AXI_0_arregion[3] [34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[35]),
        .Q(\M00_AXI_0_arregion[3] [35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[36]),
        .Q(\M00_AXI_0_arregion[3] [36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[37]),
        .Q(\M00_AXI_0_arregion[3] [37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[38]),
        .Q(\M00_AXI_0_arregion[3] [38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[39]),
        .Q(\M00_AXI_0_arregion[3] [39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[3]),
        .Q(\M00_AXI_0_arregion[3] [3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[40]),
        .Q(\M00_AXI_0_arregion[3] [40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[41]),
        .Q(\M00_AXI_0_arregion[3] [41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[42]),
        .Q(\M00_AXI_0_arregion[3] [42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[43]),
        .Q(\M00_AXI_0_arregion[3] [43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[44]),
        .Q(\M00_AXI_0_arregion[3] [44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[45]),
        .Q(\M00_AXI_0_arregion[3] [45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[46]),
        .Q(\M00_AXI_0_arregion[3] [46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[47]),
        .Q(\M00_AXI_0_arregion[3] [47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[48]),
        .Q(\M00_AXI_0_arregion[3] [48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[49]),
        .Q(\M00_AXI_0_arregion[3] [49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[4]),
        .Q(\M00_AXI_0_arregion[3] [4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[50]),
        .Q(\M00_AXI_0_arregion[3] [50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[51]),
        .Q(\M00_AXI_0_arregion[3] [51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[52]),
        .Q(\M00_AXI_0_arregion[3] [52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[53]),
        .Q(\M00_AXI_0_arregion[3] [53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[54]),
        .Q(\M00_AXI_0_arregion[3] [54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[55]),
        .Q(\M00_AXI_0_arregion[3] [55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[56]),
        .Q(\M00_AXI_0_arregion[3] [56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[57]),
        .Q(\M00_AXI_0_arregion[3] [57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[58]),
        .Q(\M00_AXI_0_arregion[3] [58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[59]),
        .Q(\M00_AXI_0_arregion[3] [59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[5]),
        .Q(\M00_AXI_0_arregion[3] [5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[60]),
        .Q(\M00_AXI_0_arregion[3] [60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[61]),
        .Q(\M00_AXI_0_arregion[3] [61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[6]),
        .Q(\M00_AXI_0_arregion[3] [6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[7]),
        .Q(\M00_AXI_0_arregion[3] [7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[8]),
        .Q(\M00_AXI_0_arregion[3] [8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1__0_n_0 ),
        .D(UNCONN_IN[9]),
        .Q(\M00_AXI_0_arregion[3] [9]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_1__0
       (.I0(s_axi_arvalid),
        .I1(s_axi_arready),
        .I2(m_axi_arready),
        .O(m_valid_i_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1__0_n_0),
        .Q(m_axi_arvalid),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_1__3
       (.I0(s_axi_arvalid),
        .I1(m_axi_arvalid),
        .I2(m_axi_arready),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(s_ready_i_i_1__3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__3_n_0),
        .Q(s_axi_arready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice_37
   (m_axi_awvalid,
    s_axi_awready,
    p_1_in,
    \aresetn_d_reg[1] ,
    Q,
    \aresetn_d_reg[1]_0 ,
    aclk,
    aresetn,
    s_axi_awvalid,
    m_axi_awready,
    \aresetn_d_reg[1]_1 ,
    D);
  output m_axi_awvalid;
  output s_axi_awready;
  output p_1_in;
  output \aresetn_d_reg[1] ;
  output [61:0]Q;
  input \aresetn_d_reg[1]_0 ;
  input aclk;
  input aresetn;
  input s_axi_awvalid;
  input m_axi_awready;
  input \aresetn_d_reg[1]_1 ;
  input [61:0]D;

  wire \<const0> ;
  wire \<const1> ;
  wire [61:0]D;
  wire [61:0]Q;
  wire aclk;
  wire aresetn;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire \aresetn_d_reg[1]_1 ;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire \m_payload_i[53]_i_1_n_0 ;
  wire m_valid_i_i_1_n_0;
  wire [1:1]p_0_in;
  wire p_1_in;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_ready_i_i_2_n_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT2 #(
    .INIT(4'h8)) 
    \aresetn_d[1]_i_1 
       (.I0(p_0_in),
        .I1(aresetn),
        .O(\aresetn_d_reg[1] ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(aresetn),
        .Q(p_0_in),
        .R(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \m_payload_i[53]_i_1 
       (.I0(m_axi_awvalid),
        .O(\m_payload_i[53]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[0]),
        .Q(Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[10]),
        .Q(Q[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[11]),
        .Q(Q[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[12]),
        .Q(Q[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[13]),
        .Q(Q[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[14]),
        .Q(Q[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[15]),
        .Q(Q[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[16]),
        .Q(Q[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[17]),
        .Q(Q[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[18]),
        .Q(Q[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[19]),
        .Q(Q[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[1]),
        .Q(Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[20]),
        .Q(Q[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[21]),
        .Q(Q[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[22]),
        .Q(Q[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[23]),
        .Q(Q[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[24]),
        .Q(Q[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[25]),
        .Q(Q[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[26]),
        .Q(Q[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[27]),
        .Q(Q[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[28]),
        .Q(Q[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[29]),
        .Q(Q[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[2]),
        .Q(Q[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[30]),
        .Q(Q[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[31]),
        .Q(Q[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[32]),
        .Q(Q[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[33]),
        .Q(Q[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[34]),
        .Q(Q[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[35]),
        .Q(Q[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[36]),
        .Q(Q[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[37]),
        .Q(Q[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[38]),
        .Q(Q[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[39]),
        .Q(Q[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[3]),
        .Q(Q[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[40]),
        .Q(Q[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[41]),
        .Q(Q[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[42]),
        .Q(Q[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[43]),
        .Q(Q[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[44]),
        .Q(Q[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[45]),
        .Q(Q[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[46]),
        .Q(Q[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[47]),
        .Q(Q[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[48]),
        .Q(Q[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[49]),
        .Q(Q[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[4]),
        .Q(Q[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[50]),
        .Q(Q[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[51]),
        .Q(Q[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[52]),
        .Q(Q[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[53]),
        .Q(Q[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[54]),
        .Q(Q[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[55]),
        .Q(Q[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[56]),
        .Q(Q[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[57]),
        .Q(Q[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[58]),
        .Q(Q[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[59]),
        .Q(Q[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[5]),
        .Q(Q[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[60]),
        .Q(Q[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[61]),
        .Q(Q[61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[6]),
        .Q(Q[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[7]),
        .Q(Q[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[8]),
        .Q(Q[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[53]_i_1_n_0 ),
        .D(D[9]),
        .Q(Q[9]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_1
       (.I0(s_axi_awvalid),
        .I1(s_axi_awready),
        .I2(m_axi_awready),
        .O(m_valid_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1_n_0),
        .Q(m_axi_awvalid),
        .R(\aresetn_d_reg[1]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    s_ready_i_i_1__1
       (.I0(p_0_in),
        .O(p_1_in));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_2
       (.I0(s_axi_awvalid),
        .I1(m_axi_awvalid),
        .I2(m_axi_awready),
        .I3(\aresetn_d_reg[1]_1 ),
        .O(s_ready_i_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_2_n_0),
        .Q(s_axi_awready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice_6
   (m_axi_arvalid,
    s_axi_arready,
    UNCONN_OUT,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    s_axi_arvalid,
    m_axi_arready,
    \aresetn_d_reg[1]_0 ,
    \S00_AXI_0_arregion[3] );
  output m_axi_arvalid;
  output s_axi_arready;
  output [60:0]UNCONN_OUT;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input s_axi_arvalid;
  input m_axi_arready;
  input \aresetn_d_reg[1]_0 ;
  input [60:0]\S00_AXI_0_arregion[3] ;

  wire \<const0> ;
  wire \<const1> ;
  wire [60:0]\S00_AXI_0_arregion[3] ;
  wire [60:0]UNCONN_OUT;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire \m_payload_i[31]_i_1__0_n_0 ;
  wire m_valid_i_i_1__0_n_0;
  wire p_1_in;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire s_ready_i_i_1__3_n_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT1 #(
    .INIT(2'h1)) 
    \m_payload_i[31]_i_1__0 
       (.I0(m_axi_arvalid),
        .O(\m_payload_i[31]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [0]),
        .Q(UNCONN_OUT[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [10]),
        .Q(UNCONN_OUT[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [11]),
        .Q(UNCONN_OUT[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [12]),
        .Q(UNCONN_OUT[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [13]),
        .Q(UNCONN_OUT[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [14]),
        .Q(UNCONN_OUT[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [15]),
        .Q(UNCONN_OUT[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [16]),
        .Q(UNCONN_OUT[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [17]),
        .Q(UNCONN_OUT[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [18]),
        .Q(UNCONN_OUT[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [19]),
        .Q(UNCONN_OUT[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [1]),
        .Q(UNCONN_OUT[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [20]),
        .Q(UNCONN_OUT[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [21]),
        .Q(UNCONN_OUT[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [22]),
        .Q(UNCONN_OUT[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [23]),
        .Q(UNCONN_OUT[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [24]),
        .Q(UNCONN_OUT[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [25]),
        .Q(UNCONN_OUT[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [26]),
        .Q(UNCONN_OUT[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [27]),
        .Q(UNCONN_OUT[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [28]),
        .Q(UNCONN_OUT[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [29]),
        .Q(UNCONN_OUT[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [2]),
        .Q(UNCONN_OUT[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [30]),
        .Q(UNCONN_OUT[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [31]),
        .Q(UNCONN_OUT[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [32]),
        .Q(UNCONN_OUT[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [33]),
        .Q(UNCONN_OUT[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [34]),
        .Q(UNCONN_OUT[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [35]),
        .Q(UNCONN_OUT[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [36]),
        .Q(UNCONN_OUT[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [37]),
        .Q(UNCONN_OUT[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [38]),
        .Q(UNCONN_OUT[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [39]),
        .Q(UNCONN_OUT[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [3]),
        .Q(UNCONN_OUT[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [40]),
        .Q(UNCONN_OUT[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [41]),
        .Q(UNCONN_OUT[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [42]),
        .Q(UNCONN_OUT[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [43]),
        .Q(UNCONN_OUT[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [44]),
        .Q(UNCONN_OUT[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [45]),
        .Q(UNCONN_OUT[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [46]),
        .Q(UNCONN_OUT[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [47]),
        .Q(UNCONN_OUT[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [48]),
        .Q(UNCONN_OUT[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [49]),
        .Q(UNCONN_OUT[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [4]),
        .Q(UNCONN_OUT[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [50]),
        .Q(UNCONN_OUT[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [51]),
        .Q(UNCONN_OUT[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [52]),
        .Q(UNCONN_OUT[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [53]),
        .Q(UNCONN_OUT[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [54]),
        .Q(UNCONN_OUT[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [55]),
        .Q(UNCONN_OUT[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [56]),
        .Q(UNCONN_OUT[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [57]),
        .Q(UNCONN_OUT[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [58]),
        .Q(UNCONN_OUT[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [5]),
        .Q(UNCONN_OUT[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [59]),
        .Q(UNCONN_OUT[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [60]),
        .Q(UNCONN_OUT[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [6]),
        .Q(UNCONN_OUT[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [7]),
        .Q(UNCONN_OUT[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [8]),
        .Q(UNCONN_OUT[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__0_n_0 ),
        .D(\S00_AXI_0_arregion[3] [9]),
        .Q(UNCONN_OUT[9]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_1__0
       (.I0(s_axi_arvalid),
        .I1(s_axi_arready),
        .I2(m_axi_arready),
        .O(m_valid_i_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1__0_n_0),
        .Q(m_axi_arvalid),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_1__3
       (.I0(s_axi_arvalid),
        .I1(m_axi_arvalid),
        .I2(m_axi_arready),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(s_ready_i_i_1__3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__3_n_0),
        .Q(s_axi_arready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice_7
   (m_axi_awvalid,
    s_axi_awready,
    p_1_in,
    \aresetn_d_reg[1] ,
    Q,
    \aresetn_d_reg[1]_0 ,
    aclk,
    aresetn,
    s_axi_awvalid,
    m_axi_awready,
    \aresetn_d_reg[1]_1 ,
    D);
  output m_axi_awvalid;
  output s_axi_awready;
  output p_1_in;
  output \aresetn_d_reg[1] ;
  output [60:0]Q;
  input \aresetn_d_reg[1]_0 ;
  input aclk;
  input aresetn;
  input s_axi_awvalid;
  input m_axi_awready;
  input \aresetn_d_reg[1]_1 ;
  input [60:0]D;

  wire \<const0> ;
  wire \<const1> ;
  wire [60:0]D;
  wire [60:0]Q;
  wire aclk;
  wire aresetn;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire \aresetn_d_reg[1]_1 ;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire \m_payload_i[31]_i_1_n_0 ;
  wire m_valid_i_i_1_n_0;
  wire [1:1]p_0_in;
  wire p_1_in;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_ready_i_i_2_n_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT2 #(
    .INIT(4'h8)) 
    \aresetn_d[1]_i_1 
       (.I0(p_0_in),
        .I1(aresetn),
        .O(\aresetn_d_reg[1] ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(aresetn),
        .Q(p_0_in),
        .R(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \m_payload_i[31]_i_1 
       (.I0(m_axi_awvalid),
        .O(\m_payload_i[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[0]),
        .Q(Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[10]),
        .Q(Q[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[11]),
        .Q(Q[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[12]),
        .Q(Q[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[13]),
        .Q(Q[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[14]),
        .Q(Q[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[15]),
        .Q(Q[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[16]),
        .Q(Q[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[17]),
        .Q(Q[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[18]),
        .Q(Q[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[19]),
        .Q(Q[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[1]),
        .Q(Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[20]),
        .Q(Q[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[21]),
        .Q(Q[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[22]),
        .Q(Q[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[23]),
        .Q(Q[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[24]),
        .Q(Q[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[25]),
        .Q(Q[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[26]),
        .Q(Q[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[27]),
        .Q(Q[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[28]),
        .Q(Q[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[29]),
        .Q(Q[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[2]),
        .Q(Q[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[30]),
        .Q(Q[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[31]),
        .Q(Q[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[32]),
        .Q(Q[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[33]),
        .Q(Q[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[34]),
        .Q(Q[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[35]),
        .Q(Q[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[36]),
        .Q(Q[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[37]),
        .Q(Q[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[38]),
        .Q(Q[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[39]),
        .Q(Q[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[3]),
        .Q(Q[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[40]),
        .Q(Q[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[41]),
        .Q(Q[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[42]),
        .Q(Q[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[43]),
        .Q(Q[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[44]),
        .Q(Q[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[45]),
        .Q(Q[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[46]),
        .Q(Q[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[47]),
        .Q(Q[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[48]),
        .Q(Q[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[49]),
        .Q(Q[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[4]),
        .Q(Q[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[50]),
        .Q(Q[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[51]),
        .Q(Q[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[52]),
        .Q(Q[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[53]),
        .Q(Q[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[54]),
        .Q(Q[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[55]),
        .Q(Q[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[56]),
        .Q(Q[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[57]),
        .Q(Q[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[58]),
        .Q(Q[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[5]),
        .Q(Q[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[59]),
        .Q(Q[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[60]),
        .Q(Q[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[6]),
        .Q(Q[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[7]),
        .Q(Q[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[8]),
        .Q(Q[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1_n_0 ),
        .D(D[9]),
        .Q(Q[9]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_1
       (.I0(s_axi_awvalid),
        .I1(s_axi_awready),
        .I2(m_axi_awready),
        .O(m_valid_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1_n_0),
        .Q(m_axi_awvalid),
        .R(\aresetn_d_reg[1]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    s_ready_i_i_1__1
       (.I0(p_0_in),
        .O(p_1_in));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_2
       (.I0(s_axi_awvalid),
        .I1(m_axi_awvalid),
        .I2(m_axi_awready),
        .I3(\aresetn_d_reg[1]_1 ),
        .O(s_ready_i_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_2_n_0),
        .Q(s_axi_awready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized0
   (\m_payload_i_reg[72]_0 ,
    \skid_buffer_reg[0]_0 ,
    Q,
    s_axi_wvalid,
    m_axi_wready,
    aresetn,
    aclk,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata);
  output \m_payload_i_reg[72]_0 ;
  output \skid_buffer_reg[0]_0 ;
  output [72:0]Q;
  input s_axi_wvalid;
  input m_axi_wready;
  input aresetn;
  input aclk;
  input s_axi_wlast;
  input [7:0]s_axi_wstrb;
  input [63:0]s_axi_wdata;

  wire \<const0> ;
  wire \<const1> ;
  wire [72:0]Q;
  wire aclk;
  wire aresetn;
  wire \aresetn_d[1]_i_1_n_0 ;
  wire \aresetn_d_reg_n_0_[1] ;
  wire m_axi_wready;
  wire \m_payload_i[63]_i_1_n_0 ;
  wire \m_payload_i_reg[72]_0 ;
  wire m_valid_i_i_1_n_0;
  wire [1:1]p_0_in;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire s_ready_i_i_1_n_0;
  wire [72:0]skid_buffer;
  wire \skid_buffer_reg[0]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[37] ;
  wire \skid_buffer_reg_n_0_[38] ;
  wire \skid_buffer_reg_n_0_[39] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[40] ;
  wire \skid_buffer_reg_n_0_[41] ;
  wire \skid_buffer_reg_n_0_[42] ;
  wire \skid_buffer_reg_n_0_[43] ;
  wire \skid_buffer_reg_n_0_[44] ;
  wire \skid_buffer_reg_n_0_[45] ;
  wire \skid_buffer_reg_n_0_[46] ;
  wire \skid_buffer_reg_n_0_[47] ;
  wire \skid_buffer_reg_n_0_[48] ;
  wire \skid_buffer_reg_n_0_[49] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[50] ;
  wire \skid_buffer_reg_n_0_[51] ;
  wire \skid_buffer_reg_n_0_[52] ;
  wire \skid_buffer_reg_n_0_[53] ;
  wire \skid_buffer_reg_n_0_[54] ;
  wire \skid_buffer_reg_n_0_[55] ;
  wire \skid_buffer_reg_n_0_[56] ;
  wire \skid_buffer_reg_n_0_[57] ;
  wire \skid_buffer_reg_n_0_[58] ;
  wire \skid_buffer_reg_n_0_[59] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[60] ;
  wire \skid_buffer_reg_n_0_[61] ;
  wire \skid_buffer_reg_n_0_[62] ;
  wire \skid_buffer_reg_n_0_[63] ;
  wire \skid_buffer_reg_n_0_[64] ;
  wire \skid_buffer_reg_n_0_[65] ;
  wire \skid_buffer_reg_n_0_[66] ;
  wire \skid_buffer_reg_n_0_[67] ;
  wire \skid_buffer_reg_n_0_[68] ;
  wire \skid_buffer_reg_n_0_[69] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[70] ;
  wire \skid_buffer_reg_n_0_[71] ;
  wire \skid_buffer_reg_n_0_[72] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT2 #(
    .INIT(4'h8)) 
    \aresetn_d[1]_i_1 
       (.I0(p_0_in),
        .I1(aresetn),
        .O(\aresetn_d[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(aresetn),
        .Q(p_0_in),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\aresetn_d[1]_i_1_n_0 ),
        .Q(\aresetn_d_reg_n_0_[1] ),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair614" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(\skid_buffer_reg_n_0_[0] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[0]));
  (* SOFT_HLUTNM = "soft_lutpair619" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[10]_i_1 
       (.I0(s_axi_wdata[10]),
        .I1(\skid_buffer_reg_n_0_[10] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[10]));
  (* SOFT_HLUTNM = "soft_lutpair620" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[11]_i_1 
       (.I0(s_axi_wdata[11]),
        .I1(\skid_buffer_reg_n_0_[11] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[11]));
  (* SOFT_HLUTNM = "soft_lutpair620" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[12]_i_1 
       (.I0(s_axi_wdata[12]),
        .I1(\skid_buffer_reg_n_0_[12] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[12]));
  (* SOFT_HLUTNM = "soft_lutpair621" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[13]_i_1 
       (.I0(s_axi_wdata[13]),
        .I1(\skid_buffer_reg_n_0_[13] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[13]));
  (* SOFT_HLUTNM = "soft_lutpair621" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[14]_i_1 
       (.I0(s_axi_wdata[14]),
        .I1(\skid_buffer_reg_n_0_[14] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[14]));
  (* SOFT_HLUTNM = "soft_lutpair622" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[15]_i_1 
       (.I0(s_axi_wdata[15]),
        .I1(\skid_buffer_reg_n_0_[15] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[15]));
  (* SOFT_HLUTNM = "soft_lutpair622" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[16]_i_1 
       (.I0(s_axi_wdata[16]),
        .I1(\skid_buffer_reg_n_0_[16] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[16]));
  (* SOFT_HLUTNM = "soft_lutpair623" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[17]_i_1 
       (.I0(s_axi_wdata[17]),
        .I1(\skid_buffer_reg_n_0_[17] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[17]));
  (* SOFT_HLUTNM = "soft_lutpair623" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[18]_i_1 
       (.I0(s_axi_wdata[18]),
        .I1(\skid_buffer_reg_n_0_[18] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[18]));
  (* SOFT_HLUTNM = "soft_lutpair624" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[19]_i_1 
       (.I0(s_axi_wdata[19]),
        .I1(\skid_buffer_reg_n_0_[19] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[19]));
  (* SOFT_HLUTNM = "soft_lutpair615" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(\skid_buffer_reg_n_0_[1] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[1]));
  (* SOFT_HLUTNM = "soft_lutpair624" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[20]_i_1 
       (.I0(s_axi_wdata[20]),
        .I1(\skid_buffer_reg_n_0_[20] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[20]));
  (* SOFT_HLUTNM = "soft_lutpair625" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[21]_i_1 
       (.I0(s_axi_wdata[21]),
        .I1(\skid_buffer_reg_n_0_[21] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[21]));
  (* SOFT_HLUTNM = "soft_lutpair625" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[22]_i_1 
       (.I0(s_axi_wdata[22]),
        .I1(\skid_buffer_reg_n_0_[22] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[22]));
  (* SOFT_HLUTNM = "soft_lutpair626" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[23]_i_1 
       (.I0(s_axi_wdata[23]),
        .I1(\skid_buffer_reg_n_0_[23] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[23]));
  (* SOFT_HLUTNM = "soft_lutpair626" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[24]_i_1 
       (.I0(s_axi_wdata[24]),
        .I1(\skid_buffer_reg_n_0_[24] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[24]));
  (* SOFT_HLUTNM = "soft_lutpair627" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[25]_i_1 
       (.I0(s_axi_wdata[25]),
        .I1(\skid_buffer_reg_n_0_[25] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[25]));
  (* SOFT_HLUTNM = "soft_lutpair627" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[26]_i_1 
       (.I0(s_axi_wdata[26]),
        .I1(\skid_buffer_reg_n_0_[26] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[26]));
  (* SOFT_HLUTNM = "soft_lutpair628" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[27]_i_1 
       (.I0(s_axi_wdata[27]),
        .I1(\skid_buffer_reg_n_0_[27] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[27]));
  (* SOFT_HLUTNM = "soft_lutpair628" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[28]_i_1 
       (.I0(s_axi_wdata[28]),
        .I1(\skid_buffer_reg_n_0_[28] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[28]));
  (* SOFT_HLUTNM = "soft_lutpair629" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[29]_i_1 
       (.I0(s_axi_wdata[29]),
        .I1(\skid_buffer_reg_n_0_[29] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[29]));
  (* SOFT_HLUTNM = "soft_lutpair615" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[2]_i_1 
       (.I0(s_axi_wdata[2]),
        .I1(\skid_buffer_reg_n_0_[2] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[2]));
  (* SOFT_HLUTNM = "soft_lutpair629" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[30]_i_1 
       (.I0(s_axi_wdata[30]),
        .I1(\skid_buffer_reg_n_0_[30] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[30]));
  (* SOFT_HLUTNM = "soft_lutpair630" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[31]_i_1 
       (.I0(s_axi_wdata[31]),
        .I1(\skid_buffer_reg_n_0_[31] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[31]));
  (* SOFT_HLUTNM = "soft_lutpair630" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[32]_i_1 
       (.I0(s_axi_wdata[32]),
        .I1(\skid_buffer_reg_n_0_[32] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[32]));
  (* SOFT_HLUTNM = "soft_lutpair631" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[33]_i_1 
       (.I0(s_axi_wdata[33]),
        .I1(\skid_buffer_reg_n_0_[33] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[33]));
  (* SOFT_HLUTNM = "soft_lutpair631" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[34]_i_1 
       (.I0(s_axi_wdata[34]),
        .I1(\skid_buffer_reg_n_0_[34] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[34]));
  (* SOFT_HLUTNM = "soft_lutpair614" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[35]_i_1 
       (.I0(s_axi_wdata[35]),
        .I1(\skid_buffer_reg_n_0_[35] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[35]));
  (* SOFT_HLUTNM = "soft_lutpair632" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[36]_i_1 
       (.I0(s_axi_wdata[36]),
        .I1(\skid_buffer_reg_n_0_[36] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[36]));
  (* SOFT_HLUTNM = "soft_lutpair632" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[37]_i_1 
       (.I0(s_axi_wdata[37]),
        .I1(\skid_buffer_reg_n_0_[37] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[37]));
  (* SOFT_HLUTNM = "soft_lutpair633" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[38]_i_1 
       (.I0(s_axi_wdata[38]),
        .I1(\skid_buffer_reg_n_0_[38] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[38]));
  (* SOFT_HLUTNM = "soft_lutpair634" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[39]_i_1 
       (.I0(s_axi_wdata[39]),
        .I1(\skid_buffer_reg_n_0_[39] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[39]));
  (* SOFT_HLUTNM = "soft_lutpair616" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[3]_i_1 
       (.I0(s_axi_wdata[3]),
        .I1(\skid_buffer_reg_n_0_[3] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[3]));
  (* SOFT_HLUTNM = "soft_lutpair634" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[40]_i_1 
       (.I0(s_axi_wdata[40]),
        .I1(\skid_buffer_reg_n_0_[40] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[40]));
  (* SOFT_HLUTNM = "soft_lutpair635" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[41]_i_1 
       (.I0(s_axi_wdata[41]),
        .I1(\skid_buffer_reg_n_0_[41] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[41]));
  (* SOFT_HLUTNM = "soft_lutpair635" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[42]_i_1 
       (.I0(s_axi_wdata[42]),
        .I1(\skid_buffer_reg_n_0_[42] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[42]));
  (* SOFT_HLUTNM = "soft_lutpair636" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[43]_i_1 
       (.I0(s_axi_wdata[43]),
        .I1(\skid_buffer_reg_n_0_[43] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[43]));
  (* SOFT_HLUTNM = "soft_lutpair636" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[44]_i_1 
       (.I0(s_axi_wdata[44]),
        .I1(\skid_buffer_reg_n_0_[44] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[44]));
  (* SOFT_HLUTNM = "soft_lutpair637" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[45]_i_1 
       (.I0(s_axi_wdata[45]),
        .I1(\skid_buffer_reg_n_0_[45] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[45]));
  (* SOFT_HLUTNM = "soft_lutpair637" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[46]_i_1 
       (.I0(s_axi_wdata[46]),
        .I1(\skid_buffer_reg_n_0_[46] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[46]));
  (* SOFT_HLUTNM = "soft_lutpair638" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[47]_i_1 
       (.I0(s_axi_wdata[47]),
        .I1(\skid_buffer_reg_n_0_[47] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[47]));
  (* SOFT_HLUTNM = "soft_lutpair638" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[48]_i_1 
       (.I0(s_axi_wdata[48]),
        .I1(\skid_buffer_reg_n_0_[48] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[48]));
  (* SOFT_HLUTNM = "soft_lutpair639" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[49]_i_1 
       (.I0(s_axi_wdata[49]),
        .I1(\skid_buffer_reg_n_0_[49] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[49]));
  (* SOFT_HLUTNM = "soft_lutpair616" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[4]_i_1 
       (.I0(s_axi_wdata[4]),
        .I1(\skid_buffer_reg_n_0_[4] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[4]));
  (* SOFT_HLUTNM = "soft_lutpair639" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[50]_i_1 
       (.I0(s_axi_wdata[50]),
        .I1(\skid_buffer_reg_n_0_[50] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[50]));
  (* SOFT_HLUTNM = "soft_lutpair640" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[51]_i_1 
       (.I0(s_axi_wdata[51]),
        .I1(\skid_buffer_reg_n_0_[51] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[51]));
  (* SOFT_HLUTNM = "soft_lutpair640" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[52]_i_1 
       (.I0(s_axi_wdata[52]),
        .I1(\skid_buffer_reg_n_0_[52] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[52]));
  (* SOFT_HLUTNM = "soft_lutpair641" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[53]_i_1 
       (.I0(s_axi_wdata[53]),
        .I1(\skid_buffer_reg_n_0_[53] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[53]));
  (* SOFT_HLUTNM = "soft_lutpair633" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[54]_i_1 
       (.I0(s_axi_wdata[54]),
        .I1(\skid_buffer_reg_n_0_[54] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[54]));
  (* SOFT_HLUTNM = "soft_lutpair641" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[55]_i_1 
       (.I0(s_axi_wdata[55]),
        .I1(\skid_buffer_reg_n_0_[55] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[55]));
  (* SOFT_HLUTNM = "soft_lutpair642" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[56]_i_1 
       (.I0(s_axi_wdata[56]),
        .I1(\skid_buffer_reg_n_0_[56] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[56]));
  (* SOFT_HLUTNM = "soft_lutpair643" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[57]_i_1 
       (.I0(s_axi_wdata[57]),
        .I1(\skid_buffer_reg_n_0_[57] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[57]));
  (* SOFT_HLUTNM = "soft_lutpair643" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[58]_i_1 
       (.I0(s_axi_wdata[58]),
        .I1(\skid_buffer_reg_n_0_[58] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[58]));
  (* SOFT_HLUTNM = "soft_lutpair644" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[59]_i_1 
       (.I0(s_axi_wdata[59]),
        .I1(\skid_buffer_reg_n_0_[59] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[59]));
  (* SOFT_HLUTNM = "soft_lutpair617" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[5]_i_1 
       (.I0(s_axi_wdata[5]),
        .I1(\skid_buffer_reg_n_0_[5] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[5]));
  (* SOFT_HLUTNM = "soft_lutpair644" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[60]_i_1 
       (.I0(s_axi_wdata[60]),
        .I1(\skid_buffer_reg_n_0_[60] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[60]));
  (* SOFT_HLUTNM = "soft_lutpair645" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[61]_i_1 
       (.I0(s_axi_wdata[61]),
        .I1(\skid_buffer_reg_n_0_[61] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[61]));
  (* SOFT_HLUTNM = "soft_lutpair645" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[62]_i_1 
       (.I0(s_axi_wdata[62]),
        .I1(\skid_buffer_reg_n_0_[62] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[62]));
  LUT2 #(
    .INIT(4'hB)) 
    \m_payload_i[63]_i_1 
       (.I0(m_axi_wready),
        .I1(\m_payload_i_reg[72]_0 ),
        .O(\m_payload_i[63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair646" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[63]_i_2 
       (.I0(s_axi_wdata[63]),
        .I1(\skid_buffer_reg_n_0_[63] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[63]));
  (* SOFT_HLUTNM = "soft_lutpair642" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[64]_i_1 
       (.I0(s_axi_wstrb[0]),
        .I1(\skid_buffer_reg_n_0_[64] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[64]));
  (* SOFT_HLUTNM = "soft_lutpair646" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[65]_i_1 
       (.I0(s_axi_wstrb[1]),
        .I1(\skid_buffer_reg_n_0_[65] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[65]));
  (* SOFT_HLUTNM = "soft_lutpair647" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[66]_i_1 
       (.I0(s_axi_wstrb[2]),
        .I1(\skid_buffer_reg_n_0_[66] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[66]));
  (* SOFT_HLUTNM = "soft_lutpair648" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[67]_i_1 
       (.I0(s_axi_wstrb[3]),
        .I1(\skid_buffer_reg_n_0_[67] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[67]));
  (* SOFT_HLUTNM = "soft_lutpair648" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[68]_i_1 
       (.I0(s_axi_wstrb[4]),
        .I1(\skid_buffer_reg_n_0_[68] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[68]));
  (* SOFT_HLUTNM = "soft_lutpair647" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[69]_i_1 
       (.I0(s_axi_wstrb[5]),
        .I1(\skid_buffer_reg_n_0_[69] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[69]));
  (* SOFT_HLUTNM = "soft_lutpair617" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[6]_i_1 
       (.I0(s_axi_wdata[6]),
        .I1(\skid_buffer_reg_n_0_[6] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[6]));
  (* SOFT_HLUTNM = "soft_lutpair649" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[70]_i_1 
       (.I0(s_axi_wstrb[6]),
        .I1(\skid_buffer_reg_n_0_[70] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[70]));
  (* SOFT_HLUTNM = "soft_lutpair649" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[71]_i_1 
       (.I0(s_axi_wstrb[7]),
        .I1(\skid_buffer_reg_n_0_[71] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[71]));
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[72]_i_1 
       (.I0(s_axi_wlast),
        .I1(\skid_buffer_reg_n_0_[72] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[72]));
  (* SOFT_HLUTNM = "soft_lutpair618" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[7]_i_1 
       (.I0(s_axi_wdata[7]),
        .I1(\skid_buffer_reg_n_0_[7] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[7]));
  (* SOFT_HLUTNM = "soft_lutpair618" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[8]_i_1 
       (.I0(s_axi_wdata[8]),
        .I1(\skid_buffer_reg_n_0_[8] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[8]));
  (* SOFT_HLUTNM = "soft_lutpair619" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[9]_i_1 
       (.I0(s_axi_wdata[9]),
        .I1(\skid_buffer_reg_n_0_[9] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[9]));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[0]),
        .Q(Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[10]),
        .Q(Q[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[11]),
        .Q(Q[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[12]),
        .Q(Q[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[13]),
        .Q(Q[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[14]),
        .Q(Q[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[15]),
        .Q(Q[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[16]),
        .Q(Q[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[17]),
        .Q(Q[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[18]),
        .Q(Q[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[19]),
        .Q(Q[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[1]),
        .Q(Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[20]),
        .Q(Q[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[21]),
        .Q(Q[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[22]),
        .Q(Q[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[23]),
        .Q(Q[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[24]),
        .Q(Q[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[25]),
        .Q(Q[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[26]),
        .Q(Q[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[27]),
        .Q(Q[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[28]),
        .Q(Q[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[29]),
        .Q(Q[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[2]),
        .Q(Q[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[30]),
        .Q(Q[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[31]),
        .Q(Q[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[32]),
        .Q(Q[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[33]),
        .Q(Q[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[34]),
        .Q(Q[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[35]),
        .Q(Q[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[36]),
        .Q(Q[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[37]),
        .Q(Q[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[38]),
        .Q(Q[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[39]),
        .Q(Q[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[3]),
        .Q(Q[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[40]),
        .Q(Q[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[41]),
        .Q(Q[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[42]),
        .Q(Q[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[43]),
        .Q(Q[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[44]),
        .Q(Q[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[45]),
        .Q(Q[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[46]),
        .Q(Q[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[47]),
        .Q(Q[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[48]),
        .Q(Q[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[49]),
        .Q(Q[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[4]),
        .Q(Q[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[50]),
        .Q(Q[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[51]),
        .Q(Q[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[52]),
        .Q(Q[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[53]),
        .Q(Q[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[54]),
        .Q(Q[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[55]),
        .Q(Q[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[56]),
        .Q(Q[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[57]),
        .Q(Q[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[58]),
        .Q(Q[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[59]),
        .Q(Q[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[5]),
        .Q(Q[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[60]),
        .Q(Q[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[61]),
        .Q(Q[61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[62] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[62]),
        .Q(Q[62]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[63] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[63]),
        .Q(Q[63]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[64] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[64]),
        .Q(Q[64]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[65] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[65]),
        .Q(Q[65]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[66] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[66]),
        .Q(Q[66]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[67] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[67]),
        .Q(Q[67]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[68] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[68]),
        .Q(Q[68]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[69] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[69]),
        .Q(Q[69]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[6]),
        .Q(Q[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[70] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[70]),
        .Q(Q[70]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[71] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[71]),
        .Q(Q[71]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[72] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[72]),
        .Q(Q[72]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[7]),
        .Q(Q[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[8]),
        .Q(Q[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[9]),
        .Q(Q[9]),
        .R(\<const0> ));
  LUT5 #(
    .INIT(32'h8A88AAAA)) 
    m_valid_i_i_1
       (.I0(\aresetn_d_reg_n_0_[1] ),
        .I1(s_axi_wvalid),
        .I2(m_axi_wready),
        .I3(\m_payload_i_reg[72]_0 ),
        .I4(\skid_buffer_reg[0]_0 ),
        .O(m_valid_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1_n_0),
        .Q(\m_payload_i_reg[72]_0 ),
        .R(\<const0> ));
  LUT5 #(
    .INIT(32'hAA08AAAA)) 
    s_ready_i_i_1
       (.I0(p_0_in),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(s_axi_wvalid),
        .I3(m_axi_wready),
        .I4(\m_payload_i_reg[72]_0 ),
        .O(s_ready_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1_n_0),
        .Q(\skid_buffer_reg[0]_0 ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[32]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[33]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[34]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[35]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[36]),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[37] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[37]),
        .Q(\skid_buffer_reg_n_0_[37] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[38] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[38]),
        .Q(\skid_buffer_reg_n_0_[38] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[39] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[39]),
        .Q(\skid_buffer_reg_n_0_[39] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[40] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[40]),
        .Q(\skid_buffer_reg_n_0_[40] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[41] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[41]),
        .Q(\skid_buffer_reg_n_0_[41] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[42] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[42]),
        .Q(\skid_buffer_reg_n_0_[42] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[43] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[43]),
        .Q(\skid_buffer_reg_n_0_[43] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[44] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[44]),
        .Q(\skid_buffer_reg_n_0_[44] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[45] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[45]),
        .Q(\skid_buffer_reg_n_0_[45] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[46] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[46]),
        .Q(\skid_buffer_reg_n_0_[46] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[47] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[47]),
        .Q(\skid_buffer_reg_n_0_[47] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[48] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[48]),
        .Q(\skid_buffer_reg_n_0_[48] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[49] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[49]),
        .Q(\skid_buffer_reg_n_0_[49] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[50] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[50]),
        .Q(\skid_buffer_reg_n_0_[50] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[51] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[51]),
        .Q(\skid_buffer_reg_n_0_[51] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[52] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[52]),
        .Q(\skid_buffer_reg_n_0_[52] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[53] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[53]),
        .Q(\skid_buffer_reg_n_0_[53] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[54] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[54]),
        .Q(\skid_buffer_reg_n_0_[54] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[55] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[55]),
        .Q(\skid_buffer_reg_n_0_[55] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[56] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[56]),
        .Q(\skid_buffer_reg_n_0_[56] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[57] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[57]),
        .Q(\skid_buffer_reg_n_0_[57] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[58] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[58]),
        .Q(\skid_buffer_reg_n_0_[58] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[59] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[59]),
        .Q(\skid_buffer_reg_n_0_[59] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[60] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[60]),
        .Q(\skid_buffer_reg_n_0_[60] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[61] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[61]),
        .Q(\skid_buffer_reg_n_0_[61] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[62] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[62]),
        .Q(\skid_buffer_reg_n_0_[62] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[63] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[63]),
        .Q(\skid_buffer_reg_n_0_[63] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[64] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[0]),
        .Q(\skid_buffer_reg_n_0_[64] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[65] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[1]),
        .Q(\skid_buffer_reg_n_0_[65] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[66] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[2]),
        .Q(\skid_buffer_reg_n_0_[66] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[67] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[3]),
        .Q(\skid_buffer_reg_n_0_[67] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[68] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[4]),
        .Q(\skid_buffer_reg_n_0_[68] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[69] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[5]),
        .Q(\skid_buffer_reg_n_0_[69] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[70] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[6]),
        .Q(\skid_buffer_reg_n_0_[70] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[71] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[7]),
        .Q(\skid_buffer_reg_n_0_[71] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[72] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wlast),
        .Q(\skid_buffer_reg_n_0_[72] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized0_10
   (\m_payload_i_reg[72]_0 ,
    m_valid_i_reg_0,
    S00_AXI_0_wready,
    m_valid_i_reg_1,
    \skid_buffer_reg[72]_0 ,
    aclk,
    p_1_in,
    \aresetn_d_reg[0] ,
    m_axi_wready,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata,
    s_axi_wvalid);
  output \m_payload_i_reg[72]_0 ;
  output m_valid_i_reg_0;
  output S00_AXI_0_wready;
  output m_valid_i_reg_1;
  output [72:0]\skid_buffer_reg[72]_0 ;
  input aclk;
  input p_1_in;
  input \aresetn_d_reg[0] ;
  input m_axi_wready;
  input s_axi_wlast;
  input [7:0]s_axi_wstrb;
  input [63:0]s_axi_wdata;
  input s_axi_wvalid;

  wire \<const0> ;
  wire \<const1> ;
  wire S00_AXI_0_wready;
  wire aclk;
  wire \aresetn_d_reg[0] ;
  wire m_axi_wready;
  wire \m_payload_i[63]_i_1_n_0 ;
  wire \m_payload_i_reg[72]_0 ;
  wire m_valid_i0__0;
  wire m_valid_i_reg_0;
  wire m_valid_i_reg_1;
  wire p_1_in;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire s_ready_i0;
  wire [72:0]skid_buffer;
  wire [72:0]\skid_buffer_reg[72]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[37] ;
  wire \skid_buffer_reg_n_0_[38] ;
  wire \skid_buffer_reg_n_0_[39] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[40] ;
  wire \skid_buffer_reg_n_0_[41] ;
  wire \skid_buffer_reg_n_0_[42] ;
  wire \skid_buffer_reg_n_0_[43] ;
  wire \skid_buffer_reg_n_0_[44] ;
  wire \skid_buffer_reg_n_0_[45] ;
  wire \skid_buffer_reg_n_0_[46] ;
  wire \skid_buffer_reg_n_0_[47] ;
  wire \skid_buffer_reg_n_0_[48] ;
  wire \skid_buffer_reg_n_0_[49] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[50] ;
  wire \skid_buffer_reg_n_0_[51] ;
  wire \skid_buffer_reg_n_0_[52] ;
  wire \skid_buffer_reg_n_0_[53] ;
  wire \skid_buffer_reg_n_0_[54] ;
  wire \skid_buffer_reg_n_0_[55] ;
  wire \skid_buffer_reg_n_0_[56] ;
  wire \skid_buffer_reg_n_0_[57] ;
  wire \skid_buffer_reg_n_0_[58] ;
  wire \skid_buffer_reg_n_0_[59] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[60] ;
  wire \skid_buffer_reg_n_0_[61] ;
  wire \skid_buffer_reg_n_0_[62] ;
  wire \skid_buffer_reg_n_0_[63] ;
  wire \skid_buffer_reg_n_0_[64] ;
  wire \skid_buffer_reg_n_0_[65] ;
  wire \skid_buffer_reg_n_0_[66] ;
  wire \skid_buffer_reg_n_0_[67] ;
  wire \skid_buffer_reg_n_0_[68] ;
  wire \skid_buffer_reg_n_0_[69] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[70] ;
  wire \skid_buffer_reg_n_0_[71] ;
  wire \skid_buffer_reg_n_0_[72] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\aresetn_d_reg[0] ),
        .Q(m_valid_i_reg_1),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair578" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(\skid_buffer_reg_n_0_[0] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[0]));
  (* SOFT_HLUTNM = "soft_lutpair583" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[10]_i_1 
       (.I0(s_axi_wdata[10]),
        .I1(\skid_buffer_reg_n_0_[10] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[10]));
  (* SOFT_HLUTNM = "soft_lutpair583" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[11]_i_1 
       (.I0(s_axi_wdata[11]),
        .I1(\skid_buffer_reg_n_0_[11] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[11]));
  (* SOFT_HLUTNM = "soft_lutpair584" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[12]_i_1 
       (.I0(s_axi_wdata[12]),
        .I1(\skid_buffer_reg_n_0_[12] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[12]));
  (* SOFT_HLUTNM = "soft_lutpair584" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[13]_i_1 
       (.I0(s_axi_wdata[13]),
        .I1(\skid_buffer_reg_n_0_[13] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[13]));
  (* SOFT_HLUTNM = "soft_lutpair585" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[14]_i_1 
       (.I0(s_axi_wdata[14]),
        .I1(\skid_buffer_reg_n_0_[14] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[14]));
  (* SOFT_HLUTNM = "soft_lutpair585" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[15]_i_1 
       (.I0(s_axi_wdata[15]),
        .I1(\skid_buffer_reg_n_0_[15] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[15]));
  (* SOFT_HLUTNM = "soft_lutpair586" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[16]_i_1 
       (.I0(s_axi_wdata[16]),
        .I1(\skid_buffer_reg_n_0_[16] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[16]));
  (* SOFT_HLUTNM = "soft_lutpair586" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[17]_i_1 
       (.I0(s_axi_wdata[17]),
        .I1(\skid_buffer_reg_n_0_[17] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[17]));
  (* SOFT_HLUTNM = "soft_lutpair587" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[18]_i_1 
       (.I0(s_axi_wdata[18]),
        .I1(\skid_buffer_reg_n_0_[18] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[18]));
  (* SOFT_HLUTNM = "soft_lutpair587" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[19]_i_1 
       (.I0(s_axi_wdata[19]),
        .I1(\skid_buffer_reg_n_0_[19] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[19]));
  (* SOFT_HLUTNM = "soft_lutpair578" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(\skid_buffer_reg_n_0_[1] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[1]));
  (* SOFT_HLUTNM = "soft_lutpair588" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[20]_i_1 
       (.I0(s_axi_wdata[20]),
        .I1(\skid_buffer_reg_n_0_[20] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[20]));
  (* SOFT_HLUTNM = "soft_lutpair588" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[21]_i_1 
       (.I0(s_axi_wdata[21]),
        .I1(\skid_buffer_reg_n_0_[21] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[21]));
  (* SOFT_HLUTNM = "soft_lutpair589" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[22]_i_1 
       (.I0(s_axi_wdata[22]),
        .I1(\skid_buffer_reg_n_0_[22] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[22]));
  (* SOFT_HLUTNM = "soft_lutpair589" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[23]_i_1 
       (.I0(s_axi_wdata[23]),
        .I1(\skid_buffer_reg_n_0_[23] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[23]));
  (* SOFT_HLUTNM = "soft_lutpair590" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[24]_i_1 
       (.I0(s_axi_wdata[24]),
        .I1(\skid_buffer_reg_n_0_[24] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[24]));
  (* SOFT_HLUTNM = "soft_lutpair590" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[25]_i_1 
       (.I0(s_axi_wdata[25]),
        .I1(\skid_buffer_reg_n_0_[25] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[25]));
  (* SOFT_HLUTNM = "soft_lutpair591" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[26]_i_1 
       (.I0(s_axi_wdata[26]),
        .I1(\skid_buffer_reg_n_0_[26] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[26]));
  (* SOFT_HLUTNM = "soft_lutpair591" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[27]_i_1 
       (.I0(s_axi_wdata[27]),
        .I1(\skid_buffer_reg_n_0_[27] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[27]));
  (* SOFT_HLUTNM = "soft_lutpair592" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[28]_i_1 
       (.I0(s_axi_wdata[28]),
        .I1(\skid_buffer_reg_n_0_[28] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[28]));
  (* SOFT_HLUTNM = "soft_lutpair592" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[29]_i_1 
       (.I0(s_axi_wdata[29]),
        .I1(\skid_buffer_reg_n_0_[29] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[29]));
  (* SOFT_HLUTNM = "soft_lutpair579" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[2]_i_1 
       (.I0(s_axi_wdata[2]),
        .I1(\skid_buffer_reg_n_0_[2] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[2]));
  (* SOFT_HLUTNM = "soft_lutpair593" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[30]_i_1 
       (.I0(s_axi_wdata[30]),
        .I1(\skid_buffer_reg_n_0_[30] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[30]));
  (* SOFT_HLUTNM = "soft_lutpair593" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[31]_i_1 
       (.I0(s_axi_wdata[31]),
        .I1(\skid_buffer_reg_n_0_[31] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[31]));
  (* SOFT_HLUTNM = "soft_lutpair594" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[32]_i_1 
       (.I0(s_axi_wdata[32]),
        .I1(\skid_buffer_reg_n_0_[32] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[32]));
  (* SOFT_HLUTNM = "soft_lutpair594" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[33]_i_1 
       (.I0(s_axi_wdata[33]),
        .I1(\skid_buffer_reg_n_0_[33] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[33]));
  (* SOFT_HLUTNM = "soft_lutpair595" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[34]_i_1 
       (.I0(s_axi_wdata[34]),
        .I1(\skid_buffer_reg_n_0_[34] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[34]));
  (* SOFT_HLUTNM = "soft_lutpair595" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[35]_i_1 
       (.I0(s_axi_wdata[35]),
        .I1(\skid_buffer_reg_n_0_[35] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[35]));
  (* SOFT_HLUTNM = "soft_lutpair596" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[36]_i_1 
       (.I0(s_axi_wdata[36]),
        .I1(\skid_buffer_reg_n_0_[36] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[36]));
  (* SOFT_HLUTNM = "soft_lutpair596" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[37]_i_1 
       (.I0(s_axi_wdata[37]),
        .I1(\skid_buffer_reg_n_0_[37] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[37]));
  (* SOFT_HLUTNM = "soft_lutpair597" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[38]_i_1 
       (.I0(s_axi_wdata[38]),
        .I1(\skid_buffer_reg_n_0_[38] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[38]));
  (* SOFT_HLUTNM = "soft_lutpair597" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[39]_i_1 
       (.I0(s_axi_wdata[39]),
        .I1(\skid_buffer_reg_n_0_[39] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[39]));
  (* SOFT_HLUTNM = "soft_lutpair579" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[3]_i_1 
       (.I0(s_axi_wdata[3]),
        .I1(\skid_buffer_reg_n_0_[3] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[3]));
  (* SOFT_HLUTNM = "soft_lutpair598" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[40]_i_1 
       (.I0(s_axi_wdata[40]),
        .I1(\skid_buffer_reg_n_0_[40] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[40]));
  (* SOFT_HLUTNM = "soft_lutpair598" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[41]_i_1 
       (.I0(s_axi_wdata[41]),
        .I1(\skid_buffer_reg_n_0_[41] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[41]));
  (* SOFT_HLUTNM = "soft_lutpair599" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[42]_i_1 
       (.I0(s_axi_wdata[42]),
        .I1(\skid_buffer_reg_n_0_[42] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[42]));
  (* SOFT_HLUTNM = "soft_lutpair599" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[43]_i_1 
       (.I0(s_axi_wdata[43]),
        .I1(\skid_buffer_reg_n_0_[43] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[43]));
  (* SOFT_HLUTNM = "soft_lutpair600" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[44]_i_1 
       (.I0(s_axi_wdata[44]),
        .I1(\skid_buffer_reg_n_0_[44] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[44]));
  (* SOFT_HLUTNM = "soft_lutpair600" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[45]_i_1 
       (.I0(s_axi_wdata[45]),
        .I1(\skid_buffer_reg_n_0_[45] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[45]));
  (* SOFT_HLUTNM = "soft_lutpair601" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[46]_i_1 
       (.I0(s_axi_wdata[46]),
        .I1(\skid_buffer_reg_n_0_[46] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[46]));
  (* SOFT_HLUTNM = "soft_lutpair601" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[47]_i_1 
       (.I0(s_axi_wdata[47]),
        .I1(\skid_buffer_reg_n_0_[47] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[47]));
  (* SOFT_HLUTNM = "soft_lutpair602" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[48]_i_1 
       (.I0(s_axi_wdata[48]),
        .I1(\skid_buffer_reg_n_0_[48] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[48]));
  (* SOFT_HLUTNM = "soft_lutpair602" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[49]_i_1 
       (.I0(s_axi_wdata[49]),
        .I1(\skid_buffer_reg_n_0_[49] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[49]));
  (* SOFT_HLUTNM = "soft_lutpair580" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[4]_i_1 
       (.I0(s_axi_wdata[4]),
        .I1(\skid_buffer_reg_n_0_[4] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[4]));
  (* SOFT_HLUTNM = "soft_lutpair603" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[50]_i_1 
       (.I0(s_axi_wdata[50]),
        .I1(\skid_buffer_reg_n_0_[50] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[50]));
  (* SOFT_HLUTNM = "soft_lutpair603" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[51]_i_1 
       (.I0(s_axi_wdata[51]),
        .I1(\skid_buffer_reg_n_0_[51] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[51]));
  (* SOFT_HLUTNM = "soft_lutpair604" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[52]_i_1 
       (.I0(s_axi_wdata[52]),
        .I1(\skid_buffer_reg_n_0_[52] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[52]));
  (* SOFT_HLUTNM = "soft_lutpair604" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[53]_i_1 
       (.I0(s_axi_wdata[53]),
        .I1(\skid_buffer_reg_n_0_[53] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[53]));
  (* SOFT_HLUTNM = "soft_lutpair605" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[54]_i_1 
       (.I0(s_axi_wdata[54]),
        .I1(\skid_buffer_reg_n_0_[54] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[54]));
  (* SOFT_HLUTNM = "soft_lutpair605" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[55]_i_1 
       (.I0(s_axi_wdata[55]),
        .I1(\skid_buffer_reg_n_0_[55] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[55]));
  (* SOFT_HLUTNM = "soft_lutpair606" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[56]_i_1 
       (.I0(s_axi_wdata[56]),
        .I1(\skid_buffer_reg_n_0_[56] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[56]));
  (* SOFT_HLUTNM = "soft_lutpair606" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[57]_i_1 
       (.I0(s_axi_wdata[57]),
        .I1(\skid_buffer_reg_n_0_[57] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[57]));
  (* SOFT_HLUTNM = "soft_lutpair607" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[58]_i_1 
       (.I0(s_axi_wdata[58]),
        .I1(\skid_buffer_reg_n_0_[58] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[58]));
  (* SOFT_HLUTNM = "soft_lutpair607" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[59]_i_1 
       (.I0(s_axi_wdata[59]),
        .I1(\skid_buffer_reg_n_0_[59] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[59]));
  (* SOFT_HLUTNM = "soft_lutpair580" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[5]_i_1 
       (.I0(s_axi_wdata[5]),
        .I1(\skid_buffer_reg_n_0_[5] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[5]));
  (* SOFT_HLUTNM = "soft_lutpair608" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[60]_i_1 
       (.I0(s_axi_wdata[60]),
        .I1(\skid_buffer_reg_n_0_[60] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[60]));
  (* SOFT_HLUTNM = "soft_lutpair608" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[61]_i_1 
       (.I0(s_axi_wdata[61]),
        .I1(\skid_buffer_reg_n_0_[61] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[61]));
  (* SOFT_HLUTNM = "soft_lutpair609" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[62]_i_1 
       (.I0(s_axi_wdata[62]),
        .I1(\skid_buffer_reg_n_0_[62] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[62]));
  LUT2 #(
    .INIT(4'hB)) 
    \m_payload_i[63]_i_1 
       (.I0(m_axi_wready),
        .I1(\m_payload_i_reg[72]_0 ),
        .O(\m_payload_i[63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair609" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[63]_i_2 
       (.I0(s_axi_wdata[63]),
        .I1(\skid_buffer_reg_n_0_[63] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[63]));
  (* SOFT_HLUTNM = "soft_lutpair610" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[64]_i_1 
       (.I0(s_axi_wstrb[0]),
        .I1(\skid_buffer_reg_n_0_[64] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[64]));
  (* SOFT_HLUTNM = "soft_lutpair610" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[65]_i_1 
       (.I0(s_axi_wstrb[1]),
        .I1(\skid_buffer_reg_n_0_[65] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[65]));
  (* SOFT_HLUTNM = "soft_lutpair611" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[66]_i_1 
       (.I0(s_axi_wstrb[2]),
        .I1(\skid_buffer_reg_n_0_[66] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[66]));
  (* SOFT_HLUTNM = "soft_lutpair611" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[67]_i_1 
       (.I0(s_axi_wstrb[3]),
        .I1(\skid_buffer_reg_n_0_[67] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[67]));
  (* SOFT_HLUTNM = "soft_lutpair612" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[68]_i_1 
       (.I0(s_axi_wstrb[4]),
        .I1(\skid_buffer_reg_n_0_[68] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[68]));
  (* SOFT_HLUTNM = "soft_lutpair612" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[69]_i_1 
       (.I0(s_axi_wstrb[5]),
        .I1(\skid_buffer_reg_n_0_[69] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[69]));
  (* SOFT_HLUTNM = "soft_lutpair581" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[6]_i_1 
       (.I0(s_axi_wdata[6]),
        .I1(\skid_buffer_reg_n_0_[6] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[6]));
  (* SOFT_HLUTNM = "soft_lutpair613" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[70]_i_1 
       (.I0(s_axi_wstrb[6]),
        .I1(\skid_buffer_reg_n_0_[70] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[70]));
  (* SOFT_HLUTNM = "soft_lutpair613" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[71]_i_1 
       (.I0(s_axi_wstrb[7]),
        .I1(\skid_buffer_reg_n_0_[71] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[71]));
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[72]_i_1 
       (.I0(s_axi_wlast),
        .I1(\skid_buffer_reg_n_0_[72] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[72]));
  (* SOFT_HLUTNM = "soft_lutpair581" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[7]_i_1 
       (.I0(s_axi_wdata[7]),
        .I1(\skid_buffer_reg_n_0_[7] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[7]));
  (* SOFT_HLUTNM = "soft_lutpair582" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[8]_i_1 
       (.I0(s_axi_wdata[8]),
        .I1(\skid_buffer_reg_n_0_[8] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[8]));
  (* SOFT_HLUTNM = "soft_lutpair582" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[9]_i_1 
       (.I0(s_axi_wdata[9]),
        .I1(\skid_buffer_reg_n_0_[9] ),
        .I2(S00_AXI_0_wready),
        .O(skid_buffer[9]));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[0]),
        .Q(\skid_buffer_reg[72]_0 [0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[10]),
        .Q(\skid_buffer_reg[72]_0 [10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[11]),
        .Q(\skid_buffer_reg[72]_0 [11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[12]),
        .Q(\skid_buffer_reg[72]_0 [12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[13]),
        .Q(\skid_buffer_reg[72]_0 [13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[14]),
        .Q(\skid_buffer_reg[72]_0 [14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[15]),
        .Q(\skid_buffer_reg[72]_0 [15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[16]),
        .Q(\skid_buffer_reg[72]_0 [16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[17]),
        .Q(\skid_buffer_reg[72]_0 [17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[18]),
        .Q(\skid_buffer_reg[72]_0 [18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[19]),
        .Q(\skid_buffer_reg[72]_0 [19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[1]),
        .Q(\skid_buffer_reg[72]_0 [1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[20]),
        .Q(\skid_buffer_reg[72]_0 [20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[21]),
        .Q(\skid_buffer_reg[72]_0 [21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[22]),
        .Q(\skid_buffer_reg[72]_0 [22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[23]),
        .Q(\skid_buffer_reg[72]_0 [23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[24]),
        .Q(\skid_buffer_reg[72]_0 [24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[25]),
        .Q(\skid_buffer_reg[72]_0 [25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[26]),
        .Q(\skid_buffer_reg[72]_0 [26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[27]),
        .Q(\skid_buffer_reg[72]_0 [27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[28]),
        .Q(\skid_buffer_reg[72]_0 [28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[29]),
        .Q(\skid_buffer_reg[72]_0 [29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[2]),
        .Q(\skid_buffer_reg[72]_0 [2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[30]),
        .Q(\skid_buffer_reg[72]_0 [30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[31]),
        .Q(\skid_buffer_reg[72]_0 [31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[32]),
        .Q(\skid_buffer_reg[72]_0 [32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[33]),
        .Q(\skid_buffer_reg[72]_0 [33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[34]),
        .Q(\skid_buffer_reg[72]_0 [34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[35]),
        .Q(\skid_buffer_reg[72]_0 [35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[36]),
        .Q(\skid_buffer_reg[72]_0 [36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[37]),
        .Q(\skid_buffer_reg[72]_0 [37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[38]),
        .Q(\skid_buffer_reg[72]_0 [38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[39]),
        .Q(\skid_buffer_reg[72]_0 [39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[3]),
        .Q(\skid_buffer_reg[72]_0 [3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[40]),
        .Q(\skid_buffer_reg[72]_0 [40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[41]),
        .Q(\skid_buffer_reg[72]_0 [41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[42]),
        .Q(\skid_buffer_reg[72]_0 [42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[43]),
        .Q(\skid_buffer_reg[72]_0 [43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[44]),
        .Q(\skid_buffer_reg[72]_0 [44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[45]),
        .Q(\skid_buffer_reg[72]_0 [45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[46]),
        .Q(\skid_buffer_reg[72]_0 [46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[47]),
        .Q(\skid_buffer_reg[72]_0 [47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[48]),
        .Q(\skid_buffer_reg[72]_0 [48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[49]),
        .Q(\skid_buffer_reg[72]_0 [49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[4]),
        .Q(\skid_buffer_reg[72]_0 [4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[50]),
        .Q(\skid_buffer_reg[72]_0 [50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[51]),
        .Q(\skid_buffer_reg[72]_0 [51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[52]),
        .Q(\skid_buffer_reg[72]_0 [52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[53]),
        .Q(\skid_buffer_reg[72]_0 [53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[54]),
        .Q(\skid_buffer_reg[72]_0 [54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[55]),
        .Q(\skid_buffer_reg[72]_0 [55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[56]),
        .Q(\skid_buffer_reg[72]_0 [56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[57]),
        .Q(\skid_buffer_reg[72]_0 [57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[58]),
        .Q(\skid_buffer_reg[72]_0 [58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[59]),
        .Q(\skid_buffer_reg[72]_0 [59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[5]),
        .Q(\skid_buffer_reg[72]_0 [5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[60]),
        .Q(\skid_buffer_reg[72]_0 [60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[61]),
        .Q(\skid_buffer_reg[72]_0 [61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[62] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[62]),
        .Q(\skid_buffer_reg[72]_0 [62]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[63] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[63]),
        .Q(\skid_buffer_reg[72]_0 [63]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[64] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[64]),
        .Q(\skid_buffer_reg[72]_0 [64]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[65] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[65]),
        .Q(\skid_buffer_reg[72]_0 [65]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[66] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[66]),
        .Q(\skid_buffer_reg[72]_0 [66]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[67] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[67]),
        .Q(\skid_buffer_reg[72]_0 [67]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[68] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[68]),
        .Q(\skid_buffer_reg[72]_0 [68]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[69] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[69]),
        .Q(\skid_buffer_reg[72]_0 [69]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[6]),
        .Q(\skid_buffer_reg[72]_0 [6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[70] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[70]),
        .Q(\skid_buffer_reg[72]_0 [70]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[71] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[71]),
        .Q(\skid_buffer_reg[72]_0 [71]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[72] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[72]),
        .Q(\skid_buffer_reg[72]_0 [72]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[7]),
        .Q(\skid_buffer_reg[72]_0 [7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[8]),
        .Q(\skid_buffer_reg[72]_0 [8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[9]),
        .Q(\skid_buffer_reg[72]_0 [9]),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hFF5D)) 
    m_valid_i0
       (.I0(S00_AXI_0_wready),
        .I1(\m_payload_i_reg[72]_0 ),
        .I2(m_axi_wready),
        .I3(s_axi_wvalid),
        .O(m_valid_i0__0));
  LUT1 #(
    .INIT(2'h1)) 
    m_valid_i_i_1__1
       (.I0(m_valid_i_reg_1),
        .O(m_valid_i_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0__0),
        .Q(\m_payload_i_reg[72]_0 ),
        .R(m_valid_i_reg_0));
  LUT4 #(
    .INIT(16'hDFDD)) 
    s_ready_i_i_1
       (.I0(\m_payload_i_reg[72]_0 ),
        .I1(m_axi_wready),
        .I2(s_axi_wvalid),
        .I3(S00_AXI_0_wready),
        .O(s_ready_i0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i0),
        .Q(S00_AXI_0_wready),
        .R(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[32]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[33]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[34]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[35]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[36]),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[37] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[37]),
        .Q(\skid_buffer_reg_n_0_[37] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[38] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[38]),
        .Q(\skid_buffer_reg_n_0_[38] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[39] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[39]),
        .Q(\skid_buffer_reg_n_0_[39] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[40] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[40]),
        .Q(\skid_buffer_reg_n_0_[40] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[41] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[41]),
        .Q(\skid_buffer_reg_n_0_[41] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[42] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[42]),
        .Q(\skid_buffer_reg_n_0_[42] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[43] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[43]),
        .Q(\skid_buffer_reg_n_0_[43] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[44] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[44]),
        .Q(\skid_buffer_reg_n_0_[44] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[45] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[45]),
        .Q(\skid_buffer_reg_n_0_[45] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[46] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[46]),
        .Q(\skid_buffer_reg_n_0_[46] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[47] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[47]),
        .Q(\skid_buffer_reg_n_0_[47] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[48] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[48]),
        .Q(\skid_buffer_reg_n_0_[48] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[49] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[49]),
        .Q(\skid_buffer_reg_n_0_[49] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[50] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[50]),
        .Q(\skid_buffer_reg_n_0_[50] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[51] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[51]),
        .Q(\skid_buffer_reg_n_0_[51] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[52] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[52]),
        .Q(\skid_buffer_reg_n_0_[52] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[53] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[53]),
        .Q(\skid_buffer_reg_n_0_[53] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[54] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[54]),
        .Q(\skid_buffer_reg_n_0_[54] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[55] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[55]),
        .Q(\skid_buffer_reg_n_0_[55] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[56] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[56]),
        .Q(\skid_buffer_reg_n_0_[56] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[57] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[57]),
        .Q(\skid_buffer_reg_n_0_[57] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[58] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[58]),
        .Q(\skid_buffer_reg_n_0_[58] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[59] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[59]),
        .Q(\skid_buffer_reg_n_0_[59] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[60] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[60]),
        .Q(\skid_buffer_reg_n_0_[60] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[61] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[61]),
        .Q(\skid_buffer_reg_n_0_[61] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[62] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[62]),
        .Q(\skid_buffer_reg_n_0_[62] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[63] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[63]),
        .Q(\skid_buffer_reg_n_0_[63] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[64] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wstrb[0]),
        .Q(\skid_buffer_reg_n_0_[64] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[65] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wstrb[1]),
        .Q(\skid_buffer_reg_n_0_[65] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[66] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wstrb[2]),
        .Q(\skid_buffer_reg_n_0_[66] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[67] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wstrb[3]),
        .Q(\skid_buffer_reg_n_0_[67] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[68] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wstrb[4]),
        .Q(\skid_buffer_reg_n_0_[68] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[69] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wstrb[5]),
        .Q(\skid_buffer_reg_n_0_[69] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[70] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wstrb[6]),
        .Q(\skid_buffer_reg_n_0_[70] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[71] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wstrb[7]),
        .Q(\skid_buffer_reg_n_0_[71] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[72] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wlast),
        .Q(\skid_buffer_reg_n_0_[72] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(S00_AXI_0_wready),
        .D(s_axi_wdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized0_18
   (\m_payload_i_reg[72]_0 ,
    \skid_buffer_reg[0]_0 ,
    Q,
    s_axi_wvalid,
    m_axi_wready,
    aresetn,
    aclk,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata);
  output \m_payload_i_reg[72]_0 ;
  output \skid_buffer_reg[0]_0 ;
  output [72:0]Q;
  input s_axi_wvalid;
  input m_axi_wready;
  input aresetn;
  input aclk;
  input s_axi_wlast;
  input [7:0]s_axi_wstrb;
  input [63:0]s_axi_wdata;

  wire \<const0> ;
  wire \<const1> ;
  wire [72:0]Q;
  wire aclk;
  wire aresetn;
  wire \aresetn_d[1]_i_1_n_0 ;
  wire \aresetn_d_reg_n_0_[1] ;
  wire m_axi_wready;
  wire \m_payload_i[63]_i_1_n_0 ;
  wire \m_payload_i_reg[72]_0 ;
  wire m_valid_i_i_1_n_0;
  wire [1:1]p_0_in;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire s_ready_i_i_1_n_0;
  wire [72:0]skid_buffer;
  wire \skid_buffer_reg[0]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[37] ;
  wire \skid_buffer_reg_n_0_[38] ;
  wire \skid_buffer_reg_n_0_[39] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[40] ;
  wire \skid_buffer_reg_n_0_[41] ;
  wire \skid_buffer_reg_n_0_[42] ;
  wire \skid_buffer_reg_n_0_[43] ;
  wire \skid_buffer_reg_n_0_[44] ;
  wire \skid_buffer_reg_n_0_[45] ;
  wire \skid_buffer_reg_n_0_[46] ;
  wire \skid_buffer_reg_n_0_[47] ;
  wire \skid_buffer_reg_n_0_[48] ;
  wire \skid_buffer_reg_n_0_[49] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[50] ;
  wire \skid_buffer_reg_n_0_[51] ;
  wire \skid_buffer_reg_n_0_[52] ;
  wire \skid_buffer_reg_n_0_[53] ;
  wire \skid_buffer_reg_n_0_[54] ;
  wire \skid_buffer_reg_n_0_[55] ;
  wire \skid_buffer_reg_n_0_[56] ;
  wire \skid_buffer_reg_n_0_[57] ;
  wire \skid_buffer_reg_n_0_[58] ;
  wire \skid_buffer_reg_n_0_[59] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[60] ;
  wire \skid_buffer_reg_n_0_[61] ;
  wire \skid_buffer_reg_n_0_[62] ;
  wire \skid_buffer_reg_n_0_[63] ;
  wire \skid_buffer_reg_n_0_[64] ;
  wire \skid_buffer_reg_n_0_[65] ;
  wire \skid_buffer_reg_n_0_[66] ;
  wire \skid_buffer_reg_n_0_[67] ;
  wire \skid_buffer_reg_n_0_[68] ;
  wire \skid_buffer_reg_n_0_[69] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[70] ;
  wire \skid_buffer_reg_n_0_[71] ;
  wire \skid_buffer_reg_n_0_[72] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT2 #(
    .INIT(4'h8)) 
    \aresetn_d[1]_i_1 
       (.I0(p_0_in),
        .I1(aresetn),
        .O(\aresetn_d[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(aresetn),
        .Q(p_0_in),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\aresetn_d[1]_i_1_n_0 ),
        .Q(\aresetn_d_reg_n_0_[1] ),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair472" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(\skid_buffer_reg_n_0_[0] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[0]));
  (* SOFT_HLUTNM = "soft_lutpair477" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[10]_i_1 
       (.I0(s_axi_wdata[10]),
        .I1(\skid_buffer_reg_n_0_[10] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[10]));
  (* SOFT_HLUTNM = "soft_lutpair477" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[11]_i_1 
       (.I0(s_axi_wdata[11]),
        .I1(\skid_buffer_reg_n_0_[11] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[11]));
  (* SOFT_HLUTNM = "soft_lutpair478" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[12]_i_1 
       (.I0(s_axi_wdata[12]),
        .I1(\skid_buffer_reg_n_0_[12] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[12]));
  (* SOFT_HLUTNM = "soft_lutpair478" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[13]_i_1 
       (.I0(s_axi_wdata[13]),
        .I1(\skid_buffer_reg_n_0_[13] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[13]));
  (* SOFT_HLUTNM = "soft_lutpair479" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[14]_i_1 
       (.I0(s_axi_wdata[14]),
        .I1(\skid_buffer_reg_n_0_[14] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[14]));
  (* SOFT_HLUTNM = "soft_lutpair479" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[15]_i_1 
       (.I0(s_axi_wdata[15]),
        .I1(\skid_buffer_reg_n_0_[15] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[15]));
  (* SOFT_HLUTNM = "soft_lutpair480" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[16]_i_1 
       (.I0(s_axi_wdata[16]),
        .I1(\skid_buffer_reg_n_0_[16] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[16]));
  (* SOFT_HLUTNM = "soft_lutpair480" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[17]_i_1 
       (.I0(s_axi_wdata[17]),
        .I1(\skid_buffer_reg_n_0_[17] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[17]));
  (* SOFT_HLUTNM = "soft_lutpair481" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[18]_i_1 
       (.I0(s_axi_wdata[18]),
        .I1(\skid_buffer_reg_n_0_[18] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[18]));
  (* SOFT_HLUTNM = "soft_lutpair481" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[19]_i_1 
       (.I0(s_axi_wdata[19]),
        .I1(\skid_buffer_reg_n_0_[19] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[19]));
  (* SOFT_HLUTNM = "soft_lutpair472" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(\skid_buffer_reg_n_0_[1] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[1]));
  (* SOFT_HLUTNM = "soft_lutpair482" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[20]_i_1 
       (.I0(s_axi_wdata[20]),
        .I1(\skid_buffer_reg_n_0_[20] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[20]));
  (* SOFT_HLUTNM = "soft_lutpair482" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[21]_i_1 
       (.I0(s_axi_wdata[21]),
        .I1(\skid_buffer_reg_n_0_[21] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[21]));
  (* SOFT_HLUTNM = "soft_lutpair483" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[22]_i_1 
       (.I0(s_axi_wdata[22]),
        .I1(\skid_buffer_reg_n_0_[22] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[22]));
  (* SOFT_HLUTNM = "soft_lutpair483" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[23]_i_1 
       (.I0(s_axi_wdata[23]),
        .I1(\skid_buffer_reg_n_0_[23] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[23]));
  (* SOFT_HLUTNM = "soft_lutpair484" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[24]_i_1 
       (.I0(s_axi_wdata[24]),
        .I1(\skid_buffer_reg_n_0_[24] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[24]));
  (* SOFT_HLUTNM = "soft_lutpair484" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[25]_i_1 
       (.I0(s_axi_wdata[25]),
        .I1(\skid_buffer_reg_n_0_[25] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[25]));
  (* SOFT_HLUTNM = "soft_lutpair485" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[26]_i_1 
       (.I0(s_axi_wdata[26]),
        .I1(\skid_buffer_reg_n_0_[26] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[26]));
  (* SOFT_HLUTNM = "soft_lutpair485" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[27]_i_1 
       (.I0(s_axi_wdata[27]),
        .I1(\skid_buffer_reg_n_0_[27] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[27]));
  (* SOFT_HLUTNM = "soft_lutpair486" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[28]_i_1 
       (.I0(s_axi_wdata[28]),
        .I1(\skid_buffer_reg_n_0_[28] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[28]));
  (* SOFT_HLUTNM = "soft_lutpair486" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[29]_i_1 
       (.I0(s_axi_wdata[29]),
        .I1(\skid_buffer_reg_n_0_[29] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[29]));
  (* SOFT_HLUTNM = "soft_lutpair473" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[2]_i_1 
       (.I0(s_axi_wdata[2]),
        .I1(\skid_buffer_reg_n_0_[2] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[2]));
  (* SOFT_HLUTNM = "soft_lutpair487" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[30]_i_1 
       (.I0(s_axi_wdata[30]),
        .I1(\skid_buffer_reg_n_0_[30] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[30]));
  (* SOFT_HLUTNM = "soft_lutpair487" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[31]_i_1 
       (.I0(s_axi_wdata[31]),
        .I1(\skid_buffer_reg_n_0_[31] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[31]));
  (* SOFT_HLUTNM = "soft_lutpair488" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[32]_i_1 
       (.I0(s_axi_wdata[32]),
        .I1(\skid_buffer_reg_n_0_[32] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[32]));
  (* SOFT_HLUTNM = "soft_lutpair488" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[33]_i_1 
       (.I0(s_axi_wdata[33]),
        .I1(\skid_buffer_reg_n_0_[33] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[33]));
  (* SOFT_HLUTNM = "soft_lutpair489" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[34]_i_1 
       (.I0(s_axi_wdata[34]),
        .I1(\skid_buffer_reg_n_0_[34] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[34]));
  (* SOFT_HLUTNM = "soft_lutpair489" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[35]_i_1 
       (.I0(s_axi_wdata[35]),
        .I1(\skid_buffer_reg_n_0_[35] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[35]));
  (* SOFT_HLUTNM = "soft_lutpair490" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[36]_i_1 
       (.I0(s_axi_wdata[36]),
        .I1(\skid_buffer_reg_n_0_[36] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[36]));
  (* SOFT_HLUTNM = "soft_lutpair490" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[37]_i_1 
       (.I0(s_axi_wdata[37]),
        .I1(\skid_buffer_reg_n_0_[37] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[37]));
  (* SOFT_HLUTNM = "soft_lutpair491" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[38]_i_1 
       (.I0(s_axi_wdata[38]),
        .I1(\skid_buffer_reg_n_0_[38] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[38]));
  (* SOFT_HLUTNM = "soft_lutpair491" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[39]_i_1 
       (.I0(s_axi_wdata[39]),
        .I1(\skid_buffer_reg_n_0_[39] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[39]));
  (* SOFT_HLUTNM = "soft_lutpair473" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[3]_i_1 
       (.I0(s_axi_wdata[3]),
        .I1(\skid_buffer_reg_n_0_[3] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[3]));
  (* SOFT_HLUTNM = "soft_lutpair492" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[40]_i_1 
       (.I0(s_axi_wdata[40]),
        .I1(\skid_buffer_reg_n_0_[40] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[40]));
  (* SOFT_HLUTNM = "soft_lutpair492" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[41]_i_1 
       (.I0(s_axi_wdata[41]),
        .I1(\skid_buffer_reg_n_0_[41] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[41]));
  (* SOFT_HLUTNM = "soft_lutpair493" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[42]_i_1 
       (.I0(s_axi_wdata[42]),
        .I1(\skid_buffer_reg_n_0_[42] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[42]));
  (* SOFT_HLUTNM = "soft_lutpair493" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[43]_i_1 
       (.I0(s_axi_wdata[43]),
        .I1(\skid_buffer_reg_n_0_[43] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[43]));
  (* SOFT_HLUTNM = "soft_lutpair494" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[44]_i_1 
       (.I0(s_axi_wdata[44]),
        .I1(\skid_buffer_reg_n_0_[44] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[44]));
  (* SOFT_HLUTNM = "soft_lutpair494" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[45]_i_1 
       (.I0(s_axi_wdata[45]),
        .I1(\skid_buffer_reg_n_0_[45] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[45]));
  (* SOFT_HLUTNM = "soft_lutpair495" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[46]_i_1 
       (.I0(s_axi_wdata[46]),
        .I1(\skid_buffer_reg_n_0_[46] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[46]));
  (* SOFT_HLUTNM = "soft_lutpair495" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[47]_i_1 
       (.I0(s_axi_wdata[47]),
        .I1(\skid_buffer_reg_n_0_[47] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[47]));
  (* SOFT_HLUTNM = "soft_lutpair496" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[48]_i_1 
       (.I0(s_axi_wdata[48]),
        .I1(\skid_buffer_reg_n_0_[48] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[48]));
  (* SOFT_HLUTNM = "soft_lutpair496" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[49]_i_1 
       (.I0(s_axi_wdata[49]),
        .I1(\skid_buffer_reg_n_0_[49] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[49]));
  (* SOFT_HLUTNM = "soft_lutpair474" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[4]_i_1 
       (.I0(s_axi_wdata[4]),
        .I1(\skid_buffer_reg_n_0_[4] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[4]));
  (* SOFT_HLUTNM = "soft_lutpair497" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[50]_i_1 
       (.I0(s_axi_wdata[50]),
        .I1(\skid_buffer_reg_n_0_[50] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[50]));
  (* SOFT_HLUTNM = "soft_lutpair497" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[51]_i_1 
       (.I0(s_axi_wdata[51]),
        .I1(\skid_buffer_reg_n_0_[51] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[51]));
  (* SOFT_HLUTNM = "soft_lutpair498" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[52]_i_1 
       (.I0(s_axi_wdata[52]),
        .I1(\skid_buffer_reg_n_0_[52] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[52]));
  (* SOFT_HLUTNM = "soft_lutpair498" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[53]_i_1 
       (.I0(s_axi_wdata[53]),
        .I1(\skid_buffer_reg_n_0_[53] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[53]));
  (* SOFT_HLUTNM = "soft_lutpair499" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[54]_i_1 
       (.I0(s_axi_wdata[54]),
        .I1(\skid_buffer_reg_n_0_[54] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[54]));
  (* SOFT_HLUTNM = "soft_lutpair499" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[55]_i_1 
       (.I0(s_axi_wdata[55]),
        .I1(\skid_buffer_reg_n_0_[55] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[55]));
  (* SOFT_HLUTNM = "soft_lutpair500" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[56]_i_1 
       (.I0(s_axi_wdata[56]),
        .I1(\skid_buffer_reg_n_0_[56] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[56]));
  (* SOFT_HLUTNM = "soft_lutpair500" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[57]_i_1 
       (.I0(s_axi_wdata[57]),
        .I1(\skid_buffer_reg_n_0_[57] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[57]));
  (* SOFT_HLUTNM = "soft_lutpair501" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[58]_i_1 
       (.I0(s_axi_wdata[58]),
        .I1(\skid_buffer_reg_n_0_[58] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[58]));
  (* SOFT_HLUTNM = "soft_lutpair501" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[59]_i_1 
       (.I0(s_axi_wdata[59]),
        .I1(\skid_buffer_reg_n_0_[59] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[59]));
  (* SOFT_HLUTNM = "soft_lutpair474" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[5]_i_1 
       (.I0(s_axi_wdata[5]),
        .I1(\skid_buffer_reg_n_0_[5] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[5]));
  (* SOFT_HLUTNM = "soft_lutpair502" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[60]_i_1 
       (.I0(s_axi_wdata[60]),
        .I1(\skid_buffer_reg_n_0_[60] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[60]));
  (* SOFT_HLUTNM = "soft_lutpair502" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[61]_i_1 
       (.I0(s_axi_wdata[61]),
        .I1(\skid_buffer_reg_n_0_[61] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[61]));
  (* SOFT_HLUTNM = "soft_lutpair503" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[62]_i_1 
       (.I0(s_axi_wdata[62]),
        .I1(\skid_buffer_reg_n_0_[62] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[62]));
  LUT2 #(
    .INIT(4'hB)) 
    \m_payload_i[63]_i_1 
       (.I0(m_axi_wready),
        .I1(\m_payload_i_reg[72]_0 ),
        .O(\m_payload_i[63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair503" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[63]_i_2 
       (.I0(s_axi_wdata[63]),
        .I1(\skid_buffer_reg_n_0_[63] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[63]));
  (* SOFT_HLUTNM = "soft_lutpair504" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[64]_i_1 
       (.I0(s_axi_wstrb[0]),
        .I1(\skid_buffer_reg_n_0_[64] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[64]));
  (* SOFT_HLUTNM = "soft_lutpair504" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[65]_i_1 
       (.I0(s_axi_wstrb[1]),
        .I1(\skid_buffer_reg_n_0_[65] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[65]));
  (* SOFT_HLUTNM = "soft_lutpair505" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[66]_i_1 
       (.I0(s_axi_wstrb[2]),
        .I1(\skid_buffer_reg_n_0_[66] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[66]));
  (* SOFT_HLUTNM = "soft_lutpair505" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[67]_i_1 
       (.I0(s_axi_wstrb[3]),
        .I1(\skid_buffer_reg_n_0_[67] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[67]));
  (* SOFT_HLUTNM = "soft_lutpair506" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[68]_i_1 
       (.I0(s_axi_wstrb[4]),
        .I1(\skid_buffer_reg_n_0_[68] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[68]));
  (* SOFT_HLUTNM = "soft_lutpair506" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[69]_i_1 
       (.I0(s_axi_wstrb[5]),
        .I1(\skid_buffer_reg_n_0_[69] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[69]));
  (* SOFT_HLUTNM = "soft_lutpair475" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[6]_i_1 
       (.I0(s_axi_wdata[6]),
        .I1(\skid_buffer_reg_n_0_[6] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[6]));
  (* SOFT_HLUTNM = "soft_lutpair507" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[70]_i_1 
       (.I0(s_axi_wstrb[6]),
        .I1(\skid_buffer_reg_n_0_[70] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[70]));
  (* SOFT_HLUTNM = "soft_lutpair507" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[71]_i_1 
       (.I0(s_axi_wstrb[7]),
        .I1(\skid_buffer_reg_n_0_[71] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[71]));
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[72]_i_1 
       (.I0(s_axi_wlast),
        .I1(\skid_buffer_reg_n_0_[72] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[72]));
  (* SOFT_HLUTNM = "soft_lutpair475" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[7]_i_1 
       (.I0(s_axi_wdata[7]),
        .I1(\skid_buffer_reg_n_0_[7] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[7]));
  (* SOFT_HLUTNM = "soft_lutpair476" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[8]_i_1 
       (.I0(s_axi_wdata[8]),
        .I1(\skid_buffer_reg_n_0_[8] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[8]));
  (* SOFT_HLUTNM = "soft_lutpair476" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[9]_i_1 
       (.I0(s_axi_wdata[9]),
        .I1(\skid_buffer_reg_n_0_[9] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[9]));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[0]),
        .Q(Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[10]),
        .Q(Q[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[11]),
        .Q(Q[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[12]),
        .Q(Q[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[13]),
        .Q(Q[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[14]),
        .Q(Q[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[15]),
        .Q(Q[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[16]),
        .Q(Q[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[17]),
        .Q(Q[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[18]),
        .Q(Q[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[19]),
        .Q(Q[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[1]),
        .Q(Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[20]),
        .Q(Q[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[21]),
        .Q(Q[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[22]),
        .Q(Q[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[23]),
        .Q(Q[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[24]),
        .Q(Q[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[25]),
        .Q(Q[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[26]),
        .Q(Q[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[27]),
        .Q(Q[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[28]),
        .Q(Q[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[29]),
        .Q(Q[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[2]),
        .Q(Q[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[30]),
        .Q(Q[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[31]),
        .Q(Q[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[32]),
        .Q(Q[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[33]),
        .Q(Q[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[34]),
        .Q(Q[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[35]),
        .Q(Q[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[36]),
        .Q(Q[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[37]),
        .Q(Q[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[38]),
        .Q(Q[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[39]),
        .Q(Q[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[3]),
        .Q(Q[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[40]),
        .Q(Q[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[41]),
        .Q(Q[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[42]),
        .Q(Q[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[43]),
        .Q(Q[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[44]),
        .Q(Q[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[45]),
        .Q(Q[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[46]),
        .Q(Q[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[47]),
        .Q(Q[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[48]),
        .Q(Q[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[49]),
        .Q(Q[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[4]),
        .Q(Q[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[50]),
        .Q(Q[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[51]),
        .Q(Q[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[52]),
        .Q(Q[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[53]),
        .Q(Q[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[54]),
        .Q(Q[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[55]),
        .Q(Q[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[56]),
        .Q(Q[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[57]),
        .Q(Q[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[58]),
        .Q(Q[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[59]),
        .Q(Q[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[5]),
        .Q(Q[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[60]),
        .Q(Q[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[61]),
        .Q(Q[61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[62] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[62]),
        .Q(Q[62]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[63] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[63]),
        .Q(Q[63]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[64] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[64]),
        .Q(Q[64]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[65] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[65]),
        .Q(Q[65]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[66] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[66]),
        .Q(Q[66]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[67] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[67]),
        .Q(Q[67]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[68] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[68]),
        .Q(Q[68]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[69] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[69]),
        .Q(Q[69]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[6]),
        .Q(Q[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[70] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[70]),
        .Q(Q[70]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[71] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[71]),
        .Q(Q[71]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[72] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[72]),
        .Q(Q[72]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[7]),
        .Q(Q[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[8]),
        .Q(Q[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[9]),
        .Q(Q[9]),
        .R(\<const0> ));
  LUT5 #(
    .INIT(32'h8A88AAAA)) 
    m_valid_i_i_1
       (.I0(\aresetn_d_reg_n_0_[1] ),
        .I1(s_axi_wvalid),
        .I2(m_axi_wready),
        .I3(\m_payload_i_reg[72]_0 ),
        .I4(\skid_buffer_reg[0]_0 ),
        .O(m_valid_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1_n_0),
        .Q(\m_payload_i_reg[72]_0 ),
        .R(\<const0> ));
  LUT5 #(
    .INIT(32'hAA08AAAA)) 
    s_ready_i_i_1
       (.I0(p_0_in),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(s_axi_wvalid),
        .I3(m_axi_wready),
        .I4(\m_payload_i_reg[72]_0 ),
        .O(s_ready_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1_n_0),
        .Q(\skid_buffer_reg[0]_0 ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[32]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[33]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[34]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[35]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[36]),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[37] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[37]),
        .Q(\skid_buffer_reg_n_0_[37] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[38] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[38]),
        .Q(\skid_buffer_reg_n_0_[38] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[39] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[39]),
        .Q(\skid_buffer_reg_n_0_[39] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[40] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[40]),
        .Q(\skid_buffer_reg_n_0_[40] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[41] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[41]),
        .Q(\skid_buffer_reg_n_0_[41] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[42] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[42]),
        .Q(\skid_buffer_reg_n_0_[42] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[43] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[43]),
        .Q(\skid_buffer_reg_n_0_[43] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[44] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[44]),
        .Q(\skid_buffer_reg_n_0_[44] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[45] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[45]),
        .Q(\skid_buffer_reg_n_0_[45] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[46] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[46]),
        .Q(\skid_buffer_reg_n_0_[46] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[47] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[47]),
        .Q(\skid_buffer_reg_n_0_[47] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[48] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[48]),
        .Q(\skid_buffer_reg_n_0_[48] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[49] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[49]),
        .Q(\skid_buffer_reg_n_0_[49] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[50] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[50]),
        .Q(\skid_buffer_reg_n_0_[50] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[51] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[51]),
        .Q(\skid_buffer_reg_n_0_[51] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[52] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[52]),
        .Q(\skid_buffer_reg_n_0_[52] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[53] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[53]),
        .Q(\skid_buffer_reg_n_0_[53] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[54] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[54]),
        .Q(\skid_buffer_reg_n_0_[54] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[55] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[55]),
        .Q(\skid_buffer_reg_n_0_[55] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[56] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[56]),
        .Q(\skid_buffer_reg_n_0_[56] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[57] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[57]),
        .Q(\skid_buffer_reg_n_0_[57] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[58] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[58]),
        .Q(\skid_buffer_reg_n_0_[58] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[59] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[59]),
        .Q(\skid_buffer_reg_n_0_[59] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[60] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[60]),
        .Q(\skid_buffer_reg_n_0_[60] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[61] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[61]),
        .Q(\skid_buffer_reg_n_0_[61] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[62] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[62]),
        .Q(\skid_buffer_reg_n_0_[62] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[63] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[63]),
        .Q(\skid_buffer_reg_n_0_[63] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[64] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[0]),
        .Q(\skid_buffer_reg_n_0_[64] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[65] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[1]),
        .Q(\skid_buffer_reg_n_0_[65] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[66] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[2]),
        .Q(\skid_buffer_reg_n_0_[66] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[67] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[3]),
        .Q(\skid_buffer_reg_n_0_[67] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[68] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[4]),
        .Q(\skid_buffer_reg_n_0_[68] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[69] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[5]),
        .Q(\skid_buffer_reg_n_0_[69] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[70] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[6]),
        .Q(\skid_buffer_reg_n_0_[70] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[71] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[7]),
        .Q(\skid_buffer_reg_n_0_[71] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[72] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wlast),
        .Q(\skid_buffer_reg_n_0_[72] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized0_40
   (M00_AXI_0_wvalid,
    m_valid_i_reg_0,
    \skid_buffer_reg[0]_0 ,
    m_valid_i_reg_1,
    M00_AXI_0_wlast,
    aclk,
    p_1_in,
    \aresetn_d_reg[0] ,
    m_axi_wready,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata,
    s_axi_wvalid);
  output M00_AXI_0_wvalid;
  output m_valid_i_reg_0;
  output \skid_buffer_reg[0]_0 ;
  output m_valid_i_reg_1;
  output [72:0]M00_AXI_0_wlast;
  input aclk;
  input p_1_in;
  input \aresetn_d_reg[0] ;
  input m_axi_wready;
  input s_axi_wlast;
  input [7:0]s_axi_wstrb;
  input [63:0]s_axi_wdata;
  input s_axi_wvalid;

  wire \<const0> ;
  wire \<const1> ;
  wire [72:0]M00_AXI_0_wlast;
  wire M00_AXI_0_wvalid;
  wire aclk;
  wire \aresetn_d_reg[0] ;
  wire m_axi_wready;
  wire \m_payload_i[63]_i_1_n_0 ;
  wire m_valid_i0__0;
  wire m_valid_i_reg_0;
  wire m_valid_i_reg_1;
  wire p_1_in;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire s_ready_i0;
  wire [72:0]skid_buffer;
  wire \skid_buffer_reg[0]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[37] ;
  wire \skid_buffer_reg_n_0_[38] ;
  wire \skid_buffer_reg_n_0_[39] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[40] ;
  wire \skid_buffer_reg_n_0_[41] ;
  wire \skid_buffer_reg_n_0_[42] ;
  wire \skid_buffer_reg_n_0_[43] ;
  wire \skid_buffer_reg_n_0_[44] ;
  wire \skid_buffer_reg_n_0_[45] ;
  wire \skid_buffer_reg_n_0_[46] ;
  wire \skid_buffer_reg_n_0_[47] ;
  wire \skid_buffer_reg_n_0_[48] ;
  wire \skid_buffer_reg_n_0_[49] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[50] ;
  wire \skid_buffer_reg_n_0_[51] ;
  wire \skid_buffer_reg_n_0_[52] ;
  wire \skid_buffer_reg_n_0_[53] ;
  wire \skid_buffer_reg_n_0_[54] ;
  wire \skid_buffer_reg_n_0_[55] ;
  wire \skid_buffer_reg_n_0_[56] ;
  wire \skid_buffer_reg_n_0_[57] ;
  wire \skid_buffer_reg_n_0_[58] ;
  wire \skid_buffer_reg_n_0_[59] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[60] ;
  wire \skid_buffer_reg_n_0_[61] ;
  wire \skid_buffer_reg_n_0_[62] ;
  wire \skid_buffer_reg_n_0_[63] ;
  wire \skid_buffer_reg_n_0_[64] ;
  wire \skid_buffer_reg_n_0_[65] ;
  wire \skid_buffer_reg_n_0_[66] ;
  wire \skid_buffer_reg_n_0_[67] ;
  wire \skid_buffer_reg_n_0_[68] ;
  wire \skid_buffer_reg_n_0_[69] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[70] ;
  wire \skid_buffer_reg_n_0_[71] ;
  wire \skid_buffer_reg_n_0_[72] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\aresetn_d_reg[0] ),
        .Q(m_valid_i_reg_1),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(\skid_buffer_reg_n_0_[0] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[0]));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[10]_i_1 
       (.I0(s_axi_wdata[10]),
        .I1(\skid_buffer_reg_n_0_[10] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[10]));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[11]_i_1 
       (.I0(s_axi_wdata[11]),
        .I1(\skid_buffer_reg_n_0_[11] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[11]));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[12]_i_1 
       (.I0(s_axi_wdata[12]),
        .I1(\skid_buffer_reg_n_0_[12] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[12]));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[13]_i_1 
       (.I0(s_axi_wdata[13]),
        .I1(\skid_buffer_reg_n_0_[13] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[13]));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[14]_i_1 
       (.I0(s_axi_wdata[14]),
        .I1(\skid_buffer_reg_n_0_[14] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[14]));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[15]_i_1 
       (.I0(s_axi_wdata[15]),
        .I1(\skid_buffer_reg_n_0_[15] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[15]));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[16]_i_1 
       (.I0(s_axi_wdata[16]),
        .I1(\skid_buffer_reg_n_0_[16] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[16]));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[17]_i_1 
       (.I0(s_axi_wdata[17]),
        .I1(\skid_buffer_reg_n_0_[17] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[17]));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[18]_i_1 
       (.I0(s_axi_wdata[18]),
        .I1(\skid_buffer_reg_n_0_[18] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[18]));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[19]_i_1 
       (.I0(s_axi_wdata[19]),
        .I1(\skid_buffer_reg_n_0_[19] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[19]));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(\skid_buffer_reg_n_0_[1] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[1]));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[20]_i_1 
       (.I0(s_axi_wdata[20]),
        .I1(\skid_buffer_reg_n_0_[20] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[20]));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[21]_i_1 
       (.I0(s_axi_wdata[21]),
        .I1(\skid_buffer_reg_n_0_[21] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[21]));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[22]_i_1 
       (.I0(s_axi_wdata[22]),
        .I1(\skid_buffer_reg_n_0_[22] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[22]));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[23]_i_1 
       (.I0(s_axi_wdata[23]),
        .I1(\skid_buffer_reg_n_0_[23] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[23]));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[24]_i_1 
       (.I0(s_axi_wdata[24]),
        .I1(\skid_buffer_reg_n_0_[24] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[24]));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[25]_i_1 
       (.I0(s_axi_wdata[25]),
        .I1(\skid_buffer_reg_n_0_[25] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[25]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[26]_i_1 
       (.I0(s_axi_wdata[26]),
        .I1(\skid_buffer_reg_n_0_[26] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[26]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[27]_i_1 
       (.I0(s_axi_wdata[27]),
        .I1(\skid_buffer_reg_n_0_[27] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[27]));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[28]_i_1 
       (.I0(s_axi_wdata[28]),
        .I1(\skid_buffer_reg_n_0_[28] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[28]));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[29]_i_1 
       (.I0(s_axi_wdata[29]),
        .I1(\skid_buffer_reg_n_0_[29] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[29]));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[2]_i_1 
       (.I0(s_axi_wdata[2]),
        .I1(\skid_buffer_reg_n_0_[2] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[2]));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[30]_i_1 
       (.I0(s_axi_wdata[30]),
        .I1(\skid_buffer_reg_n_0_[30] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[30]));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[31]_i_1 
       (.I0(s_axi_wdata[31]),
        .I1(\skid_buffer_reg_n_0_[31] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[31]));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[32]_i_1 
       (.I0(s_axi_wdata[32]),
        .I1(\skid_buffer_reg_n_0_[32] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[32]));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[33]_i_1 
       (.I0(s_axi_wdata[33]),
        .I1(\skid_buffer_reg_n_0_[33] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[33]));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[34]_i_1 
       (.I0(s_axi_wdata[34]),
        .I1(\skid_buffer_reg_n_0_[34] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[34]));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[35]_i_1 
       (.I0(s_axi_wdata[35]),
        .I1(\skid_buffer_reg_n_0_[35] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[35]));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[36]_i_1 
       (.I0(s_axi_wdata[36]),
        .I1(\skid_buffer_reg_n_0_[36] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[36]));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[37]_i_1 
       (.I0(s_axi_wdata[37]),
        .I1(\skid_buffer_reg_n_0_[37] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[37]));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[38]_i_1 
       (.I0(s_axi_wdata[38]),
        .I1(\skid_buffer_reg_n_0_[38] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[38]));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[39]_i_1 
       (.I0(s_axi_wdata[39]),
        .I1(\skid_buffer_reg_n_0_[39] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[39]));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[3]_i_1 
       (.I0(s_axi_wdata[3]),
        .I1(\skid_buffer_reg_n_0_[3] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[3]));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[40]_i_1 
       (.I0(s_axi_wdata[40]),
        .I1(\skid_buffer_reg_n_0_[40] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[40]));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[41]_i_1 
       (.I0(s_axi_wdata[41]),
        .I1(\skid_buffer_reg_n_0_[41] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[41]));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[42]_i_1 
       (.I0(s_axi_wdata[42]),
        .I1(\skid_buffer_reg_n_0_[42] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[42]));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[43]_i_1 
       (.I0(s_axi_wdata[43]),
        .I1(\skid_buffer_reg_n_0_[43] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[43]));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[44]_i_1 
       (.I0(s_axi_wdata[44]),
        .I1(\skid_buffer_reg_n_0_[44] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[44]));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[45]_i_1 
       (.I0(s_axi_wdata[45]),
        .I1(\skid_buffer_reg_n_0_[45] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[45]));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[46]_i_1 
       (.I0(s_axi_wdata[46]),
        .I1(\skid_buffer_reg_n_0_[46] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[46]));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[47]_i_1 
       (.I0(s_axi_wdata[47]),
        .I1(\skid_buffer_reg_n_0_[47] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[47]));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[48]_i_1 
       (.I0(s_axi_wdata[48]),
        .I1(\skid_buffer_reg_n_0_[48] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[48]));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[49]_i_1 
       (.I0(s_axi_wdata[49]),
        .I1(\skid_buffer_reg_n_0_[49] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[49]));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[4]_i_1 
       (.I0(s_axi_wdata[4]),
        .I1(\skid_buffer_reg_n_0_[4] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[4]));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[50]_i_1 
       (.I0(s_axi_wdata[50]),
        .I1(\skid_buffer_reg_n_0_[50] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[50]));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[51]_i_1 
       (.I0(s_axi_wdata[51]),
        .I1(\skid_buffer_reg_n_0_[51] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[51]));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[52]_i_1 
       (.I0(s_axi_wdata[52]),
        .I1(\skid_buffer_reg_n_0_[52] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[52]));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[53]_i_1 
       (.I0(s_axi_wdata[53]),
        .I1(\skid_buffer_reg_n_0_[53] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[53]));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[54]_i_1 
       (.I0(s_axi_wdata[54]),
        .I1(\skid_buffer_reg_n_0_[54] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[54]));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[55]_i_1 
       (.I0(s_axi_wdata[55]),
        .I1(\skid_buffer_reg_n_0_[55] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[55]));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[56]_i_1 
       (.I0(s_axi_wdata[56]),
        .I1(\skid_buffer_reg_n_0_[56] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[56]));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[57]_i_1 
       (.I0(s_axi_wdata[57]),
        .I1(\skid_buffer_reg_n_0_[57] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[57]));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[58]_i_1 
       (.I0(s_axi_wdata[58]),
        .I1(\skid_buffer_reg_n_0_[58] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[58]));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[59]_i_1 
       (.I0(s_axi_wdata[59]),
        .I1(\skid_buffer_reg_n_0_[59] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[59]));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[5]_i_1 
       (.I0(s_axi_wdata[5]),
        .I1(\skid_buffer_reg_n_0_[5] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[5]));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[60]_i_1 
       (.I0(s_axi_wdata[60]),
        .I1(\skid_buffer_reg_n_0_[60] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[60]));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[61]_i_1 
       (.I0(s_axi_wdata[61]),
        .I1(\skid_buffer_reg_n_0_[61] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[61]));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[62]_i_1 
       (.I0(s_axi_wdata[62]),
        .I1(\skid_buffer_reg_n_0_[62] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[62]));
  LUT2 #(
    .INIT(4'hB)) 
    \m_payload_i[63]_i_1 
       (.I0(m_axi_wready),
        .I1(M00_AXI_0_wvalid),
        .O(\m_payload_i[63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[63]_i_2 
       (.I0(s_axi_wdata[63]),
        .I1(\skid_buffer_reg_n_0_[63] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[63]));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[64]_i_1 
       (.I0(s_axi_wstrb[0]),
        .I1(\skid_buffer_reg_n_0_[64] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[64]));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[65]_i_1 
       (.I0(s_axi_wstrb[1]),
        .I1(\skid_buffer_reg_n_0_[65] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[65]));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[66]_i_1 
       (.I0(s_axi_wstrb[2]),
        .I1(\skid_buffer_reg_n_0_[66] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[66]));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[67]_i_1 
       (.I0(s_axi_wstrb[3]),
        .I1(\skid_buffer_reg_n_0_[67] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[67]));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[68]_i_1 
       (.I0(s_axi_wstrb[4]),
        .I1(\skid_buffer_reg_n_0_[68] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[68]));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[69]_i_1 
       (.I0(s_axi_wstrb[5]),
        .I1(\skid_buffer_reg_n_0_[69] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[69]));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[6]_i_1 
       (.I0(s_axi_wdata[6]),
        .I1(\skid_buffer_reg_n_0_[6] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[6]));
  (* SOFT_HLUTNM = "soft_lutpair311" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[70]_i_1 
       (.I0(s_axi_wstrb[6]),
        .I1(\skid_buffer_reg_n_0_[70] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[70]));
  (* SOFT_HLUTNM = "soft_lutpair311" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[71]_i_1 
       (.I0(s_axi_wstrb[7]),
        .I1(\skid_buffer_reg_n_0_[71] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[71]));
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[72]_i_1 
       (.I0(s_axi_wlast),
        .I1(\skid_buffer_reg_n_0_[72] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[72]));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[7]_i_1 
       (.I0(s_axi_wdata[7]),
        .I1(\skid_buffer_reg_n_0_[7] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[7]));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[8]_i_1 
       (.I0(s_axi_wdata[8]),
        .I1(\skid_buffer_reg_n_0_[8] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[8]));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[9]_i_1 
       (.I0(s_axi_wdata[9]),
        .I1(\skid_buffer_reg_n_0_[9] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[9]));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[0]),
        .Q(M00_AXI_0_wlast[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[10]),
        .Q(M00_AXI_0_wlast[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[11]),
        .Q(M00_AXI_0_wlast[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[12]),
        .Q(M00_AXI_0_wlast[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[13]),
        .Q(M00_AXI_0_wlast[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[14]),
        .Q(M00_AXI_0_wlast[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[15]),
        .Q(M00_AXI_0_wlast[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[16]),
        .Q(M00_AXI_0_wlast[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[17]),
        .Q(M00_AXI_0_wlast[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[18]),
        .Q(M00_AXI_0_wlast[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[19]),
        .Q(M00_AXI_0_wlast[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[1]),
        .Q(M00_AXI_0_wlast[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[20]),
        .Q(M00_AXI_0_wlast[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[21]),
        .Q(M00_AXI_0_wlast[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[22]),
        .Q(M00_AXI_0_wlast[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[23]),
        .Q(M00_AXI_0_wlast[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[24]),
        .Q(M00_AXI_0_wlast[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[25]),
        .Q(M00_AXI_0_wlast[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[26]),
        .Q(M00_AXI_0_wlast[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[27]),
        .Q(M00_AXI_0_wlast[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[28]),
        .Q(M00_AXI_0_wlast[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[29]),
        .Q(M00_AXI_0_wlast[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[2]),
        .Q(M00_AXI_0_wlast[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[30]),
        .Q(M00_AXI_0_wlast[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[31]),
        .Q(M00_AXI_0_wlast[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[32]),
        .Q(M00_AXI_0_wlast[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[33]),
        .Q(M00_AXI_0_wlast[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[34]),
        .Q(M00_AXI_0_wlast[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[35]),
        .Q(M00_AXI_0_wlast[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[36]),
        .Q(M00_AXI_0_wlast[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[37]),
        .Q(M00_AXI_0_wlast[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[38]),
        .Q(M00_AXI_0_wlast[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[39]),
        .Q(M00_AXI_0_wlast[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[3]),
        .Q(M00_AXI_0_wlast[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[40]),
        .Q(M00_AXI_0_wlast[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[41]),
        .Q(M00_AXI_0_wlast[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[42]),
        .Q(M00_AXI_0_wlast[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[43]),
        .Q(M00_AXI_0_wlast[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[44]),
        .Q(M00_AXI_0_wlast[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[45]),
        .Q(M00_AXI_0_wlast[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[46]),
        .Q(M00_AXI_0_wlast[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[47]),
        .Q(M00_AXI_0_wlast[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[48]),
        .Q(M00_AXI_0_wlast[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[49]),
        .Q(M00_AXI_0_wlast[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[4]),
        .Q(M00_AXI_0_wlast[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[50]),
        .Q(M00_AXI_0_wlast[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[51]),
        .Q(M00_AXI_0_wlast[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[52]),
        .Q(M00_AXI_0_wlast[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[53]),
        .Q(M00_AXI_0_wlast[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[54]),
        .Q(M00_AXI_0_wlast[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[55]),
        .Q(M00_AXI_0_wlast[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[56]),
        .Q(M00_AXI_0_wlast[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[57]),
        .Q(M00_AXI_0_wlast[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[58]),
        .Q(M00_AXI_0_wlast[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[59]),
        .Q(M00_AXI_0_wlast[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[5]),
        .Q(M00_AXI_0_wlast[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[60]),
        .Q(M00_AXI_0_wlast[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[61]),
        .Q(M00_AXI_0_wlast[61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[62] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[62]),
        .Q(M00_AXI_0_wlast[62]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[63] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[63]),
        .Q(M00_AXI_0_wlast[63]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[64] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[64]),
        .Q(M00_AXI_0_wlast[64]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[65] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[65]),
        .Q(M00_AXI_0_wlast[65]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[66] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[66]),
        .Q(M00_AXI_0_wlast[66]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[67] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[67]),
        .Q(M00_AXI_0_wlast[67]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[68] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[68]),
        .Q(M00_AXI_0_wlast[68]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[69] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[69]),
        .Q(M00_AXI_0_wlast[69]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[6]),
        .Q(M00_AXI_0_wlast[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[70] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[70]),
        .Q(M00_AXI_0_wlast[70]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[71] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[71]),
        .Q(M00_AXI_0_wlast[71]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[72] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[72]),
        .Q(M00_AXI_0_wlast[72]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[7]),
        .Q(M00_AXI_0_wlast[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[8]),
        .Q(M00_AXI_0_wlast[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1_n_0 ),
        .D(skid_buffer[9]),
        .Q(M00_AXI_0_wlast[9]),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hFF5D)) 
    m_valid_i0
       (.I0(\skid_buffer_reg[0]_0 ),
        .I1(M00_AXI_0_wvalid),
        .I2(m_axi_wready),
        .I3(s_axi_wvalid),
        .O(m_valid_i0__0));
  LUT1 #(
    .INIT(2'h1)) 
    m_valid_i_i_1__1
       (.I0(m_valid_i_reg_1),
        .O(m_valid_i_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0__0),
        .Q(M00_AXI_0_wvalid),
        .R(m_valid_i_reg_0));
  LUT4 #(
    .INIT(16'hDFDD)) 
    s_ready_i_i_1
       (.I0(M00_AXI_0_wvalid),
        .I1(m_axi_wready),
        .I2(s_axi_wvalid),
        .I3(\skid_buffer_reg[0]_0 ),
        .O(s_ready_i0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i0),
        .Q(\skid_buffer_reg[0]_0 ),
        .R(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[32]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[33]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[34]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[35]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[36]),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[37] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[37]),
        .Q(\skid_buffer_reg_n_0_[37] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[38] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[38]),
        .Q(\skid_buffer_reg_n_0_[38] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[39] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[39]),
        .Q(\skid_buffer_reg_n_0_[39] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[40] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[40]),
        .Q(\skid_buffer_reg_n_0_[40] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[41] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[41]),
        .Q(\skid_buffer_reg_n_0_[41] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[42] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[42]),
        .Q(\skid_buffer_reg_n_0_[42] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[43] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[43]),
        .Q(\skid_buffer_reg_n_0_[43] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[44] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[44]),
        .Q(\skid_buffer_reg_n_0_[44] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[45] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[45]),
        .Q(\skid_buffer_reg_n_0_[45] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[46] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[46]),
        .Q(\skid_buffer_reg_n_0_[46] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[47] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[47]),
        .Q(\skid_buffer_reg_n_0_[47] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[48] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[48]),
        .Q(\skid_buffer_reg_n_0_[48] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[49] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[49]),
        .Q(\skid_buffer_reg_n_0_[49] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[50] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[50]),
        .Q(\skid_buffer_reg_n_0_[50] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[51] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[51]),
        .Q(\skid_buffer_reg_n_0_[51] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[52] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[52]),
        .Q(\skid_buffer_reg_n_0_[52] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[53] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[53]),
        .Q(\skid_buffer_reg_n_0_[53] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[54] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[54]),
        .Q(\skid_buffer_reg_n_0_[54] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[55] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[55]),
        .Q(\skid_buffer_reg_n_0_[55] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[56] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[56]),
        .Q(\skid_buffer_reg_n_0_[56] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[57] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[57]),
        .Q(\skid_buffer_reg_n_0_[57] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[58] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[58]),
        .Q(\skid_buffer_reg_n_0_[58] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[59] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[59]),
        .Q(\skid_buffer_reg_n_0_[59] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[60] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[60]),
        .Q(\skid_buffer_reg_n_0_[60] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[61] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[61]),
        .Q(\skid_buffer_reg_n_0_[61] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[62] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[62]),
        .Q(\skid_buffer_reg_n_0_[62] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[63] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[63]),
        .Q(\skid_buffer_reg_n_0_[63] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[64] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[0]),
        .Q(\skid_buffer_reg_n_0_[64] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[65] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[1]),
        .Q(\skid_buffer_reg_n_0_[65] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[66] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[2]),
        .Q(\skid_buffer_reg_n_0_[66] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[67] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[3]),
        .Q(\skid_buffer_reg_n_0_[67] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[68] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[4]),
        .Q(\skid_buffer_reg_n_0_[68] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[69] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[5]),
        .Q(\skid_buffer_reg_n_0_[69] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[70] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[6]),
        .Q(\skid_buffer_reg_n_0_[70] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[71] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[7]),
        .Q(\skid_buffer_reg_n_0_[71] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[72] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wlast),
        .Q(\skid_buffer_reg_n_0_[72] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1
   (S01_AXI_0_bvalid,
    m_axi_bready,
    s_axi_bresp,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    m_axi_bvalid,
    s_axi_bready,
    \aresetn_d_reg[1]_0 ,
    m_axi_bresp);
  output S01_AXI_0_bvalid;
  output m_axi_bready;
  output [1:0]s_axi_bresp;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input m_axi_bvalid;
  input s_axi_bready;
  input \aresetn_d_reg[1]_0 ;
  input [1:0]m_axi_bresp;

  wire \<const0> ;
  wire \<const1> ;
  wire S01_AXI_0_bvalid;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire \m_payload_i[0]_i_1_n_0 ;
  wire \m_payload_i[1]_i_1_n_0 ;
  wire m_valid_i_i_2_n_0;
  wire p_1_in;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_ready_i_i_1__2_n_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair742" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_bresp[0]),
        .I1(S01_AXI_0_bvalid),
        .I2(s_axi_bresp[0]),
        .O(\m_payload_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair742" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_bresp[1]),
        .I1(S01_AXI_0_bvalid),
        .I2(s_axi_bresp[1]),
        .O(\m_payload_i[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[0]_i_1_n_0 ),
        .Q(s_axi_bresp[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[1]_i_1_n_0 ),
        .Q(s_axi_bresp[1]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_2
       (.I0(m_axi_bvalid),
        .I1(m_axi_bready),
        .I2(s_axi_bready),
        .O(m_valid_i_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_2_n_0),
        .Q(S01_AXI_0_bvalid),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_1__2
       (.I0(m_axi_bvalid),
        .I1(S01_AXI_0_bvalid),
        .I2(s_axi_bready),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(s_ready_i_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__2_n_0),
        .Q(m_axi_bready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_14
   (s_ready_i_reg_0,
    m_axi_bready,
    s_axi_bresp,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    m_axi_bvalid,
    s_axi_bready,
    \aresetn_d_reg[1]_0 ,
    m_axi_bresp);
  output s_ready_i_reg_0;
  output m_axi_bready;
  output [1:0]s_axi_bresp;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input m_axi_bvalid;
  input s_axi_bready;
  input \aresetn_d_reg[1]_0 ;
  input [1:0]m_axi_bresp;

  wire \<const0> ;
  wire \<const1> ;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire \m_payload_i[0]_i_1_n_0 ;
  wire \m_payload_i[1]_i_1_n_0 ;
  wire m_valid_i_i_2_n_0;
  wire p_1_in;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_ready_i_i_1__2_n_0;
  wire s_ready_i_reg_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair508" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_bresp[0]),
        .I1(s_ready_i_reg_0),
        .I2(s_axi_bresp[0]),
        .O(\m_payload_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair508" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_bresp[1]),
        .I1(s_ready_i_reg_0),
        .I2(s_axi_bresp[1]),
        .O(\m_payload_i[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[0]_i_1_n_0 ),
        .Q(s_axi_bresp[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[1]_i_1_n_0 ),
        .Q(s_axi_bresp[1]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_2
       (.I0(m_axi_bvalid),
        .I1(m_axi_bready),
        .I2(s_axi_bready),
        .O(m_valid_i_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_2_n_0),
        .Q(s_ready_i_reg_0),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_1__2
       (.I0(m_axi_bvalid),
        .I1(s_ready_i_reg_0),
        .I2(s_axi_bready),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(s_ready_i_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__2_n_0),
        .Q(m_axi_bready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_38
   (s_ready_i_reg_0,
    m_axi_bready,
    s_axi_bid,
    s_axi_bresp,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    m_axi_bvalid,
    s_axi_bready,
    \aresetn_d_reg[1]_0 ,
    m_axi_bid,
    m_axi_bresp);
  output s_ready_i_reg_0;
  output m_axi_bready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input m_axi_bvalid;
  input s_axi_bready;
  input \aresetn_d_reg[1]_0 ;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;

  wire \<const0> ;
  wire \<const1> ;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire [0:0]m_axi_bid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire \m_payload_i[0]_i_1_n_0 ;
  wire \m_payload_i[1]_i_1_n_0 ;
  wire \m_payload_i[2]_i_1_n_0 ;
  wire m_valid_i_i_2_n_0;
  wire p_1_in;
  wire [0:0]s_axi_bid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_ready_i_i_1__2_n_0;
  wire s_ready_i_reg_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_bresp[0]),
        .I1(s_ready_i_reg_0),
        .I2(s_axi_bresp[0]),
        .O(\m_payload_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_bresp[1]),
        .I1(s_ready_i_reg_0),
        .I2(s_axi_bresp[1]),
        .O(\m_payload_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[2]_i_1 
       (.I0(m_axi_bid),
        .I1(s_ready_i_reg_0),
        .I2(s_axi_bid),
        .O(\m_payload_i[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[0]_i_1_n_0 ),
        .Q(s_axi_bresp[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[1]_i_1_n_0 ),
        .Q(s_axi_bresp[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[2]_i_1_n_0 ),
        .Q(s_axi_bid),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_2
       (.I0(m_axi_bvalid),
        .I1(m_axi_bready),
        .I2(s_axi_bready),
        .O(m_valid_i_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_2_n_0),
        .Q(s_ready_i_reg_0),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_1__2
       (.I0(m_axi_bvalid),
        .I1(s_ready_i_reg_0),
        .I2(s_axi_bready),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(s_ready_i_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__2_n_0),
        .Q(m_axi_bready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_52
   (s_ready_i_reg_0,
    mi_bready_2,
    \m_payload_i_reg[2]_0 ,
    s_ready_i_reg_1,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    \gen_arbiter.m_grant_enc_i_reg[0]_0 ,
    \gen_arbiter.m_grant_enc_i_reg[0]_1 ,
    w_cmd_pop_2__0,
    \aresetn_d_reg[1]_0 ,
    \gen_axi.s_axi_bvalid_i_reg ,
    aclk,
    p_1_in,
    \m_payload_i_reg[2]_1 ,
    \aresetn_d_reg[0] ,
    p_21_in,
    bready_carry,
    st_aa_awtarget_hot,
    target_mi_enc,
    valid_qual_i3__2,
    \gen_arbiter.last_rr_hot_reg[0] ,
    target_mi_enc_0,
    \gen_arbiter.last_rr_hot_reg[1] ,
    \gen_master_slots[2].w_issuing_cnt_reg[16] ,
    \gen_single_thread.active_target_enc_reg[1] ,
    s_axi_bready,
    \gen_single_thread.active_target_enc_reg[1]_0 );
  output s_ready_i_reg_0;
  output mi_bready_2;
  output \m_payload_i_reg[2]_0 ;
  output s_ready_i_reg_1;
  output \gen_arbiter.m_grant_enc_i_reg[0] ;
  output [0:0]\gen_arbiter.m_grant_enc_i_reg[0]_0 ;
  output \gen_arbiter.m_grant_enc_i_reg[0]_1 ;
  output w_cmd_pop_2__0;
  input \aresetn_d_reg[1]_0 ;
  input \gen_axi.s_axi_bvalid_i_reg ;
  input aclk;
  input p_1_in;
  input \m_payload_i_reg[2]_1 ;
  input \aresetn_d_reg[0] ;
  input p_21_in;
  input [0:0]bready_carry;
  input [1:0]st_aa_awtarget_hot;
  input target_mi_enc;
  input [1:0]valid_qual_i3__2;
  input \gen_arbiter.last_rr_hot_reg[0] ;
  input target_mi_enc_0;
  input \gen_arbiter.last_rr_hot_reg[1] ;
  input [0:0]\gen_master_slots[2].w_issuing_cnt_reg[16] ;
  input \gen_single_thread.active_target_enc_reg[1] ;
  input [1:0]s_axi_bready;
  input \gen_single_thread.active_target_enc_reg[1]_0 ;

  wire \<const0> ;
  wire \<const1> ;
  wire aclk;
  wire \aresetn_d_reg[0] ;
  wire \aresetn_d_reg[1]_0 ;
  wire [0:0]bready_carry;
  wire \gen_arbiter.last_rr_hot_reg[0] ;
  wire \gen_arbiter.last_rr_hot_reg[1] ;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire [0:0]\gen_arbiter.m_grant_enc_i_reg[0]_0 ;
  wire \gen_arbiter.m_grant_enc_i_reg[0]_1 ;
  wire \gen_axi.s_axi_bvalid_i_reg ;
  wire [0:0]\gen_master_slots[2].w_issuing_cnt_reg[16] ;
  wire \gen_single_thread.active_target_enc_reg[1] ;
  wire \gen_single_thread.active_target_enc_reg[1]_0 ;
  wire \m_payload_i_reg[2]_0 ;
  wire \m_payload_i_reg[2]_1 ;
  wire mi_bready_2;
  wire p_1_in;
  wire p_21_in;
  wire [1:0]s_axi_bready;
  wire s_ready_i_i_1_n_0;
  wire s_ready_i_reg_0;
  wire s_ready_i_reg_1;
  wire [1:0]st_aa_awtarget_hot;
  wire target_mi_enc;
  wire target_mi_enc_0;
  wire [1:0]valid_qual_i3__2;
  wire w_cmd_pop_2__0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\aresetn_d_reg[0] ),
        .Q(s_ready_i_reg_1),
        .R(\<const0> ));
  LUT2 #(
    .INIT(4'hB)) 
    \gen_arbiter.m_grant_enc_i[0]_i_12 
       (.I0(w_cmd_pop_2__0),
        .I1(\gen_master_slots[2].w_issuing_cnt_reg[16] ),
        .O(\gen_arbiter.m_grant_enc_i_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFECEF20200000000)) 
    \gen_arbiter.m_grant_enc_i[0]_i_5 
       (.I0(\gen_arbiter.m_grant_enc_i_reg[0]_0 ),
        .I1(st_aa_awtarget_hot[0]),
        .I2(target_mi_enc),
        .I3(valid_qual_i3__2[1]),
        .I4(valid_qual_i3__2[0]),
        .I5(\gen_arbiter.last_rr_hot_reg[0] ),
        .O(\gen_arbiter.m_grant_enc_i_reg[0] ));
  LUT6 #(
    .INIT(64'hFECEF20200000000)) 
    \gen_arbiter.m_grant_enc_i[0]_i_7 
       (.I0(\gen_arbiter.m_grant_enc_i_reg[0]_0 ),
        .I1(st_aa_awtarget_hot[1]),
        .I2(target_mi_enc_0),
        .I3(valid_qual_i3__2[1]),
        .I4(valid_qual_i3__2[0]),
        .I5(\gen_arbiter.last_rr_hot_reg[1] ),
        .O(\gen_arbiter.m_grant_enc_i_reg[0]_1 ));
  LUT6 #(
    .INIT(64'hAA80008000800080)) 
    \gen_master_slots[2].w_issuing_cnt[16]_i_2 
       (.I0(s_ready_i_reg_0),
        .I1(\gen_single_thread.active_target_enc_reg[1] ),
        .I2(s_axi_bready[0]),
        .I3(\m_payload_i_reg[2]_0 ),
        .I4(s_axi_bready[1]),
        .I5(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .O(w_cmd_pop_2__0));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i_reg[2]_1 ),
        .Q(\m_payload_i_reg[2]_0 ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(\gen_axi.s_axi_bvalid_i_reg ),
        .Q(s_ready_i_reg_0),
        .R(\aresetn_d_reg[1]_0 ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_1
       (.I0(p_21_in),
        .I1(s_ready_i_reg_0),
        .I2(bready_carry),
        .I3(s_ready_i_reg_1),
        .O(s_ready_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1_n_0),
        .Q(mi_bready_2),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_55
   (s_ready_i_reg_0,
    m_axi_bready,
    p_0_in,
    \gen_master_slots[1].w_issuing_cnt_reg[8] ,
    w_cmd_pop_1__0,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    st_mr_bid,
    st_mr_bmesg,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    aresetn,
    m_axi_bvalid,
    bready_carry,
    \aresetn_d_reg[1]_0 ,
    w_issuing_cnt,
    \m_ready_d_reg[1] ,
    Q,
    m_axi_awready,
    \gen_single_thread.active_target_enc_reg[0] ,
    s_axi_bready,
    \gen_single_thread.active_target_enc_reg[0]_0 ,
    m_axi_bid,
    m_axi_bresp);
  output s_ready_i_reg_0;
  output [0:0]m_axi_bready;
  output [0:0]p_0_in;
  output \gen_master_slots[1].w_issuing_cnt_reg[8] ;
  output w_cmd_pop_1__0;
  output [0:0]\gen_arbiter.m_grant_enc_i_reg[0] ;
  output [0:0]st_mr_bid;
  output [1:0]st_mr_bmesg;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input aresetn;
  input [0:0]m_axi_bvalid;
  input [0:0]bready_carry;
  input \aresetn_d_reg[1]_0 ;
  input [1:0]w_issuing_cnt;
  input \m_ready_d_reg[1] ;
  input [0:0]Q;
  input [0:0]m_axi_awready;
  input \gen_single_thread.active_target_enc_reg[0] ;
  input [1:0]s_axi_bready;
  input \gen_single_thread.active_target_enc_reg[0]_0 ;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]Q;
  wire aclk;
  wire aresetn;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire [0:0]bready_carry;
  wire [0:0]\gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_master_slots[1].w_issuing_cnt_reg[8] ;
  wire \gen_single_thread.active_target_enc_reg[0] ;
  wire \gen_single_thread.active_target_enc_reg[0]_0 ;
  wire [0:0]m_axi_awready;
  wire [0:0]m_axi_bid;
  wire [0:0]m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire [0:0]m_axi_bvalid;
  wire \m_payload_i[0]_i_1__0_n_0 ;
  wire \m_payload_i[1]_i_1__0_n_0 ;
  wire \m_payload_i[2]_i_1__0_n_0 ;
  wire \m_ready_d_reg[1] ;
  wire m_valid_i_i_1__0_n_0;
  wire [0:0]p_0_in;
  wire p_1_in;
  wire [1:0]s_axi_bready;
  wire s_ready_i_i_2__2_n_0;
  wire s_ready_i_reg_0;
  wire [0:0]st_mr_bid;
  wire [1:0]st_mr_bmesg;
  wire w_cmd_pop_1__0;
  wire [1:0]w_issuing_cnt;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(aresetn),
        .Q(p_0_in),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'hFD)) 
    \gen_arbiter.m_grant_enc_i[0]_i_14 
       (.I0(w_issuing_cnt[1]),
        .I1(w_cmd_pop_1__0),
        .I2(w_issuing_cnt[0]),
        .O(\gen_arbiter.m_grant_enc_i_reg[0] ));
  LUT6 #(
    .INIT(64'h3C33333383888888)) 
    \gen_master_slots[1].w_issuing_cnt[8]_i_1 
       (.I0(w_issuing_cnt[1]),
        .I1(w_cmd_pop_1__0),
        .I2(\m_ready_d_reg[1] ),
        .I3(Q),
        .I4(m_axi_awready),
        .I5(w_issuing_cnt[0]),
        .O(\gen_master_slots[1].w_issuing_cnt_reg[8] ));
  LUT6 #(
    .INIT(64'hAA80008000800080)) 
    \gen_master_slots[1].w_issuing_cnt[9]_i_3 
       (.I0(s_ready_i_reg_0),
        .I1(\gen_single_thread.active_target_enc_reg[0] ),
        .I2(s_axi_bready[0]),
        .I3(st_mr_bid),
        .I4(s_axi_bready[1]),
        .I5(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .O(w_cmd_pop_1__0));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[0]_i_1__0 
       (.I0(m_axi_bresp[0]),
        .I1(s_ready_i_reg_0),
        .I2(st_mr_bmesg[0]),
        .O(\m_payload_i[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[1]_i_1__0 
       (.I0(m_axi_bresp[1]),
        .I1(s_ready_i_reg_0),
        .I2(st_mr_bmesg[1]),
        .O(\m_payload_i[1]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[2]_i_1__0 
       (.I0(m_axi_bid),
        .I1(s_ready_i_reg_0),
        .I2(st_mr_bid),
        .O(\m_payload_i[2]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[0]_i_1__0_n_0 ),
        .Q(st_mr_bmesg[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[1]_i_1__0_n_0 ),
        .Q(st_mr_bmesg[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[2]_i_1__0_n_0 ),
        .Q(st_mr_bid),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_1__0
       (.I0(m_axi_bvalid),
        .I1(m_axi_bready),
        .I2(bready_carry),
        .O(m_valid_i_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1__0_n_0),
        .Q(s_ready_i_reg_0),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_2__2
       (.I0(m_axi_bvalid),
        .I1(s_ready_i_reg_0),
        .I2(bready_carry),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(s_ready_i_i_2__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_2__2_n_0),
        .Q(m_axi_bready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_58
   (s_ready_i_reg_0,
    m_axi_bready,
    \gen_master_slots[0].w_issuing_cnt_reg[0] ,
    w_cmd_pop_0__0,
    \gen_arbiter.qual_reg_reg[1] ,
    grant_hot0,
    valid_qual_i3__2,
    st_mr_bid,
    st_mr_bmesg,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    m_axi_bvalid,
    bready_carry,
    \aresetn_d_reg[1]_0 ,
    w_issuing_cnt,
    \m_ready_d_reg[1] ,
    Q,
    m_axi_awready,
    st_aa_awvalid_qual,
    \m_ready_d_reg[0] ,
    s_axi_awvalid,
    \gen_arbiter.last_rr_hot_reg[0] ,
    \gen_arbiter.last_rr_hot_reg[1] ,
    \m_ready_d_reg[0]_0 ,
    st_aa_awtarget_hot,
    \m_payload_i_reg[18] ,
    \gen_master_slots[2].w_issuing_cnt_reg[16] ,
    \m_payload_i_reg[18]_0 ,
    \m_payload_i_reg[18]_1 ,
    \m_payload_i_reg[18]_2 ,
    \gen_single_thread.active_target_hot_reg[0] ,
    s_axi_bready,
    \gen_single_thread.active_target_hot_reg[0]_0 ,
    m_axi_bid,
    m_axi_bresp);
  output s_ready_i_reg_0;
  output [0:0]m_axi_bready;
  output \gen_master_slots[0].w_issuing_cnt_reg[0] ;
  output w_cmd_pop_0__0;
  output [1:0]\gen_arbiter.qual_reg_reg[1] ;
  output grant_hot0;
  output [0:0]valid_qual_i3__2;
  output [0:0]st_mr_bid;
  output [1:0]st_mr_bmesg;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input [0:0]m_axi_bvalid;
  input [0:0]bready_carry;
  input \aresetn_d_reg[1]_0 ;
  input [1:0]w_issuing_cnt;
  input \m_ready_d_reg[1] ;
  input [0:0]Q;
  input [0:0]m_axi_awready;
  input [1:0]st_aa_awvalid_qual;
  input \m_ready_d_reg[0] ;
  input [1:0]s_axi_awvalid;
  input \gen_arbiter.last_rr_hot_reg[0] ;
  input \gen_arbiter.last_rr_hot_reg[1] ;
  input \m_ready_d_reg[0]_0 ;
  input [1:0]st_aa_awtarget_hot;
  input \m_payload_i_reg[18] ;
  input [1:0]\gen_master_slots[2].w_issuing_cnt_reg[16] ;
  input \m_payload_i_reg[18]_0 ;
  input \m_payload_i_reg[18]_1 ;
  input \m_payload_i_reg[18]_2 ;
  input \gen_single_thread.active_target_hot_reg[0] ;
  input [1:0]s_axi_bready;
  input \gen_single_thread.active_target_hot_reg[0]_0 ;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]Q;
  wire aclk;
  wire \addr_arbiter_aw/valid_qual_i111_in ;
  wire \addr_arbiter_aw/valid_qual_i1__1 ;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire [0:0]bready_carry;
  wire \gen_arbiter.last_rr_hot_reg[0] ;
  wire \gen_arbiter.last_rr_hot_reg[1] ;
  wire [1:0]\gen_arbiter.qual_reg_reg[1] ;
  wire \gen_master_slots[0].w_issuing_cnt_reg[0] ;
  wire [1:0]\gen_master_slots[2].w_issuing_cnt_reg[16] ;
  wire \gen_single_thread.active_target_hot_reg[0] ;
  wire \gen_single_thread.active_target_hot_reg[0]_0 ;
  wire grant_hot0;
  wire [0:0]m_axi_awready;
  wire [0:0]m_axi_bid;
  wire [0:0]m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire [0:0]m_axi_bvalid;
  wire \m_payload_i[0]_i_1_n_0 ;
  wire \m_payload_i[1]_i_1_n_0 ;
  wire \m_payload_i[2]_i_1_n_0 ;
  wire \m_payload_i_reg[18] ;
  wire \m_payload_i_reg[18]_0 ;
  wire \m_payload_i_reg[18]_1 ;
  wire \m_payload_i_reg[18]_2 ;
  wire \m_ready_d_reg[0] ;
  wire \m_ready_d_reg[0]_0 ;
  wire \m_ready_d_reg[1] ;
  wire m_valid_i_i_2__0_n_0;
  wire p_1_in;
  wire [1:0]s_axi_awvalid;
  wire [1:0]s_axi_bready;
  wire s_ready_i_i_1__0_n_0;
  wire s_ready_i_reg_0;
  wire [1:0]st_aa_awtarget_hot;
  wire [1:0]st_aa_awvalid_qual;
  wire [0:0]st_mr_bid;
  wire [1:0]st_mr_bmesg;
  wire [0:0]valid_qual_i3__2;
  wire w_cmd_pop_0__0;
  wire [1:0]w_issuing_cnt;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'hFF80808080808080)) 
    \gen_arbiter.any_grant_i_2 
       (.I0(st_aa_awvalid_qual[0]),
        .I1(\addr_arbiter_aw/valid_qual_i1__1 ),
        .I2(\gen_arbiter.last_rr_hot_reg[0] ),
        .I3(st_aa_awvalid_qual[1]),
        .I4(\addr_arbiter_aw/valid_qual_i111_in ),
        .I5(\gen_arbiter.last_rr_hot_reg[1] ),
        .O(grant_hot0));
  LUT3 #(
    .INIT(8'hFD)) 
    \gen_arbiter.m_grant_enc_i[0]_i_15 
       (.I0(w_issuing_cnt[1]),
        .I1(w_cmd_pop_0__0),
        .I2(w_issuing_cnt[0]),
        .O(valid_qual_i3__2));
  LUT4 #(
    .INIT(16'hF8FF)) 
    \gen_arbiter.qual_reg[0]_i_1 
       (.I0(\addr_arbiter_aw/valid_qual_i1__1 ),
        .I1(st_aa_awvalid_qual[0]),
        .I2(\m_ready_d_reg[0]_0 ),
        .I3(s_axi_awvalid[0]),
        .O(\gen_arbiter.qual_reg_reg[1] [0]));
  LUT6 #(
    .INIT(64'hF888FFFFF888F888)) 
    \gen_arbiter.qual_reg[0]_i_2 
       (.I0(st_aa_awtarget_hot[0]),
        .I1(valid_qual_i3__2),
        .I2(\m_payload_i_reg[18]_1 ),
        .I3(\gen_master_slots[2].w_issuing_cnt_reg[16] [0]),
        .I4(\m_payload_i_reg[18]_2 ),
        .I5(\gen_master_slots[2].w_issuing_cnt_reg[16] [1]),
        .O(\addr_arbiter_aw/valid_qual_i1__1 ));
  LUT4 #(
    .INIT(16'hF8FF)) 
    \gen_arbiter.qual_reg[1]_i_1 
       (.I0(\addr_arbiter_aw/valid_qual_i111_in ),
        .I1(st_aa_awvalid_qual[1]),
        .I2(\m_ready_d_reg[0] ),
        .I3(s_axi_awvalid[1]),
        .O(\gen_arbiter.qual_reg_reg[1] [1]));
  LUT6 #(
    .INIT(64'hF888FFFFF888F888)) 
    \gen_arbiter.qual_reg[1]_i_2 
       (.I0(st_aa_awtarget_hot[1]),
        .I1(valid_qual_i3__2),
        .I2(\m_payload_i_reg[18] ),
        .I3(\gen_master_slots[2].w_issuing_cnt_reg[16] [0]),
        .I4(\m_payload_i_reg[18]_0 ),
        .I5(\gen_master_slots[2].w_issuing_cnt_reg[16] [1]),
        .O(\addr_arbiter_aw/valid_qual_i111_in ));
  LUT6 #(
    .INIT(64'h3C33333383888888)) 
    \gen_master_slots[0].w_issuing_cnt[0]_i_1 
       (.I0(w_issuing_cnt[1]),
        .I1(w_cmd_pop_0__0),
        .I2(\m_ready_d_reg[1] ),
        .I3(Q),
        .I4(m_axi_awready),
        .I5(w_issuing_cnt[0]),
        .O(\gen_master_slots[0].w_issuing_cnt_reg[0] ));
  LUT6 #(
    .INIT(64'hAA80008000800080)) 
    \gen_master_slots[0].w_issuing_cnt[1]_i_2 
       (.I0(s_ready_i_reg_0),
        .I1(\gen_single_thread.active_target_hot_reg[0] ),
        .I2(s_axi_bready[0]),
        .I3(st_mr_bid),
        .I4(s_axi_bready[1]),
        .I5(\gen_single_thread.active_target_hot_reg[0]_0 ),
        .O(w_cmd_pop_0__0));
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_bresp[0]),
        .I1(s_ready_i_reg_0),
        .I2(st_mr_bmesg[0]),
        .O(\m_payload_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_bresp[1]),
        .I1(s_ready_i_reg_0),
        .I2(st_mr_bmesg[1]),
        .O(\m_payload_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[2]_i_1 
       (.I0(m_axi_bid),
        .I1(s_ready_i_reg_0),
        .I2(st_mr_bid),
        .O(\m_payload_i[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[0]_i_1_n_0 ),
        .Q(st_mr_bmesg[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[1]_i_1_n_0 ),
        .Q(st_mr_bmesg[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[2]_i_1_n_0 ),
        .Q(st_mr_bid),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_2__0
       (.I0(m_axi_bvalid),
        .I1(m_axi_bready),
        .I2(bready_carry),
        .O(m_valid_i_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_2__0_n_0),
        .Q(s_ready_i_reg_0),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_1__0
       (.I0(m_axi_bvalid),
        .I1(s_ready_i_reg_0),
        .I2(bready_carry),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(s_ready_i_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__0_n_0),
        .Q(m_axi_bready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized1_8
   (S00_AXI_0_bvalid,
    m_axi_bready,
    s_axi_bresp,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    m_axi_bvalid,
    s_axi_bready,
    \aresetn_d_reg[1]_0 ,
    m_axi_bresp);
  output S00_AXI_0_bvalid;
  output m_axi_bready;
  output [1:0]s_axi_bresp;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input m_axi_bvalid;
  input s_axi_bready;
  input \aresetn_d_reg[1]_0 ;
  input [1:0]m_axi_bresp;

  wire \<const0> ;
  wire \<const1> ;
  wire S00_AXI_0_bvalid;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire \aresetn_d_reg[1]_0 ;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire \m_payload_i[0]_i_1_n_0 ;
  wire \m_payload_i[1]_i_1_n_0 ;
  wire m_valid_i_i_2_n_0;
  wire p_1_in;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_ready_i_i_1__2_n_0;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair544" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_bresp[0]),
        .I1(S00_AXI_0_bvalid),
        .I2(s_axi_bresp[0]),
        .O(\m_payload_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair544" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_bresp[1]),
        .I1(S00_AXI_0_bvalid),
        .I2(s_axi_bresp[1]),
        .O(\m_payload_i[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[0]_i_1_n_0 ),
        .Q(s_axi_bresp[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[1]_i_1_n_0 ),
        .Q(s_axi_bresp[1]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'h8B)) 
    m_valid_i_i_2
       (.I0(m_axi_bvalid),
        .I1(m_axi_bready),
        .I2(s_axi_bready),
        .O(m_valid_i_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i_i_2_n_0),
        .Q(S00_AXI_0_bvalid),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hD1FF)) 
    s_ready_i_i_1__2
       (.I0(m_axi_bvalid),
        .I1(S00_AXI_0_bvalid),
        .I2(s_axi_bready),
        .I3(\aresetn_d_reg[1]_0 ),
        .O(s_ready_i_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__2_n_0),
        .Q(m_axi_bready),
        .R(p_1_in));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2
   (\skid_buffer_reg[66]_0 ,
    mr_rvalid,
    Q,
    clk,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    m_axi_rvalid,
    \USE_READ.rd_cmd_valid ,
    s_ready_i_reg_0,
    \aresetn_d_reg[1] ,
    \aresetn_d_reg[0] ,
    E);
  output \skid_buffer_reg[66]_0 ;
  output mr_rvalid;
  output [66:0]Q;
  input clk;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;
  input m_axi_rvalid;
  input \USE_READ.rd_cmd_valid ;
  input s_ready_i_reg_0;
  input \aresetn_d_reg[1] ;
  input \aresetn_d_reg[0] ;
  input [0:0]E;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]E;
  wire [66:0]Q;
  wire \USE_READ.rd_cmd_valid ;
  wire \aresetn_d_reg[0] ;
  wire \aresetn_d_reg[1] ;
  wire clk;
  wire [63:0]m_axi_rdata;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire m_valid_i_i_1__0_n_0;
  wire mr_rvalid;
  wire s_ready_i_i_1_n_0;
  wire s_ready_i_reg_0;
  wire [66:0]skid_buffer;
  wire \skid_buffer_reg[66]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[37] ;
  wire \skid_buffer_reg_n_0_[38] ;
  wire \skid_buffer_reg_n_0_[39] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[40] ;
  wire \skid_buffer_reg_n_0_[41] ;
  wire \skid_buffer_reg_n_0_[42] ;
  wire \skid_buffer_reg_n_0_[43] ;
  wire \skid_buffer_reg_n_0_[44] ;
  wire \skid_buffer_reg_n_0_[45] ;
  wire \skid_buffer_reg_n_0_[46] ;
  wire \skid_buffer_reg_n_0_[47] ;
  wire \skid_buffer_reg_n_0_[48] ;
  wire \skid_buffer_reg_n_0_[49] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[50] ;
  wire \skid_buffer_reg_n_0_[51] ;
  wire \skid_buffer_reg_n_0_[52] ;
  wire \skid_buffer_reg_n_0_[53] ;
  wire \skid_buffer_reg_n_0_[54] ;
  wire \skid_buffer_reg_n_0_[55] ;
  wire \skid_buffer_reg_n_0_[56] ;
  wire \skid_buffer_reg_n_0_[57] ;
  wire \skid_buffer_reg_n_0_[58] ;
  wire \skid_buffer_reg_n_0_[59] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[60] ;
  wire \skid_buffer_reg_n_0_[61] ;
  wire \skid_buffer_reg_n_0_[62] ;
  wire \skid_buffer_reg_n_0_[63] ;
  wire \skid_buffer_reg_n_0_[64] ;
  wire \skid_buffer_reg_n_0_[65] ;
  wire \skid_buffer_reg_n_0_[66] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_rdata[0]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[0] ),
        .O(skid_buffer[0]));
  (* SOFT_HLUTNM = "soft_lutpair678" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[10]_i_1 
       (.I0(m_axi_rdata[10]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[10] ),
        .O(skid_buffer[10]));
  (* SOFT_HLUTNM = "soft_lutpair677" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[11]_i_1 
       (.I0(m_axi_rdata[11]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[11] ),
        .O(skid_buffer[11]));
  (* SOFT_HLUTNM = "soft_lutpair677" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[12]_i_1 
       (.I0(m_axi_rdata[12]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[12] ),
        .O(skid_buffer[12]));
  (* SOFT_HLUTNM = "soft_lutpair676" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[13]_i_1 
       (.I0(m_axi_rdata[13]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[13] ),
        .O(skid_buffer[13]));
  (* SOFT_HLUTNM = "soft_lutpair676" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[14]_i_1 
       (.I0(m_axi_rdata[14]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[14] ),
        .O(skid_buffer[14]));
  (* SOFT_HLUTNM = "soft_lutpair675" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[15]_i_1 
       (.I0(m_axi_rdata[15]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[15] ),
        .O(skid_buffer[15]));
  (* SOFT_HLUTNM = "soft_lutpair675" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[16]_i_1 
       (.I0(m_axi_rdata[16]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[16] ),
        .O(skid_buffer[16]));
  (* SOFT_HLUTNM = "soft_lutpair674" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[17]_i_1 
       (.I0(m_axi_rdata[17]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[17] ),
        .O(skid_buffer[17]));
  (* SOFT_HLUTNM = "soft_lutpair674" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[18]_i_1 
       (.I0(m_axi_rdata[18]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[18] ),
        .O(skid_buffer[18]));
  (* SOFT_HLUTNM = "soft_lutpair673" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[19]_i_1 
       (.I0(m_axi_rdata[19]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[19] ),
        .O(skid_buffer[19]));
  (* SOFT_HLUTNM = "soft_lutpair682" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_rdata[1]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[1] ),
        .O(skid_buffer[1]));
  (* SOFT_HLUTNM = "soft_lutpair673" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[20]_i_1 
       (.I0(m_axi_rdata[20]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[20] ),
        .O(skid_buffer[20]));
  (* SOFT_HLUTNM = "soft_lutpair672" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[21]_i_1 
       (.I0(m_axi_rdata[21]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[21] ),
        .O(skid_buffer[21]));
  (* SOFT_HLUTNM = "soft_lutpair672" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[22]_i_1 
       (.I0(m_axi_rdata[22]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[22] ),
        .O(skid_buffer[22]));
  (* SOFT_HLUTNM = "soft_lutpair671" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[23]_i_1 
       (.I0(m_axi_rdata[23]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[23] ),
        .O(skid_buffer[23]));
  (* SOFT_HLUTNM = "soft_lutpair671" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[24]_i_1 
       (.I0(m_axi_rdata[24]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[24] ),
        .O(skid_buffer[24]));
  (* SOFT_HLUTNM = "soft_lutpair670" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[25]_i_1 
       (.I0(m_axi_rdata[25]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[25] ),
        .O(skid_buffer[25]));
  (* SOFT_HLUTNM = "soft_lutpair670" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[26]_i_1 
       (.I0(m_axi_rdata[26]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[26] ),
        .O(skid_buffer[26]));
  (* SOFT_HLUTNM = "soft_lutpair669" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[27]_i_1 
       (.I0(m_axi_rdata[27]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[27] ),
        .O(skid_buffer[27]));
  (* SOFT_HLUTNM = "soft_lutpair669" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[28]_i_1 
       (.I0(m_axi_rdata[28]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[28] ),
        .O(skid_buffer[28]));
  (* SOFT_HLUTNM = "soft_lutpair668" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[29]_i_1 
       (.I0(m_axi_rdata[29]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[29] ),
        .O(skid_buffer[29]));
  (* SOFT_HLUTNM = "soft_lutpair682" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[2]_i_1 
       (.I0(m_axi_rdata[2]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[2] ),
        .O(skid_buffer[2]));
  (* SOFT_HLUTNM = "soft_lutpair668" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[30]_i_1 
       (.I0(m_axi_rdata[30]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[30] ),
        .O(skid_buffer[30]));
  (* SOFT_HLUTNM = "soft_lutpair667" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[31]_i_1__1 
       (.I0(m_axi_rdata[31]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[31] ),
        .O(skid_buffer[31]));
  (* SOFT_HLUTNM = "soft_lutpair667" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[32]_i_1 
       (.I0(m_axi_rdata[32]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[32] ),
        .O(skid_buffer[32]));
  (* SOFT_HLUTNM = "soft_lutpair666" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[33]_i_1 
       (.I0(m_axi_rdata[33]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[33] ),
        .O(skid_buffer[33]));
  (* SOFT_HLUTNM = "soft_lutpair666" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[34]_i_1 
       (.I0(m_axi_rdata[34]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[34] ),
        .O(skid_buffer[34]));
  (* SOFT_HLUTNM = "soft_lutpair665" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[35]_i_1 
       (.I0(m_axi_rdata[35]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[35] ),
        .O(skid_buffer[35]));
  (* SOFT_HLUTNM = "soft_lutpair665" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[36]_i_1 
       (.I0(m_axi_rdata[36]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[36] ),
        .O(skid_buffer[36]));
  (* SOFT_HLUTNM = "soft_lutpair664" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[37]_i_1 
       (.I0(m_axi_rdata[37]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[37] ),
        .O(skid_buffer[37]));
  (* SOFT_HLUTNM = "soft_lutpair664" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[38]_i_1 
       (.I0(m_axi_rdata[38]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[38] ),
        .O(skid_buffer[38]));
  (* SOFT_HLUTNM = "soft_lutpair663" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[39]_i_1 
       (.I0(m_axi_rdata[39]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[39] ),
        .O(skid_buffer[39]));
  (* SOFT_HLUTNM = "soft_lutpair681" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[3]_i_1 
       (.I0(m_axi_rdata[3]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[3] ),
        .O(skid_buffer[3]));
  (* SOFT_HLUTNM = "soft_lutpair663" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[40]_i_1 
       (.I0(m_axi_rdata[40]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[40] ),
        .O(skid_buffer[40]));
  (* SOFT_HLUTNM = "soft_lutpair662" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[41]_i_1 
       (.I0(m_axi_rdata[41]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[41] ),
        .O(skid_buffer[41]));
  (* SOFT_HLUTNM = "soft_lutpair662" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[42]_i_1 
       (.I0(m_axi_rdata[42]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[42] ),
        .O(skid_buffer[42]));
  (* SOFT_HLUTNM = "soft_lutpair661" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[43]_i_1 
       (.I0(m_axi_rdata[43]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[43] ),
        .O(skid_buffer[43]));
  (* SOFT_HLUTNM = "soft_lutpair661" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[44]_i_1 
       (.I0(m_axi_rdata[44]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[44] ),
        .O(skid_buffer[44]));
  (* SOFT_HLUTNM = "soft_lutpair660" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[45]_i_1 
       (.I0(m_axi_rdata[45]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[45] ),
        .O(skid_buffer[45]));
  (* SOFT_HLUTNM = "soft_lutpair660" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[46]_i_1 
       (.I0(m_axi_rdata[46]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[46] ),
        .O(skid_buffer[46]));
  (* SOFT_HLUTNM = "soft_lutpair659" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[47]_i_1 
       (.I0(m_axi_rdata[47]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[47] ),
        .O(skid_buffer[47]));
  (* SOFT_HLUTNM = "soft_lutpair659" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[48]_i_1 
       (.I0(m_axi_rdata[48]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[48] ),
        .O(skid_buffer[48]));
  (* SOFT_HLUTNM = "soft_lutpair658" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[49]_i_1 
       (.I0(m_axi_rdata[49]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[49] ),
        .O(skid_buffer[49]));
  (* SOFT_HLUTNM = "soft_lutpair681" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[4]_i_1 
       (.I0(m_axi_rdata[4]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[4] ),
        .O(skid_buffer[4]));
  (* SOFT_HLUTNM = "soft_lutpair658" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[50]_i_1 
       (.I0(m_axi_rdata[50]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[50] ),
        .O(skid_buffer[50]));
  (* SOFT_HLUTNM = "soft_lutpair657" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[51]_i_1 
       (.I0(m_axi_rdata[51]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[51] ),
        .O(skid_buffer[51]));
  (* SOFT_HLUTNM = "soft_lutpair657" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[52]_i_1 
       (.I0(m_axi_rdata[52]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[52] ),
        .O(skid_buffer[52]));
  (* SOFT_HLUTNM = "soft_lutpair656" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[53]_i_1 
       (.I0(m_axi_rdata[53]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[53] ),
        .O(skid_buffer[53]));
  (* SOFT_HLUTNM = "soft_lutpair656" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[54]_i_1 
       (.I0(m_axi_rdata[54]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[54] ),
        .O(skid_buffer[54]));
  (* SOFT_HLUTNM = "soft_lutpair655" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[55]_i_1 
       (.I0(m_axi_rdata[55]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[55] ),
        .O(skid_buffer[55]));
  (* SOFT_HLUTNM = "soft_lutpair655" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[56]_i_1 
       (.I0(m_axi_rdata[56]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[56] ),
        .O(skid_buffer[56]));
  (* SOFT_HLUTNM = "soft_lutpair654" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[57]_i_1 
       (.I0(m_axi_rdata[57]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[57] ),
        .O(skid_buffer[57]));
  (* SOFT_HLUTNM = "soft_lutpair654" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[58]_i_1 
       (.I0(m_axi_rdata[58]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[58] ),
        .O(skid_buffer[58]));
  (* SOFT_HLUTNM = "soft_lutpair653" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[59]_i_1 
       (.I0(m_axi_rdata[59]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[59] ),
        .O(skid_buffer[59]));
  (* SOFT_HLUTNM = "soft_lutpair680" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[5]_i_1 
       (.I0(m_axi_rdata[5]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[5] ),
        .O(skid_buffer[5]));
  (* SOFT_HLUTNM = "soft_lutpair653" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[60]_i_1 
       (.I0(m_axi_rdata[60]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[60] ),
        .O(skid_buffer[60]));
  (* SOFT_HLUTNM = "soft_lutpair652" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[61]_i_1 
       (.I0(m_axi_rdata[61]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[61] ),
        .O(skid_buffer[61]));
  (* SOFT_HLUTNM = "soft_lutpair652" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[62]_i_1 
       (.I0(m_axi_rdata[62]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[62] ),
        .O(skid_buffer[62]));
  (* SOFT_HLUTNM = "soft_lutpair651" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[63]_i_1 
       (.I0(m_axi_rdata[63]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[63] ),
        .O(skid_buffer[63]));
  (* SOFT_HLUTNM = "soft_lutpair651" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[64]_i_1 
       (.I0(m_axi_rresp[0]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[64] ),
        .O(skid_buffer[64]));
  (* SOFT_HLUTNM = "soft_lutpair650" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[65]_i_1 
       (.I0(m_axi_rresp[1]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[65] ),
        .O(skid_buffer[65]));
  (* SOFT_HLUTNM = "soft_lutpair650" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[66]_i_2 
       (.I0(m_axi_rlast),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[66] ),
        .O(skid_buffer[66]));
  (* SOFT_HLUTNM = "soft_lutpair680" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[6]_i_1 
       (.I0(m_axi_rdata[6]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[6] ),
        .O(skid_buffer[6]));
  (* SOFT_HLUTNM = "soft_lutpair679" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[7]_i_1 
       (.I0(m_axi_rdata[7]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[7] ),
        .O(skid_buffer[7]));
  (* SOFT_HLUTNM = "soft_lutpair679" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[8]_i_1 
       (.I0(m_axi_rdata[8]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[8] ),
        .O(skid_buffer[8]));
  (* SOFT_HLUTNM = "soft_lutpair678" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[9]_i_1 
       (.I0(m_axi_rdata[9]),
        .I1(\skid_buffer_reg[66]_0 ),
        .I2(\skid_buffer_reg_n_0_[9] ),
        .O(skid_buffer[9]));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[0]),
        .Q(Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[10]),
        .Q(Q[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[11]),
        .Q(Q[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[12]),
        .Q(Q[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[13]),
        .Q(Q[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[14]),
        .Q(Q[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[15]),
        .Q(Q[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[16]),
        .Q(Q[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[17]),
        .Q(Q[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[18]),
        .Q(Q[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[19]),
        .Q(Q[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[1]),
        .Q(Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[20]),
        .Q(Q[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[21]),
        .Q(Q[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[22]),
        .Q(Q[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[23]),
        .Q(Q[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[24]),
        .Q(Q[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[25]),
        .Q(Q[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[26]),
        .Q(Q[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[27]),
        .Q(Q[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[28]),
        .Q(Q[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[29]),
        .Q(Q[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[2]),
        .Q(Q[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[30]),
        .Q(Q[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[31]),
        .Q(Q[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[32]),
        .Q(Q[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[33]),
        .Q(Q[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[34]),
        .Q(Q[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[35]),
        .Q(Q[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[36]),
        .Q(Q[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[37]),
        .Q(Q[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[38]),
        .Q(Q[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[39]),
        .Q(Q[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[3]),
        .Q(Q[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[40]),
        .Q(Q[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[41]),
        .Q(Q[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[42]),
        .Q(Q[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[43]),
        .Q(Q[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[44]),
        .Q(Q[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[45]),
        .Q(Q[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[46]),
        .Q(Q[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[47]),
        .Q(Q[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[48]),
        .Q(Q[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[49]),
        .Q(Q[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[4]),
        .Q(Q[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[50]),
        .Q(Q[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[51]),
        .Q(Q[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[52]),
        .Q(Q[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[53]),
        .Q(Q[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[54]),
        .Q(Q[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[55]),
        .Q(Q[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[56]),
        .Q(Q[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[57]),
        .Q(Q[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[58]),
        .Q(Q[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[59]),
        .Q(Q[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[5]),
        .Q(Q[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[60]),
        .Q(Q[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[61]),
        .Q(Q[61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[62] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[62]),
        .Q(Q[62]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[63] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[63]),
        .Q(Q[63]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[64] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[64]),
        .Q(Q[64]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[65] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[65]),
        .Q(Q[65]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[66] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[66]),
        .Q(Q[66]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[6]),
        .Q(Q[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[7]),
        .Q(Q[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[8]),
        .Q(Q[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(clk),
        .CE(E),
        .D(skid_buffer[9]),
        .Q(Q[9]),
        .R(\<const0> ));
  LUT6 #(
    .INIT(64'hDDFDFDFD00000000)) 
    m_valid_i_i_1__0
       (.I0(\skid_buffer_reg[66]_0 ),
        .I1(m_axi_rvalid),
        .I2(mr_rvalid),
        .I3(\USE_READ.rd_cmd_valid ),
        .I4(s_ready_i_reg_0),
        .I5(\aresetn_d_reg[1] ),
        .O(m_valid_i_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(m_valid_i_i_1__0_n_0),
        .Q(mr_rvalid),
        .R(\<const0> ));
  LUT6 #(
    .INIT(64'hD5D5FFD500000000)) 
    s_ready_i_i_1
       (.I0(mr_rvalid),
        .I1(\USE_READ.rd_cmd_valid ),
        .I2(s_ready_i_reg_0),
        .I3(\skid_buffer_reg[66]_0 ),
        .I4(m_axi_rvalid),
        .I5(\aresetn_d_reg[0] ),
        .O(s_ready_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1_n_0),
        .Q(\skid_buffer_reg[66]_0 ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[32]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[33]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[34]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[35]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[36]),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[37] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[37]),
        .Q(\skid_buffer_reg_n_0_[37] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[38] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[38]),
        .Q(\skid_buffer_reg_n_0_[38] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[39] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[39]),
        .Q(\skid_buffer_reg_n_0_[39] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[40] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[40]),
        .Q(\skid_buffer_reg_n_0_[40] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[41] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[41]),
        .Q(\skid_buffer_reg_n_0_[41] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[42] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[42]),
        .Q(\skid_buffer_reg_n_0_[42] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[43] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[43]),
        .Q(\skid_buffer_reg_n_0_[43] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[44] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[44]),
        .Q(\skid_buffer_reg_n_0_[44] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[45] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[45]),
        .Q(\skid_buffer_reg_n_0_[45] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[46] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[46]),
        .Q(\skid_buffer_reg_n_0_[46] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[47] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[47]),
        .Q(\skid_buffer_reg_n_0_[47] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[48] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[48]),
        .Q(\skid_buffer_reg_n_0_[48] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[49] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[49]),
        .Q(\skid_buffer_reg_n_0_[49] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[50] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[50]),
        .Q(\skid_buffer_reg_n_0_[50] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[51] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[51]),
        .Q(\skid_buffer_reg_n_0_[51] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[52] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[52]),
        .Q(\skid_buffer_reg_n_0_[52] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[53] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[53]),
        .Q(\skid_buffer_reg_n_0_[53] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[54] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[54]),
        .Q(\skid_buffer_reg_n_0_[54] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[55] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[55]),
        .Q(\skid_buffer_reg_n_0_[55] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[56] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[56]),
        .Q(\skid_buffer_reg_n_0_[56] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[57] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[57]),
        .Q(\skid_buffer_reg_n_0_[57] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[58] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[58]),
        .Q(\skid_buffer_reg_n_0_[58] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[59] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[59]),
        .Q(\skid_buffer_reg_n_0_[59] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[60] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[60]),
        .Q(\skid_buffer_reg_n_0_[60] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[61] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[61]),
        .Q(\skid_buffer_reg_n_0_[61] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[62] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[62]),
        .Q(\skid_buffer_reg_n_0_[62] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[63] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[63]),
        .Q(\skid_buffer_reg_n_0_[63] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[64] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rresp[0]),
        .Q(\skid_buffer_reg_n_0_[64] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[65] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rresp[1]),
        .Q(\skid_buffer_reg_n_0_[65] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[66] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rlast),
        .Q(\skid_buffer_reg_n_0_[66] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(clk),
        .CE(\skid_buffer_reg[66]_0 ),
        .D(m_axi_rdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2_39
   (\m_payload_i_reg[67]_0 ,
    M00_AXI_0_rready,
    \skid_buffer_reg[67]_0 ,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    s_axi_rready,
    m_axi_rid,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    m_axi_rvalid);
  output \m_payload_i_reg[67]_0 ;
  output M00_AXI_0_rready;
  output [67:0]\skid_buffer_reg[67]_0 ;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input s_axi_rready;
  input [0:0]m_axi_rid;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;
  input m_axi_rvalid;

  wire \<const0> ;
  wire \<const1> ;
  wire M00_AXI_0_rready;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire [63:0]m_axi_rdata;
  wire [0:0]m_axi_rid;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire \m_payload_i[0]_i_1_n_0 ;
  wire \m_payload_i[10]_i_1_n_0 ;
  wire \m_payload_i[11]_i_1_n_0 ;
  wire \m_payload_i[12]_i_1_n_0 ;
  wire \m_payload_i[13]_i_1_n_0 ;
  wire \m_payload_i[14]_i_1_n_0 ;
  wire \m_payload_i[15]_i_1_n_0 ;
  wire \m_payload_i[16]_i_1_n_0 ;
  wire \m_payload_i[17]_i_1_n_0 ;
  wire \m_payload_i[18]_i_1_n_0 ;
  wire \m_payload_i[19]_i_1_n_0 ;
  wire \m_payload_i[1]_i_1_n_0 ;
  wire \m_payload_i[20]_i_1_n_0 ;
  wire \m_payload_i[21]_i_1_n_0 ;
  wire \m_payload_i[22]_i_1_n_0 ;
  wire \m_payload_i[23]_i_1_n_0 ;
  wire \m_payload_i[24]_i_1_n_0 ;
  wire \m_payload_i[25]_i_1_n_0 ;
  wire \m_payload_i[26]_i_1_n_0 ;
  wire \m_payload_i[27]_i_1_n_0 ;
  wire \m_payload_i[28]_i_1_n_0 ;
  wire \m_payload_i[29]_i_1_n_0 ;
  wire \m_payload_i[2]_i_1_n_0 ;
  wire \m_payload_i[30]_i_1_n_0 ;
  wire \m_payload_i[31]_i_1_n_0 ;
  wire \m_payload_i[32]_i_1_n_0 ;
  wire \m_payload_i[33]_i_1_n_0 ;
  wire \m_payload_i[34]_i_1_n_0 ;
  wire \m_payload_i[35]_i_1_n_0 ;
  wire \m_payload_i[36]_i_1_n_0 ;
  wire \m_payload_i[37]_i_1_n_0 ;
  wire \m_payload_i[38]_i_1_n_0 ;
  wire \m_payload_i[39]_i_1_n_0 ;
  wire \m_payload_i[3]_i_1_n_0 ;
  wire \m_payload_i[40]_i_1_n_0 ;
  wire \m_payload_i[41]_i_1_n_0 ;
  wire \m_payload_i[42]_i_1_n_0 ;
  wire \m_payload_i[43]_i_1_n_0 ;
  wire \m_payload_i[44]_i_1_n_0 ;
  wire \m_payload_i[45]_i_1_n_0 ;
  wire \m_payload_i[46]_i_1_n_0 ;
  wire \m_payload_i[47]_i_1_n_0 ;
  wire \m_payload_i[48]_i_1_n_0 ;
  wire \m_payload_i[49]_i_1_n_0 ;
  wire \m_payload_i[4]_i_1_n_0 ;
  wire \m_payload_i[50]_i_1_n_0 ;
  wire \m_payload_i[51]_i_1_n_0 ;
  wire \m_payload_i[52]_i_1_n_0 ;
  wire \m_payload_i[53]_i_1_n_0 ;
  wire \m_payload_i[54]_i_1_n_0 ;
  wire \m_payload_i[55]_i_1_n_0 ;
  wire \m_payload_i[56]_i_1_n_0 ;
  wire \m_payload_i[57]_i_1_n_0 ;
  wire \m_payload_i[58]_i_1_n_0 ;
  wire \m_payload_i[59]_i_1_n_0 ;
  wire \m_payload_i[5]_i_1_n_0 ;
  wire \m_payload_i[60]_i_1_n_0 ;
  wire \m_payload_i[61]_i_1_n_0 ;
  wire \m_payload_i[62]_i_1_n_0 ;
  wire \m_payload_i[63]_i_1_n_0 ;
  wire \m_payload_i[64]_i_1_n_0 ;
  wire \m_payload_i[65]_i_1_n_0 ;
  wire \m_payload_i[66]_i_1_n_0 ;
  wire \m_payload_i[67]_i_1_n_0 ;
  wire \m_payload_i[67]_i_2_n_0 ;
  wire \m_payload_i[6]_i_1_n_0 ;
  wire \m_payload_i[7]_i_1_n_0 ;
  wire \m_payload_i[8]_i_1_n_0 ;
  wire \m_payload_i[9]_i_1_n_0 ;
  wire \m_payload_i_reg[67]_0 ;
  wire m_valid_i0__0;
  wire p_1_in;
  wire s_axi_rready;
  wire s_ready_i0;
  wire [67:0]\skid_buffer_reg[67]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[37] ;
  wire \skid_buffer_reg_n_0_[38] ;
  wire \skid_buffer_reg_n_0_[39] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[40] ;
  wire \skid_buffer_reg_n_0_[41] ;
  wire \skid_buffer_reg_n_0_[42] ;
  wire \skid_buffer_reg_n_0_[43] ;
  wire \skid_buffer_reg_n_0_[44] ;
  wire \skid_buffer_reg_n_0_[45] ;
  wire \skid_buffer_reg_n_0_[46] ;
  wire \skid_buffer_reg_n_0_[47] ;
  wire \skid_buffer_reg_n_0_[48] ;
  wire \skid_buffer_reg_n_0_[49] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[50] ;
  wire \skid_buffer_reg_n_0_[51] ;
  wire \skid_buffer_reg_n_0_[52] ;
  wire \skid_buffer_reg_n_0_[53] ;
  wire \skid_buffer_reg_n_0_[54] ;
  wire \skid_buffer_reg_n_0_[55] ;
  wire \skid_buffer_reg_n_0_[56] ;
  wire \skid_buffer_reg_n_0_[57] ;
  wire \skid_buffer_reg_n_0_[58] ;
  wire \skid_buffer_reg_n_0_[59] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[60] ;
  wire \skid_buffer_reg_n_0_[61] ;
  wire \skid_buffer_reg_n_0_[62] ;
  wire \skid_buffer_reg_n_0_[63] ;
  wire \skid_buffer_reg_n_0_[64] ;
  wire \skid_buffer_reg_n_0_[65] ;
  wire \skid_buffer_reg_n_0_[66] ;
  wire \skid_buffer_reg_n_0_[67] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_rdata[0]),
        .I1(\skid_buffer_reg_n_0_[0] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[10]_i_1 
       (.I0(m_axi_rdata[10]),
        .I1(\skid_buffer_reg_n_0_[10] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[11]_i_1 
       (.I0(m_axi_rdata[11]),
        .I1(\skid_buffer_reg_n_0_[11] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[12]_i_1 
       (.I0(m_axi_rdata[12]),
        .I1(\skid_buffer_reg_n_0_[12] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[13]_i_1 
       (.I0(m_axi_rdata[13]),
        .I1(\skid_buffer_reg_n_0_[13] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[14]_i_1 
       (.I0(m_axi_rdata[14]),
        .I1(\skid_buffer_reg_n_0_[14] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[15]_i_1 
       (.I0(m_axi_rdata[15]),
        .I1(\skid_buffer_reg_n_0_[15] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[16]_i_1 
       (.I0(m_axi_rdata[16]),
        .I1(\skid_buffer_reg_n_0_[16] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[17]_i_1 
       (.I0(m_axi_rdata[17]),
        .I1(\skid_buffer_reg_n_0_[17] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[18]_i_1 
       (.I0(m_axi_rdata[18]),
        .I1(\skid_buffer_reg_n_0_[18] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[19]_i_1 
       (.I0(m_axi_rdata[19]),
        .I1(\skid_buffer_reg_n_0_[19] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_rdata[1]),
        .I1(\skid_buffer_reg_n_0_[1] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[20]_i_1 
       (.I0(m_axi_rdata[20]),
        .I1(\skid_buffer_reg_n_0_[20] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[21]_i_1 
       (.I0(m_axi_rdata[21]),
        .I1(\skid_buffer_reg_n_0_[21] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[22]_i_1 
       (.I0(m_axi_rdata[22]),
        .I1(\skid_buffer_reg_n_0_[22] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[23]_i_1 
       (.I0(m_axi_rdata[23]),
        .I1(\skid_buffer_reg_n_0_[23] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[24]_i_1 
       (.I0(m_axi_rdata[24]),
        .I1(\skid_buffer_reg_n_0_[24] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[25]_i_1 
       (.I0(m_axi_rdata[25]),
        .I1(\skid_buffer_reg_n_0_[25] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[26]_i_1 
       (.I0(m_axi_rdata[26]),
        .I1(\skid_buffer_reg_n_0_[26] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[27]_i_1 
       (.I0(m_axi_rdata[27]),
        .I1(\skid_buffer_reg_n_0_[27] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[28]_i_1 
       (.I0(m_axi_rdata[28]),
        .I1(\skid_buffer_reg_n_0_[28] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[29]_i_1 
       (.I0(m_axi_rdata[29]),
        .I1(\skid_buffer_reg_n_0_[29] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[2]_i_1 
       (.I0(m_axi_rdata[2]),
        .I1(\skid_buffer_reg_n_0_[2] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[30]_i_1 
       (.I0(m_axi_rdata[30]),
        .I1(\skid_buffer_reg_n_0_[30] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[31]_i_1 
       (.I0(m_axi_rdata[31]),
        .I1(\skid_buffer_reg_n_0_[31] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[32]_i_1 
       (.I0(m_axi_rdata[32]),
        .I1(\skid_buffer_reg_n_0_[32] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[33]_i_1 
       (.I0(m_axi_rdata[33]),
        .I1(\skid_buffer_reg_n_0_[33] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[34]_i_1 
       (.I0(m_axi_rdata[34]),
        .I1(\skid_buffer_reg_n_0_[34] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[35]_i_1 
       (.I0(m_axi_rdata[35]),
        .I1(\skid_buffer_reg_n_0_[35] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[35]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[36]_i_1 
       (.I0(m_axi_rdata[36]),
        .I1(\skid_buffer_reg_n_0_[36] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[36]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[37]_i_1 
       (.I0(m_axi_rdata[37]),
        .I1(\skid_buffer_reg_n_0_[37] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[37]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[38]_i_1 
       (.I0(m_axi_rdata[38]),
        .I1(\skid_buffer_reg_n_0_[38] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[38]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[39]_i_1 
       (.I0(m_axi_rdata[39]),
        .I1(\skid_buffer_reg_n_0_[39] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[3]_i_1 
       (.I0(m_axi_rdata[3]),
        .I1(\skid_buffer_reg_n_0_[3] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[40]_i_1 
       (.I0(m_axi_rdata[40]),
        .I1(\skid_buffer_reg_n_0_[40] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[41]_i_1 
       (.I0(m_axi_rdata[41]),
        .I1(\skid_buffer_reg_n_0_[41] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[42]_i_1 
       (.I0(m_axi_rdata[42]),
        .I1(\skid_buffer_reg_n_0_[42] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[43]_i_1 
       (.I0(m_axi_rdata[43]),
        .I1(\skid_buffer_reg_n_0_[43] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[43]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[44]_i_1 
       (.I0(m_axi_rdata[44]),
        .I1(\skid_buffer_reg_n_0_[44] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[44]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[45]_i_1 
       (.I0(m_axi_rdata[45]),
        .I1(\skid_buffer_reg_n_0_[45] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[45]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[46]_i_1 
       (.I0(m_axi_rdata[46]),
        .I1(\skid_buffer_reg_n_0_[46] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[46]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[47]_i_1 
       (.I0(m_axi_rdata[47]),
        .I1(\skid_buffer_reg_n_0_[47] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[47]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[48]_i_1 
       (.I0(m_axi_rdata[48]),
        .I1(\skid_buffer_reg_n_0_[48] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[48]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[49]_i_1 
       (.I0(m_axi_rdata[49]),
        .I1(\skid_buffer_reg_n_0_[49] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[4]_i_1 
       (.I0(m_axi_rdata[4]),
        .I1(\skid_buffer_reg_n_0_[4] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[50]_i_1 
       (.I0(m_axi_rdata[50]),
        .I1(\skid_buffer_reg_n_0_[50] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[50]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[51]_i_1 
       (.I0(m_axi_rdata[51]),
        .I1(\skid_buffer_reg_n_0_[51] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[51]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[52]_i_1 
       (.I0(m_axi_rdata[52]),
        .I1(\skid_buffer_reg_n_0_[52] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[52]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[53]_i_1 
       (.I0(m_axi_rdata[53]),
        .I1(\skid_buffer_reg_n_0_[53] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[53]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[54]_i_1 
       (.I0(m_axi_rdata[54]),
        .I1(\skid_buffer_reg_n_0_[54] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[54]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[55]_i_1 
       (.I0(m_axi_rdata[55]),
        .I1(\skid_buffer_reg_n_0_[55] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[55]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[56]_i_1 
       (.I0(m_axi_rdata[56]),
        .I1(\skid_buffer_reg_n_0_[56] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[56]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[57]_i_1 
       (.I0(m_axi_rdata[57]),
        .I1(\skid_buffer_reg_n_0_[57] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[57]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[58]_i_1 
       (.I0(m_axi_rdata[58]),
        .I1(\skid_buffer_reg_n_0_[58] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[58]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[59]_i_1 
       (.I0(m_axi_rdata[59]),
        .I1(\skid_buffer_reg_n_0_[59] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[59]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[5]_i_1 
       (.I0(m_axi_rdata[5]),
        .I1(\skid_buffer_reg_n_0_[5] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[60]_i_1 
       (.I0(m_axi_rdata[60]),
        .I1(\skid_buffer_reg_n_0_[60] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[60]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[61]_i_1 
       (.I0(m_axi_rdata[61]),
        .I1(\skid_buffer_reg_n_0_[61] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[61]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[62]_i_1 
       (.I0(m_axi_rdata[62]),
        .I1(\skid_buffer_reg_n_0_[62] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[62]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[63]_i_1 
       (.I0(m_axi_rdata[63]),
        .I1(\skid_buffer_reg_n_0_[63] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[64]_i_1 
       (.I0(m_axi_rresp[0]),
        .I1(\skid_buffer_reg_n_0_[64] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[64]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[65]_i_1 
       (.I0(m_axi_rresp[1]),
        .I1(\skid_buffer_reg_n_0_[65] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[65]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[66]_i_1 
       (.I0(m_axi_rlast),
        .I1(\skid_buffer_reg_n_0_[66] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[66]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \m_payload_i[67]_i_1 
       (.I0(s_axi_rready),
        .I1(\m_payload_i_reg[67]_0 ),
        .O(\m_payload_i[67]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[67]_i_2 
       (.I0(m_axi_rid),
        .I1(\skid_buffer_reg_n_0_[67] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[67]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[6]_i_1 
       (.I0(m_axi_rdata[6]),
        .I1(\skid_buffer_reg_n_0_[6] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[7]_i_1 
       (.I0(m_axi_rdata[7]),
        .I1(\skid_buffer_reg_n_0_[7] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[8]_i_1 
       (.I0(m_axi_rdata[8]),
        .I1(\skid_buffer_reg_n_0_[8] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[9]_i_1 
       (.I0(m_axi_rdata[9]),
        .I1(\skid_buffer_reg_n_0_[9] ),
        .I2(M00_AXI_0_rready),
        .O(\m_payload_i[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[0]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[10]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[11]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[12]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[13]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[14]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[15]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[16]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[17]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[18]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[19]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[1]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[20]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[21]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[22]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[23]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[24]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[25]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[26]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[27]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[28]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[29]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[2]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[30]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[31]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[32]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[33]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[34]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[35]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[36]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[37]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[38]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[39]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[3]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[40]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[41]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[42]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[43]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[44]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[45]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[46]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[47]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[48]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[49]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[4]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[50]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[51]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[52]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[53]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[54]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[55]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[56]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[57]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[58]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[59]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[5]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[60]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[61]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[62] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[62]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [62]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[63] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[63]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [63]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[64] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[64]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [64]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[65] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[65]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [65]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[66] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[66]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [66]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[67] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[67]_i_2_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [67]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[6]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[7]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[8]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[67]_i_1_n_0 ),
        .D(\m_payload_i[9]_i_1_n_0 ),
        .Q(\skid_buffer_reg[67]_0 [9]),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hFF5D)) 
    m_valid_i0
       (.I0(M00_AXI_0_rready),
        .I1(\m_payload_i_reg[67]_0 ),
        .I2(s_axi_rready),
        .I3(m_axi_rvalid),
        .O(m_valid_i0__0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0__0),
        .Q(\m_payload_i_reg[67]_0 ),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hDFDD)) 
    s_ready_i_i_1__0
       (.I0(\m_payload_i_reg[67]_0 ),
        .I1(s_axi_rready),
        .I2(m_axi_rvalid),
        .I3(M00_AXI_0_rready),
        .O(s_ready_i0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i0),
        .Q(M00_AXI_0_rready),
        .R(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[32]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[33]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[34]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[35]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[36]),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[37] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[37]),
        .Q(\skid_buffer_reg_n_0_[37] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[38] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[38]),
        .Q(\skid_buffer_reg_n_0_[38] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[39] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[39]),
        .Q(\skid_buffer_reg_n_0_[39] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[40] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[40]),
        .Q(\skid_buffer_reg_n_0_[40] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[41] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[41]),
        .Q(\skid_buffer_reg_n_0_[41] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[42] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[42]),
        .Q(\skid_buffer_reg_n_0_[42] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[43] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[43]),
        .Q(\skid_buffer_reg_n_0_[43] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[44] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[44]),
        .Q(\skid_buffer_reg_n_0_[44] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[45] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[45]),
        .Q(\skid_buffer_reg_n_0_[45] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[46] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[46]),
        .Q(\skid_buffer_reg_n_0_[46] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[47] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[47]),
        .Q(\skid_buffer_reg_n_0_[47] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[48] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[48]),
        .Q(\skid_buffer_reg_n_0_[48] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[49] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[49]),
        .Q(\skid_buffer_reg_n_0_[49] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[50] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[50]),
        .Q(\skid_buffer_reg_n_0_[50] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[51] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[51]),
        .Q(\skid_buffer_reg_n_0_[51] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[52] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[52]),
        .Q(\skid_buffer_reg_n_0_[52] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[53] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[53]),
        .Q(\skid_buffer_reg_n_0_[53] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[54] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[54]),
        .Q(\skid_buffer_reg_n_0_[54] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[55] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[55]),
        .Q(\skid_buffer_reg_n_0_[55] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[56] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[56]),
        .Q(\skid_buffer_reg_n_0_[56] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[57] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[57]),
        .Q(\skid_buffer_reg_n_0_[57] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[58] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[58]),
        .Q(\skid_buffer_reg_n_0_[58] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[59] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[59]),
        .Q(\skid_buffer_reg_n_0_[59] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[60] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[60]),
        .Q(\skid_buffer_reg_n_0_[60] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[61] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[61]),
        .Q(\skid_buffer_reg_n_0_[61] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[62] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[62]),
        .Q(\skid_buffer_reg_n_0_[62] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[63] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[63]),
        .Q(\skid_buffer_reg_n_0_[63] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[64] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rresp[0]),
        .Q(\skid_buffer_reg_n_0_[64] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[65] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rresp[1]),
        .Q(\skid_buffer_reg_n_0_[65] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[66] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rlast),
        .Q(\skid_buffer_reg_n_0_[66] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[67] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rid),
        .Q(\skid_buffer_reg_n_0_[67] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(M00_AXI_0_rready),
        .D(m_axi_rdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2_53
   (\gen_master_slots[2].r_issuing_cnt_reg[16] ,
    \m_payload_i_reg[67]_0 ,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    \gen_arbiter.m_grant_enc_i_reg[0]_0 ,
    \gen_arbiter.m_grant_enc_i_reg[0]_1 ,
    \m_payload_i_reg[67]_1 ,
    \m_payload_i_reg[66]_0 ,
    r_cmd_pop_2__1,
    s_ready_i_reg_0,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    \gen_axi.read_cs_reg[0] ,
    st_aa_artarget_hot,
    target_mi_enc_1,
    valid_qual_i3__2_2,
    \gen_arbiter.last_rr_hot_reg[0] ,
    target_mi_enc_3,
    \gen_arbiter.last_rr_hot_reg[1] ,
    \gen_single_thread.active_target_enc_reg[1] ,
    s_axi_rready,
    \gen_single_thread.active_target_enc_reg[1]_0 ,
    rready_carry,
    \gen_master_slots[2].r_issuing_cnt_reg[16]_0 ,
    m_valid_i_reg_0,
    \gen_single_thread.active_target_hot_reg[0] ,
    \m_payload_i_reg[67]_2 ,
    p_20_in,
    p_17_in);
  output \gen_master_slots[2].r_issuing_cnt_reg[16] ;
  output \m_payload_i_reg[67]_0 ;
  output \gen_arbiter.m_grant_enc_i_reg[0] ;
  output [0:0]\gen_arbiter.m_grant_enc_i_reg[0]_0 ;
  output \gen_arbiter.m_grant_enc_i_reg[0]_1 ;
  output \m_payload_i_reg[67]_1 ;
  output \m_payload_i_reg[66]_0 ;
  output r_cmd_pop_2__1;
  output s_ready_i_reg_0;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input \gen_axi.read_cs_reg[0] ;
  input [1:0]st_aa_artarget_hot;
  input target_mi_enc_1;
  input [1:0]valid_qual_i3__2_2;
  input \gen_arbiter.last_rr_hot_reg[0] ;
  input target_mi_enc_3;
  input \gen_arbiter.last_rr_hot_reg[1] ;
  input \gen_single_thread.active_target_enc_reg[1] ;
  input [1:0]s_axi_rready;
  input \gen_single_thread.active_target_enc_reg[1]_0 ;
  input [0:0]rready_carry;
  input [0:0]\gen_master_slots[2].r_issuing_cnt_reg[16]_0 ;
  input [0:0]m_valid_i_reg_0;
  input \gen_single_thread.active_target_hot_reg[0] ;
  input [0:0]\m_payload_i_reg[67]_2 ;
  input p_20_in;
  input p_17_in;

  wire \<const0> ;
  wire \<const1> ;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire \gen_arbiter.last_rr_hot_reg[0] ;
  wire \gen_arbiter.last_rr_hot_reg[1] ;
  wire \gen_arbiter.m_grant_enc_i_reg[0] ;
  wire [0:0]\gen_arbiter.m_grant_enc_i_reg[0]_0 ;
  wire \gen_arbiter.m_grant_enc_i_reg[0]_1 ;
  wire \gen_axi.read_cs_reg[0] ;
  wire \gen_master_slots[2].r_issuing_cnt_reg[16] ;
  wire [0:0]\gen_master_slots[2].r_issuing_cnt_reg[16]_0 ;
  wire \gen_single_thread.active_target_enc_reg[1] ;
  wire \gen_single_thread.active_target_enc_reg[1]_0 ;
  wire \gen_single_thread.active_target_hot_reg[0] ;
  wire \m_payload_i[66]_i_1_n_0 ;
  wire \m_payload_i[67]_i_1_n_0 ;
  wire \m_payload_i_reg[66]_0 ;
  wire \m_payload_i_reg[67]_0 ;
  wire \m_payload_i_reg[67]_1 ;
  wire [0:0]\m_payload_i_reg[67]_2 ;
  wire m_valid_i0;
  wire [0:0]m_valid_i_reg_0;
  wire p_17_in;
  wire p_1_in;
  wire p_1_in_0;
  wire p_20_in;
  wire r_cmd_pop_2__1;
  wire [0:0]rready_carry;
  wire [1:0]s_axi_rready;
  wire s_ready_i_i_1__1_n_0;
  wire s_ready_i_reg_0;
  wire [67:66]skid_buffer;
  wire \skid_buffer_reg_n_0_[66] ;
  wire \skid_buffer_reg_n_0_[67] ;
  wire [1:0]st_aa_artarget_hot;
  wire target_mi_enc_1;
  wire target_mi_enc_3;
  wire [1:0]valid_qual_i3__2_2;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT4 #(
    .INIT(16'h80FF)) 
    \gen_arbiter.m_grant_enc_i[0]_i_11__0 
       (.I0(rready_carry),
        .I1(\gen_master_slots[2].r_issuing_cnt_reg[16] ),
        .I2(\m_payload_i_reg[66]_0 ),
        .I3(\gen_master_slots[2].r_issuing_cnt_reg[16]_0 ),
        .O(\gen_arbiter.m_grant_enc_i_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFECEF20200000000)) 
    \gen_arbiter.m_grant_enc_i[0]_i_5__0 
       (.I0(\gen_arbiter.m_grant_enc_i_reg[0]_0 ),
        .I1(st_aa_artarget_hot[0]),
        .I2(target_mi_enc_1),
        .I3(valid_qual_i3__2_2[1]),
        .I4(valid_qual_i3__2_2[0]),
        .I5(\gen_arbiter.last_rr_hot_reg[0] ),
        .O(\gen_arbiter.m_grant_enc_i_reg[0] ));
  LUT6 #(
    .INIT(64'hFECEF20200000000)) 
    \gen_arbiter.m_grant_enc_i[0]_i_7__0 
       (.I0(\gen_arbiter.m_grant_enc_i_reg[0]_0 ),
        .I1(st_aa_artarget_hot[1]),
        .I2(target_mi_enc_3),
        .I3(valid_qual_i3__2_2[1]),
        .I4(valid_qual_i3__2_2[0]),
        .I5(\gen_arbiter.last_rr_hot_reg[1] ),
        .O(\gen_arbiter.m_grant_enc_i_reg[0]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \gen_master_slots[2].r_issuing_cnt[16]_i_2 
       (.I0(\m_payload_i_reg[66]_0 ),
        .I1(\gen_master_slots[2].r_issuing_cnt_reg[16] ),
        .I2(rready_carry),
        .O(r_cmd_pop_2__1));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \m_payload_i[66]_i_1 
       (.I0(p_17_in),
        .I1(\m_payload_i_reg[67]_0 ),
        .I2(\skid_buffer_reg_n_0_[66] ),
        .I3(p_1_in_0),
        .I4(\m_payload_i_reg[66]_0 ),
        .O(\m_payload_i[66]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \m_payload_i[67]_i_1 
       (.I0(p_20_in),
        .I1(\m_payload_i_reg[67]_0 ),
        .I2(\skid_buffer_reg_n_0_[67] ),
        .I3(p_1_in_0),
        .I4(\m_payload_i_reg[67]_1 ),
        .O(\m_payload_i[67]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[66] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[66]_i_1_n_0 ),
        .Q(\m_payload_i_reg[66]_0 ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[67] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\m_payload_i[67]_i_1_n_0 ),
        .Q(\m_payload_i_reg[67]_1 ),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'hDF)) 
    m_valid_i_i_1__1
       (.I0(\m_payload_i_reg[67]_0 ),
        .I1(\gen_axi.read_cs_reg[0] ),
        .I2(p_1_in_0),
        .O(m_valid_i0));
  LUT6 #(
    .INIT(64'hF8080808FFFFFFFF)) 
    m_valid_i_i_2__1
       (.I0(\gen_single_thread.active_target_enc_reg[1] ),
        .I1(s_axi_rready[0]),
        .I2(\m_payload_i_reg[67]_1 ),
        .I3(s_axi_rready[1]),
        .I4(\gen_single_thread.active_target_enc_reg[1]_0 ),
        .I5(\gen_master_slots[2].r_issuing_cnt_reg[16] ),
        .O(p_1_in_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0),
        .Q(\gen_master_slots[2].r_issuing_cnt_reg[16] ),
        .R(\aresetn_d_reg[1] ));
  LUT6 #(
    .INIT(64'h08080808FF080808)) 
    \s_axi_rvalid[0]_INST_0_i_1 
       (.I0(\gen_master_slots[2].r_issuing_cnt_reg[16] ),
        .I1(\gen_single_thread.active_target_enc_reg[1] ),
        .I2(\m_payload_i_reg[67]_1 ),
        .I3(m_valid_i_reg_0),
        .I4(\gen_single_thread.active_target_hot_reg[0] ),
        .I5(\m_payload_i_reg[67]_2 ),
        .O(s_ready_i_reg_0));
  LUT3 #(
    .INIT(8'hAE)) 
    s_ready_i_i_1__1
       (.I0(p_1_in_0),
        .I1(\m_payload_i_reg[67]_0 ),
        .I2(\gen_axi.read_cs_reg[0] ),
        .O(s_ready_i_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__1_n_0),
        .Q(\m_payload_i_reg[67]_0 ),
        .R(p_1_in));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \skid_buffer[66]_i_1 
       (.I0(p_17_in),
        .I1(\m_payload_i_reg[67]_0 ),
        .I2(\skid_buffer_reg_n_0_[66] ),
        .O(skid_buffer[66]));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \skid_buffer[67]_i_1 
       (.I0(p_20_in),
        .I1(\m_payload_i_reg[67]_0 ),
        .I2(\skid_buffer_reg_n_0_[67] ),
        .O(skid_buffer[67]));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[66] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(skid_buffer[66]),
        .Q(\skid_buffer_reg_n_0_[66] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[67] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(skid_buffer[67]),
        .Q(\skid_buffer_reg_n_0_[67] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2_56
   (\m_payload_i_reg[0]_0 ,
    \skid_buffer_reg[0]_0 ,
    Q,
    \gen_arbiter.m_grant_enc_i_reg[0] ,
    r_cmd_pop_1__1,
    p_2_in,
    s_axi_rvalid,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    m_axi_rvalid,
    \gen_single_thread.active_target_enc_reg[0] ,
    s_axi_rready,
    \gen_single_thread.active_target_enc_reg[0]_0 ,
    r_issuing_cnt,
    rready_carry,
    m_valid_i_reg_0,
    s_axi_rlast,
    m_axi_rid,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata);
  output \m_payload_i_reg[0]_0 ;
  output \skid_buffer_reg[0]_0 ;
  output [67:0]Q;
  output [0:0]\gen_arbiter.m_grant_enc_i_reg[0] ;
  output r_cmd_pop_1__1;
  output p_2_in;
  output [0:0]s_axi_rvalid;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input [0:0]m_axi_rvalid;
  input \gen_single_thread.active_target_enc_reg[0] ;
  input [1:0]s_axi_rready;
  input \gen_single_thread.active_target_enc_reg[0]_0 ;
  input [1:0]r_issuing_cnt;
  input [0:0]rready_carry;
  input m_valid_i_reg_0;
  input [0:0]s_axi_rlast;
  input [0:0]m_axi_rid;
  input [0:0]m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;

  wire \<const0> ;
  wire \<const1> ;
  wire [67:0]Q;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire [0:0]\gen_arbiter.m_grant_enc_i_reg[0] ;
  wire \gen_single_thread.active_target_enc_reg[0] ;
  wire \gen_single_thread.active_target_enc_reg[0]_0 ;
  wire [63:0]m_axi_rdata;
  wire [0:0]m_axi_rid;
  wire [0:0]m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire [0:0]m_axi_rvalid;
  wire \m_payload_i_reg[0]_0 ;
  wire m_valid_i0;
  wire m_valid_i_reg_0;
  wire p_1_in;
  wire p_1_in_0;
  wire p_2_in;
  wire r_cmd_pop_1__1;
  wire [1:0]r_issuing_cnt;
  wire [0:0]rready_carry;
  wire [0:0]s_axi_rlast;
  wire [1:0]s_axi_rready;
  wire [0:0]s_axi_rvalid;
  wire s_ready_i_i_1__3_n_0;
  wire [67:0]skid_buffer;
  wire \skid_buffer_reg[0]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[37] ;
  wire \skid_buffer_reg_n_0_[38] ;
  wire \skid_buffer_reg_n_0_[39] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[40] ;
  wire \skid_buffer_reg_n_0_[41] ;
  wire \skid_buffer_reg_n_0_[42] ;
  wire \skid_buffer_reg_n_0_[43] ;
  wire \skid_buffer_reg_n_0_[44] ;
  wire \skid_buffer_reg_n_0_[45] ;
  wire \skid_buffer_reg_n_0_[46] ;
  wire \skid_buffer_reg_n_0_[47] ;
  wire \skid_buffer_reg_n_0_[48] ;
  wire \skid_buffer_reg_n_0_[49] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[50] ;
  wire \skid_buffer_reg_n_0_[51] ;
  wire \skid_buffer_reg_n_0_[52] ;
  wire \skid_buffer_reg_n_0_[53] ;
  wire \skid_buffer_reg_n_0_[54] ;
  wire \skid_buffer_reg_n_0_[55] ;
  wire \skid_buffer_reg_n_0_[56] ;
  wire \skid_buffer_reg_n_0_[57] ;
  wire \skid_buffer_reg_n_0_[58] ;
  wire \skid_buffer_reg_n_0_[59] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[60] ;
  wire \skid_buffer_reg_n_0_[61] ;
  wire \skid_buffer_reg_n_0_[62] ;
  wire \skid_buffer_reg_n_0_[63] ;
  wire \skid_buffer_reg_n_0_[64] ;
  wire \skid_buffer_reg_n_0_[65] ;
  wire \skid_buffer_reg_n_0_[66] ;
  wire \skid_buffer_reg_n_0_[67] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT5 #(
    .INIT(32'hFFFFD555)) 
    \gen_arbiter.m_grant_enc_i[0]_i_13__0 
       (.I0(r_issuing_cnt[1]),
        .I1(Q[66]),
        .I2(\m_payload_i_reg[0]_0 ),
        .I3(rready_carry),
        .I4(r_issuing_cnt[0]),
        .O(\gen_arbiter.m_grant_enc_i_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \gen_master_slots[1].r_issuing_cnt[9]_i_2 
       (.I0(Q[66]),
        .I1(\m_payload_i_reg[0]_0 ),
        .I2(rready_carry),
        .O(r_cmd_pop_1__1));
  LUT6 #(
    .INIT(64'h8888A88800000000)) 
    \gen_single_thread.accept_cnt[1]_i_2__2 
       (.I0(s_axi_rready[0]),
        .I1(m_valid_i_reg_0),
        .I2(\m_payload_i_reg[0]_0 ),
        .I3(\gen_single_thread.active_target_enc_reg[0] ),
        .I4(Q[67]),
        .I5(s_axi_rlast),
        .O(p_2_in));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[0]_i_1__0 
       (.I0(m_axi_rdata[0]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[0] ),
        .O(skid_buffer[0]));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[10]_i_1__0 
       (.I0(m_axi_rdata[10]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[10] ),
        .O(skid_buffer[10]));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[11]_i_1__0 
       (.I0(m_axi_rdata[11]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[11] ),
        .O(skid_buffer[11]));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[12]_i_1__0 
       (.I0(m_axi_rdata[12]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[12] ),
        .O(skid_buffer[12]));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[13]_i_1__0 
       (.I0(m_axi_rdata[13]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[13] ),
        .O(skid_buffer[13]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[14]_i_1__0 
       (.I0(m_axi_rdata[14]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[14] ),
        .O(skid_buffer[14]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[15]_i_1__0 
       (.I0(m_axi_rdata[15]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[15] ),
        .O(skid_buffer[15]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[16]_i_1__0 
       (.I0(m_axi_rdata[16]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[16] ),
        .O(skid_buffer[16]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[17]_i_1__0 
       (.I0(m_axi_rdata[17]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[17] ),
        .O(skid_buffer[17]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[18]_i_1__0 
       (.I0(m_axi_rdata[18]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[18] ),
        .O(skid_buffer[18]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[19]_i_1__0 
       (.I0(m_axi_rdata[19]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[19] ),
        .O(skid_buffer[19]));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[1]_i_1__0 
       (.I0(m_axi_rdata[1]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[1] ),
        .O(skid_buffer[1]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[20]_i_1__0 
       (.I0(m_axi_rdata[20]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[20] ),
        .O(skid_buffer[20]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[21]_i_1__0 
       (.I0(m_axi_rdata[21]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[21] ),
        .O(skid_buffer[21]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[22]_i_1__0 
       (.I0(m_axi_rdata[22]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[22] ),
        .O(skid_buffer[22]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[23]_i_1__0 
       (.I0(m_axi_rdata[23]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[23] ),
        .O(skid_buffer[23]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[24]_i_1__0 
       (.I0(m_axi_rdata[24]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[24] ),
        .O(skid_buffer[24]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[25]_i_1__0 
       (.I0(m_axi_rdata[25]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[25] ),
        .O(skid_buffer[25]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[26]_i_1__0 
       (.I0(m_axi_rdata[26]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[26] ),
        .O(skid_buffer[26]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[27]_i_1__0 
       (.I0(m_axi_rdata[27]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[27] ),
        .O(skid_buffer[27]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[28]_i_1__0 
       (.I0(m_axi_rdata[28]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[28] ),
        .O(skid_buffer[28]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[29]_i_1__0 
       (.I0(m_axi_rdata[29]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[29] ),
        .O(skid_buffer[29]));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[2]_i_1__0 
       (.I0(m_axi_rdata[2]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[2] ),
        .O(skid_buffer[2]));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[30]_i_1__0 
       (.I0(m_axi_rdata[30]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[30] ),
        .O(skid_buffer[30]));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[31]_i_1__0 
       (.I0(m_axi_rdata[31]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[31] ),
        .O(skid_buffer[31]));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[32]_i_1__0 
       (.I0(m_axi_rdata[32]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[32] ),
        .O(skid_buffer[32]));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[33]_i_1__0 
       (.I0(m_axi_rdata[33]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[33] ),
        .O(skid_buffer[33]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[34]_i_1__0 
       (.I0(m_axi_rdata[34]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[34] ),
        .O(skid_buffer[34]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[35]_i_1__0 
       (.I0(m_axi_rdata[35]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[35] ),
        .O(skid_buffer[35]));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[36]_i_1__0 
       (.I0(m_axi_rdata[36]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[36] ),
        .O(skid_buffer[36]));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[37]_i_1__0 
       (.I0(m_axi_rdata[37]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[37] ),
        .O(skid_buffer[37]));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[38]_i_1__0 
       (.I0(m_axi_rdata[38]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[38] ),
        .O(skid_buffer[38]));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[39]_i_1__0 
       (.I0(m_axi_rdata[39]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[39] ),
        .O(skid_buffer[39]));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[3]_i_1__0 
       (.I0(m_axi_rdata[3]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[3] ),
        .O(skid_buffer[3]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[40]_i_1__0 
       (.I0(m_axi_rdata[40]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[40] ),
        .O(skid_buffer[40]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[41]_i_1__0 
       (.I0(m_axi_rdata[41]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[41] ),
        .O(skid_buffer[41]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[42]_i_1__0 
       (.I0(m_axi_rdata[42]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[42] ),
        .O(skid_buffer[42]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[43]_i_1__0 
       (.I0(m_axi_rdata[43]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[43] ),
        .O(skid_buffer[43]));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[44]_i_1__0 
       (.I0(m_axi_rdata[44]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[44] ),
        .O(skid_buffer[44]));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[45]_i_1__0 
       (.I0(m_axi_rdata[45]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[45] ),
        .O(skid_buffer[45]));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[46]_i_1__0 
       (.I0(m_axi_rdata[46]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[46] ),
        .O(skid_buffer[46]));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[47]_i_1__0 
       (.I0(m_axi_rdata[47]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[47] ),
        .O(skid_buffer[47]));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[48]_i_1__0 
       (.I0(m_axi_rdata[48]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[48] ),
        .O(skid_buffer[48]));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[49]_i_1__0 
       (.I0(m_axi_rdata[49]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[49] ),
        .O(skid_buffer[49]));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[4]_i_1__0 
       (.I0(m_axi_rdata[4]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[4] ),
        .O(skid_buffer[4]));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[50]_i_1__0 
       (.I0(m_axi_rdata[50]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[50] ),
        .O(skid_buffer[50]));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[51]_i_1__0 
       (.I0(m_axi_rdata[51]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[51] ),
        .O(skid_buffer[51]));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[52]_i_1__0 
       (.I0(m_axi_rdata[52]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[52] ),
        .O(skid_buffer[52]));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[53]_i_1__0 
       (.I0(m_axi_rdata[53]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[53] ),
        .O(skid_buffer[53]));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[54]_i_1__0 
       (.I0(m_axi_rdata[54]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[54] ),
        .O(skid_buffer[54]));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[55]_i_1__0 
       (.I0(m_axi_rdata[55]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[55] ),
        .O(skid_buffer[55]));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[56]_i_1__0 
       (.I0(m_axi_rdata[56]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[56] ),
        .O(skid_buffer[56]));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[57]_i_1__0 
       (.I0(m_axi_rdata[57]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[57] ),
        .O(skid_buffer[57]));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[58]_i_1__0 
       (.I0(m_axi_rdata[58]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[58] ),
        .O(skid_buffer[58]));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[59]_i_1__0 
       (.I0(m_axi_rdata[59]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[59] ),
        .O(skid_buffer[59]));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[5]_i_1__0 
       (.I0(m_axi_rdata[5]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[5] ),
        .O(skid_buffer[5]));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[60]_i_1__0 
       (.I0(m_axi_rdata[60]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[60] ),
        .O(skid_buffer[60]));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[61]_i_1__0 
       (.I0(m_axi_rdata[61]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[61] ),
        .O(skid_buffer[61]));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[62]_i_1__0 
       (.I0(m_axi_rdata[62]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[62] ),
        .O(skid_buffer[62]));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[63]_i_1__0 
       (.I0(m_axi_rdata[63]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[63] ),
        .O(skid_buffer[63]));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[64]_i_1__0 
       (.I0(m_axi_rresp[0]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[64] ),
        .O(skid_buffer[64]));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[65]_i_1__0 
       (.I0(m_axi_rresp[1]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[65] ),
        .O(skid_buffer[65]));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[66]_i_1__0 
       (.I0(m_axi_rlast),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[66] ),
        .O(skid_buffer[66]));
  LUT6 #(
    .INIT(64'hF8080808FFFFFFFF)) 
    \m_payload_i[67]_i_1__0 
       (.I0(\gen_single_thread.active_target_enc_reg[0] ),
        .I1(s_axi_rready[0]),
        .I2(Q[67]),
        .I3(s_axi_rready[1]),
        .I4(\gen_single_thread.active_target_enc_reg[0]_0 ),
        .I5(\m_payload_i_reg[0]_0 ),
        .O(p_1_in_0));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[67]_i_2__0 
       (.I0(m_axi_rid),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[67] ),
        .O(skid_buffer[67]));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[6]_i_1__0 
       (.I0(m_axi_rdata[6]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[6] ),
        .O(skid_buffer[6]));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[7]_i_1__0 
       (.I0(m_axi_rdata[7]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[7] ),
        .O(skid_buffer[7]));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[8]_i_1__0 
       (.I0(m_axi_rdata[8]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[8] ),
        .O(skid_buffer[8]));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[9]_i_1__0 
       (.I0(m_axi_rdata[9]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[9] ),
        .O(skid_buffer[9]));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[0]),
        .Q(Q[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[10]),
        .Q(Q[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[11]),
        .Q(Q[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[12]),
        .Q(Q[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[13]),
        .Q(Q[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[14]),
        .Q(Q[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[15]),
        .Q(Q[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[16]),
        .Q(Q[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[17]),
        .Q(Q[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[18]),
        .Q(Q[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[19]),
        .Q(Q[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[1]),
        .Q(Q[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[20]),
        .Q(Q[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[21]),
        .Q(Q[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[22]),
        .Q(Q[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[23]),
        .Q(Q[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[24]),
        .Q(Q[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[25]),
        .Q(Q[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[26]),
        .Q(Q[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[27]),
        .Q(Q[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[28]),
        .Q(Q[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[29]),
        .Q(Q[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[2]),
        .Q(Q[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[30]),
        .Q(Q[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[31]),
        .Q(Q[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[32]),
        .Q(Q[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[33]),
        .Q(Q[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[34]),
        .Q(Q[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[35]),
        .Q(Q[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[36]),
        .Q(Q[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[37]),
        .Q(Q[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[38]),
        .Q(Q[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[39]),
        .Q(Q[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[3]),
        .Q(Q[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[40]),
        .Q(Q[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[41]),
        .Q(Q[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[42]),
        .Q(Q[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[43]),
        .Q(Q[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[44]),
        .Q(Q[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[45]),
        .Q(Q[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[46]),
        .Q(Q[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[47]),
        .Q(Q[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[48]),
        .Q(Q[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[49]),
        .Q(Q[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[4]),
        .Q(Q[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[50]),
        .Q(Q[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[51]),
        .Q(Q[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[52]),
        .Q(Q[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[53]),
        .Q(Q[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[54]),
        .Q(Q[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[55]),
        .Q(Q[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[56]),
        .Q(Q[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[57]),
        .Q(Q[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[58]),
        .Q(Q[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[59]),
        .Q(Q[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[5]),
        .Q(Q[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[60]),
        .Q(Q[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[61]),
        .Q(Q[61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[62] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[62]),
        .Q(Q[62]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[63] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[63]),
        .Q(Q[63]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[64] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[64]),
        .Q(Q[64]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[65] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[65]),
        .Q(Q[65]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[66] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[66]),
        .Q(Q[66]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[67] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[67]),
        .Q(Q[67]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[6]),
        .Q(Q[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[7]),
        .Q(Q[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[8]),
        .Q(Q[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[9]),
        .Q(Q[9]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'hDF)) 
    m_valid_i_i_1__3
       (.I0(\skid_buffer_reg[0]_0 ),
        .I1(m_axi_rvalid),
        .I2(p_1_in_0),
        .O(m_valid_i0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0),
        .Q(\m_payload_i_reg[0]_0 ),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \s_axi_rvalid[0]_INST_0 
       (.I0(m_valid_i_reg_0),
        .I1(\m_payload_i_reg[0]_0 ),
        .I2(\gen_single_thread.active_target_enc_reg[0] ),
        .I3(Q[67]),
        .O(s_axi_rvalid));
  LUT3 #(
    .INIT(8'hAE)) 
    s_ready_i_i_1__3
       (.I0(p_1_in_0),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(m_axi_rvalid),
        .O(s_ready_i_i_1__3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__3_n_0),
        .Q(\skid_buffer_reg[0]_0 ),
        .R(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[32]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[33]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[34]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[35]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[36]),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[37] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[37]),
        .Q(\skid_buffer_reg_n_0_[37] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[38] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[38]),
        .Q(\skid_buffer_reg_n_0_[38] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[39] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[39]),
        .Q(\skid_buffer_reg_n_0_[39] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[40] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[40]),
        .Q(\skid_buffer_reg_n_0_[40] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[41] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[41]),
        .Q(\skid_buffer_reg_n_0_[41] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[42] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[42]),
        .Q(\skid_buffer_reg_n_0_[42] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[43] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[43]),
        .Q(\skid_buffer_reg_n_0_[43] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[44] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[44]),
        .Q(\skid_buffer_reg_n_0_[44] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[45] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[45]),
        .Q(\skid_buffer_reg_n_0_[45] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[46] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[46]),
        .Q(\skid_buffer_reg_n_0_[46] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[47] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[47]),
        .Q(\skid_buffer_reg_n_0_[47] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[48] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[48]),
        .Q(\skid_buffer_reg_n_0_[48] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[49] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[49]),
        .Q(\skid_buffer_reg_n_0_[49] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[50] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[50]),
        .Q(\skid_buffer_reg_n_0_[50] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[51] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[51]),
        .Q(\skid_buffer_reg_n_0_[51] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[52] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[52]),
        .Q(\skid_buffer_reg_n_0_[52] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[53] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[53]),
        .Q(\skid_buffer_reg_n_0_[53] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[54] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[54]),
        .Q(\skid_buffer_reg_n_0_[54] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[55] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[55]),
        .Q(\skid_buffer_reg_n_0_[55] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[56] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[56]),
        .Q(\skid_buffer_reg_n_0_[56] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[57] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[57]),
        .Q(\skid_buffer_reg_n_0_[57] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[58] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[58]),
        .Q(\skid_buffer_reg_n_0_[58] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[59] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[59]),
        .Q(\skid_buffer_reg_n_0_[59] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[60] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[60]),
        .Q(\skid_buffer_reg_n_0_[60] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[61] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[61]),
        .Q(\skid_buffer_reg_n_0_[61] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[62] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[62]),
        .Q(\skid_buffer_reg_n_0_[62] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[63] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[63]),
        .Q(\skid_buffer_reg_n_0_[63] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[64] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rresp[0]),
        .Q(\skid_buffer_reg_n_0_[64] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[65] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rresp[1]),
        .Q(\skid_buffer_reg_n_0_[65] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[66] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rlast),
        .Q(\skid_buffer_reg_n_0_[66] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[67] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rid),
        .Q(\skid_buffer_reg_n_0_[67] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2_59
   (\m_payload_i_reg[0]_0 ,
    \skid_buffer_reg[0]_0 ,
    grant_hot0_0,
    D,
    valid_qual_i3__2_1,
    \m_payload_i_reg[0]_1 ,
    r_cmd_pop_0__1,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    m_axi_rvalid,
    st_aa_arvalid_qual,
    \gen_arbiter.last_rr_hot_reg[0] ,
    \gen_arbiter.last_rr_hot_reg[1] ,
    s_axi_arvalid,
    st_aa_artarget_hot,
    \m_payload_i_reg[18]_0 ,
    m_valid_i_reg_0,
    match_13,
    \m_payload_i_reg[18]_1 ,
    match_14,
    \gen_single_thread.active_target_hot_reg[0] ,
    s_axi_rready,
    \gen_single_thread.active_target_hot_reg[0]_0 ,
    r_issuing_cnt,
    rready_carry,
    m_axi_rid,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata);
  output \m_payload_i_reg[0]_0 ;
  output \skid_buffer_reg[0]_0 ;
  output grant_hot0_0;
  output [1:0]D;
  output [0:0]valid_qual_i3__2_1;
  output [67:0]\m_payload_i_reg[0]_1 ;
  output r_cmd_pop_0__1;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input [0:0]m_axi_rvalid;
  input [1:0]st_aa_arvalid_qual;
  input \gen_arbiter.last_rr_hot_reg[0] ;
  input \gen_arbiter.last_rr_hot_reg[1] ;
  input [1:0]s_axi_arvalid;
  input [1:0]st_aa_artarget_hot;
  input \m_payload_i_reg[18]_0 ;
  input [1:0]m_valid_i_reg_0;
  input match_13;
  input \m_payload_i_reg[18]_1 ;
  input match_14;
  input \gen_single_thread.active_target_hot_reg[0] ;
  input [1:0]s_axi_rready;
  input \gen_single_thread.active_target_hot_reg[0]_0 ;
  input [1:0]r_issuing_cnt;
  input [0:0]rready_carry;
  input [0:0]m_axi_rid;
  input [0:0]m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;

  wire \<const0> ;
  wire \<const1> ;
  wire [1:0]D;
  wire aclk;
  wire \addr_arbiter_ar/valid_qual_i111_in ;
  wire \addr_arbiter_ar/valid_qual_i1__1 ;
  wire \aresetn_d_reg[1] ;
  wire \gen_arbiter.last_rr_hot_reg[0] ;
  wire \gen_arbiter.last_rr_hot_reg[1] ;
  wire \gen_single_thread.active_target_hot_reg[0] ;
  wire \gen_single_thread.active_target_hot_reg[0]_0 ;
  wire grant_hot0_0;
  wire [63:0]m_axi_rdata;
  wire [0:0]m_axi_rid;
  wire [0:0]m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire [0:0]m_axi_rvalid;
  wire \m_payload_i_reg[0]_0 ;
  wire [67:0]\m_payload_i_reg[0]_1 ;
  wire \m_payload_i_reg[18]_0 ;
  wire \m_payload_i_reg[18]_1 ;
  wire m_valid_i0;
  wire [1:0]m_valid_i_reg_0;
  wire match_13;
  wire match_14;
  wire p_1_in;
  wire p_1_in_0;
  wire r_cmd_pop_0__1;
  wire [1:0]r_issuing_cnt;
  wire [0:0]rready_carry;
  wire [1:0]s_axi_arvalid;
  wire [1:0]s_axi_rready;
  wire s_ready_i_i_1__2_n_0;
  wire [67:0]skid_buffer;
  wire \skid_buffer_reg[0]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[37] ;
  wire \skid_buffer_reg_n_0_[38] ;
  wire \skid_buffer_reg_n_0_[39] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[40] ;
  wire \skid_buffer_reg_n_0_[41] ;
  wire \skid_buffer_reg_n_0_[42] ;
  wire \skid_buffer_reg_n_0_[43] ;
  wire \skid_buffer_reg_n_0_[44] ;
  wire \skid_buffer_reg_n_0_[45] ;
  wire \skid_buffer_reg_n_0_[46] ;
  wire \skid_buffer_reg_n_0_[47] ;
  wire \skid_buffer_reg_n_0_[48] ;
  wire \skid_buffer_reg_n_0_[49] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[50] ;
  wire \skid_buffer_reg_n_0_[51] ;
  wire \skid_buffer_reg_n_0_[52] ;
  wire \skid_buffer_reg_n_0_[53] ;
  wire \skid_buffer_reg_n_0_[54] ;
  wire \skid_buffer_reg_n_0_[55] ;
  wire \skid_buffer_reg_n_0_[56] ;
  wire \skid_buffer_reg_n_0_[57] ;
  wire \skid_buffer_reg_n_0_[58] ;
  wire \skid_buffer_reg_n_0_[59] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[60] ;
  wire \skid_buffer_reg_n_0_[61] ;
  wire \skid_buffer_reg_n_0_[62] ;
  wire \skid_buffer_reg_n_0_[63] ;
  wire \skid_buffer_reg_n_0_[64] ;
  wire \skid_buffer_reg_n_0_[65] ;
  wire \skid_buffer_reg_n_0_[66] ;
  wire \skid_buffer_reg_n_0_[67] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;
  wire [1:0]st_aa_artarget_hot;
  wire [1:0]st_aa_arvalid_qual;
  wire [0:0]valid_qual_i3__2_1;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'hFF80808080808080)) 
    \gen_arbiter.any_grant_i_2__0 
       (.I0(st_aa_arvalid_qual[0]),
        .I1(\addr_arbiter_ar/valid_qual_i1__1 ),
        .I2(\gen_arbiter.last_rr_hot_reg[0] ),
        .I3(st_aa_arvalid_qual[1]),
        .I4(\addr_arbiter_ar/valid_qual_i111_in ),
        .I5(\gen_arbiter.last_rr_hot_reg[1] ),
        .O(grant_hot0_0));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT5 #(
    .INIT(32'hFFFFD555)) 
    \gen_arbiter.m_grant_enc_i[0]_i_14__0 
       (.I0(r_issuing_cnt[1]),
        .I1(\m_payload_i_reg[0]_1 [66]),
        .I2(\m_payload_i_reg[0]_0 ),
        .I3(rready_carry),
        .I4(r_issuing_cnt[0]),
        .O(valid_qual_i3__2_1));
  LUT3 #(
    .INIT(8'h8F)) 
    \gen_arbiter.qual_reg[0]_i_1__0 
       (.I0(\addr_arbiter_ar/valid_qual_i1__1 ),
        .I1(st_aa_arvalid_qual[0]),
        .I2(s_axi_arvalid[0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hF888FFFFF888F888)) 
    \gen_arbiter.qual_reg[0]_i_2__0 
       (.I0(st_aa_artarget_hot[0]),
        .I1(valid_qual_i3__2_1),
        .I2(\m_payload_i_reg[18]_1 ),
        .I3(m_valid_i_reg_0[0]),
        .I4(match_14),
        .I5(m_valid_i_reg_0[1]),
        .O(\addr_arbiter_ar/valid_qual_i1__1 ));
  LUT3 #(
    .INIT(8'h8F)) 
    \gen_arbiter.qual_reg[1]_i_1__0 
       (.I0(\addr_arbiter_ar/valid_qual_i111_in ),
        .I1(st_aa_arvalid_qual[1]),
        .I2(s_axi_arvalid[1]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hF888FFFFF888F888)) 
    \gen_arbiter.qual_reg[1]_i_2__0 
       (.I0(st_aa_artarget_hot[1]),
        .I1(valid_qual_i3__2_1),
        .I2(\m_payload_i_reg[18]_0 ),
        .I3(m_valid_i_reg_0[0]),
        .I4(match_13),
        .I5(m_valid_i_reg_0[1]),
        .O(\addr_arbiter_ar/valid_qual_i111_in ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \gen_master_slots[0].r_issuing_cnt[1]_i_2 
       (.I0(\m_payload_i_reg[0]_1 [66]),
        .I1(\m_payload_i_reg[0]_0 ),
        .I2(rready_carry),
        .O(r_cmd_pop_0__1));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_rdata[0]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[0] ),
        .O(skid_buffer[0]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[10]_i_1 
       (.I0(m_axi_rdata[10]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[10] ),
        .O(skid_buffer[10]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[11]_i_1 
       (.I0(m_axi_rdata[11]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[11] ),
        .O(skid_buffer[11]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[12]_i_1 
       (.I0(m_axi_rdata[12]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[12] ),
        .O(skid_buffer[12]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[13]_i_1 
       (.I0(m_axi_rdata[13]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[13] ),
        .O(skid_buffer[13]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[14]_i_1 
       (.I0(m_axi_rdata[14]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[14] ),
        .O(skid_buffer[14]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[15]_i_1 
       (.I0(m_axi_rdata[15]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[15] ),
        .O(skid_buffer[15]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[16]_i_1 
       (.I0(m_axi_rdata[16]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[16] ),
        .O(skid_buffer[16]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[17]_i_1 
       (.I0(m_axi_rdata[17]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[17] ),
        .O(skid_buffer[17]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[18]_i_1 
       (.I0(m_axi_rdata[18]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[18] ),
        .O(skid_buffer[18]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[19]_i_1 
       (.I0(m_axi_rdata[19]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[19] ),
        .O(skid_buffer[19]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_rdata[1]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[1] ),
        .O(skid_buffer[1]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[20]_i_1 
       (.I0(m_axi_rdata[20]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[20] ),
        .O(skid_buffer[20]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[21]_i_1 
       (.I0(m_axi_rdata[21]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[21] ),
        .O(skid_buffer[21]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[22]_i_1 
       (.I0(m_axi_rdata[22]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[22] ),
        .O(skid_buffer[22]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[23]_i_1 
       (.I0(m_axi_rdata[23]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[23] ),
        .O(skid_buffer[23]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[24]_i_1 
       (.I0(m_axi_rdata[24]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[24] ),
        .O(skid_buffer[24]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[25]_i_1 
       (.I0(m_axi_rdata[25]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[25] ),
        .O(skid_buffer[25]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[26]_i_1 
       (.I0(m_axi_rdata[26]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[26] ),
        .O(skid_buffer[26]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[27]_i_1 
       (.I0(m_axi_rdata[27]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[27] ),
        .O(skid_buffer[27]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[28]_i_1 
       (.I0(m_axi_rdata[28]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[28] ),
        .O(skid_buffer[28]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[29]_i_1 
       (.I0(m_axi_rdata[29]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[29] ),
        .O(skid_buffer[29]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[2]_i_1 
       (.I0(m_axi_rdata[2]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[2] ),
        .O(skid_buffer[2]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[30]_i_1 
       (.I0(m_axi_rdata[30]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[30] ),
        .O(skid_buffer[30]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[31]_i_1 
       (.I0(m_axi_rdata[31]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[31] ),
        .O(skid_buffer[31]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[32]_i_1 
       (.I0(m_axi_rdata[32]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[32] ),
        .O(skid_buffer[32]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[33]_i_1 
       (.I0(m_axi_rdata[33]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[33] ),
        .O(skid_buffer[33]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[34]_i_1 
       (.I0(m_axi_rdata[34]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[34] ),
        .O(skid_buffer[34]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[35]_i_1 
       (.I0(m_axi_rdata[35]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[35] ),
        .O(skid_buffer[35]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[36]_i_1 
       (.I0(m_axi_rdata[36]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[36] ),
        .O(skid_buffer[36]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[37]_i_1 
       (.I0(m_axi_rdata[37]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[37] ),
        .O(skid_buffer[37]));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[38]_i_1 
       (.I0(m_axi_rdata[38]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[38] ),
        .O(skid_buffer[38]));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[39]_i_1 
       (.I0(m_axi_rdata[39]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[39] ),
        .O(skid_buffer[39]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[3]_i_1 
       (.I0(m_axi_rdata[3]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[3] ),
        .O(skid_buffer[3]));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[40]_i_1 
       (.I0(m_axi_rdata[40]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[40] ),
        .O(skid_buffer[40]));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[41]_i_1 
       (.I0(m_axi_rdata[41]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[41] ),
        .O(skid_buffer[41]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[42]_i_1 
       (.I0(m_axi_rdata[42]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[42] ),
        .O(skid_buffer[42]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[43]_i_1 
       (.I0(m_axi_rdata[43]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[43] ),
        .O(skid_buffer[43]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[44]_i_1 
       (.I0(m_axi_rdata[44]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[44] ),
        .O(skid_buffer[44]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[45]_i_1 
       (.I0(m_axi_rdata[45]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[45] ),
        .O(skid_buffer[45]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[46]_i_1 
       (.I0(m_axi_rdata[46]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[46] ),
        .O(skid_buffer[46]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[47]_i_1 
       (.I0(m_axi_rdata[47]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[47] ),
        .O(skid_buffer[47]));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[48]_i_1 
       (.I0(m_axi_rdata[48]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[48] ),
        .O(skid_buffer[48]));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[49]_i_1 
       (.I0(m_axi_rdata[49]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[49] ),
        .O(skid_buffer[49]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[4]_i_1 
       (.I0(m_axi_rdata[4]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[4] ),
        .O(skid_buffer[4]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[50]_i_1 
       (.I0(m_axi_rdata[50]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[50] ),
        .O(skid_buffer[50]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[51]_i_1 
       (.I0(m_axi_rdata[51]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[51] ),
        .O(skid_buffer[51]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[52]_i_1 
       (.I0(m_axi_rdata[52]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[52] ),
        .O(skid_buffer[52]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[53]_i_1 
       (.I0(m_axi_rdata[53]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[53] ),
        .O(skid_buffer[53]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[54]_i_1 
       (.I0(m_axi_rdata[54]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[54] ),
        .O(skid_buffer[54]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[55]_i_1 
       (.I0(m_axi_rdata[55]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[55] ),
        .O(skid_buffer[55]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[56]_i_1 
       (.I0(m_axi_rdata[56]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[56] ),
        .O(skid_buffer[56]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[57]_i_1 
       (.I0(m_axi_rdata[57]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[57] ),
        .O(skid_buffer[57]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[58]_i_1 
       (.I0(m_axi_rdata[58]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[58] ),
        .O(skid_buffer[58]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[59]_i_1 
       (.I0(m_axi_rdata[59]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[59] ),
        .O(skid_buffer[59]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[5]_i_1 
       (.I0(m_axi_rdata[5]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[5] ),
        .O(skid_buffer[5]));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[60]_i_1 
       (.I0(m_axi_rdata[60]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[60] ),
        .O(skid_buffer[60]));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[61]_i_1 
       (.I0(m_axi_rdata[61]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[61] ),
        .O(skid_buffer[61]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[62]_i_1 
       (.I0(m_axi_rdata[62]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[62] ),
        .O(skid_buffer[62]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[63]_i_1 
       (.I0(m_axi_rdata[63]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[63] ),
        .O(skid_buffer[63]));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[64]_i_1 
       (.I0(m_axi_rresp[0]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[64] ),
        .O(skid_buffer[64]));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[65]_i_1 
       (.I0(m_axi_rresp[1]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[65] ),
        .O(skid_buffer[65]));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[66]_i_1 
       (.I0(m_axi_rlast),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[66] ),
        .O(skid_buffer[66]));
  LUT6 #(
    .INIT(64'hF8080808FFFFFFFF)) 
    \m_payload_i[67]_i_1 
       (.I0(\gen_single_thread.active_target_hot_reg[0] ),
        .I1(s_axi_rready[0]),
        .I2(\m_payload_i_reg[0]_1 [67]),
        .I3(s_axi_rready[1]),
        .I4(\gen_single_thread.active_target_hot_reg[0]_0 ),
        .I5(\m_payload_i_reg[0]_0 ),
        .O(p_1_in_0));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[67]_i_2 
       (.I0(m_axi_rid),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[67] ),
        .O(skid_buffer[67]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[6]_i_1 
       (.I0(m_axi_rdata[6]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[6] ),
        .O(skid_buffer[6]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[7]_i_1 
       (.I0(m_axi_rdata[7]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[7] ),
        .O(skid_buffer[7]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[8]_i_1 
       (.I0(m_axi_rdata[8]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[8] ),
        .O(skid_buffer[8]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \m_payload_i[9]_i_1 
       (.I0(m_axi_rdata[9]),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(\skid_buffer_reg_n_0_[9] ),
        .O(skid_buffer[9]));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[0]),
        .Q(\m_payload_i_reg[0]_1 [0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[10]),
        .Q(\m_payload_i_reg[0]_1 [10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[11]),
        .Q(\m_payload_i_reg[0]_1 [11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[12]),
        .Q(\m_payload_i_reg[0]_1 [12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[13]),
        .Q(\m_payload_i_reg[0]_1 [13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[14]),
        .Q(\m_payload_i_reg[0]_1 [14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[15]),
        .Q(\m_payload_i_reg[0]_1 [15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[16]),
        .Q(\m_payload_i_reg[0]_1 [16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[17]),
        .Q(\m_payload_i_reg[0]_1 [17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[18]),
        .Q(\m_payload_i_reg[0]_1 [18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[19]),
        .Q(\m_payload_i_reg[0]_1 [19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[1]),
        .Q(\m_payload_i_reg[0]_1 [1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[20]),
        .Q(\m_payload_i_reg[0]_1 [20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[21]),
        .Q(\m_payload_i_reg[0]_1 [21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[22]),
        .Q(\m_payload_i_reg[0]_1 [22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[23]),
        .Q(\m_payload_i_reg[0]_1 [23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[24]),
        .Q(\m_payload_i_reg[0]_1 [24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[25]),
        .Q(\m_payload_i_reg[0]_1 [25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[26]),
        .Q(\m_payload_i_reg[0]_1 [26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[27]),
        .Q(\m_payload_i_reg[0]_1 [27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[28]),
        .Q(\m_payload_i_reg[0]_1 [28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[29]),
        .Q(\m_payload_i_reg[0]_1 [29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[2]),
        .Q(\m_payload_i_reg[0]_1 [2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[30]),
        .Q(\m_payload_i_reg[0]_1 [30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[31]),
        .Q(\m_payload_i_reg[0]_1 [31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[32]),
        .Q(\m_payload_i_reg[0]_1 [32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[33]),
        .Q(\m_payload_i_reg[0]_1 [33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[34]),
        .Q(\m_payload_i_reg[0]_1 [34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[35]),
        .Q(\m_payload_i_reg[0]_1 [35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[36]),
        .Q(\m_payload_i_reg[0]_1 [36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[37]),
        .Q(\m_payload_i_reg[0]_1 [37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[38]),
        .Q(\m_payload_i_reg[0]_1 [38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[39]),
        .Q(\m_payload_i_reg[0]_1 [39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[3]),
        .Q(\m_payload_i_reg[0]_1 [3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[40]),
        .Q(\m_payload_i_reg[0]_1 [40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[41]),
        .Q(\m_payload_i_reg[0]_1 [41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[42]),
        .Q(\m_payload_i_reg[0]_1 [42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[43]),
        .Q(\m_payload_i_reg[0]_1 [43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[44]),
        .Q(\m_payload_i_reg[0]_1 [44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[45]),
        .Q(\m_payload_i_reg[0]_1 [45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[46]),
        .Q(\m_payload_i_reg[0]_1 [46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[47]),
        .Q(\m_payload_i_reg[0]_1 [47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[48]),
        .Q(\m_payload_i_reg[0]_1 [48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[49]),
        .Q(\m_payload_i_reg[0]_1 [49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[4]),
        .Q(\m_payload_i_reg[0]_1 [4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[50]),
        .Q(\m_payload_i_reg[0]_1 [50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[51]),
        .Q(\m_payload_i_reg[0]_1 [51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[52]),
        .Q(\m_payload_i_reg[0]_1 [52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[53]),
        .Q(\m_payload_i_reg[0]_1 [53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[54]),
        .Q(\m_payload_i_reg[0]_1 [54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[55]),
        .Q(\m_payload_i_reg[0]_1 [55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[56]),
        .Q(\m_payload_i_reg[0]_1 [56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[57]),
        .Q(\m_payload_i_reg[0]_1 [57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[58]),
        .Q(\m_payload_i_reg[0]_1 [58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[59]),
        .Q(\m_payload_i_reg[0]_1 [59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[5]),
        .Q(\m_payload_i_reg[0]_1 [5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[60]),
        .Q(\m_payload_i_reg[0]_1 [60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[61]),
        .Q(\m_payload_i_reg[0]_1 [61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[62] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[62]),
        .Q(\m_payload_i_reg[0]_1 [62]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[63] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[63]),
        .Q(\m_payload_i_reg[0]_1 [63]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[64] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[64]),
        .Q(\m_payload_i_reg[0]_1 [64]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[65] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[65]),
        .Q(\m_payload_i_reg[0]_1 [65]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[66] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[66]),
        .Q(\m_payload_i_reg[0]_1 [66]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[67] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[67]),
        .Q(\m_payload_i_reg[0]_1 [67]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[6]),
        .Q(\m_payload_i_reg[0]_1 [6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[7]),
        .Q(\m_payload_i_reg[0]_1 [7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[8]),
        .Q(\m_payload_i_reg[0]_1 [8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(p_1_in_0),
        .D(skid_buffer[9]),
        .Q(\m_payload_i_reg[0]_1 [9]),
        .R(\<const0> ));
  LUT3 #(
    .INIT(8'hDF)) 
    m_valid_i_i_1__2
       (.I0(\skid_buffer_reg[0]_0 ),
        .I1(m_axi_rvalid),
        .I2(p_1_in_0),
        .O(m_valid_i0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0),
        .Q(\m_payload_i_reg[0]_0 ),
        .R(\aresetn_d_reg[1] ));
  LUT3 #(
    .INIT(8'hAE)) 
    s_ready_i_i_1__2
       (.I0(p_1_in_0),
        .I1(\skid_buffer_reg[0]_0 ),
        .I2(m_axi_rvalid),
        .O(s_ready_i_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i_i_1__2_n_0),
        .Q(\skid_buffer_reg[0]_0 ),
        .R(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[32]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[33]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[34]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[35]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[36]),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[37] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[37]),
        .Q(\skid_buffer_reg_n_0_[37] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[38] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[38]),
        .Q(\skid_buffer_reg_n_0_[38] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[39] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[39]),
        .Q(\skid_buffer_reg_n_0_[39] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[40] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[40]),
        .Q(\skid_buffer_reg_n_0_[40] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[41] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[41]),
        .Q(\skid_buffer_reg_n_0_[41] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[42] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[42]),
        .Q(\skid_buffer_reg_n_0_[42] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[43] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[43]),
        .Q(\skid_buffer_reg_n_0_[43] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[44] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[44]),
        .Q(\skid_buffer_reg_n_0_[44] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[45] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[45]),
        .Q(\skid_buffer_reg_n_0_[45] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[46] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[46]),
        .Q(\skid_buffer_reg_n_0_[46] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[47] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[47]),
        .Q(\skid_buffer_reg_n_0_[47] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[48] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[48]),
        .Q(\skid_buffer_reg_n_0_[48] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[49] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[49]),
        .Q(\skid_buffer_reg_n_0_[49] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[50] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[50]),
        .Q(\skid_buffer_reg_n_0_[50] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[51] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[51]),
        .Q(\skid_buffer_reg_n_0_[51] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[52] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[52]),
        .Q(\skid_buffer_reg_n_0_[52] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[53] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[53]),
        .Q(\skid_buffer_reg_n_0_[53] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[54] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[54]),
        .Q(\skid_buffer_reg_n_0_[54] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[55] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[55]),
        .Q(\skid_buffer_reg_n_0_[55] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[56] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[56]),
        .Q(\skid_buffer_reg_n_0_[56] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[57] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[57]),
        .Q(\skid_buffer_reg_n_0_[57] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[58] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[58]),
        .Q(\skid_buffer_reg_n_0_[58] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[59] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[59]),
        .Q(\skid_buffer_reg_n_0_[59] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[60] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[60]),
        .Q(\skid_buffer_reg_n_0_[60] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[61] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[61]),
        .Q(\skid_buffer_reg_n_0_[61] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[62] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[62]),
        .Q(\skid_buffer_reg_n_0_[62] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[63] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[63]),
        .Q(\skid_buffer_reg_n_0_[63] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[64] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rresp[0]),
        .Q(\skid_buffer_reg_n_0_[64] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[65] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rresp[1]),
        .Q(\skid_buffer_reg_n_0_[65] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[66] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rlast),
        .Q(\skid_buffer_reg_n_0_[66] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[67] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rid),
        .Q(\skid_buffer_reg_n_0_[67] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized2_9
   (S00_AXI_0_rvalid,
    \skid_buffer_reg[0]_0 ,
    S00_AXI_0_rlast,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    s_axi_rready,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    m_axi_rvalid);
  output S00_AXI_0_rvalid;
  output \skid_buffer_reg[0]_0 ;
  output [66:0]S00_AXI_0_rlast;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input s_axi_rready;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [63:0]m_axi_rdata;
  input m_axi_rvalid;

  wire \<const0> ;
  wire \<const1> ;
  wire [66:0]S00_AXI_0_rlast;
  wire S00_AXI_0_rvalid;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire [63:0]m_axi_rdata;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire \m_payload_i[0]_i_1_n_0 ;
  wire \m_payload_i[10]_i_1_n_0 ;
  wire \m_payload_i[11]_i_1_n_0 ;
  wire \m_payload_i[12]_i_1_n_0 ;
  wire \m_payload_i[13]_i_1_n_0 ;
  wire \m_payload_i[14]_i_1_n_0 ;
  wire \m_payload_i[15]_i_1_n_0 ;
  wire \m_payload_i[16]_i_1_n_0 ;
  wire \m_payload_i[17]_i_1_n_0 ;
  wire \m_payload_i[18]_i_1_n_0 ;
  wire \m_payload_i[19]_i_1_n_0 ;
  wire \m_payload_i[1]_i_1_n_0 ;
  wire \m_payload_i[20]_i_1_n_0 ;
  wire \m_payload_i[21]_i_1_n_0 ;
  wire \m_payload_i[22]_i_1_n_0 ;
  wire \m_payload_i[23]_i_1_n_0 ;
  wire \m_payload_i[24]_i_1_n_0 ;
  wire \m_payload_i[25]_i_1_n_0 ;
  wire \m_payload_i[26]_i_1_n_0 ;
  wire \m_payload_i[27]_i_1_n_0 ;
  wire \m_payload_i[28]_i_1_n_0 ;
  wire \m_payload_i[29]_i_1_n_0 ;
  wire \m_payload_i[2]_i_1_n_0 ;
  wire \m_payload_i[30]_i_1_n_0 ;
  wire \m_payload_i[31]_i_1_n_0 ;
  wire \m_payload_i[32]_i_1_n_0 ;
  wire \m_payload_i[33]_i_1_n_0 ;
  wire \m_payload_i[34]_i_1_n_0 ;
  wire \m_payload_i[35]_i_1_n_0 ;
  wire \m_payload_i[36]_i_1_n_0 ;
  wire \m_payload_i[37]_i_1_n_0 ;
  wire \m_payload_i[38]_i_1_n_0 ;
  wire \m_payload_i[39]_i_1_n_0 ;
  wire \m_payload_i[3]_i_1_n_0 ;
  wire \m_payload_i[40]_i_1_n_0 ;
  wire \m_payload_i[41]_i_1_n_0 ;
  wire \m_payload_i[42]_i_1_n_0 ;
  wire \m_payload_i[43]_i_1_n_0 ;
  wire \m_payload_i[44]_i_1_n_0 ;
  wire \m_payload_i[45]_i_1_n_0 ;
  wire \m_payload_i[46]_i_1_n_0 ;
  wire \m_payload_i[47]_i_1_n_0 ;
  wire \m_payload_i[48]_i_1_n_0 ;
  wire \m_payload_i[49]_i_1_n_0 ;
  wire \m_payload_i[4]_i_1_n_0 ;
  wire \m_payload_i[50]_i_1_n_0 ;
  wire \m_payload_i[51]_i_1_n_0 ;
  wire \m_payload_i[52]_i_1_n_0 ;
  wire \m_payload_i[53]_i_1_n_0 ;
  wire \m_payload_i[54]_i_1_n_0 ;
  wire \m_payload_i[55]_i_1_n_0 ;
  wire \m_payload_i[56]_i_1_n_0 ;
  wire \m_payload_i[57]_i_1_n_0 ;
  wire \m_payload_i[58]_i_1_n_0 ;
  wire \m_payload_i[59]_i_1_n_0 ;
  wire \m_payload_i[5]_i_1_n_0 ;
  wire \m_payload_i[60]_i_1_n_0 ;
  wire \m_payload_i[61]_i_1_n_0 ;
  wire \m_payload_i[62]_i_1_n_0 ;
  wire \m_payload_i[63]_i_1__0_n_0 ;
  wire \m_payload_i[63]_i_2_n_0 ;
  wire \m_payload_i[64]_i_1_n_0 ;
  wire \m_payload_i[65]_i_1_n_0 ;
  wire \m_payload_i[66]_i_1_n_0 ;
  wire \m_payload_i[6]_i_1_n_0 ;
  wire \m_payload_i[7]_i_1_n_0 ;
  wire \m_payload_i[8]_i_1_n_0 ;
  wire \m_payload_i[9]_i_1_n_0 ;
  wire m_valid_i0__0;
  wire p_1_in;
  wire s_axi_rready;
  wire s_ready_i0;
  wire \skid_buffer_reg[0]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[37] ;
  wire \skid_buffer_reg_n_0_[38] ;
  wire \skid_buffer_reg_n_0_[39] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[40] ;
  wire \skid_buffer_reg_n_0_[41] ;
  wire \skid_buffer_reg_n_0_[42] ;
  wire \skid_buffer_reg_n_0_[43] ;
  wire \skid_buffer_reg_n_0_[44] ;
  wire \skid_buffer_reg_n_0_[45] ;
  wire \skid_buffer_reg_n_0_[46] ;
  wire \skid_buffer_reg_n_0_[47] ;
  wire \skid_buffer_reg_n_0_[48] ;
  wire \skid_buffer_reg_n_0_[49] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[50] ;
  wire \skid_buffer_reg_n_0_[51] ;
  wire \skid_buffer_reg_n_0_[52] ;
  wire \skid_buffer_reg_n_0_[53] ;
  wire \skid_buffer_reg_n_0_[54] ;
  wire \skid_buffer_reg_n_0_[55] ;
  wire \skid_buffer_reg_n_0_[56] ;
  wire \skid_buffer_reg_n_0_[57] ;
  wire \skid_buffer_reg_n_0_[58] ;
  wire \skid_buffer_reg_n_0_[59] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[60] ;
  wire \skid_buffer_reg_n_0_[61] ;
  wire \skid_buffer_reg_n_0_[62] ;
  wire \skid_buffer_reg_n_0_[63] ;
  wire \skid_buffer_reg_n_0_[64] ;
  wire \skid_buffer_reg_n_0_[65] ;
  wire \skid_buffer_reg_n_0_[66] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair545" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_rdata[0]),
        .I1(\skid_buffer_reg_n_0_[0] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair550" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[10]_i_1 
       (.I0(m_axi_rdata[10]),
        .I1(\skid_buffer_reg_n_0_[10] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair550" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[11]_i_1 
       (.I0(m_axi_rdata[11]),
        .I1(\skid_buffer_reg_n_0_[11] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair551" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[12]_i_1 
       (.I0(m_axi_rdata[12]),
        .I1(\skid_buffer_reg_n_0_[12] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair551" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[13]_i_1 
       (.I0(m_axi_rdata[13]),
        .I1(\skid_buffer_reg_n_0_[13] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair552" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[14]_i_1 
       (.I0(m_axi_rdata[14]),
        .I1(\skid_buffer_reg_n_0_[14] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair552" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[15]_i_1 
       (.I0(m_axi_rdata[15]),
        .I1(\skid_buffer_reg_n_0_[15] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair553" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[16]_i_1 
       (.I0(m_axi_rdata[16]),
        .I1(\skid_buffer_reg_n_0_[16] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair553" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[17]_i_1 
       (.I0(m_axi_rdata[17]),
        .I1(\skid_buffer_reg_n_0_[17] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair554" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[18]_i_1 
       (.I0(m_axi_rdata[18]),
        .I1(\skid_buffer_reg_n_0_[18] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair554" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[19]_i_1 
       (.I0(m_axi_rdata[19]),
        .I1(\skid_buffer_reg_n_0_[19] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair545" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_rdata[1]),
        .I1(\skid_buffer_reg_n_0_[1] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair555" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[20]_i_1 
       (.I0(m_axi_rdata[20]),
        .I1(\skid_buffer_reg_n_0_[20] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair555" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[21]_i_1 
       (.I0(m_axi_rdata[21]),
        .I1(\skid_buffer_reg_n_0_[21] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair556" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[22]_i_1 
       (.I0(m_axi_rdata[22]),
        .I1(\skid_buffer_reg_n_0_[22] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair556" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[23]_i_1 
       (.I0(m_axi_rdata[23]),
        .I1(\skid_buffer_reg_n_0_[23] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair557" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[24]_i_1 
       (.I0(m_axi_rdata[24]),
        .I1(\skid_buffer_reg_n_0_[24] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair557" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[25]_i_1 
       (.I0(m_axi_rdata[25]),
        .I1(\skid_buffer_reg_n_0_[25] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair558" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[26]_i_1 
       (.I0(m_axi_rdata[26]),
        .I1(\skid_buffer_reg_n_0_[26] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair558" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[27]_i_1 
       (.I0(m_axi_rdata[27]),
        .I1(\skid_buffer_reg_n_0_[27] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair559" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[28]_i_1 
       (.I0(m_axi_rdata[28]),
        .I1(\skid_buffer_reg_n_0_[28] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair559" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[29]_i_1 
       (.I0(m_axi_rdata[29]),
        .I1(\skid_buffer_reg_n_0_[29] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair546" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[2]_i_1 
       (.I0(m_axi_rdata[2]),
        .I1(\skid_buffer_reg_n_0_[2] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair560" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[30]_i_1 
       (.I0(m_axi_rdata[30]),
        .I1(\skid_buffer_reg_n_0_[30] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair560" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[31]_i_1 
       (.I0(m_axi_rdata[31]),
        .I1(\skid_buffer_reg_n_0_[31] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair561" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[32]_i_1 
       (.I0(m_axi_rdata[32]),
        .I1(\skid_buffer_reg_n_0_[32] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair561" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[33]_i_1 
       (.I0(m_axi_rdata[33]),
        .I1(\skid_buffer_reg_n_0_[33] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair562" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[34]_i_1 
       (.I0(m_axi_rdata[34]),
        .I1(\skid_buffer_reg_n_0_[34] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair562" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[35]_i_1 
       (.I0(m_axi_rdata[35]),
        .I1(\skid_buffer_reg_n_0_[35] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[35]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair563" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[36]_i_1 
       (.I0(m_axi_rdata[36]),
        .I1(\skid_buffer_reg_n_0_[36] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[36]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair563" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[37]_i_1 
       (.I0(m_axi_rdata[37]),
        .I1(\skid_buffer_reg_n_0_[37] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[37]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair564" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[38]_i_1 
       (.I0(m_axi_rdata[38]),
        .I1(\skid_buffer_reg_n_0_[38] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[38]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair564" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[39]_i_1 
       (.I0(m_axi_rdata[39]),
        .I1(\skid_buffer_reg_n_0_[39] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair546" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[3]_i_1 
       (.I0(m_axi_rdata[3]),
        .I1(\skid_buffer_reg_n_0_[3] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair565" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[40]_i_1 
       (.I0(m_axi_rdata[40]),
        .I1(\skid_buffer_reg_n_0_[40] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair565" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[41]_i_1 
       (.I0(m_axi_rdata[41]),
        .I1(\skid_buffer_reg_n_0_[41] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair566" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[42]_i_1 
       (.I0(m_axi_rdata[42]),
        .I1(\skid_buffer_reg_n_0_[42] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair566" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[43]_i_1 
       (.I0(m_axi_rdata[43]),
        .I1(\skid_buffer_reg_n_0_[43] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[43]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair567" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[44]_i_1 
       (.I0(m_axi_rdata[44]),
        .I1(\skid_buffer_reg_n_0_[44] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[44]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair567" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[45]_i_1 
       (.I0(m_axi_rdata[45]),
        .I1(\skid_buffer_reg_n_0_[45] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[45]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair568" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[46]_i_1 
       (.I0(m_axi_rdata[46]),
        .I1(\skid_buffer_reg_n_0_[46] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[46]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair568" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[47]_i_1 
       (.I0(m_axi_rdata[47]),
        .I1(\skid_buffer_reg_n_0_[47] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[47]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair569" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[48]_i_1 
       (.I0(m_axi_rdata[48]),
        .I1(\skid_buffer_reg_n_0_[48] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[48]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair569" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[49]_i_1 
       (.I0(m_axi_rdata[49]),
        .I1(\skid_buffer_reg_n_0_[49] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair547" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[4]_i_1 
       (.I0(m_axi_rdata[4]),
        .I1(\skid_buffer_reg_n_0_[4] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair570" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[50]_i_1 
       (.I0(m_axi_rdata[50]),
        .I1(\skid_buffer_reg_n_0_[50] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[50]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair570" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[51]_i_1 
       (.I0(m_axi_rdata[51]),
        .I1(\skid_buffer_reg_n_0_[51] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[51]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair571" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[52]_i_1 
       (.I0(m_axi_rdata[52]),
        .I1(\skid_buffer_reg_n_0_[52] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[52]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair571" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[53]_i_1 
       (.I0(m_axi_rdata[53]),
        .I1(\skid_buffer_reg_n_0_[53] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[53]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair572" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[54]_i_1 
       (.I0(m_axi_rdata[54]),
        .I1(\skid_buffer_reg_n_0_[54] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[54]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair572" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[55]_i_1 
       (.I0(m_axi_rdata[55]),
        .I1(\skid_buffer_reg_n_0_[55] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[55]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair573" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[56]_i_1 
       (.I0(m_axi_rdata[56]),
        .I1(\skid_buffer_reg_n_0_[56] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[56]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair573" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[57]_i_1 
       (.I0(m_axi_rdata[57]),
        .I1(\skid_buffer_reg_n_0_[57] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[57]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair574" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[58]_i_1 
       (.I0(m_axi_rdata[58]),
        .I1(\skid_buffer_reg_n_0_[58] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[58]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair574" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[59]_i_1 
       (.I0(m_axi_rdata[59]),
        .I1(\skid_buffer_reg_n_0_[59] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[59]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair547" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[5]_i_1 
       (.I0(m_axi_rdata[5]),
        .I1(\skid_buffer_reg_n_0_[5] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair575" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[60]_i_1 
       (.I0(m_axi_rdata[60]),
        .I1(\skid_buffer_reg_n_0_[60] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[60]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair575" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[61]_i_1 
       (.I0(m_axi_rdata[61]),
        .I1(\skid_buffer_reg_n_0_[61] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[61]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair576" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[62]_i_1 
       (.I0(m_axi_rdata[62]),
        .I1(\skid_buffer_reg_n_0_[62] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[62]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \m_payload_i[63]_i_1__0 
       (.I0(s_axi_rready),
        .I1(S00_AXI_0_rvalid),
        .O(\m_payload_i[63]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair576" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[63]_i_2 
       (.I0(m_axi_rdata[63]),
        .I1(\skid_buffer_reg_n_0_[63] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[63]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair577" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[64]_i_1 
       (.I0(m_axi_rresp[0]),
        .I1(\skid_buffer_reg_n_0_[64] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[64]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair577" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[65]_i_1 
       (.I0(m_axi_rresp[1]),
        .I1(\skid_buffer_reg_n_0_[65] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[65]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[66]_i_1 
       (.I0(m_axi_rlast),
        .I1(\skid_buffer_reg_n_0_[66] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[66]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair548" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[6]_i_1 
       (.I0(m_axi_rdata[6]),
        .I1(\skid_buffer_reg_n_0_[6] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair548" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[7]_i_1 
       (.I0(m_axi_rdata[7]),
        .I1(\skid_buffer_reg_n_0_[7] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair549" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[8]_i_1 
       (.I0(m_axi_rdata[8]),
        .I1(\skid_buffer_reg_n_0_[8] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair549" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[9]_i_1 
       (.I0(m_axi_rdata[9]),
        .I1(\skid_buffer_reg_n_0_[9] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[0]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[10]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[11]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[12]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[13]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[14]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[15]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[16]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[17]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[18]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[19]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[1]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[20]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[21]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[22]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[23]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[24]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[25]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[26]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[27]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[28]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[29]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[2]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[30]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[31]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[32]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[33]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[34]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[35]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[36]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[37] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[37]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[37]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[38] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[38]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[38]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[39] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[39]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[39]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[3]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[40] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[40]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[40]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[41] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[41]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[41]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[42] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[42]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[42]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[43] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[43]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[43]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[44] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[44]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[44]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[45] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[45]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[45]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[46] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[46]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[46]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[47] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[47]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[47]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[48] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[48]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[48]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[49] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[49]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[49]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[4]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[50] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[50]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[50]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[51] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[51]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[51]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[52] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[52]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[52]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[53] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[53]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[53]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[54] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[54]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[54]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[55] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[55]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[55]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[56] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[56]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[56]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[57] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[57]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[57]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[58] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[58]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[58]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[59] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[59]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[59]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[5]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[60] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[60]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[60]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[61] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[61]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[61]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[62] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[62]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[62]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[63] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[63]_i_2_n_0 ),
        .Q(S00_AXI_0_rlast[63]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[64] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[64]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[64]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[65] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[65]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[65]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[66] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[66]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[66]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[6]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[7]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[8]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[63]_i_1__0_n_0 ),
        .D(\m_payload_i[9]_i_1_n_0 ),
        .Q(S00_AXI_0_rlast[9]),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hFF5D)) 
    m_valid_i0
       (.I0(\skid_buffer_reg[0]_0 ),
        .I1(S00_AXI_0_rvalid),
        .I2(s_axi_rready),
        .I3(m_axi_rvalid),
        .O(m_valid_i0__0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0__0),
        .Q(S00_AXI_0_rvalid),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hDFDD)) 
    s_ready_i_i_1__0
       (.I0(S00_AXI_0_rvalid),
        .I1(s_axi_rready),
        .I2(m_axi_rvalid),
        .I3(\skid_buffer_reg[0]_0 ),
        .O(s_ready_i0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i0),
        .Q(\skid_buffer_reg[0]_0 ),
        .R(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[32]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[33]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[34]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[35]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[36]),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[37] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[37]),
        .Q(\skid_buffer_reg_n_0_[37] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[38] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[38]),
        .Q(\skid_buffer_reg_n_0_[38] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[39] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[39]),
        .Q(\skid_buffer_reg_n_0_[39] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[40] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[40]),
        .Q(\skid_buffer_reg_n_0_[40] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[41] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[41]),
        .Q(\skid_buffer_reg_n_0_[41] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[42] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[42]),
        .Q(\skid_buffer_reg_n_0_[42] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[43] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[43]),
        .Q(\skid_buffer_reg_n_0_[43] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[44] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[44]),
        .Q(\skid_buffer_reg_n_0_[44] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[45] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[45]),
        .Q(\skid_buffer_reg_n_0_[45] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[46] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[46]),
        .Q(\skid_buffer_reg_n_0_[46] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[47] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[47]),
        .Q(\skid_buffer_reg_n_0_[47] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[48] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[48]),
        .Q(\skid_buffer_reg_n_0_[48] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[49] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[49]),
        .Q(\skid_buffer_reg_n_0_[49] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[50] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[50]),
        .Q(\skid_buffer_reg_n_0_[50] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[51] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[51]),
        .Q(\skid_buffer_reg_n_0_[51] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[52] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[52]),
        .Q(\skid_buffer_reg_n_0_[52] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[53] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[53]),
        .Q(\skid_buffer_reg_n_0_[53] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[54] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[54]),
        .Q(\skid_buffer_reg_n_0_[54] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[55] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[55]),
        .Q(\skid_buffer_reg_n_0_[55] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[56] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[56]),
        .Q(\skid_buffer_reg_n_0_[56] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[57] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[57]),
        .Q(\skid_buffer_reg_n_0_[57] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[58] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[58]),
        .Q(\skid_buffer_reg_n_0_[58] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[59] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[59]),
        .Q(\skid_buffer_reg_n_0_[59] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[60] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[60]),
        .Q(\skid_buffer_reg_n_0_[60] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[61] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[61]),
        .Q(\skid_buffer_reg_n_0_[61] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[62] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[62]),
        .Q(\skid_buffer_reg_n_0_[62] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[63] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[63]),
        .Q(\skid_buffer_reg_n_0_[63] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[64] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rresp[0]),
        .Q(\skid_buffer_reg_n_0_[64] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[65] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rresp[1]),
        .Q(\skid_buffer_reg_n_0_[65] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[66] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rlast),
        .Q(\skid_buffer_reg_n_0_[66] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized6
   (\m_payload_i_reg[36]_0 ,
    m_valid_i_reg_0,
    S01_AXI_0_wready,
    m_valid_i_reg_1,
    \USE_RTL_CURR_WORD.first_word_q_reg ,
    aclk,
    p_1_in,
    \aresetn_d_reg[0] ,
    m_axi_wready,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata,
    s_axi_wvalid);
  output \m_payload_i_reg[36]_0 ;
  output m_valid_i_reg_0;
  output S01_AXI_0_wready;
  output m_valid_i_reg_1;
  output [36:0]\USE_RTL_CURR_WORD.first_word_q_reg ;
  input aclk;
  input p_1_in;
  input \aresetn_d_reg[0] ;
  input m_axi_wready;
  input s_axi_wlast;
  input [3:0]s_axi_wstrb;
  input [31:0]s_axi_wdata;
  input s_axi_wvalid;

  wire \<const0> ;
  wire \<const1> ;
  wire S01_AXI_0_wready;
  wire [36:0]\USE_RTL_CURR_WORD.first_word_q_reg ;
  wire aclk;
  wire \aresetn_d_reg[0] ;
  wire m_axi_wready;
  wire \m_payload_i[31]_i_1__1_n_0 ;
  wire \m_payload_i_reg[36]_0 ;
  wire m_valid_i0__0;
  wire m_valid_i_reg_0;
  wire m_valid_i_reg_1;
  wire p_1_in;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire s_ready_i0;
  wire [36:0]skid_buffer;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\aresetn_d_reg[0] ),
        .Q(m_valid_i_reg_1),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair760" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(\skid_buffer_reg_n_0_[0] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[0]));
  (* SOFT_HLUTNM = "soft_lutpair765" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[10]_i_1 
       (.I0(s_axi_wdata[10]),
        .I1(\skid_buffer_reg_n_0_[10] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[10]));
  (* SOFT_HLUTNM = "soft_lutpair765" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[11]_i_1 
       (.I0(s_axi_wdata[11]),
        .I1(\skid_buffer_reg_n_0_[11] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[11]));
  (* SOFT_HLUTNM = "soft_lutpair766" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[12]_i_1 
       (.I0(s_axi_wdata[12]),
        .I1(\skid_buffer_reg_n_0_[12] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[12]));
  (* SOFT_HLUTNM = "soft_lutpair766" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[13]_i_1 
       (.I0(s_axi_wdata[13]),
        .I1(\skid_buffer_reg_n_0_[13] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[13]));
  (* SOFT_HLUTNM = "soft_lutpair767" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[14]_i_1 
       (.I0(s_axi_wdata[14]),
        .I1(\skid_buffer_reg_n_0_[14] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[14]));
  (* SOFT_HLUTNM = "soft_lutpair767" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[15]_i_1 
       (.I0(s_axi_wdata[15]),
        .I1(\skid_buffer_reg_n_0_[15] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[15]));
  (* SOFT_HLUTNM = "soft_lutpair768" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[16]_i_1 
       (.I0(s_axi_wdata[16]),
        .I1(\skid_buffer_reg_n_0_[16] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[16]));
  (* SOFT_HLUTNM = "soft_lutpair768" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[17]_i_1 
       (.I0(s_axi_wdata[17]),
        .I1(\skid_buffer_reg_n_0_[17] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[17]));
  (* SOFT_HLUTNM = "soft_lutpair769" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[18]_i_1 
       (.I0(s_axi_wdata[18]),
        .I1(\skid_buffer_reg_n_0_[18] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[18]));
  (* SOFT_HLUTNM = "soft_lutpair769" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[19]_i_1 
       (.I0(s_axi_wdata[19]),
        .I1(\skid_buffer_reg_n_0_[19] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[19]));
  (* SOFT_HLUTNM = "soft_lutpair760" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(\skid_buffer_reg_n_0_[1] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[1]));
  (* SOFT_HLUTNM = "soft_lutpair770" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[20]_i_1 
       (.I0(s_axi_wdata[20]),
        .I1(\skid_buffer_reg_n_0_[20] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[20]));
  (* SOFT_HLUTNM = "soft_lutpair770" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[21]_i_1 
       (.I0(s_axi_wdata[21]),
        .I1(\skid_buffer_reg_n_0_[21] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[21]));
  (* SOFT_HLUTNM = "soft_lutpair771" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[22]_i_1 
       (.I0(s_axi_wdata[22]),
        .I1(\skid_buffer_reg_n_0_[22] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[22]));
  (* SOFT_HLUTNM = "soft_lutpair771" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[23]_i_1 
       (.I0(s_axi_wdata[23]),
        .I1(\skid_buffer_reg_n_0_[23] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[23]));
  (* SOFT_HLUTNM = "soft_lutpair772" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[24]_i_1 
       (.I0(s_axi_wdata[24]),
        .I1(\skid_buffer_reg_n_0_[24] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[24]));
  (* SOFT_HLUTNM = "soft_lutpair772" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[25]_i_1 
       (.I0(s_axi_wdata[25]),
        .I1(\skid_buffer_reg_n_0_[25] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[25]));
  (* SOFT_HLUTNM = "soft_lutpair773" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[26]_i_1 
       (.I0(s_axi_wdata[26]),
        .I1(\skid_buffer_reg_n_0_[26] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[26]));
  (* SOFT_HLUTNM = "soft_lutpair773" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[27]_i_1 
       (.I0(s_axi_wdata[27]),
        .I1(\skid_buffer_reg_n_0_[27] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[27]));
  (* SOFT_HLUTNM = "soft_lutpair774" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[28]_i_1 
       (.I0(s_axi_wdata[28]),
        .I1(\skid_buffer_reg_n_0_[28] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[28]));
  (* SOFT_HLUTNM = "soft_lutpair774" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[29]_i_1 
       (.I0(s_axi_wdata[29]),
        .I1(\skid_buffer_reg_n_0_[29] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[29]));
  (* SOFT_HLUTNM = "soft_lutpair761" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[2]_i_1 
       (.I0(s_axi_wdata[2]),
        .I1(\skid_buffer_reg_n_0_[2] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[2]));
  (* SOFT_HLUTNM = "soft_lutpair775" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[30]_i_1 
       (.I0(s_axi_wdata[30]),
        .I1(\skid_buffer_reg_n_0_[30] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[30]));
  LUT2 #(
    .INIT(4'hB)) 
    \m_payload_i[31]_i_1__1 
       (.I0(m_axi_wready),
        .I1(\m_payload_i_reg[36]_0 ),
        .O(\m_payload_i[31]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair775" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[31]_i_2 
       (.I0(s_axi_wdata[31]),
        .I1(\skid_buffer_reg_n_0_[31] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[31]));
  (* SOFT_HLUTNM = "soft_lutpair776" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[32]_i_1 
       (.I0(s_axi_wstrb[0]),
        .I1(\skid_buffer_reg_n_0_[32] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[32]));
  (* SOFT_HLUTNM = "soft_lutpair776" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[33]_i_1 
       (.I0(s_axi_wstrb[1]),
        .I1(\skid_buffer_reg_n_0_[33] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[33]));
  (* SOFT_HLUTNM = "soft_lutpair777" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[34]_i_1 
       (.I0(s_axi_wstrb[2]),
        .I1(\skid_buffer_reg_n_0_[34] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[34]));
  (* SOFT_HLUTNM = "soft_lutpair777" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[35]_i_1 
       (.I0(s_axi_wstrb[3]),
        .I1(\skid_buffer_reg_n_0_[35] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[35]));
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[36]_i_1 
       (.I0(s_axi_wlast),
        .I1(\skid_buffer_reg_n_0_[36] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[36]));
  (* SOFT_HLUTNM = "soft_lutpair761" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[3]_i_1 
       (.I0(s_axi_wdata[3]),
        .I1(\skid_buffer_reg_n_0_[3] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[3]));
  (* SOFT_HLUTNM = "soft_lutpair762" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[4]_i_1 
       (.I0(s_axi_wdata[4]),
        .I1(\skid_buffer_reg_n_0_[4] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[4]));
  (* SOFT_HLUTNM = "soft_lutpair762" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[5]_i_1 
       (.I0(s_axi_wdata[5]),
        .I1(\skid_buffer_reg_n_0_[5] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[5]));
  (* SOFT_HLUTNM = "soft_lutpair763" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[6]_i_1 
       (.I0(s_axi_wdata[6]),
        .I1(\skid_buffer_reg_n_0_[6] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[6]));
  (* SOFT_HLUTNM = "soft_lutpair763" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[7]_i_1 
       (.I0(s_axi_wdata[7]),
        .I1(\skid_buffer_reg_n_0_[7] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[7]));
  (* SOFT_HLUTNM = "soft_lutpair764" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[8]_i_1 
       (.I0(s_axi_wdata[8]),
        .I1(\skid_buffer_reg_n_0_[8] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[8]));
  (* SOFT_HLUTNM = "soft_lutpair764" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[9]_i_1 
       (.I0(s_axi_wdata[9]),
        .I1(\skid_buffer_reg_n_0_[9] ),
        .I2(S01_AXI_0_wready),
        .O(skid_buffer[9]));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[0]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[10]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[11]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[12]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[13]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[14]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[15]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[16]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[17]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[18]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[19]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[1]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[20]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[21]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[22]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[23]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[24]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[25]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[26]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[27]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[28]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[29]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[2]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[30]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[31]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[32]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[33]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[34]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[35]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[36]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[3]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[4]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[5]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[6]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[7]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[8]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[9]),
        .Q(\USE_RTL_CURR_WORD.first_word_q_reg [9]),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hFF5D)) 
    m_valid_i0
       (.I0(S01_AXI_0_wready),
        .I1(\m_payload_i_reg[36]_0 ),
        .I2(m_axi_wready),
        .I3(s_axi_wvalid),
        .O(m_valid_i0__0));
  LUT1 #(
    .INIT(2'h1)) 
    m_valid_i_i_1__1
       (.I0(m_valid_i_reg_1),
        .O(m_valid_i_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0__0),
        .Q(\m_payload_i_reg[36]_0 ),
        .R(m_valid_i_reg_0));
  LUT4 #(
    .INIT(16'hDFDD)) 
    s_ready_i_i_1
       (.I0(\m_payload_i_reg[36]_0 ),
        .I1(m_axi_wready),
        .I2(s_axi_wvalid),
        .I3(S01_AXI_0_wready),
        .O(s_ready_i0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i0),
        .Q(S01_AXI_0_wready),
        .R(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wstrb[0]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wstrb[1]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wstrb[2]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wstrb[3]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wlast),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(S01_AXI_0_wready),
        .D(s_axi_wdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized6_16
   (M01_AXI_0_wvalid,
    m_valid_i_reg_0,
    \skid_buffer_reg[0]_0 ,
    m_valid_i_reg_1,
    M01_AXI_0_wlast,
    aclk,
    p_1_in,
    \aresetn_d_reg[0] ,
    m_axi_wready,
    s_axi_wlast,
    s_axi_wstrb,
    s_axi_wdata,
    s_axi_wvalid);
  output M01_AXI_0_wvalid;
  output m_valid_i_reg_0;
  output \skid_buffer_reg[0]_0 ;
  output m_valid_i_reg_1;
  output [36:0]M01_AXI_0_wlast;
  input aclk;
  input p_1_in;
  input \aresetn_d_reg[0] ;
  input m_axi_wready;
  input s_axi_wlast;
  input [3:0]s_axi_wstrb;
  input [31:0]s_axi_wdata;
  input s_axi_wvalid;

  wire \<const0> ;
  wire \<const1> ;
  wire [36:0]M01_AXI_0_wlast;
  wire M01_AXI_0_wvalid;
  wire aclk;
  wire \aresetn_d_reg[0] ;
  wire m_axi_wready;
  wire \m_payload_i[31]_i_1__1_n_0 ;
  wire m_valid_i0__0;
  wire m_valid_i_reg_0;
  wire m_valid_i_reg_1;
  wire p_1_in;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire s_ready_i0;
  wire [36:0]skid_buffer;
  wire \skid_buffer_reg[0]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[35] ;
  wire \skid_buffer_reg_n_0_[36] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  FDRE #(
    .INIT(1'b0)) 
    \aresetn_d_reg[1] 
       (.C(aclk),
        .CE(\<const1> ),
        .D(\aresetn_d_reg[0] ),
        .Q(m_valid_i_reg_1),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair526" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(\skid_buffer_reg_n_0_[0] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[0]));
  (* SOFT_HLUTNM = "soft_lutpair531" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[10]_i_1 
       (.I0(s_axi_wdata[10]),
        .I1(\skid_buffer_reg_n_0_[10] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[10]));
  (* SOFT_HLUTNM = "soft_lutpair531" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[11]_i_1 
       (.I0(s_axi_wdata[11]),
        .I1(\skid_buffer_reg_n_0_[11] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[11]));
  (* SOFT_HLUTNM = "soft_lutpair532" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[12]_i_1 
       (.I0(s_axi_wdata[12]),
        .I1(\skid_buffer_reg_n_0_[12] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[12]));
  (* SOFT_HLUTNM = "soft_lutpair532" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[13]_i_1 
       (.I0(s_axi_wdata[13]),
        .I1(\skid_buffer_reg_n_0_[13] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[13]));
  (* SOFT_HLUTNM = "soft_lutpair533" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[14]_i_1 
       (.I0(s_axi_wdata[14]),
        .I1(\skid_buffer_reg_n_0_[14] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[14]));
  (* SOFT_HLUTNM = "soft_lutpair533" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[15]_i_1 
       (.I0(s_axi_wdata[15]),
        .I1(\skid_buffer_reg_n_0_[15] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[15]));
  (* SOFT_HLUTNM = "soft_lutpair534" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[16]_i_1 
       (.I0(s_axi_wdata[16]),
        .I1(\skid_buffer_reg_n_0_[16] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[16]));
  (* SOFT_HLUTNM = "soft_lutpair534" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[17]_i_1 
       (.I0(s_axi_wdata[17]),
        .I1(\skid_buffer_reg_n_0_[17] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[17]));
  (* SOFT_HLUTNM = "soft_lutpair535" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[18]_i_1 
       (.I0(s_axi_wdata[18]),
        .I1(\skid_buffer_reg_n_0_[18] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[18]));
  (* SOFT_HLUTNM = "soft_lutpair535" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[19]_i_1 
       (.I0(s_axi_wdata[19]),
        .I1(\skid_buffer_reg_n_0_[19] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[19]));
  (* SOFT_HLUTNM = "soft_lutpair527" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(\skid_buffer_reg_n_0_[1] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[1]));
  (* SOFT_HLUTNM = "soft_lutpair536" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[20]_i_1 
       (.I0(s_axi_wdata[20]),
        .I1(\skid_buffer_reg_n_0_[20] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[20]));
  (* SOFT_HLUTNM = "soft_lutpair536" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[21]_i_1 
       (.I0(s_axi_wdata[21]),
        .I1(\skid_buffer_reg_n_0_[21] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[21]));
  (* SOFT_HLUTNM = "soft_lutpair537" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[22]_i_1 
       (.I0(s_axi_wdata[22]),
        .I1(\skid_buffer_reg_n_0_[22] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[22]));
  (* SOFT_HLUTNM = "soft_lutpair537" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[23]_i_1 
       (.I0(s_axi_wdata[23]),
        .I1(\skid_buffer_reg_n_0_[23] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[23]));
  (* SOFT_HLUTNM = "soft_lutpair538" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[24]_i_1 
       (.I0(s_axi_wdata[24]),
        .I1(\skid_buffer_reg_n_0_[24] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[24]));
  (* SOFT_HLUTNM = "soft_lutpair538" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[25]_i_1 
       (.I0(s_axi_wdata[25]),
        .I1(\skid_buffer_reg_n_0_[25] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[25]));
  (* SOFT_HLUTNM = "soft_lutpair539" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[26]_i_1 
       (.I0(s_axi_wdata[26]),
        .I1(\skid_buffer_reg_n_0_[26] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[26]));
  (* SOFT_HLUTNM = "soft_lutpair539" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[27]_i_1 
       (.I0(s_axi_wdata[27]),
        .I1(\skid_buffer_reg_n_0_[27] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[27]));
  (* SOFT_HLUTNM = "soft_lutpair540" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[28]_i_1 
       (.I0(s_axi_wdata[28]),
        .I1(\skid_buffer_reg_n_0_[28] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[28]));
  (* SOFT_HLUTNM = "soft_lutpair540" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[29]_i_1 
       (.I0(s_axi_wdata[29]),
        .I1(\skid_buffer_reg_n_0_[29] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[29]));
  (* SOFT_HLUTNM = "soft_lutpair526" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[2]_i_1 
       (.I0(s_axi_wdata[2]),
        .I1(\skid_buffer_reg_n_0_[2] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[2]));
  (* SOFT_HLUTNM = "soft_lutpair541" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[30]_i_1 
       (.I0(s_axi_wdata[30]),
        .I1(\skid_buffer_reg_n_0_[30] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[30]));
  LUT2 #(
    .INIT(4'hB)) 
    \m_payload_i[31]_i_1__1 
       (.I0(m_axi_wready),
        .I1(M01_AXI_0_wvalid),
        .O(\m_payload_i[31]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair541" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[31]_i_2 
       (.I0(s_axi_wdata[31]),
        .I1(\skid_buffer_reg_n_0_[31] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[31]));
  (* SOFT_HLUTNM = "soft_lutpair542" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[32]_i_1 
       (.I0(s_axi_wstrb[0]),
        .I1(\skid_buffer_reg_n_0_[32] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[32]));
  (* SOFT_HLUTNM = "soft_lutpair542" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[33]_i_1 
       (.I0(s_axi_wstrb[1]),
        .I1(\skid_buffer_reg_n_0_[33] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[33]));
  (* SOFT_HLUTNM = "soft_lutpair543" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[34]_i_1 
       (.I0(s_axi_wstrb[2]),
        .I1(\skid_buffer_reg_n_0_[34] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[34]));
  (* SOFT_HLUTNM = "soft_lutpair543" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[35]_i_1 
       (.I0(s_axi_wstrb[3]),
        .I1(\skid_buffer_reg_n_0_[35] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[35]));
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[36]_i_1 
       (.I0(s_axi_wlast),
        .I1(\skid_buffer_reg_n_0_[36] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[36]));
  (* SOFT_HLUTNM = "soft_lutpair527" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[3]_i_1 
       (.I0(s_axi_wdata[3]),
        .I1(\skid_buffer_reg_n_0_[3] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[3]));
  (* SOFT_HLUTNM = "soft_lutpair528" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[4]_i_1 
       (.I0(s_axi_wdata[4]),
        .I1(\skid_buffer_reg_n_0_[4] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[4]));
  (* SOFT_HLUTNM = "soft_lutpair528" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[5]_i_1 
       (.I0(s_axi_wdata[5]),
        .I1(\skid_buffer_reg_n_0_[5] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[5]));
  (* SOFT_HLUTNM = "soft_lutpair529" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[6]_i_1 
       (.I0(s_axi_wdata[6]),
        .I1(\skid_buffer_reg_n_0_[6] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[6]));
  (* SOFT_HLUTNM = "soft_lutpair529" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[7]_i_1 
       (.I0(s_axi_wdata[7]),
        .I1(\skid_buffer_reg_n_0_[7] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[7]));
  (* SOFT_HLUTNM = "soft_lutpair530" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[8]_i_1 
       (.I0(s_axi_wdata[8]),
        .I1(\skid_buffer_reg_n_0_[8] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[8]));
  (* SOFT_HLUTNM = "soft_lutpair530" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[9]_i_1 
       (.I0(s_axi_wdata[9]),
        .I1(\skid_buffer_reg_n_0_[9] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(skid_buffer[9]));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[0]),
        .Q(M01_AXI_0_wlast[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[10]),
        .Q(M01_AXI_0_wlast[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[11]),
        .Q(M01_AXI_0_wlast[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[12]),
        .Q(M01_AXI_0_wlast[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[13]),
        .Q(M01_AXI_0_wlast[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[14]),
        .Q(M01_AXI_0_wlast[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[15]),
        .Q(M01_AXI_0_wlast[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[16]),
        .Q(M01_AXI_0_wlast[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[17]),
        .Q(M01_AXI_0_wlast[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[18]),
        .Q(M01_AXI_0_wlast[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[19]),
        .Q(M01_AXI_0_wlast[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[1]),
        .Q(M01_AXI_0_wlast[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[20]),
        .Q(M01_AXI_0_wlast[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[21]),
        .Q(M01_AXI_0_wlast[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[22]),
        .Q(M01_AXI_0_wlast[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[23]),
        .Q(M01_AXI_0_wlast[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[24]),
        .Q(M01_AXI_0_wlast[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[25]),
        .Q(M01_AXI_0_wlast[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[26]),
        .Q(M01_AXI_0_wlast[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[27]),
        .Q(M01_AXI_0_wlast[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[28]),
        .Q(M01_AXI_0_wlast[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[29]),
        .Q(M01_AXI_0_wlast[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[2]),
        .Q(M01_AXI_0_wlast[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[30]),
        .Q(M01_AXI_0_wlast[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[31]),
        .Q(M01_AXI_0_wlast[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[32]),
        .Q(M01_AXI_0_wlast[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[33]),
        .Q(M01_AXI_0_wlast[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[34]),
        .Q(M01_AXI_0_wlast[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[35] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[35]),
        .Q(M01_AXI_0_wlast[35]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[36] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[36]),
        .Q(M01_AXI_0_wlast[36]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[3]),
        .Q(M01_AXI_0_wlast[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[4]),
        .Q(M01_AXI_0_wlast[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[5]),
        .Q(M01_AXI_0_wlast[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[6]),
        .Q(M01_AXI_0_wlast[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[7]),
        .Q(M01_AXI_0_wlast[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[8]),
        .Q(M01_AXI_0_wlast[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__1_n_0 ),
        .D(skid_buffer[9]),
        .Q(M01_AXI_0_wlast[9]),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hFF5D)) 
    m_valid_i0
       (.I0(\skid_buffer_reg[0]_0 ),
        .I1(M01_AXI_0_wvalid),
        .I2(m_axi_wready),
        .I3(s_axi_wvalid),
        .O(m_valid_i0__0));
  LUT1 #(
    .INIT(2'h1)) 
    m_valid_i_i_1__1
       (.I0(m_valid_i_reg_1),
        .O(m_valid_i_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0__0),
        .Q(M01_AXI_0_wvalid),
        .R(m_valid_i_reg_0));
  LUT4 #(
    .INIT(16'hDFDD)) 
    s_ready_i_i_1
       (.I0(M01_AXI_0_wvalid),
        .I1(m_axi_wready),
        .I2(s_axi_wvalid),
        .I3(\skid_buffer_reg[0]_0 ),
        .O(s_ready_i0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i0),
        .Q(\skid_buffer_reg[0]_0 ),
        .R(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[0]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[1]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[2]),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[35] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wstrb[3]),
        .Q(\skid_buffer_reg_n_0_[35] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[36] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wlast),
        .Q(\skid_buffer_reg_n_0_[36] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(s_axi_wdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized7
   (S01_AXI_0_rvalid,
    \skid_buffer_reg[0]_0 ,
    S01_AXI_0_rlast,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    s_axi_rready,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    m_axi_rvalid);
  output S01_AXI_0_rvalid;
  output \skid_buffer_reg[0]_0 ;
  output [34:0]S01_AXI_0_rlast;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input s_axi_rready;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [31:0]m_axi_rdata;
  input m_axi_rvalid;

  wire \<const0> ;
  wire \<const1> ;
  wire [34:0]S01_AXI_0_rlast;
  wire S01_AXI_0_rvalid;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire \m_payload_i[0]_i_1_n_0 ;
  wire \m_payload_i[10]_i_1_n_0 ;
  wire \m_payload_i[11]_i_1_n_0 ;
  wire \m_payload_i[12]_i_1_n_0 ;
  wire \m_payload_i[13]_i_1_n_0 ;
  wire \m_payload_i[14]_i_1_n_0 ;
  wire \m_payload_i[15]_i_1_n_0 ;
  wire \m_payload_i[16]_i_1_n_0 ;
  wire \m_payload_i[17]_i_1_n_0 ;
  wire \m_payload_i[18]_i_1_n_0 ;
  wire \m_payload_i[19]_i_1_n_0 ;
  wire \m_payload_i[1]_i_1_n_0 ;
  wire \m_payload_i[20]_i_1_n_0 ;
  wire \m_payload_i[21]_i_1_n_0 ;
  wire \m_payload_i[22]_i_1_n_0 ;
  wire \m_payload_i[23]_i_1_n_0 ;
  wire \m_payload_i[24]_i_1_n_0 ;
  wire \m_payload_i[25]_i_1_n_0 ;
  wire \m_payload_i[26]_i_1_n_0 ;
  wire \m_payload_i[27]_i_1_n_0 ;
  wire \m_payload_i[28]_i_1_n_0 ;
  wire \m_payload_i[29]_i_1_n_0 ;
  wire \m_payload_i[2]_i_1_n_0 ;
  wire \m_payload_i[30]_i_1_n_0 ;
  wire \m_payload_i[31]_i_1__2_n_0 ;
  wire \m_payload_i[31]_i_2_n_0 ;
  wire \m_payload_i[32]_i_1_n_0 ;
  wire \m_payload_i[33]_i_1_n_0 ;
  wire \m_payload_i[34]_i_1_n_0 ;
  wire \m_payload_i[3]_i_1_n_0 ;
  wire \m_payload_i[4]_i_1_n_0 ;
  wire \m_payload_i[5]_i_1_n_0 ;
  wire \m_payload_i[6]_i_1_n_0 ;
  wire \m_payload_i[7]_i_1_n_0 ;
  wire \m_payload_i[8]_i_1_n_0 ;
  wire \m_payload_i[9]_i_1_n_0 ;
  wire m_valid_i0__0;
  wire p_1_in;
  wire s_axi_rready;
  wire s_ready_i0;
  wire \skid_buffer_reg[0]_0 ;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair744" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_rdata[0]),
        .I1(\skid_buffer_reg_n_0_[0] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair748" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[10]_i_1 
       (.I0(m_axi_rdata[10]),
        .I1(\skid_buffer_reg_n_0_[10] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair749" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[11]_i_1 
       (.I0(m_axi_rdata[11]),
        .I1(\skid_buffer_reg_n_0_[11] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair749" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[12]_i_1 
       (.I0(m_axi_rdata[12]),
        .I1(\skid_buffer_reg_n_0_[12] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair750" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[13]_i_1 
       (.I0(m_axi_rdata[13]),
        .I1(\skid_buffer_reg_n_0_[13] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair750" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[14]_i_1 
       (.I0(m_axi_rdata[14]),
        .I1(\skid_buffer_reg_n_0_[14] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair751" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[15]_i_1 
       (.I0(m_axi_rdata[15]),
        .I1(\skid_buffer_reg_n_0_[15] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair751" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[16]_i_1 
       (.I0(m_axi_rdata[16]),
        .I1(\skid_buffer_reg_n_0_[16] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair752" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[17]_i_1 
       (.I0(m_axi_rdata[17]),
        .I1(\skid_buffer_reg_n_0_[17] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair752" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[18]_i_1 
       (.I0(m_axi_rdata[18]),
        .I1(\skid_buffer_reg_n_0_[18] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair753" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[19]_i_1 
       (.I0(m_axi_rdata[19]),
        .I1(\skid_buffer_reg_n_0_[19] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair744" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_rdata[1]),
        .I1(\skid_buffer_reg_n_0_[1] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair753" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[20]_i_1 
       (.I0(m_axi_rdata[20]),
        .I1(\skid_buffer_reg_n_0_[20] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair754" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[21]_i_1 
       (.I0(m_axi_rdata[21]),
        .I1(\skid_buffer_reg_n_0_[21] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair754" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[22]_i_1 
       (.I0(m_axi_rdata[22]),
        .I1(\skid_buffer_reg_n_0_[22] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair755" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[23]_i_1 
       (.I0(m_axi_rdata[23]),
        .I1(\skid_buffer_reg_n_0_[23] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair755" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[24]_i_1 
       (.I0(m_axi_rdata[24]),
        .I1(\skid_buffer_reg_n_0_[24] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair756" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[25]_i_1 
       (.I0(m_axi_rdata[25]),
        .I1(\skid_buffer_reg_n_0_[25] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair756" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[26]_i_1 
       (.I0(m_axi_rdata[26]),
        .I1(\skid_buffer_reg_n_0_[26] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair757" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[27]_i_1 
       (.I0(m_axi_rdata[27]),
        .I1(\skid_buffer_reg_n_0_[27] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair757" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[28]_i_1 
       (.I0(m_axi_rdata[28]),
        .I1(\skid_buffer_reg_n_0_[28] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair758" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[29]_i_1 
       (.I0(m_axi_rdata[29]),
        .I1(\skid_buffer_reg_n_0_[29] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair745" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[2]_i_1 
       (.I0(m_axi_rdata[2]),
        .I1(\skid_buffer_reg_n_0_[2] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair758" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[30]_i_1 
       (.I0(m_axi_rdata[30]),
        .I1(\skid_buffer_reg_n_0_[30] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[30]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \m_payload_i[31]_i_1__2 
       (.I0(s_axi_rready),
        .I1(S01_AXI_0_rvalid),
        .O(\m_payload_i[31]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair759" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[31]_i_2 
       (.I0(m_axi_rdata[31]),
        .I1(\skid_buffer_reg_n_0_[31] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[31]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair759" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[32]_i_1 
       (.I0(m_axi_rresp[0]),
        .I1(\skid_buffer_reg_n_0_[32] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[32]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[33]_i_1 
       (.I0(m_axi_rresp[1]),
        .I1(\skid_buffer_reg_n_0_[33] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair743" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[34]_i_1 
       (.I0(m_axi_rlast),
        .I1(\skid_buffer_reg_n_0_[34] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair745" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[3]_i_1 
       (.I0(m_axi_rdata[3]),
        .I1(\skid_buffer_reg_n_0_[3] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair743" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[4]_i_1 
       (.I0(m_axi_rdata[4]),
        .I1(\skid_buffer_reg_n_0_[4] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair746" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[5]_i_1 
       (.I0(m_axi_rdata[5]),
        .I1(\skid_buffer_reg_n_0_[5] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair746" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[6]_i_1 
       (.I0(m_axi_rdata[6]),
        .I1(\skid_buffer_reg_n_0_[6] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair747" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[7]_i_1 
       (.I0(m_axi_rdata[7]),
        .I1(\skid_buffer_reg_n_0_[7] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair747" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[8]_i_1 
       (.I0(m_axi_rdata[8]),
        .I1(\skid_buffer_reg_n_0_[8] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair748" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[9]_i_1 
       (.I0(m_axi_rdata[9]),
        .I1(\skid_buffer_reg_n_0_[9] ),
        .I2(\skid_buffer_reg[0]_0 ),
        .O(\m_payload_i[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[0]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[10]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[11]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[12]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[13]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[14]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[15]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[16]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[17]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[18]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[19]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[1]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[20]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[21]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[22]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[23]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[24]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[25]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[26]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[27]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[28]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[29]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[2]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[30]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[31]_i_2_n_0 ),
        .Q(S01_AXI_0_rlast[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[32]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[33]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[34]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[3]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[4]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[5]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[6]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[7]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[8]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[9]_i_1_n_0 ),
        .Q(S01_AXI_0_rlast[9]),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hFF5D)) 
    m_valid_i0
       (.I0(\skid_buffer_reg[0]_0 ),
        .I1(S01_AXI_0_rvalid),
        .I2(s_axi_rready),
        .I3(m_axi_rvalid),
        .O(m_valid_i0__0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0__0),
        .Q(S01_AXI_0_rvalid),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hDFDD)) 
    s_ready_i_i_1__0
       (.I0(S01_AXI_0_rvalid),
        .I1(s_axi_rready),
        .I2(m_axi_rvalid),
        .I3(\skid_buffer_reg[0]_0 ),
        .O(s_ready_i0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i0),
        .Q(\skid_buffer_reg[0]_0 ),
        .R(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rresp[0]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rresp[1]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rlast),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(\skid_buffer_reg[0]_0 ),
        .D(m_axi_rdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "axi_register_slice_v2_1_15_axic_register_slice" *) 
module bd_1_axi_register_slice_v2_1_15_axic_register_slice__parameterized7_15
   (\m_payload_i_reg[34]_0 ,
    M01_AXI_0_rready,
    first_mi_word_reg,
    \aresetn_d_reg[1] ,
    aclk,
    p_1_in,
    s_axi_rready,
    m_axi_rlast,
    m_axi_rresp,
    m_axi_rdata,
    m_axi_rvalid);
  output \m_payload_i_reg[34]_0 ;
  output M01_AXI_0_rready;
  output [34:0]first_mi_word_reg;
  input \aresetn_d_reg[1] ;
  input aclk;
  input p_1_in;
  input s_axi_rready;
  input m_axi_rlast;
  input [1:0]m_axi_rresp;
  input [31:0]m_axi_rdata;
  input m_axi_rvalid;

  wire \<const0> ;
  wire \<const1> ;
  wire M01_AXI_0_rready;
  wire aclk;
  wire \aresetn_d_reg[1] ;
  wire [34:0]first_mi_word_reg;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire \m_payload_i[0]_i_1_n_0 ;
  wire \m_payload_i[10]_i_1_n_0 ;
  wire \m_payload_i[11]_i_1_n_0 ;
  wire \m_payload_i[12]_i_1_n_0 ;
  wire \m_payload_i[13]_i_1_n_0 ;
  wire \m_payload_i[14]_i_1_n_0 ;
  wire \m_payload_i[15]_i_1_n_0 ;
  wire \m_payload_i[16]_i_1_n_0 ;
  wire \m_payload_i[17]_i_1_n_0 ;
  wire \m_payload_i[18]_i_1_n_0 ;
  wire \m_payload_i[19]_i_1_n_0 ;
  wire \m_payload_i[1]_i_1_n_0 ;
  wire \m_payload_i[20]_i_1_n_0 ;
  wire \m_payload_i[21]_i_1_n_0 ;
  wire \m_payload_i[22]_i_1_n_0 ;
  wire \m_payload_i[23]_i_1_n_0 ;
  wire \m_payload_i[24]_i_1_n_0 ;
  wire \m_payload_i[25]_i_1_n_0 ;
  wire \m_payload_i[26]_i_1_n_0 ;
  wire \m_payload_i[27]_i_1_n_0 ;
  wire \m_payload_i[28]_i_1_n_0 ;
  wire \m_payload_i[29]_i_1_n_0 ;
  wire \m_payload_i[2]_i_1_n_0 ;
  wire \m_payload_i[30]_i_1_n_0 ;
  wire \m_payload_i[31]_i_1__2_n_0 ;
  wire \m_payload_i[31]_i_2_n_0 ;
  wire \m_payload_i[32]_i_1_n_0 ;
  wire \m_payload_i[33]_i_1_n_0 ;
  wire \m_payload_i[34]_i_1_n_0 ;
  wire \m_payload_i[3]_i_1_n_0 ;
  wire \m_payload_i[4]_i_1_n_0 ;
  wire \m_payload_i[5]_i_1_n_0 ;
  wire \m_payload_i[6]_i_1_n_0 ;
  wire \m_payload_i[7]_i_1_n_0 ;
  wire \m_payload_i[8]_i_1_n_0 ;
  wire \m_payload_i[9]_i_1_n_0 ;
  wire \m_payload_i_reg[34]_0 ;
  wire m_valid_i0__0;
  wire p_1_in;
  wire s_axi_rready;
  wire s_ready_i0;
  wire \skid_buffer_reg_n_0_[0] ;
  wire \skid_buffer_reg_n_0_[10] ;
  wire \skid_buffer_reg_n_0_[11] ;
  wire \skid_buffer_reg_n_0_[12] ;
  wire \skid_buffer_reg_n_0_[13] ;
  wire \skid_buffer_reg_n_0_[14] ;
  wire \skid_buffer_reg_n_0_[15] ;
  wire \skid_buffer_reg_n_0_[16] ;
  wire \skid_buffer_reg_n_0_[17] ;
  wire \skid_buffer_reg_n_0_[18] ;
  wire \skid_buffer_reg_n_0_[19] ;
  wire \skid_buffer_reg_n_0_[1] ;
  wire \skid_buffer_reg_n_0_[20] ;
  wire \skid_buffer_reg_n_0_[21] ;
  wire \skid_buffer_reg_n_0_[22] ;
  wire \skid_buffer_reg_n_0_[23] ;
  wire \skid_buffer_reg_n_0_[24] ;
  wire \skid_buffer_reg_n_0_[25] ;
  wire \skid_buffer_reg_n_0_[26] ;
  wire \skid_buffer_reg_n_0_[27] ;
  wire \skid_buffer_reg_n_0_[28] ;
  wire \skid_buffer_reg_n_0_[29] ;
  wire \skid_buffer_reg_n_0_[2] ;
  wire \skid_buffer_reg_n_0_[30] ;
  wire \skid_buffer_reg_n_0_[31] ;
  wire \skid_buffer_reg_n_0_[32] ;
  wire \skid_buffer_reg_n_0_[33] ;
  wire \skid_buffer_reg_n_0_[34] ;
  wire \skid_buffer_reg_n_0_[3] ;
  wire \skid_buffer_reg_n_0_[4] ;
  wire \skid_buffer_reg_n_0_[5] ;
  wire \skid_buffer_reg_n_0_[6] ;
  wire \skid_buffer_reg_n_0_[7] ;
  wire \skid_buffer_reg_n_0_[8] ;
  wire \skid_buffer_reg_n_0_[9] ;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair509" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[0]_i_1 
       (.I0(m_axi_rdata[0]),
        .I1(\skid_buffer_reg_n_0_[0] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair514" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[10]_i_1 
       (.I0(m_axi_rdata[10]),
        .I1(\skid_buffer_reg_n_0_[10] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair514" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[11]_i_1 
       (.I0(m_axi_rdata[11]),
        .I1(\skid_buffer_reg_n_0_[11] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair515" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[12]_i_1 
       (.I0(m_axi_rdata[12]),
        .I1(\skid_buffer_reg_n_0_[12] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair515" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[13]_i_1 
       (.I0(m_axi_rdata[13]),
        .I1(\skid_buffer_reg_n_0_[13] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair516" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[14]_i_1 
       (.I0(m_axi_rdata[14]),
        .I1(\skid_buffer_reg_n_0_[14] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair516" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[15]_i_1 
       (.I0(m_axi_rdata[15]),
        .I1(\skid_buffer_reg_n_0_[15] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair517" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[16]_i_1 
       (.I0(m_axi_rdata[16]),
        .I1(\skid_buffer_reg_n_0_[16] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair517" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[17]_i_1 
       (.I0(m_axi_rdata[17]),
        .I1(\skid_buffer_reg_n_0_[17] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair518" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[18]_i_1 
       (.I0(m_axi_rdata[18]),
        .I1(\skid_buffer_reg_n_0_[18] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair518" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[19]_i_1 
       (.I0(m_axi_rdata[19]),
        .I1(\skid_buffer_reg_n_0_[19] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair509" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[1]_i_1 
       (.I0(m_axi_rdata[1]),
        .I1(\skid_buffer_reg_n_0_[1] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair519" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[20]_i_1 
       (.I0(m_axi_rdata[20]),
        .I1(\skid_buffer_reg_n_0_[20] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair519" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[21]_i_1 
       (.I0(m_axi_rdata[21]),
        .I1(\skid_buffer_reg_n_0_[21] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair520" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[22]_i_1 
       (.I0(m_axi_rdata[22]),
        .I1(\skid_buffer_reg_n_0_[22] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair520" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[23]_i_1 
       (.I0(m_axi_rdata[23]),
        .I1(\skid_buffer_reg_n_0_[23] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair521" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[24]_i_1 
       (.I0(m_axi_rdata[24]),
        .I1(\skid_buffer_reg_n_0_[24] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair521" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[25]_i_1 
       (.I0(m_axi_rdata[25]),
        .I1(\skid_buffer_reg_n_0_[25] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair522" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[26]_i_1 
       (.I0(m_axi_rdata[26]),
        .I1(\skid_buffer_reg_n_0_[26] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair522" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[27]_i_1 
       (.I0(m_axi_rdata[27]),
        .I1(\skid_buffer_reg_n_0_[27] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair523" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[28]_i_1 
       (.I0(m_axi_rdata[28]),
        .I1(\skid_buffer_reg_n_0_[28] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair523" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[29]_i_1 
       (.I0(m_axi_rdata[29]),
        .I1(\skid_buffer_reg_n_0_[29] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair510" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[2]_i_1 
       (.I0(m_axi_rdata[2]),
        .I1(\skid_buffer_reg_n_0_[2] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair524" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[30]_i_1 
       (.I0(m_axi_rdata[30]),
        .I1(\skid_buffer_reg_n_0_[30] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[30]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \m_payload_i[31]_i_1__2 
       (.I0(s_axi_rready),
        .I1(\m_payload_i_reg[34]_0 ),
        .O(\m_payload_i[31]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair524" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[31]_i_2 
       (.I0(m_axi_rdata[31]),
        .I1(\skid_buffer_reg_n_0_[31] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[31]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair525" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[32]_i_1 
       (.I0(m_axi_rresp[0]),
        .I1(\skid_buffer_reg_n_0_[32] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair525" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[33]_i_1 
       (.I0(m_axi_rresp[1]),
        .I1(\skid_buffer_reg_n_0_[33] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[33]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[34]_i_1 
       (.I0(m_axi_rlast),
        .I1(\skid_buffer_reg_n_0_[34] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair510" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[3]_i_1 
       (.I0(m_axi_rdata[3]),
        .I1(\skid_buffer_reg_n_0_[3] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair511" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[4]_i_1 
       (.I0(m_axi_rdata[4]),
        .I1(\skid_buffer_reg_n_0_[4] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair511" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[5]_i_1 
       (.I0(m_axi_rdata[5]),
        .I1(\skid_buffer_reg_n_0_[5] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair512" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[6]_i_1 
       (.I0(m_axi_rdata[6]),
        .I1(\skid_buffer_reg_n_0_[6] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair512" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[7]_i_1 
       (.I0(m_axi_rdata[7]),
        .I1(\skid_buffer_reg_n_0_[7] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair513" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[8]_i_1 
       (.I0(m_axi_rdata[8]),
        .I1(\skid_buffer_reg_n_0_[8] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair513" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \m_payload_i[9]_i_1 
       (.I0(m_axi_rdata[9]),
        .I1(\skid_buffer_reg_n_0_[9] ),
        .I2(M01_AXI_0_rready),
        .O(\m_payload_i[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[0] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[0]_i_1_n_0 ),
        .Q(first_mi_word_reg[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[10] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[10]_i_1_n_0 ),
        .Q(first_mi_word_reg[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[11] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[11]_i_1_n_0 ),
        .Q(first_mi_word_reg[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[12] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[12]_i_1_n_0 ),
        .Q(first_mi_word_reg[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[13] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[13]_i_1_n_0 ),
        .Q(first_mi_word_reg[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[14] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[14]_i_1_n_0 ),
        .Q(first_mi_word_reg[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[15] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[15]_i_1_n_0 ),
        .Q(first_mi_word_reg[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[16] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[16]_i_1_n_0 ),
        .Q(first_mi_word_reg[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[17] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[17]_i_1_n_0 ),
        .Q(first_mi_word_reg[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[18] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[18]_i_1_n_0 ),
        .Q(first_mi_word_reg[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[19] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[19]_i_1_n_0 ),
        .Q(first_mi_word_reg[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[1] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[1]_i_1_n_0 ),
        .Q(first_mi_word_reg[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[20] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[20]_i_1_n_0 ),
        .Q(first_mi_word_reg[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[21] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[21]_i_1_n_0 ),
        .Q(first_mi_word_reg[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[22] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[22]_i_1_n_0 ),
        .Q(first_mi_word_reg[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[23] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[23]_i_1_n_0 ),
        .Q(first_mi_word_reg[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[24] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[24]_i_1_n_0 ),
        .Q(first_mi_word_reg[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[25] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[25]_i_1_n_0 ),
        .Q(first_mi_word_reg[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[26] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[26]_i_1_n_0 ),
        .Q(first_mi_word_reg[26]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[27] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[27]_i_1_n_0 ),
        .Q(first_mi_word_reg[27]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[28] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[28]_i_1_n_0 ),
        .Q(first_mi_word_reg[28]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[29] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[29]_i_1_n_0 ),
        .Q(first_mi_word_reg[29]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[2] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[2]_i_1_n_0 ),
        .Q(first_mi_word_reg[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[30] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[30]_i_1_n_0 ),
        .Q(first_mi_word_reg[30]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[31] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[31]_i_2_n_0 ),
        .Q(first_mi_word_reg[31]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[32] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[32]_i_1_n_0 ),
        .Q(first_mi_word_reg[32]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[33] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[33]_i_1_n_0 ),
        .Q(first_mi_word_reg[33]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[34] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[34]_i_1_n_0 ),
        .Q(first_mi_word_reg[34]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[3] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[3]_i_1_n_0 ),
        .Q(first_mi_word_reg[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[4] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[4]_i_1_n_0 ),
        .Q(first_mi_word_reg[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[5] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[5]_i_1_n_0 ),
        .Q(first_mi_word_reg[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[6] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[6]_i_1_n_0 ),
        .Q(first_mi_word_reg[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[7] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[7]_i_1_n_0 ),
        .Q(first_mi_word_reg[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[8] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[8]_i_1_n_0 ),
        .Q(first_mi_word_reg[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \m_payload_i_reg[9] 
       (.C(aclk),
        .CE(\m_payload_i[31]_i_1__2_n_0 ),
        .D(\m_payload_i[9]_i_1_n_0 ),
        .Q(first_mi_word_reg[9]),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hFF5D)) 
    m_valid_i0
       (.I0(M01_AXI_0_rready),
        .I1(\m_payload_i_reg[34]_0 ),
        .I2(s_axi_rready),
        .I3(m_axi_rvalid),
        .O(m_valid_i0__0));
  FDRE #(
    .INIT(1'b0)) 
    m_valid_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(m_valid_i0__0),
        .Q(\m_payload_i_reg[34]_0 ),
        .R(\aresetn_d_reg[1] ));
  LUT4 #(
    .INIT(16'hDFDD)) 
    s_ready_i_i_1__0
       (.I0(\m_payload_i_reg[34]_0 ),
        .I1(s_axi_rready),
        .I2(m_axi_rvalid),
        .I3(M01_AXI_0_rready),
        .O(s_ready_i0));
  FDRE #(
    .INIT(1'b0)) 
    s_ready_i_reg
       (.C(aclk),
        .CE(\<const1> ),
        .D(s_ready_i0),
        .Q(M01_AXI_0_rready),
        .R(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[0] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[0]),
        .Q(\skid_buffer_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[10] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[10]),
        .Q(\skid_buffer_reg_n_0_[10] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[11] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[11]),
        .Q(\skid_buffer_reg_n_0_[11] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[12] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[12]),
        .Q(\skid_buffer_reg_n_0_[12] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[13] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[13]),
        .Q(\skid_buffer_reg_n_0_[13] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[14] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[14]),
        .Q(\skid_buffer_reg_n_0_[14] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[15] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[15]),
        .Q(\skid_buffer_reg_n_0_[15] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[16] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[16]),
        .Q(\skid_buffer_reg_n_0_[16] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[17] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[17]),
        .Q(\skid_buffer_reg_n_0_[17] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[18] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[18]),
        .Q(\skid_buffer_reg_n_0_[18] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[19] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[19]),
        .Q(\skid_buffer_reg_n_0_[19] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[1] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[1]),
        .Q(\skid_buffer_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[20] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[20]),
        .Q(\skid_buffer_reg_n_0_[20] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[21] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[21]),
        .Q(\skid_buffer_reg_n_0_[21] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[22] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[22]),
        .Q(\skid_buffer_reg_n_0_[22] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[23] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[23]),
        .Q(\skid_buffer_reg_n_0_[23] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[24] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[24]),
        .Q(\skid_buffer_reg_n_0_[24] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[25] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[25]),
        .Q(\skid_buffer_reg_n_0_[25] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[26] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[26]),
        .Q(\skid_buffer_reg_n_0_[26] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[27] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[27]),
        .Q(\skid_buffer_reg_n_0_[27] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[28] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[28]),
        .Q(\skid_buffer_reg_n_0_[28] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[29] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[29]),
        .Q(\skid_buffer_reg_n_0_[29] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[2] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[2]),
        .Q(\skid_buffer_reg_n_0_[2] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[30] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[30]),
        .Q(\skid_buffer_reg_n_0_[30] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[31] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[31]),
        .Q(\skid_buffer_reg_n_0_[31] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[32] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rresp[0]),
        .Q(\skid_buffer_reg_n_0_[32] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[33] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rresp[1]),
        .Q(\skid_buffer_reg_n_0_[33] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[34] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rlast),
        .Q(\skid_buffer_reg_n_0_[34] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[3] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[3]),
        .Q(\skid_buffer_reg_n_0_[3] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[4] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[4]),
        .Q(\skid_buffer_reg_n_0_[4] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[5] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[5]),
        .Q(\skid_buffer_reg_n_0_[5] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[6] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[6]),
        .Q(\skid_buffer_reg_n_0_[6] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[7] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[7]),
        .Q(\skid_buffer_reg_n_0_[7] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[8] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[8]),
        .Q(\skid_buffer_reg_n_0_[8] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \skid_buffer_reg[9] 
       (.C(aclk),
        .CE(M01_AXI_0_rready),
        .D(m_axi_rdata[9]),
        .Q(\skid_buffer_reg_n_0_[9] ),
        .R(\<const0> ));
endmodule

(* CHECK_LICENSE_TYPE = "bd_1_auto_ds_0,axi_dwidth_converter_v2_1_15_top,{}" *) (* CORE_GENERATION_INFO = "bd_1_auto_ds_0,axi_dwidth_converter_v2_1_15_top,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_dwidth_converter,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_S_AXI_ID_WIDTH=1,C_SUPPORTS_ID=1,C_AXI_ADDR_WIDTH=32,C_S_AXI_DATA_WIDTH=64,C_M_AXI_DATA_WIDTH=32,C_AXI_SUPPORTS_WRITE=1,C_AXI_SUPPORTS_READ=1,C_FIFO_MODE=0,C_S_AXI_ACLK_RATIO=1,C_M_AXI_ACLK_RATIO=2,C_AXI_IS_ACLK_ASYNC=0,C_MAX_SPLIT_BEATS=256,C_PACKING_LEVEL=1,C_SYNCHRONIZER_STAGE=3}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "bd_1_auto_ds_0" *) (* X_CORE_INFO = "axi_dwidth_converter_v2_1_15_top,Vivado 2017.4" *) 
module bd_1_bd_1_auto_ds_0
   (s_axi_aclk,
    s_axi_aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 SI_CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME SI_CLK, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN bd_1_clk, ASSOCIATED_BUSIF S_AXI:M_AXI, ASSOCIATED_RESET S_AXI_ARESETN" *) input s_axi_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 SI_RST RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME SI_RST, POLARITY ACTIVE_LOW, TYPE INTERCONNECT" *) input s_axi_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWID" *) input [0:0]s_axi_awid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [31:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLEN" *) input [7:0]s_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWSIZE" *) input [2:0]s_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWBURST" *) input [1:0]s_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLOCK" *) input [0:0]s_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWCACHE" *) input [3:0]s_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]s_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREGION" *) input [3:0]s_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWQOS" *) input [3:0]s_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [63:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [7:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WLAST" *) input s_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BID" *) output [0:0]s_axi_bid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARID" *) input [0:0]s_axi_arid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [31:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLEN" *) input [7:0]s_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARSIZE" *) input [2:0]s_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARBURST" *) input [1:0]s_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLOCK" *) input [0:0]s_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARCACHE" *) input [3:0]s_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]s_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREGION" *) input [3:0]s_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARQOS" *) input [3:0]s_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RID" *) output [0:0]s_axi_rid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [63:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RLAST" *) output s_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWADDR" *) output [31:0]m_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLEN" *) output [7:0]m_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWSIZE" *) output [2:0]m_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWBURST" *) output [1:0]m_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLOCK" *) output [0:0]m_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWCACHE" *) output [3:0]m_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWPROT" *) output [2:0]m_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREGION" *) output [3:0]m_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWQOS" *) output [3:0]m_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWVALID" *) output m_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREADY" *) input m_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WDATA" *) output [31:0]m_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WSTRB" *) output [3:0]m_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WLAST" *) output m_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WVALID" *) output m_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WREADY" *) input m_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BRESP" *) input [1:0]m_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BVALID" *) input m_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BREADY" *) output m_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARADDR" *) output [31:0]m_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLEN" *) output [7:0]m_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARSIZE" *) output [2:0]m_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARBURST" *) output [1:0]m_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLOCK" *) output [0:0]m_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARCACHE" *) output [3:0]m_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARPROT" *) output [2:0]m_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREGION" *) output [3:0]m_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARQOS" *) output [3:0]m_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARVALID" *) output m_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREADY" *) input m_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RDATA" *) input [31:0]m_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RRESP" *) input [1:0]m_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RLAST" *) input m_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RVALID" *) input m_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output m_axi_rready;

  wire \<const0> ;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [7:0]m_axi_arlen;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [31:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [3:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire s_axi_aclk;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire s_axi_aresetn;
  wire [0:0]s_axi_arid;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire s_axi_arready;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [0:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire [0:0]s_axi_bid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [63:0]s_axi_rdata;
  wire [0:0]s_axi_rid;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;

  GND GND
       (.G(\<const0> ));
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_IS_ACLK_ASYNC = "0" *) 
  (* C_AXI_PROTOCOL = "0" *) 
  (* C_AXI_SUPPORTS_READ = "1" *) 
  (* C_AXI_SUPPORTS_WRITE = "1" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FIFO_MODE = "0" *) 
  (* C_MAX_SPLIT_BEATS = "256" *) 
  (* C_M_AXI_ACLK_RATIO = "2" *) 
  (* C_M_AXI_BYTES_LOG = "2" *) 
  (* C_M_AXI_DATA_WIDTH = "32" *) 
  (* C_PACKING_LEVEL = "1" *) 
  (* C_RATIO = "2" *) 
  (* C_RATIO_LOG = "1" *) 
  (* C_SUPPORTS_ID = "1" *) 
  (* C_SYNCHRONIZER_STAGE = "3" *) 
  (* C_S_AXI_ACLK_RATIO = "1" *) 
  (* C_S_AXI_BYTES_LOG = "3" *) 
  (* C_S_AXI_DATA_WIDTH = "64" *) 
  (* C_S_AXI_ID_WIDTH = "1" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* P_AXI3 = "1" *) 
  (* P_AXI4 = "0" *) 
  (* P_AXILITE = "2" *) 
  (* P_CONVERSION = "2" *) 
  (* P_MAX_SPLIT_BEATS = "256" *) 
  bd_1_axi_dwidth_converter_v2_1_15_top inst
       (.m_axi_aclk(\<const0> ),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arcache(m_axi_arcache),
        .m_axi_aresetn(\<const0> ),
        .m_axi_arlen(m_axi_arlen),
        .m_axi_arlock(m_axi_arlock),
        .m_axi_arprot(m_axi_arprot),
        .m_axi_arqos(m_axi_arqos),
        .m_axi_arready(m_axi_arready),
        .m_axi_arregion(m_axi_arregion),
        .m_axi_arsize(m_axi_arsize),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awcache(m_axi_awcache),
        .m_axi_awlen(m_axi_awlen),
        .m_axi_awlock(m_axi_awlock),
        .m_axi_awprot(m_axi_awprot),
        .m_axi_awqos(m_axi_awqos),
        .m_axi_awready(m_axi_awready),
        .m_axi_awregion(m_axi_awregion),
        .m_axi_awsize(m_axi_awsize),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wvalid(m_axi_wvalid),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arburst(s_axi_arburst),
        .s_axi_arcache(s_axi_arcache),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_arid(s_axi_arid),
        .s_axi_arlen(s_axi_arlen),
        .s_axi_arlock(s_axi_arlock),
        .s_axi_arprot(s_axi_arprot),
        .s_axi_arqos(s_axi_arqos),
        .s_axi_arready(s_axi_arready),
        .s_axi_arregion(s_axi_arregion),
        .s_axi_arsize(s_axi_arsize),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awburst(s_axi_awburst),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awid(s_axi_awid),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awlock(s_axi_awlock),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awready(s_axi_awready),
        .s_axi_awregion(s_axi_awregion),
        .s_axi_awsize(s_axi_awsize),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bid(s_axi_bid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rid(s_axi_rid),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid));
endmodule

(* CHECK_LICENSE_TYPE = "bd_1_auto_rs_w_0,axi_register_slice_v2_1_15_axi_register_slice,{}" *) (* CORE_GENERATION_INFO = "bd_1_auto_rs_w_0,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=64,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=0,C_REG_CONFIG_W=1,C_REG_CONFIG_B=0,C_REG_CONFIG_AR=0,C_REG_CONFIG_R=0,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "bd_1_auto_rs_w_0" *) (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
module bd_1_bd_1_auto_rs_w_0
   (aclk,
    aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN bd_1_clk, ASSOCIATED_BUSIF S_AXI:M_AXI, ASSOCIATED_RESET ARESETN" *) input aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST, POLARITY ACTIVE_LOW, TYPE INTERCONNECT" *) input aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWID" *) input [0:0]s_axi_awid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [31:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLEN" *) input [7:0]s_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWSIZE" *) input [2:0]s_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWBURST" *) input [1:0]s_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLOCK" *) input [0:0]s_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWCACHE" *) input [3:0]s_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]s_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREGION" *) input [3:0]s_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWQOS" *) input [3:0]s_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [63:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [7:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WLAST" *) input s_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BID" *) output [0:0]s_axi_bid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARID" *) input [0:0]s_axi_arid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [31:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLEN" *) input [7:0]s_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARSIZE" *) input [2:0]s_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARBURST" *) input [1:0]s_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLOCK" *) input [0:0]s_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARCACHE" *) input [3:0]s_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]s_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREGION" *) input [3:0]s_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARQOS" *) input [3:0]s_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RID" *) output [0:0]s_axi_rid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [63:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RLAST" *) output s_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWID" *) output [0:0]m_axi_awid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWADDR" *) output [31:0]m_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLEN" *) output [7:0]m_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWSIZE" *) output [2:0]m_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWBURST" *) output [1:0]m_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLOCK" *) output [0:0]m_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWCACHE" *) output [3:0]m_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWPROT" *) output [2:0]m_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREGION" *) output [3:0]m_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWQOS" *) output [3:0]m_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWVALID" *) output m_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREADY" *) input m_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WDATA" *) output [63:0]m_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WSTRB" *) output [7:0]m_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WLAST" *) output m_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WVALID" *) output m_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WREADY" *) input m_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BID" *) input [0:0]m_axi_bid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BRESP" *) input [1:0]m_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BVALID" *) input m_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BREADY" *) output m_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARID" *) output [0:0]m_axi_arid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARADDR" *) output [31:0]m_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLEN" *) output [7:0]m_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARSIZE" *) output [2:0]m_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARBURST" *) output [1:0]m_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLOCK" *) output [0:0]m_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARCACHE" *) output [3:0]m_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARPROT" *) output [2:0]m_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREGION" *) output [3:0]m_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARQOS" *) output [3:0]m_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARVALID" *) output m_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREADY" *) input m_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RID" *) input [0:0]m_axi_rid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RDATA" *) input [63:0]m_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RRESP" *) input [1:0]m_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RLAST" *) input m_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RVALID" *) input m_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output m_axi_rready;

  wire aclk;
  wire aresetn;
  wire m_axi_arready;
  wire m_axi_awready;
  wire [0:0]m_axi_bid;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire [0:0]m_axi_rid;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [63:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [0:0]s_axi_arid;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [0:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_rready;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;

  assign m_axi_araddr[31:0] = s_axi_araddr;
  assign m_axi_arburst[1:0] = s_axi_arburst;
  assign m_axi_arcache[3:0] = s_axi_arcache;
  assign m_axi_arid[0] = s_axi_arid;
  assign m_axi_arlen[7:0] = s_axi_arlen;
  assign m_axi_arlock[0] = s_axi_arlock;
  assign m_axi_arprot[2:0] = s_axi_arprot;
  assign m_axi_arqos[3:0] = s_axi_arqos;
  assign m_axi_arregion[3:0] = s_axi_arregion;
  assign m_axi_arsize[2:0] = s_axi_arsize;
  assign m_axi_arvalid = s_axi_arvalid;
  assign m_axi_awaddr[31:0] = s_axi_awaddr;
  assign m_axi_awburst[1:0] = s_axi_awburst;
  assign m_axi_awcache[3:0] = s_axi_awcache;
  assign m_axi_awid[0] = s_axi_awid;
  assign m_axi_awlen[7:0] = s_axi_awlen;
  assign m_axi_awlock[0] = s_axi_awlock;
  assign m_axi_awprot[2:0] = s_axi_awprot;
  assign m_axi_awqos[3:0] = s_axi_awqos;
  assign m_axi_awregion[3:0] = s_axi_awregion;
  assign m_axi_awsize[2:0] = s_axi_awsize;
  assign m_axi_awvalid = s_axi_awvalid;
  assign m_axi_bready = s_axi_bready;
  assign m_axi_rready = s_axi_rready;
  assign s_axi_arready = m_axi_arready;
  assign s_axi_awready = m_axi_awready;
  assign s_axi_bid[0] = m_axi_bid;
  assign s_axi_bresp[1:0] = m_axi_bresp;
  assign s_axi_bvalid = m_axi_bvalid;
  assign s_axi_rdata[63:0] = m_axi_rdata;
  assign s_axi_rid[0] = m_axi_rid;
  assign s_axi_rlast = m_axi_rlast;
  assign s_axi_rresp[1:0] = m_axi_rresp;
  assign s_axi_rvalid = m_axi_rvalid;
  bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized0_17 inst
       (.Q({m_axi_wlast,m_axi_wstrb,m_axi_wdata}),
        .aclk(aclk),
        .aresetn(aresetn),
        .m_axi_wready(m_axi_wready),
        .\m_payload_i_reg[72] (m_axi_wvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[0] (s_axi_wready));
endmodule

(* CHECK_LICENSE_TYPE = "bd_1_auto_rs_w_1,axi_register_slice_v2_1_15_axi_register_slice,{}" *) (* CORE_GENERATION_INFO = "bd_1_auto_rs_w_1,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=64,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=0,C_REG_CONFIG_W=1,C_REG_CONFIG_B=0,C_REG_CONFIG_AR=0,C_REG_CONFIG_R=0,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "bd_1_auto_rs_w_1" *) (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
module bd_1_bd_1_auto_rs_w_1
   (aclk,
    aresetn,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN bd_1_clk, ASSOCIATED_BUSIF S_AXI:M_AXI, ASSOCIATED_RESET ARESETN" *) input aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST, POLARITY ACTIVE_LOW, TYPE INTERCONNECT" *) input aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [31:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLEN" *) input [7:0]s_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWSIZE" *) input [2:0]s_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWBURST" *) input [1:0]s_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLOCK" *) input [0:0]s_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWCACHE" *) input [3:0]s_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]s_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREGION" *) input [3:0]s_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWQOS" *) input [3:0]s_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [63:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [7:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WLAST" *) input s_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [31:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLEN" *) input [7:0]s_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARSIZE" *) input [2:0]s_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARBURST" *) input [1:0]s_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLOCK" *) input [0:0]s_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARCACHE" *) input [3:0]s_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]s_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREGION" *) input [3:0]s_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARQOS" *) input [3:0]s_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [63:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RLAST" *) output s_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWADDR" *) output [31:0]m_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLEN" *) output [7:0]m_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWSIZE" *) output [2:0]m_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWBURST" *) output [1:0]m_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLOCK" *) output [0:0]m_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWCACHE" *) output [3:0]m_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWPROT" *) output [2:0]m_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREGION" *) output [3:0]m_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWQOS" *) output [3:0]m_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWVALID" *) output m_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREADY" *) input m_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WDATA" *) output [63:0]m_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WSTRB" *) output [7:0]m_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WLAST" *) output m_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WVALID" *) output m_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WREADY" *) input m_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BRESP" *) input [1:0]m_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BVALID" *) input m_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BREADY" *) output m_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARADDR" *) output [31:0]m_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLEN" *) output [7:0]m_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARSIZE" *) output [2:0]m_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARBURST" *) output [1:0]m_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLOCK" *) output [0:0]m_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARCACHE" *) output [3:0]m_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARPROT" *) output [2:0]m_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREGION" *) output [3:0]m_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARQOS" *) output [3:0]m_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARVALID" *) output m_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREADY" *) input m_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RDATA" *) input [63:0]m_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RRESP" *) input [1:0]m_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RLAST" *) input m_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RVALID" *) input m_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output m_axi_rready;

  wire aclk;
  wire aresetn;
  wire m_axi_arready;
  wire m_axi_awready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [63:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_rready;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;

  assign m_axi_araddr[31:0] = s_axi_araddr;
  assign m_axi_arburst[1:0] = s_axi_arburst;
  assign m_axi_arcache[3:0] = s_axi_arcache;
  assign m_axi_arlen[7:0] = s_axi_arlen;
  assign m_axi_arlock[0] = s_axi_arlock;
  assign m_axi_arprot[2:0] = s_axi_arprot;
  assign m_axi_arqos[3:0] = s_axi_arqos;
  assign m_axi_arregion[3:0] = s_axi_arregion;
  assign m_axi_arsize[2:0] = s_axi_arsize;
  assign m_axi_arvalid = s_axi_arvalid;
  assign m_axi_awaddr[31:0] = s_axi_awaddr;
  assign m_axi_awburst[1:0] = s_axi_awburst;
  assign m_axi_awcache[3:0] = s_axi_awcache;
  assign m_axi_awlen[7:0] = s_axi_awlen;
  assign m_axi_awlock[0] = s_axi_awlock;
  assign m_axi_awprot[2:0] = s_axi_awprot;
  assign m_axi_awqos[3:0] = s_axi_awqos;
  assign m_axi_awregion[3:0] = s_axi_awregion;
  assign m_axi_awsize[2:0] = s_axi_awsize;
  assign m_axi_awvalid = s_axi_awvalid;
  assign m_axi_bready = s_axi_bready;
  assign m_axi_rready = s_axi_rready;
  assign s_axi_arready = m_axi_arready;
  assign s_axi_awready = m_axi_awready;
  assign s_axi_bresp[1:0] = m_axi_bresp;
  assign s_axi_bvalid = m_axi_bvalid;
  assign s_axi_rdata[63:0] = m_axi_rdata;
  assign s_axi_rlast = m_axi_rlast;
  assign s_axi_rresp[1:0] = m_axi_rresp;
  assign s_axi_rvalid = m_axi_rvalid;
  bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized0 inst
       (.Q({m_axi_wlast,m_axi_wstrb,m_axi_wdata}),
        .aclk(aclk),
        .aresetn(aresetn),
        .m_axi_wready(m_axi_wready),
        .\m_payload_i_reg[72] (m_axi_wvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[0] (s_axi_wready));
endmodule

(* CHECK_LICENSE_TYPE = "bd_1_auto_us_0,axi_dwidth_converter_v2_1_15_top,{}" *) (* CORE_GENERATION_INFO = "bd_1_auto_us_0,axi_dwidth_converter_v2_1_15_top,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_dwidth_converter,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_S_AXI_ID_WIDTH=1,C_SUPPORTS_ID=0,C_AXI_ADDR_WIDTH=32,C_S_AXI_DATA_WIDTH=32,C_M_AXI_DATA_WIDTH=64,C_AXI_SUPPORTS_WRITE=1,C_AXI_SUPPORTS_READ=1,C_FIFO_MODE=0,C_S_AXI_ACLK_RATIO=1,C_M_AXI_ACLK_RATIO=2,C_AXI_IS_ACLK_ASYNC=0,C_MAX_SPLIT_BEATS=16,C_PACKING_LEVEL=1,C_SYNCHRONIZER_STAGE=3}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "bd_1_auto_us_0" *) (* X_CORE_INFO = "axi_dwidth_converter_v2_1_15_top,Vivado 2017.4" *) 
module bd_1_bd_1_auto_us_0
   (s_axi_aclk,
    s_axi_aresetn,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 SI_CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME SI_CLK, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN bd_1_clk, ASSOCIATED_BUSIF S_AXI:M_AXI, ASSOCIATED_RESET S_AXI_ARESETN" *) input s_axi_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 SI_RST RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME SI_RST, POLARITY ACTIVE_LOW, TYPE INTERCONNECT" *) input s_axi_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [31:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLEN" *) input [7:0]s_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWSIZE" *) input [2:0]s_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWBURST" *) input [1:0]s_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLOCK" *) input [0:0]s_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWCACHE" *) input [3:0]s_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]s_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREGION" *) input [3:0]s_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWQOS" *) input [3:0]s_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [31:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [3:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WLAST" *) input s_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [31:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLEN" *) input [7:0]s_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARSIZE" *) input [2:0]s_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARBURST" *) input [1:0]s_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLOCK" *) input [0:0]s_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARCACHE" *) input [3:0]s_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]s_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREGION" *) input [3:0]s_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARQOS" *) input [3:0]s_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [31:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RLAST" *) output s_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWADDR" *) output [31:0]m_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLEN" *) output [7:0]m_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWSIZE" *) output [2:0]m_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWBURST" *) output [1:0]m_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLOCK" *) output [0:0]m_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWCACHE" *) output [3:0]m_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWPROT" *) output [2:0]m_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREGION" *) output [3:0]m_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWQOS" *) output [3:0]m_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWVALID" *) output m_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREADY" *) input m_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WDATA" *) output [63:0]m_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WSTRB" *) output [7:0]m_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WLAST" *) output m_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WVALID" *) output m_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WREADY" *) input m_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BRESP" *) input [1:0]m_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BVALID" *) input m_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BREADY" *) output m_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARADDR" *) output [31:0]m_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLEN" *) output [7:0]m_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARSIZE" *) output [2:0]m_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARBURST" *) output [1:0]m_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLOCK" *) output [0:0]m_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARCACHE" *) output [3:0]m_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARPROT" *) output [2:0]m_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREGION" *) output [3:0]m_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARQOS" *) output [3:0]m_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARVALID" *) output m_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREADY" *) input m_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RDATA" *) input [63:0]m_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RRESP" *) input [1:0]m_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RLAST" *) input m_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RVALID" *) input m_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output m_axi_rready;

  wire \<const0> ;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [7:0]m_axi_arlen;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [63:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire s_axi_aclk;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire s_axi_aresetn;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire s_axi_arready;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [31:0]s_axi_rdata;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;

  GND GND
       (.G(\<const0> ));
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_IS_ACLK_ASYNC = "0" *) 
  (* C_AXI_PROTOCOL = "0" *) 
  (* C_AXI_SUPPORTS_READ = "1" *) 
  (* C_AXI_SUPPORTS_WRITE = "1" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FIFO_MODE = "0" *) 
  (* C_MAX_SPLIT_BEATS = "16" *) 
  (* C_M_AXI_ACLK_RATIO = "2" *) 
  (* C_M_AXI_BYTES_LOG = "3" *) 
  (* C_M_AXI_DATA_WIDTH = "64" *) 
  (* C_PACKING_LEVEL = "1" *) 
  (* C_RATIO = "0" *) 
  (* C_RATIO_LOG = "0" *) 
  (* C_SUPPORTS_ID = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "3" *) 
  (* C_S_AXI_ACLK_RATIO = "1" *) 
  (* C_S_AXI_BYTES_LOG = "2" *) 
  (* C_S_AXI_DATA_WIDTH = "32" *) 
  (* C_S_AXI_ID_WIDTH = "1" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* P_AXI3 = "1" *) 
  (* P_AXI4 = "0" *) 
  (* P_AXILITE = "2" *) 
  (* P_CONVERSION = "2" *) 
  (* P_MAX_SPLIT_BEATS = "16" *) 
  bd_1_axi_dwidth_converter_v2_1_15_top__parameterized0 inst
       (.m_axi_aclk(\<const0> ),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arcache(m_axi_arcache),
        .m_axi_aresetn(\<const0> ),
        .m_axi_arlen(m_axi_arlen),
        .m_axi_arlock(m_axi_arlock),
        .m_axi_arprot(m_axi_arprot),
        .m_axi_arqos(m_axi_arqos),
        .m_axi_arready(m_axi_arready),
        .m_axi_arregion(m_axi_arregion),
        .m_axi_arsize(m_axi_arsize),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awcache(m_axi_awcache),
        .m_axi_awlen(m_axi_awlen),
        .m_axi_awlock(m_axi_awlock),
        .m_axi_awprot(m_axi_awprot),
        .m_axi_awqos(m_axi_awqos),
        .m_axi_awready(m_axi_awready),
        .m_axi_awregion(m_axi_awregion),
        .m_axi_awsize(m_axi_awsize),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wvalid(m_axi_wvalid),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arburst(s_axi_arburst),
        .s_axi_arcache(s_axi_arcache),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_arid(\<const0> ),
        .s_axi_arlen(s_axi_arlen),
        .s_axi_arlock(s_axi_arlock),
        .s_axi_arprot(s_axi_arprot),
        .s_axi_arqos(s_axi_arqos),
        .s_axi_arready(s_axi_arready),
        .s_axi_arregion(s_axi_arregion),
        .s_axi_arsize(s_axi_arsize),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awburst(s_axi_awburst),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awid(\<const0> ),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awlock(s_axi_awlock),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awready(s_axi_awready),
        .s_axi_awregion(s_axi_awregion),
        .s_axi_awsize(s_axi_awsize),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid));
endmodule

(* ORIG_REF_NAME = "bd_1_axi_interconnect_0_0" *) 
module bd_1_bd_1_axi_interconnect_0_0
   (ACLK,
    ARESETN,
    M00_ACLK,
    M00_ARESETN,
    M00_AXI_araddr,
    M00_AXI_arburst,
    M00_AXI_arcache,
    M00_AXI_arid,
    M00_AXI_arlen,
    M00_AXI_arlock,
    M00_AXI_arprot,
    M00_AXI_arqos,
    M00_AXI_arready,
    M00_AXI_arregion,
    M00_AXI_arsize,
    M00_AXI_arvalid,
    M00_AXI_awaddr,
    M00_AXI_awburst,
    M00_AXI_awcache,
    M00_AXI_awid,
    M00_AXI_awlen,
    M00_AXI_awlock,
    M00_AXI_awprot,
    M00_AXI_awqos,
    M00_AXI_awready,
    M00_AXI_awregion,
    M00_AXI_awsize,
    M00_AXI_awvalid,
    M00_AXI_bid,
    M00_AXI_bready,
    M00_AXI_bresp,
    M00_AXI_bvalid,
    M00_AXI_rdata,
    M00_AXI_rid,
    M00_AXI_rlast,
    M00_AXI_rready,
    M00_AXI_rresp,
    M00_AXI_rvalid,
    M00_AXI_wdata,
    M00_AXI_wlast,
    M00_AXI_wready,
    M00_AXI_wstrb,
    M00_AXI_wvalid,
    M01_ACLK,
    M01_ARESETN,
    M01_AXI_araddr,
    M01_AXI_arburst,
    M01_AXI_arcache,
    M01_AXI_arlen,
    M01_AXI_arlock,
    M01_AXI_arprot,
    M01_AXI_arqos,
    M01_AXI_arready,
    M01_AXI_arregion,
    M01_AXI_arsize,
    M01_AXI_arvalid,
    M01_AXI_awaddr,
    M01_AXI_awburst,
    M01_AXI_awcache,
    M01_AXI_awlen,
    M01_AXI_awlock,
    M01_AXI_awprot,
    M01_AXI_awqos,
    M01_AXI_awready,
    M01_AXI_awregion,
    M01_AXI_awsize,
    M01_AXI_awvalid,
    M01_AXI_bready,
    M01_AXI_bresp,
    M01_AXI_bvalid,
    M01_AXI_rdata,
    M01_AXI_rlast,
    M01_AXI_rready,
    M01_AXI_rresp,
    M01_AXI_rvalid,
    M01_AXI_wdata,
    M01_AXI_wlast,
    M01_AXI_wready,
    M01_AXI_wstrb,
    M01_AXI_wvalid,
    S00_ACLK,
    S00_ARESETN,
    S00_AXI_araddr,
    S00_AXI_arburst,
    S00_AXI_arcache,
    S00_AXI_arlen,
    S00_AXI_arlock,
    S00_AXI_arprot,
    S00_AXI_arqos,
    S00_AXI_arready,
    S00_AXI_arregion,
    S00_AXI_arsize,
    S00_AXI_arvalid,
    S00_AXI_awaddr,
    S00_AXI_awburst,
    S00_AXI_awcache,
    S00_AXI_awlen,
    S00_AXI_awlock,
    S00_AXI_awprot,
    S00_AXI_awqos,
    S00_AXI_awready,
    S00_AXI_awregion,
    S00_AXI_awsize,
    S00_AXI_awvalid,
    S00_AXI_bready,
    S00_AXI_bresp,
    S00_AXI_bvalid,
    S00_AXI_rdata,
    S00_AXI_rlast,
    S00_AXI_rready,
    S00_AXI_rresp,
    S00_AXI_rvalid,
    S00_AXI_wdata,
    S00_AXI_wlast,
    S00_AXI_wready,
    S00_AXI_wstrb,
    S00_AXI_wvalid,
    S01_ACLK,
    S01_ARESETN,
    S01_AXI_araddr,
    S01_AXI_arburst,
    S01_AXI_arcache,
    S01_AXI_arlen,
    S01_AXI_arlock,
    S01_AXI_arprot,
    S01_AXI_arqos,
    S01_AXI_arready,
    S01_AXI_arregion,
    S01_AXI_arsize,
    S01_AXI_arvalid,
    S01_AXI_awaddr,
    S01_AXI_awburst,
    S01_AXI_awcache,
    S01_AXI_awlen,
    S01_AXI_awlock,
    S01_AXI_awprot,
    S01_AXI_awqos,
    S01_AXI_awready,
    S01_AXI_awregion,
    S01_AXI_awsize,
    S01_AXI_awvalid,
    S01_AXI_bready,
    S01_AXI_bresp,
    S01_AXI_bvalid,
    S01_AXI_rdata,
    S01_AXI_rlast,
    S01_AXI_rready,
    S01_AXI_rresp,
    S01_AXI_rvalid,
    S01_AXI_wdata,
    S01_AXI_wlast,
    S01_AXI_wready,
    S01_AXI_wstrb,
    S01_AXI_wvalid);
  input ACLK;
  input ARESETN;
  input M00_ACLK;
  input M00_ARESETN;
  output [31:0]M00_AXI_araddr;
  output [1:0]M00_AXI_arburst;
  output [3:0]M00_AXI_arcache;
  output [0:0]M00_AXI_arid;
  output [7:0]M00_AXI_arlen;
  output [0:0]M00_AXI_arlock;
  output [2:0]M00_AXI_arprot;
  output [3:0]M00_AXI_arqos;
  input M00_AXI_arready;
  output [3:0]M00_AXI_arregion;
  output [2:0]M00_AXI_arsize;
  output M00_AXI_arvalid;
  output [31:0]M00_AXI_awaddr;
  output [1:0]M00_AXI_awburst;
  output [3:0]M00_AXI_awcache;
  output [0:0]M00_AXI_awid;
  output [7:0]M00_AXI_awlen;
  output [0:0]M00_AXI_awlock;
  output [2:0]M00_AXI_awprot;
  output [3:0]M00_AXI_awqos;
  input M00_AXI_awready;
  output [3:0]M00_AXI_awregion;
  output [2:0]M00_AXI_awsize;
  output M00_AXI_awvalid;
  input [0:0]M00_AXI_bid;
  output M00_AXI_bready;
  input [1:0]M00_AXI_bresp;
  input M00_AXI_bvalid;
  input [63:0]M00_AXI_rdata;
  input [0:0]M00_AXI_rid;
  input M00_AXI_rlast;
  output M00_AXI_rready;
  input [1:0]M00_AXI_rresp;
  input M00_AXI_rvalid;
  output [63:0]M00_AXI_wdata;
  output M00_AXI_wlast;
  input M00_AXI_wready;
  output [7:0]M00_AXI_wstrb;
  output M00_AXI_wvalid;
  input M01_ACLK;
  input M01_ARESETN;
  output [31:0]M01_AXI_araddr;
  output [1:0]M01_AXI_arburst;
  output [3:0]M01_AXI_arcache;
  output [7:0]M01_AXI_arlen;
  output [0:0]M01_AXI_arlock;
  output [2:0]M01_AXI_arprot;
  output [3:0]M01_AXI_arqos;
  input M01_AXI_arready;
  output [3:0]M01_AXI_arregion;
  output [2:0]M01_AXI_arsize;
  output M01_AXI_arvalid;
  output [31:0]M01_AXI_awaddr;
  output [1:0]M01_AXI_awburst;
  output [3:0]M01_AXI_awcache;
  output [7:0]M01_AXI_awlen;
  output [0:0]M01_AXI_awlock;
  output [2:0]M01_AXI_awprot;
  output [3:0]M01_AXI_awqos;
  input M01_AXI_awready;
  output [3:0]M01_AXI_awregion;
  output [2:0]M01_AXI_awsize;
  output M01_AXI_awvalid;
  output M01_AXI_bready;
  input [1:0]M01_AXI_bresp;
  input M01_AXI_bvalid;
  input [31:0]M01_AXI_rdata;
  input M01_AXI_rlast;
  output M01_AXI_rready;
  input [1:0]M01_AXI_rresp;
  input M01_AXI_rvalid;
  output [31:0]M01_AXI_wdata;
  output M01_AXI_wlast;
  input M01_AXI_wready;
  output [3:0]M01_AXI_wstrb;
  output M01_AXI_wvalid;
  input S00_ACLK;
  input S00_ARESETN;
  input [31:0]S00_AXI_araddr;
  input [1:0]S00_AXI_arburst;
  input [3:0]S00_AXI_arcache;
  input [7:0]S00_AXI_arlen;
  input [0:0]S00_AXI_arlock;
  input [2:0]S00_AXI_arprot;
  input [3:0]S00_AXI_arqos;
  output S00_AXI_arready;
  input [3:0]S00_AXI_arregion;
  input [2:0]S00_AXI_arsize;
  input S00_AXI_arvalid;
  input [31:0]S00_AXI_awaddr;
  input [1:0]S00_AXI_awburst;
  input [3:0]S00_AXI_awcache;
  input [7:0]S00_AXI_awlen;
  input [0:0]S00_AXI_awlock;
  input [2:0]S00_AXI_awprot;
  input [3:0]S00_AXI_awqos;
  output S00_AXI_awready;
  input [3:0]S00_AXI_awregion;
  input [2:0]S00_AXI_awsize;
  input S00_AXI_awvalid;
  input S00_AXI_bready;
  output [1:0]S00_AXI_bresp;
  output S00_AXI_bvalid;
  output [63:0]S00_AXI_rdata;
  output S00_AXI_rlast;
  input S00_AXI_rready;
  output [1:0]S00_AXI_rresp;
  output S00_AXI_rvalid;
  input [63:0]S00_AXI_wdata;
  input S00_AXI_wlast;
  output S00_AXI_wready;
  input [7:0]S00_AXI_wstrb;
  input S00_AXI_wvalid;
  input S01_ACLK;
  input S01_ARESETN;
  input [31:0]S01_AXI_araddr;
  input [1:0]S01_AXI_arburst;
  input [3:0]S01_AXI_arcache;
  input [7:0]S01_AXI_arlen;
  input [0:0]S01_AXI_arlock;
  input [2:0]S01_AXI_arprot;
  input [3:0]S01_AXI_arqos;
  output S01_AXI_arready;
  input [3:0]S01_AXI_arregion;
  input [2:0]S01_AXI_arsize;
  input S01_AXI_arvalid;
  input [31:0]S01_AXI_awaddr;
  input [1:0]S01_AXI_awburst;
  input [3:0]S01_AXI_awcache;
  input [7:0]S01_AXI_awlen;
  input [0:0]S01_AXI_awlock;
  input [2:0]S01_AXI_awprot;
  input [3:0]S01_AXI_awqos;
  output S01_AXI_awready;
  input [3:0]S01_AXI_awregion;
  input [2:0]S01_AXI_awsize;
  input S01_AXI_awvalid;
  input S01_AXI_bready;
  output [1:0]S01_AXI_bresp;
  output S01_AXI_bvalid;
  output [31:0]S01_AXI_rdata;
  output S01_AXI_rlast;
  input S01_AXI_rready;
  output [1:0]S01_AXI_rresp;
  output S01_AXI_rvalid;
  input [31:0]S01_AXI_wdata;
  input S01_AXI_wlast;
  output S01_AXI_wready;
  input [3:0]S01_AXI_wstrb;
  input S01_AXI_wvalid;

  wire \<const0> ;
  wire ACLK;
  wire ARESETN;
  wire M00_ACLK;
  wire M00_ARESETN;
  wire [31:0]M00_AXI_araddr;
  wire [1:0]M00_AXI_arburst;
  wire [3:0]M00_AXI_arcache;
  wire [0:0]M00_AXI_arid;
  wire [7:0]M00_AXI_arlen;
  wire [0:0]M00_AXI_arlock;
  wire [2:0]M00_AXI_arprot;
  wire [3:0]M00_AXI_arqos;
  wire M00_AXI_arready;
  wire [3:0]M00_AXI_arregion;
  wire [2:0]M00_AXI_arsize;
  wire M00_AXI_arvalid;
  wire [31:0]M00_AXI_awaddr;
  wire [1:0]M00_AXI_awburst;
  wire [3:0]M00_AXI_awcache;
  wire [0:0]M00_AXI_awid;
  wire [7:0]M00_AXI_awlen;
  wire [0:0]M00_AXI_awlock;
  wire [2:0]M00_AXI_awprot;
  wire [3:0]M00_AXI_awqos;
  wire M00_AXI_awready;
  wire [3:0]M00_AXI_awregion;
  wire [2:0]M00_AXI_awsize;
  wire M00_AXI_awvalid;
  wire [0:0]M00_AXI_bid;
  wire M00_AXI_bready;
  wire [1:0]M00_AXI_bresp;
  wire M00_AXI_bvalid;
  wire [63:0]M00_AXI_rdata;
  wire [0:0]M00_AXI_rid;
  wire M00_AXI_rlast;
  wire M00_AXI_rready;
  wire [1:0]M00_AXI_rresp;
  wire M00_AXI_rvalid;
  wire [63:0]M00_AXI_wdata;
  wire M00_AXI_wlast;
  wire M00_AXI_wready;
  wire [7:0]M00_AXI_wstrb;
  wire M00_AXI_wvalid;
  wire M01_ACLK;
  wire M01_ARESETN;
  wire [31:0]M01_AXI_araddr;
  wire [1:0]M01_AXI_arburst;
  wire [3:0]M01_AXI_arcache;
  wire [7:0]M01_AXI_arlen;
  wire [0:0]M01_AXI_arlock;
  wire [2:0]M01_AXI_arprot;
  wire [3:0]M01_AXI_arqos;
  wire M01_AXI_arready;
  wire [3:0]M01_AXI_arregion;
  wire [2:0]M01_AXI_arsize;
  wire M01_AXI_arvalid;
  wire [31:0]M01_AXI_awaddr;
  wire [1:0]M01_AXI_awburst;
  wire [3:0]M01_AXI_awcache;
  wire [7:0]M01_AXI_awlen;
  wire [0:0]M01_AXI_awlock;
  wire [2:0]M01_AXI_awprot;
  wire [3:0]M01_AXI_awqos;
  wire M01_AXI_awready;
  wire [3:0]M01_AXI_awregion;
  wire [2:0]M01_AXI_awsize;
  wire M01_AXI_awvalid;
  wire M01_AXI_bready;
  wire [1:0]M01_AXI_bresp;
  wire M01_AXI_bvalid;
  wire [31:0]M01_AXI_rdata;
  wire M01_AXI_rlast;
  wire M01_AXI_rready;
  wire [1:0]M01_AXI_rresp;
  wire M01_AXI_rvalid;
  wire [31:0]M01_AXI_wdata;
  wire M01_AXI_wlast;
  wire M01_AXI_wready;
  wire [3:0]M01_AXI_wstrb;
  wire M01_AXI_wvalid;
  wire S00_ACLK;
  wire S00_ARESETN;
  wire [31:0]S00_AXI_araddr;
  wire [1:0]S00_AXI_arburst;
  wire [3:0]S00_AXI_arcache;
  wire [7:0]S00_AXI_arlen;
  wire [0:0]S00_AXI_arlock;
  wire [2:0]S00_AXI_arprot;
  wire [3:0]S00_AXI_arqos;
  wire S00_AXI_arready;
  wire [3:0]S00_AXI_arregion;
  wire [2:0]S00_AXI_arsize;
  wire S00_AXI_arvalid;
  wire [31:0]S00_AXI_awaddr;
  wire [1:0]S00_AXI_awburst;
  wire [3:0]S00_AXI_awcache;
  wire [7:0]S00_AXI_awlen;
  wire [0:0]S00_AXI_awlock;
  wire [2:0]S00_AXI_awprot;
  wire [3:0]S00_AXI_awqos;
  wire S00_AXI_awready;
  wire [3:0]S00_AXI_awregion;
  wire [2:0]S00_AXI_awsize;
  wire S00_AXI_awvalid;
  wire S00_AXI_bready;
  wire [1:0]S00_AXI_bresp;
  wire S00_AXI_bvalid;
  wire [63:0]S00_AXI_rdata;
  wire S00_AXI_rlast;
  wire S00_AXI_rready;
  wire [1:0]S00_AXI_rresp;
  wire S00_AXI_rvalid;
  wire [63:0]S00_AXI_wdata;
  wire S00_AXI_wlast;
  wire S00_AXI_wready;
  wire [7:0]S00_AXI_wstrb;
  wire S00_AXI_wvalid;
  wire S01_ACLK;
  wire S01_ARESETN;
  wire [31:0]S01_AXI_araddr;
  wire [1:0]S01_AXI_arburst;
  wire [3:0]S01_AXI_arcache;
  wire [7:0]S01_AXI_arlen;
  wire [0:0]S01_AXI_arlock;
  wire [2:0]S01_AXI_arprot;
  wire [3:0]S01_AXI_arqos;
  wire S01_AXI_arready;
  wire [3:0]S01_AXI_arregion;
  wire [2:0]S01_AXI_arsize;
  wire S01_AXI_arvalid;
  wire [31:0]S01_AXI_awaddr;
  wire [1:0]S01_AXI_awburst;
  wire [3:0]S01_AXI_awcache;
  wire [7:0]S01_AXI_awlen;
  wire [0:0]S01_AXI_awlock;
  wire [2:0]S01_AXI_awprot;
  wire [3:0]S01_AXI_awqos;
  wire S01_AXI_awready;
  wire [3:0]S01_AXI_awregion;
  wire [2:0]S01_AXI_awsize;
  wire S01_AXI_awvalid;
  wire S01_AXI_bready;
  wire [1:0]S01_AXI_bresp;
  wire S01_AXI_bvalid;
  wire [31:0]S01_AXI_rdata;
  wire S01_AXI_rlast;
  wire S01_AXI_rready;
  wire [1:0]S01_AXI_rresp;
  wire S01_AXI_rvalid;
  wire [31:0]S01_AXI_wdata;
  wire S01_AXI_wlast;
  wire S01_AXI_wready;
  wire [3:0]S01_AXI_wstrb;
  wire S01_AXI_wvalid;
  wire [31:0]s00_couplers_to_xbar_ARADDR;
  wire [1:0]s00_couplers_to_xbar_ARBURST;
  wire [3:0]s00_couplers_to_xbar_ARCACHE;
  wire [7:0]s00_couplers_to_xbar_ARLEN;
  wire s00_couplers_to_xbar_ARLOCK;
  wire [2:0]s00_couplers_to_xbar_ARPROT;
  wire [3:0]s00_couplers_to_xbar_ARQOS;
  wire [2:0]s00_couplers_to_xbar_ARSIZE;
  wire s00_couplers_to_xbar_ARVALID;
  wire [31:0]s00_couplers_to_xbar_AWADDR;
  wire [1:0]s00_couplers_to_xbar_AWBURST;
  wire [3:0]s00_couplers_to_xbar_AWCACHE;
  wire [7:0]s00_couplers_to_xbar_AWLEN;
  wire s00_couplers_to_xbar_AWLOCK;
  wire [2:0]s00_couplers_to_xbar_AWPROT;
  wire [3:0]s00_couplers_to_xbar_AWQOS;
  wire [2:0]s00_couplers_to_xbar_AWSIZE;
  wire s00_couplers_to_xbar_AWVALID;
  wire s00_couplers_to_xbar_BREADY;
  wire s00_couplers_to_xbar_RREADY;
  wire [63:0]s00_couplers_to_xbar_WDATA;
  wire s00_couplers_to_xbar_WLAST;
  wire [7:0]s00_couplers_to_xbar_WSTRB;
  wire s00_couplers_to_xbar_WVALID;
  wire [31:0]s01_couplers_to_xbar_ARADDR;
  wire [1:0]s01_couplers_to_xbar_ARBURST;
  wire [3:0]s01_couplers_to_xbar_ARCACHE;
  wire [7:0]s01_couplers_to_xbar_ARLEN;
  wire s01_couplers_to_xbar_ARLOCK;
  wire [2:0]s01_couplers_to_xbar_ARPROT;
  wire [3:0]s01_couplers_to_xbar_ARQOS;
  wire s01_couplers_to_xbar_ARREADY;
  wire [2:0]s01_couplers_to_xbar_ARSIZE;
  wire s01_couplers_to_xbar_ARVALID;
  wire [31:0]s01_couplers_to_xbar_AWADDR;
  wire [1:0]s01_couplers_to_xbar_AWBURST;
  wire [3:0]s01_couplers_to_xbar_AWCACHE;
  wire [7:0]s01_couplers_to_xbar_AWLEN;
  wire s01_couplers_to_xbar_AWLOCK;
  wire [2:0]s01_couplers_to_xbar_AWPROT;
  wire [3:0]s01_couplers_to_xbar_AWQOS;
  wire s01_couplers_to_xbar_AWREADY;
  wire [2:0]s01_couplers_to_xbar_AWSIZE;
  wire s01_couplers_to_xbar_AWVALID;
  wire s01_couplers_to_xbar_BREADY;
  wire [3:2]s01_couplers_to_xbar_BRESP;
  wire s01_couplers_to_xbar_BVALID;
  wire [127:64]s01_couplers_to_xbar_RDATA;
  wire s01_couplers_to_xbar_RLAST;
  wire s01_couplers_to_xbar_RREADY;
  wire [3:2]s01_couplers_to_xbar_RRESP;
  wire s01_couplers_to_xbar_RVALID;
  wire [63:0]s01_couplers_to_xbar_WDATA;
  wire s01_couplers_to_xbar_WLAST;
  wire s01_couplers_to_xbar_WREADY;
  wire [7:0]s01_couplers_to_xbar_WSTRB;
  wire s01_couplers_to_xbar_WVALID;
  wire xbar_n_1;
  wire xbar_n_100;
  wire xbar_n_101;
  wire xbar_n_102;
  wire xbar_n_103;
  wire xbar_n_104;
  wire xbar_n_105;
  wire xbar_n_106;
  wire xbar_n_107;
  wire xbar_n_108;
  wire xbar_n_109;
  wire xbar_n_11;
  wire xbar_n_110;
  wire xbar_n_111;
  wire xbar_n_112;
  wire xbar_n_113;
  wire xbar_n_114;
  wire xbar_n_115;
  wire xbar_n_116;
  wire xbar_n_117;
  wire xbar_n_118;
  wire xbar_n_119;
  wire xbar_n_120;
  wire xbar_n_121;
  wire xbar_n_122;
  wire xbar_n_123;
  wire xbar_n_124;
  wire xbar_n_125;
  wire xbar_n_126;
  wire xbar_n_127;
  wire xbar_n_128;
  wire xbar_n_129;
  wire xbar_n_13;
  wire xbar_n_130;
  wire xbar_n_131;
  wire xbar_n_132;
  wire xbar_n_133;
  wire xbar_n_134;
  wire xbar_n_135;
  wire xbar_n_136;
  wire xbar_n_137;
  wire xbar_n_138;
  wire xbar_n_139;
  wire xbar_n_140;
  wire xbar_n_141;
  wire xbar_n_142;
  wire xbar_n_143;
  wire xbar_n_146;
  wire xbar_n_147;
  wire xbar_n_149;
  wire xbar_n_151;
  wire xbar_n_153;
  wire xbar_n_186;
  wire xbar_n_187;
  wire xbar_n_188;
  wire xbar_n_189;
  wire xbar_n_190;
  wire xbar_n_191;
  wire xbar_n_192;
  wire xbar_n_193;
  wire xbar_n_194;
  wire xbar_n_195;
  wire xbar_n_196;
  wire xbar_n_197;
  wire xbar_n_198;
  wire xbar_n_199;
  wire xbar_n_200;
  wire xbar_n_201;
  wire xbar_n_202;
  wire xbar_n_203;
  wire xbar_n_204;
  wire xbar_n_205;
  wire xbar_n_206;
  wire xbar_n_207;
  wire xbar_n_208;
  wire xbar_n_209;
  wire xbar_n_210;
  wire xbar_n_211;
  wire xbar_n_212;
  wire xbar_n_213;
  wire xbar_n_214;
  wire xbar_n_215;
  wire xbar_n_216;
  wire xbar_n_217;
  wire xbar_n_226;
  wire xbar_n_227;
  wire xbar_n_228;
  wire xbar_n_229;
  wire xbar_n_230;
  wire xbar_n_231;
  wire xbar_n_232;
  wire xbar_n_233;
  wire xbar_n_237;
  wire xbar_n_238;
  wire xbar_n_239;
  wire xbar_n_242;
  wire xbar_n_243;
  wire xbar_n_245;
  wire xbar_n_250;
  wire xbar_n_251;
  wire xbar_n_252;
  wire xbar_n_253;
  wire xbar_n_257;
  wire xbar_n_258;
  wire xbar_n_259;
  wire xbar_n_264;
  wire xbar_n_265;
  wire xbar_n_266;
  wire xbar_n_267;
  wire xbar_n_272;
  wire xbar_n_273;
  wire xbar_n_274;
  wire xbar_n_275;
  wire xbar_n_277;
  wire xbar_n_3;
  wire xbar_n_342;
  wire xbar_n_343;
  wire xbar_n_344;
  wire xbar_n_345;
  wire xbar_n_346;
  wire xbar_n_347;
  wire xbar_n_348;
  wire xbar_n_349;
  wire xbar_n_350;
  wire xbar_n_351;
  wire xbar_n_352;
  wire xbar_n_353;
  wire xbar_n_354;
  wire xbar_n_355;
  wire xbar_n_356;
  wire xbar_n_357;
  wire xbar_n_358;
  wire xbar_n_359;
  wire xbar_n_360;
  wire xbar_n_361;
  wire xbar_n_362;
  wire xbar_n_363;
  wire xbar_n_364;
  wire xbar_n_365;
  wire xbar_n_366;
  wire xbar_n_367;
  wire xbar_n_368;
  wire xbar_n_369;
  wire xbar_n_370;
  wire xbar_n_371;
  wire xbar_n_372;
  wire xbar_n_373;
  wire xbar_n_374;
  wire xbar_n_375;
  wire xbar_n_376;
  wire xbar_n_377;
  wire xbar_n_378;
  wire xbar_n_379;
  wire xbar_n_380;
  wire xbar_n_381;
  wire xbar_n_382;
  wire xbar_n_383;
  wire xbar_n_384;
  wire xbar_n_385;
  wire xbar_n_386;
  wire xbar_n_387;
  wire xbar_n_388;
  wire xbar_n_389;
  wire xbar_n_390;
  wire xbar_n_391;
  wire xbar_n_392;
  wire xbar_n_393;
  wire xbar_n_394;
  wire xbar_n_395;
  wire xbar_n_396;
  wire xbar_n_397;
  wire xbar_n_398;
  wire xbar_n_399;
  wire xbar_n_400;
  wire xbar_n_401;
  wire xbar_n_402;
  wire xbar_n_403;
  wire xbar_n_404;
  wire xbar_n_405;
  wire xbar_n_414;
  wire xbar_n_415;
  wire xbar_n_416;
  wire xbar_n_417;
  wire xbar_n_418;
  wire xbar_n_419;
  wire xbar_n_420;
  wire xbar_n_421;
  wire xbar_n_423;
  wire xbar_n_425;
  wire xbar_n_427;
  wire xbar_n_429;
  wire xbar_n_462;
  wire xbar_n_463;
  wire xbar_n_464;
  wire xbar_n_465;
  wire xbar_n_466;
  wire xbar_n_467;
  wire xbar_n_468;
  wire xbar_n_469;
  wire xbar_n_470;
  wire xbar_n_471;
  wire xbar_n_472;
  wire xbar_n_473;
  wire xbar_n_474;
  wire xbar_n_475;
  wire xbar_n_476;
  wire xbar_n_477;
  wire xbar_n_478;
  wire xbar_n_479;
  wire xbar_n_480;
  wire xbar_n_481;
  wire xbar_n_482;
  wire xbar_n_483;
  wire xbar_n_484;
  wire xbar_n_485;
  wire xbar_n_486;
  wire xbar_n_487;
  wire xbar_n_488;
  wire xbar_n_489;
  wire xbar_n_490;
  wire xbar_n_491;
  wire xbar_n_492;
  wire xbar_n_493;
  wire xbar_n_502;
  wire xbar_n_503;
  wire xbar_n_504;
  wire xbar_n_505;
  wire xbar_n_506;
  wire xbar_n_507;
  wire xbar_n_508;
  wire xbar_n_509;
  wire xbar_n_513;
  wire xbar_n_514;
  wire xbar_n_515;
  wire xbar_n_518;
  wire xbar_n_519;
  wire xbar_n_521;
  wire xbar_n_526;
  wire xbar_n_527;
  wire xbar_n_528;
  wire xbar_n_529;
  wire xbar_n_533;
  wire xbar_n_534;
  wire xbar_n_535;
  wire xbar_n_540;
  wire xbar_n_541;
  wire xbar_n_542;
  wire xbar_n_543;
  wire xbar_n_548;
  wire xbar_n_549;
  wire xbar_n_550;
  wire xbar_n_551;
  wire xbar_n_553;
  wire xbar_n_555;
  wire xbar_n_8;
  wire xbar_n_80;
  wire xbar_n_81;
  wire xbar_n_82;
  wire xbar_n_83;
  wire xbar_n_84;
  wire xbar_n_85;
  wire xbar_n_86;
  wire xbar_n_87;
  wire xbar_n_88;
  wire xbar_n_89;
  wire xbar_n_9;
  wire xbar_n_90;
  wire xbar_n_91;
  wire xbar_n_92;
  wire xbar_n_93;
  wire xbar_n_94;
  wire xbar_n_95;
  wire xbar_n_96;
  wire xbar_n_97;
  wire xbar_n_98;
  wire xbar_n_99;
  wire xbar_to_m00_couplers_ARREADY;
  wire xbar_to_m00_couplers_AWREADY;
  wire xbar_to_m00_couplers_BID;
  wire [1:0]xbar_to_m00_couplers_BRESP;
  wire xbar_to_m00_couplers_BVALID;
  wire [63:0]xbar_to_m00_couplers_RDATA;
  wire xbar_to_m00_couplers_RID;
  wire xbar_to_m00_couplers_RLAST;
  wire [1:0]xbar_to_m00_couplers_RRESP;
  wire xbar_to_m00_couplers_RVALID;
  wire xbar_to_m00_couplers_WREADY;
  wire [63:32]xbar_to_m01_couplers_ARADDR;
  wire [3:2]xbar_to_m01_couplers_ARBURST;
  wire [7:4]xbar_to_m01_couplers_ARCACHE;
  wire xbar_to_m01_couplers_ARID;
  wire [15:8]xbar_to_m01_couplers_ARLEN;
  wire xbar_to_m01_couplers_ARLOCK;
  wire [5:3]xbar_to_m01_couplers_ARPROT;
  wire [7:4]xbar_to_m01_couplers_ARQOS;
  wire xbar_to_m01_couplers_ARREADY;
  wire [7:4]xbar_to_m01_couplers_ARREGION;
  wire [5:3]xbar_to_m01_couplers_ARSIZE;
  wire xbar_to_m01_couplers_ARVALID;
  wire [63:32]xbar_to_m01_couplers_AWADDR;
  wire [3:2]xbar_to_m01_couplers_AWBURST;
  wire [7:4]xbar_to_m01_couplers_AWCACHE;
  wire xbar_to_m01_couplers_AWID;
  wire [15:8]xbar_to_m01_couplers_AWLEN;
  wire xbar_to_m01_couplers_AWLOCK;
  wire [5:3]xbar_to_m01_couplers_AWPROT;
  wire [7:4]xbar_to_m01_couplers_AWQOS;
  wire xbar_to_m01_couplers_AWREADY;
  wire [7:4]xbar_to_m01_couplers_AWREGION;
  wire [5:3]xbar_to_m01_couplers_AWSIZE;
  wire xbar_to_m01_couplers_AWVALID;
  wire xbar_to_m01_couplers_BID;
  wire xbar_to_m01_couplers_BREADY;
  wire [1:0]xbar_to_m01_couplers_BRESP;
  wire xbar_to_m01_couplers_BVALID;
  wire [63:0]xbar_to_m01_couplers_RDATA;
  wire xbar_to_m01_couplers_RID;
  wire xbar_to_m01_couplers_RLAST;
  wire xbar_to_m01_couplers_RREADY;
  wire [1:0]xbar_to_m01_couplers_RRESP;
  wire xbar_to_m01_couplers_RVALID;
  wire [127:64]xbar_to_m01_couplers_WDATA;
  wire xbar_to_m01_couplers_WLAST;
  wire xbar_to_m01_couplers_WREADY;
  wire [15:8]xbar_to_m01_couplers_WSTRB;
  wire xbar_to_m01_couplers_WVALID;

  GND GND
       (.G(\<const0> ));
  bd_1_m00_couplers_imp_1DK4NZ5 m00_couplers
       (.M00_ACLK(M00_ACLK),
        .M00_ARESETN(M00_ARESETN),
        .M00_AXI_araddr(M00_AXI_araddr),
        .M00_AXI_arburst(M00_AXI_arburst),
        .M00_AXI_arcache(M00_AXI_arcache),
        .M00_AXI_arid(M00_AXI_arid),
        .M00_AXI_arlen(M00_AXI_arlen),
        .M00_AXI_arlock(M00_AXI_arlock),
        .M00_AXI_arprot(M00_AXI_arprot),
        .M00_AXI_arqos(M00_AXI_arqos),
        .M00_AXI_arready(M00_AXI_arready),
        .M00_AXI_arregion(M00_AXI_arregion),
        .M00_AXI_arsize(M00_AXI_arsize),
        .M00_AXI_arvalid(M00_AXI_arvalid),
        .M00_AXI_awaddr(M00_AXI_awaddr),
        .M00_AXI_awburst(M00_AXI_awburst),
        .M00_AXI_awcache(M00_AXI_awcache),
        .M00_AXI_awid(M00_AXI_awid),
        .M00_AXI_awlen(M00_AXI_awlen),
        .M00_AXI_awlock(M00_AXI_awlock),
        .M00_AXI_awprot(M00_AXI_awprot),
        .M00_AXI_awqos(M00_AXI_awqos),
        .M00_AXI_awready(M00_AXI_awready),
        .M00_AXI_awregion(M00_AXI_awregion),
        .M00_AXI_awsize(M00_AXI_awsize),
        .M00_AXI_awvalid(M00_AXI_awvalid),
        .M00_AXI_bid(M00_AXI_bid),
        .M00_AXI_bready(M00_AXI_bready),
        .M00_AXI_bresp(M00_AXI_bresp),
        .M00_AXI_bvalid(M00_AXI_bvalid),
        .M00_AXI_rdata(M00_AXI_rdata),
        .M00_AXI_rid(M00_AXI_rid),
        .M00_AXI_rlast(M00_AXI_rlast),
        .M00_AXI_rready(M00_AXI_rready),
        .M00_AXI_rresp(M00_AXI_rresp),
        .M00_AXI_rvalid(M00_AXI_rvalid),
        .M00_AXI_wdata(M00_AXI_wdata),
        .M00_AXI_wlast(M00_AXI_wlast),
        .M00_AXI_wready(M00_AXI_wready),
        .M00_AXI_wstrb(M00_AXI_wstrb),
        .M00_AXI_wvalid(M00_AXI_wvalid),
        .m_axi_araddr({xbar_n_462,xbar_n_463,xbar_n_464,xbar_n_465,xbar_n_466,xbar_n_467,xbar_n_468,xbar_n_469,xbar_n_470,xbar_n_471,xbar_n_472,xbar_n_473,xbar_n_474,xbar_n_475,xbar_n_476,xbar_n_477,xbar_n_478,xbar_n_479,xbar_n_480,xbar_n_481,xbar_n_482,xbar_n_483,xbar_n_484,xbar_n_485,xbar_n_486,xbar_n_487,xbar_n_488,xbar_n_489,xbar_n_490,xbar_n_491,xbar_n_492,xbar_n_493}),
        .m_axi_arburst({xbar_n_518,xbar_n_519}),
        .m_axi_arcache({xbar_n_526,xbar_n_527,xbar_n_528,xbar_n_529}),
        .m_axi_arid(xbar_n_429),
        .m_axi_arlen({xbar_n_502,xbar_n_503,xbar_n_504,xbar_n_505,xbar_n_506,xbar_n_507,xbar_n_508,xbar_n_509}),
        .m_axi_arlock(xbar_n_521),
        .m_axi_arprot({xbar_n_533,xbar_n_534,xbar_n_535}),
        .m_axi_arqos({xbar_n_548,xbar_n_549,xbar_n_550,xbar_n_551}),
        .m_axi_arregion({xbar_n_540,xbar_n_541,xbar_n_542,xbar_n_543}),
        .m_axi_arsize({xbar_n_513,xbar_n_514,xbar_n_515}),
        .m_axi_arvalid(xbar_n_553),
        .m_axi_awaddr({xbar_n_186,xbar_n_187,xbar_n_188,xbar_n_189,xbar_n_190,xbar_n_191,xbar_n_192,xbar_n_193,xbar_n_194,xbar_n_195,xbar_n_196,xbar_n_197,xbar_n_198,xbar_n_199,xbar_n_200,xbar_n_201,xbar_n_202,xbar_n_203,xbar_n_204,xbar_n_205,xbar_n_206,xbar_n_207,xbar_n_208,xbar_n_209,xbar_n_210,xbar_n_211,xbar_n_212,xbar_n_213,xbar_n_214,xbar_n_215,xbar_n_216,xbar_n_217}),
        .m_axi_awburst({xbar_n_242,xbar_n_243}),
        .m_axi_awcache({xbar_n_250,xbar_n_251,xbar_n_252,xbar_n_253}),
        .m_axi_awid(xbar_n_153),
        .m_axi_awlen({xbar_n_226,xbar_n_227,xbar_n_228,xbar_n_229,xbar_n_230,xbar_n_231,xbar_n_232,xbar_n_233}),
        .m_axi_awlock(xbar_n_245),
        .m_axi_awprot({xbar_n_257,xbar_n_258,xbar_n_259}),
        .m_axi_awqos({xbar_n_272,xbar_n_273,xbar_n_274,xbar_n_275}),
        .m_axi_awregion({xbar_n_264,xbar_n_265,xbar_n_266,xbar_n_267}),
        .m_axi_awsize({xbar_n_237,xbar_n_238,xbar_n_239}),
        .m_axi_awvalid(xbar_n_277),
        .m_axi_bready(xbar_n_427),
        .m_axi_rready(xbar_n_555),
        .m_axi_wdata({xbar_n_342,xbar_n_343,xbar_n_344,xbar_n_345,xbar_n_346,xbar_n_347,xbar_n_348,xbar_n_349,xbar_n_350,xbar_n_351,xbar_n_352,xbar_n_353,xbar_n_354,xbar_n_355,xbar_n_356,xbar_n_357,xbar_n_358,xbar_n_359,xbar_n_360,xbar_n_361,xbar_n_362,xbar_n_363,xbar_n_364,xbar_n_365,xbar_n_366,xbar_n_367,xbar_n_368,xbar_n_369,xbar_n_370,xbar_n_371,xbar_n_372,xbar_n_373,xbar_n_374,xbar_n_375,xbar_n_376,xbar_n_377,xbar_n_378,xbar_n_379,xbar_n_380,xbar_n_381,xbar_n_382,xbar_n_383,xbar_n_384,xbar_n_385,xbar_n_386,xbar_n_387,xbar_n_388,xbar_n_389,xbar_n_390,xbar_n_391,xbar_n_392,xbar_n_393,xbar_n_394,xbar_n_395,xbar_n_396,xbar_n_397,xbar_n_398,xbar_n_399,xbar_n_400,xbar_n_401,xbar_n_402,xbar_n_403,xbar_n_404,xbar_n_405}),
        .m_axi_wlast(xbar_n_423),
        .m_axi_wstrb({xbar_n_414,xbar_n_415,xbar_n_416,xbar_n_417,xbar_n_418,xbar_n_419,xbar_n_420,xbar_n_421}),
        .m_axi_wvalid(xbar_n_425),
        .s_axi_arready(xbar_to_m00_couplers_ARREADY),
        .s_axi_awready(xbar_to_m00_couplers_AWREADY),
        .s_axi_bid(xbar_to_m00_couplers_BID),
        .s_axi_bresp(xbar_to_m00_couplers_BRESP),
        .s_axi_bvalid(xbar_to_m00_couplers_BVALID),
        .s_axi_rdata(xbar_to_m00_couplers_RDATA),
        .s_axi_rid(xbar_to_m00_couplers_RID),
        .s_axi_rlast(xbar_to_m00_couplers_RLAST),
        .s_axi_rresp(xbar_to_m00_couplers_RRESP),
        .s_axi_rvalid(xbar_to_m00_couplers_RVALID),
        .s_axi_wready(xbar_to_m00_couplers_WREADY));
  bd_1_m01_couplers_imp_D76XP3 m01_couplers
       (.ACLK(ACLK),
        .ARESETN(ARESETN),
        .M01_ACLK(M01_ACLK),
        .M01_ARESETN(M01_ARESETN),
        .M01_AXI_araddr(M01_AXI_araddr),
        .M01_AXI_arburst(M01_AXI_arburst),
        .M01_AXI_arcache(M01_AXI_arcache),
        .M01_AXI_arlen(M01_AXI_arlen),
        .M01_AXI_arlock(M01_AXI_arlock),
        .M01_AXI_arprot(M01_AXI_arprot),
        .M01_AXI_arqos(M01_AXI_arqos),
        .M01_AXI_arready(M01_AXI_arready),
        .M01_AXI_arregion(M01_AXI_arregion),
        .M01_AXI_arsize(M01_AXI_arsize),
        .M01_AXI_arvalid(M01_AXI_arvalid),
        .M01_AXI_awaddr(M01_AXI_awaddr),
        .M01_AXI_awburst(M01_AXI_awburst),
        .M01_AXI_awcache(M01_AXI_awcache),
        .M01_AXI_awlen(M01_AXI_awlen),
        .M01_AXI_awlock(M01_AXI_awlock),
        .M01_AXI_awprot(M01_AXI_awprot),
        .M01_AXI_awqos(M01_AXI_awqos),
        .M01_AXI_awready(M01_AXI_awready),
        .M01_AXI_awregion(M01_AXI_awregion),
        .M01_AXI_awsize(M01_AXI_awsize),
        .M01_AXI_awvalid(M01_AXI_awvalid),
        .M01_AXI_bready(M01_AXI_bready),
        .M01_AXI_bresp(M01_AXI_bresp),
        .M01_AXI_bvalid(M01_AXI_bvalid),
        .M01_AXI_rdata(M01_AXI_rdata),
        .M01_AXI_rlast(M01_AXI_rlast),
        .M01_AXI_rready(M01_AXI_rready),
        .M01_AXI_rresp(M01_AXI_rresp),
        .M01_AXI_rvalid(M01_AXI_rvalid),
        .M01_AXI_wdata(M01_AXI_wdata),
        .M01_AXI_wlast(M01_AXI_wlast),
        .M01_AXI_wready(M01_AXI_wready),
        .M01_AXI_wstrb(M01_AXI_wstrb),
        .M01_AXI_wvalid(M01_AXI_wvalid),
        .S_AXI_araddr(xbar_to_m01_couplers_ARADDR),
        .S_AXI_arburst(xbar_to_m01_couplers_ARBURST),
        .S_AXI_arcache(xbar_to_m01_couplers_ARCACHE),
        .S_AXI_arid(xbar_to_m01_couplers_ARID),
        .S_AXI_arlen(xbar_to_m01_couplers_ARLEN),
        .S_AXI_arlock(xbar_to_m01_couplers_ARLOCK),
        .S_AXI_arprot(xbar_to_m01_couplers_ARPROT),
        .S_AXI_arqos(xbar_to_m01_couplers_ARQOS),
        .S_AXI_arready(xbar_to_m01_couplers_ARREADY),
        .S_AXI_arregion(xbar_to_m01_couplers_ARREGION),
        .S_AXI_arsize(xbar_to_m01_couplers_ARSIZE),
        .S_AXI_arvalid(xbar_to_m01_couplers_ARVALID),
        .S_AXI_awaddr(xbar_to_m01_couplers_AWADDR),
        .S_AXI_awburst(xbar_to_m01_couplers_AWBURST),
        .S_AXI_awcache(xbar_to_m01_couplers_AWCACHE),
        .S_AXI_awid(xbar_to_m01_couplers_AWID),
        .S_AXI_awlen(xbar_to_m01_couplers_AWLEN),
        .S_AXI_awlock(xbar_to_m01_couplers_AWLOCK),
        .S_AXI_awprot(xbar_to_m01_couplers_AWPROT),
        .S_AXI_awqos(xbar_to_m01_couplers_AWQOS),
        .S_AXI_awready(xbar_to_m01_couplers_AWREADY),
        .S_AXI_awregion(xbar_to_m01_couplers_AWREGION),
        .S_AXI_awsize(xbar_to_m01_couplers_AWSIZE),
        .S_AXI_awvalid(xbar_to_m01_couplers_AWVALID),
        .S_AXI_bid(xbar_to_m01_couplers_BID),
        .S_AXI_bready(xbar_to_m01_couplers_BREADY),
        .S_AXI_bresp(xbar_to_m01_couplers_BRESP),
        .S_AXI_bvalid(xbar_to_m01_couplers_BVALID),
        .S_AXI_rdata(xbar_to_m01_couplers_RDATA),
        .S_AXI_rid(xbar_to_m01_couplers_RID),
        .S_AXI_rlast(xbar_to_m01_couplers_RLAST),
        .S_AXI_rready(xbar_to_m01_couplers_RREADY),
        .S_AXI_rresp(xbar_to_m01_couplers_RRESP),
        .S_AXI_rvalid(xbar_to_m01_couplers_RVALID),
        .S_AXI_wdata(xbar_to_m01_couplers_WDATA),
        .S_AXI_wlast(xbar_to_m01_couplers_WLAST),
        .S_AXI_wready(xbar_to_m01_couplers_WREADY),
        .S_AXI_wstrb(xbar_to_m01_couplers_WSTRB),
        .S_AXI_wvalid(xbar_to_m01_couplers_WVALID));
  bd_1_s00_couplers_imp_W8W9XW s00_couplers
       (.S00_ACLK(S00_ACLK),
        .S00_ARESETN(S00_ARESETN),
        .S00_AXI_araddr(S00_AXI_araddr),
        .S00_AXI_arburst(S00_AXI_arburst),
        .S00_AXI_arcache(S00_AXI_arcache),
        .S00_AXI_arlen(S00_AXI_arlen),
        .S00_AXI_arlock(S00_AXI_arlock),
        .S00_AXI_arprot(S00_AXI_arprot),
        .S00_AXI_arqos(S00_AXI_arqos),
        .S00_AXI_arready(S00_AXI_arready),
        .S00_AXI_arregion(S00_AXI_arregion),
        .S00_AXI_arsize(S00_AXI_arsize),
        .S00_AXI_arvalid(S00_AXI_arvalid),
        .S00_AXI_awaddr(S00_AXI_awaddr),
        .S00_AXI_awburst(S00_AXI_awburst),
        .S00_AXI_awcache(S00_AXI_awcache),
        .S00_AXI_awlen(S00_AXI_awlen),
        .S00_AXI_awlock(S00_AXI_awlock),
        .S00_AXI_awprot(S00_AXI_awprot),
        .S00_AXI_awqos(S00_AXI_awqos),
        .S00_AXI_awready(S00_AXI_awready),
        .S00_AXI_awregion(S00_AXI_awregion),
        .S00_AXI_awsize(S00_AXI_awsize),
        .S00_AXI_awvalid(S00_AXI_awvalid),
        .S00_AXI_bready(S00_AXI_bready),
        .S00_AXI_bresp(S00_AXI_bresp),
        .S00_AXI_bvalid(S00_AXI_bvalid),
        .S00_AXI_rdata(S00_AXI_rdata),
        .S00_AXI_rlast(S00_AXI_rlast),
        .S00_AXI_rready(S00_AXI_rready),
        .S00_AXI_rresp(S00_AXI_rresp),
        .S00_AXI_rvalid(S00_AXI_rvalid),
        .S00_AXI_wdata(S00_AXI_wdata),
        .S00_AXI_wlast(S00_AXI_wlast),
        .S00_AXI_wready(S00_AXI_wready),
        .S00_AXI_wstrb(S00_AXI_wstrb),
        .S00_AXI_wvalid(S00_AXI_wvalid),
        .m_axi_araddr(s00_couplers_to_xbar_ARADDR),
        .m_axi_arburst(s00_couplers_to_xbar_ARBURST),
        .m_axi_arcache(s00_couplers_to_xbar_ARCACHE),
        .m_axi_arlen(s00_couplers_to_xbar_ARLEN),
        .m_axi_arlock(s00_couplers_to_xbar_ARLOCK),
        .m_axi_arprot(s00_couplers_to_xbar_ARPROT),
        .m_axi_arqos(s00_couplers_to_xbar_ARQOS),
        .m_axi_arsize(s00_couplers_to_xbar_ARSIZE),
        .m_axi_arvalid(s00_couplers_to_xbar_ARVALID),
        .m_axi_awaddr(s00_couplers_to_xbar_AWADDR),
        .m_axi_awburst(s00_couplers_to_xbar_AWBURST),
        .m_axi_awcache(s00_couplers_to_xbar_AWCACHE),
        .m_axi_awlen(s00_couplers_to_xbar_AWLEN),
        .m_axi_awlock(s00_couplers_to_xbar_AWLOCK),
        .m_axi_awprot(s00_couplers_to_xbar_AWPROT),
        .m_axi_awqos(s00_couplers_to_xbar_AWQOS),
        .m_axi_awsize(s00_couplers_to_xbar_AWSIZE),
        .m_axi_awvalid(s00_couplers_to_xbar_AWVALID),
        .m_axi_bready(s00_couplers_to_xbar_BREADY),
        .m_axi_rready(s00_couplers_to_xbar_RREADY),
        .m_axi_wdata(s00_couplers_to_xbar_WDATA),
        .m_axi_wlast(s00_couplers_to_xbar_WLAST),
        .m_axi_wstrb(s00_couplers_to_xbar_WSTRB),
        .m_axi_wvalid(s00_couplers_to_xbar_WVALID),
        .s_axi_arready(xbar_n_13),
        .s_axi_awready(xbar_n_1),
        .s_axi_bresp({xbar_n_8,xbar_n_9}),
        .s_axi_bvalid(xbar_n_11),
        .s_axi_rdata({xbar_n_80,xbar_n_81,xbar_n_82,xbar_n_83,xbar_n_84,xbar_n_85,xbar_n_86,xbar_n_87,xbar_n_88,xbar_n_89,xbar_n_90,xbar_n_91,xbar_n_92,xbar_n_93,xbar_n_94,xbar_n_95,xbar_n_96,xbar_n_97,xbar_n_98,xbar_n_99,xbar_n_100,xbar_n_101,xbar_n_102,xbar_n_103,xbar_n_104,xbar_n_105,xbar_n_106,xbar_n_107,xbar_n_108,xbar_n_109,xbar_n_110,xbar_n_111,xbar_n_112,xbar_n_113,xbar_n_114,xbar_n_115,xbar_n_116,xbar_n_117,xbar_n_118,xbar_n_119,xbar_n_120,xbar_n_121,xbar_n_122,xbar_n_123,xbar_n_124,xbar_n_125,xbar_n_126,xbar_n_127,xbar_n_128,xbar_n_129,xbar_n_130,xbar_n_131,xbar_n_132,xbar_n_133,xbar_n_134,xbar_n_135,xbar_n_136,xbar_n_137,xbar_n_138,xbar_n_139,xbar_n_140,xbar_n_141,xbar_n_142,xbar_n_143}),
        .s_axi_rlast(xbar_n_149),
        .s_axi_rresp({xbar_n_146,xbar_n_147}),
        .s_axi_rvalid(xbar_n_151),
        .s_axi_wready(xbar_n_3));
  bd_1_s01_couplers_imp_1SPJ6ZM s01_couplers
       (.M_AXI_araddr(s01_couplers_to_xbar_ARADDR),
        .M_AXI_arburst(s01_couplers_to_xbar_ARBURST),
        .M_AXI_arcache(s01_couplers_to_xbar_ARCACHE),
        .M_AXI_arlen(s01_couplers_to_xbar_ARLEN),
        .M_AXI_arlock(s01_couplers_to_xbar_ARLOCK),
        .M_AXI_arprot(s01_couplers_to_xbar_ARPROT),
        .M_AXI_arqos(s01_couplers_to_xbar_ARQOS),
        .M_AXI_arready(s01_couplers_to_xbar_ARREADY),
        .M_AXI_arsize(s01_couplers_to_xbar_ARSIZE),
        .M_AXI_arvalid(s01_couplers_to_xbar_ARVALID),
        .M_AXI_awaddr(s01_couplers_to_xbar_AWADDR),
        .M_AXI_awburst(s01_couplers_to_xbar_AWBURST),
        .M_AXI_awcache(s01_couplers_to_xbar_AWCACHE),
        .M_AXI_awlen(s01_couplers_to_xbar_AWLEN),
        .M_AXI_awlock(s01_couplers_to_xbar_AWLOCK),
        .M_AXI_awprot(s01_couplers_to_xbar_AWPROT),
        .M_AXI_awqos(s01_couplers_to_xbar_AWQOS),
        .M_AXI_awready(s01_couplers_to_xbar_AWREADY),
        .M_AXI_awsize(s01_couplers_to_xbar_AWSIZE),
        .M_AXI_awvalid(s01_couplers_to_xbar_AWVALID),
        .M_AXI_bready(s01_couplers_to_xbar_BREADY),
        .M_AXI_bresp(s01_couplers_to_xbar_BRESP),
        .M_AXI_bvalid(s01_couplers_to_xbar_BVALID),
        .M_AXI_rdata(s01_couplers_to_xbar_RDATA),
        .M_AXI_rlast(s01_couplers_to_xbar_RLAST),
        .M_AXI_rready(s01_couplers_to_xbar_RREADY),
        .M_AXI_rresp(s01_couplers_to_xbar_RRESP),
        .M_AXI_rvalid(s01_couplers_to_xbar_RVALID),
        .M_AXI_wdata(s01_couplers_to_xbar_WDATA),
        .M_AXI_wlast(s01_couplers_to_xbar_WLAST),
        .M_AXI_wready(s01_couplers_to_xbar_WREADY),
        .M_AXI_wstrb(s01_couplers_to_xbar_WSTRB),
        .M_AXI_wvalid(s01_couplers_to_xbar_WVALID),
        .S01_ACLK(S01_ACLK),
        .S01_ARESETN(S01_ARESETN),
        .S01_AXI_araddr(S01_AXI_araddr),
        .S01_AXI_arburst(S01_AXI_arburst),
        .S01_AXI_arcache(S01_AXI_arcache),
        .S01_AXI_arlen(S01_AXI_arlen),
        .S01_AXI_arlock(S01_AXI_arlock),
        .S01_AXI_arprot(S01_AXI_arprot),
        .S01_AXI_arqos(S01_AXI_arqos),
        .S01_AXI_arready(S01_AXI_arready),
        .S01_AXI_arregion(S01_AXI_arregion),
        .S01_AXI_arsize(S01_AXI_arsize),
        .S01_AXI_arvalid(S01_AXI_arvalid),
        .S01_AXI_awaddr(S01_AXI_awaddr),
        .S01_AXI_awburst(S01_AXI_awburst),
        .S01_AXI_awcache(S01_AXI_awcache),
        .S01_AXI_awlen(S01_AXI_awlen),
        .S01_AXI_awlock(S01_AXI_awlock),
        .S01_AXI_awprot(S01_AXI_awprot),
        .S01_AXI_awqos(S01_AXI_awqos),
        .S01_AXI_awready(S01_AXI_awready),
        .S01_AXI_awregion(S01_AXI_awregion),
        .S01_AXI_awsize(S01_AXI_awsize),
        .S01_AXI_awvalid(S01_AXI_awvalid),
        .S01_AXI_bready(S01_AXI_bready),
        .S01_AXI_bresp(S01_AXI_bresp),
        .S01_AXI_bvalid(S01_AXI_bvalid),
        .S01_AXI_rdata(S01_AXI_rdata),
        .S01_AXI_rlast(S01_AXI_rlast),
        .S01_AXI_rready(S01_AXI_rready),
        .S01_AXI_rresp(S01_AXI_rresp),
        .S01_AXI_rvalid(S01_AXI_rvalid),
        .S01_AXI_wdata(S01_AXI_wdata),
        .S01_AXI_wlast(S01_AXI_wlast),
        .S01_AXI_wready(S01_AXI_wready),
        .S01_AXI_wstrb(S01_AXI_wstrb),
        .S01_AXI_wvalid(S01_AXI_wvalid));
  (* CHECK_LICENSE_TYPE = "bd_1_xbar_0,axi_crossbar_v2_1_16_axi_crossbar,{}" *) 
  (* CORE_GENERATION_INFO = "bd_1_xbar_0,axi_crossbar_v2_1_16_axi_crossbar,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_crossbar,x_ipVersion=2.1,x_ipCoreRevision=16,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_NUM_SLAVE_SLOTS=2,C_NUM_MASTER_SLOTS=2,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=64,C_AXI_PROTOCOL=0,C_NUM_ADDR_RANGES=1,C_M_AXI_BASE_ADDR=0x0000000044a100000000000044a00000,C_M_AXI_ADDR_WIDTH=0x0000001000000010,C_S_AXI_BASE_ID=0x0000000100000000,C_S_AXI_THREAD_ID_WIDTH=0x0000000000000000,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_M_AXI_WRITE_CONNECTIVITY=0x0000000300000003,C_M_AXI_READ_CONNECTIVITY=0x0000000300000003,C_R_REGISTER=0,C_S_AXI_SINGLE_THREAD=0x0000000000000000,C_S_AXI_WRITE_ACCEPTANCE=0x0000000200000002,C_S_AXI_READ_ACCEPTANCE=0x0000000200000002,C_M_AXI_WRITE_ISSUING=0x0000000200000002,C_M_AXI_READ_ISSUING=0x0000000200000002,C_S_AXI_ARB_PRIORITY=0x0000000000000000,C_M_AXI_SECURE=0x0000000000000000,C_CONNECTIVITY_MODE=1}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "axi_crossbar_v2_1_16_axi_crossbar,Vivado 2017.4" *) 
  bd_1_bd_1_xbar_0 xbar
       (.aclk(ACLK),
        .aresetn(ARESETN),
        .m_axi_araddr({xbar_to_m01_couplers_ARADDR,xbar_n_462,xbar_n_463,xbar_n_464,xbar_n_465,xbar_n_466,xbar_n_467,xbar_n_468,xbar_n_469,xbar_n_470,xbar_n_471,xbar_n_472,xbar_n_473,xbar_n_474,xbar_n_475,xbar_n_476,xbar_n_477,xbar_n_478,xbar_n_479,xbar_n_480,xbar_n_481,xbar_n_482,xbar_n_483,xbar_n_484,xbar_n_485,xbar_n_486,xbar_n_487,xbar_n_488,xbar_n_489,xbar_n_490,xbar_n_491,xbar_n_492,xbar_n_493}),
        .m_axi_arburst({xbar_to_m01_couplers_ARBURST,xbar_n_518,xbar_n_519}),
        .m_axi_arcache({xbar_to_m01_couplers_ARCACHE,xbar_n_526,xbar_n_527,xbar_n_528,xbar_n_529}),
        .m_axi_arid({xbar_to_m01_couplers_ARID,xbar_n_429}),
        .m_axi_arlen({xbar_to_m01_couplers_ARLEN,xbar_n_502,xbar_n_503,xbar_n_504,xbar_n_505,xbar_n_506,xbar_n_507,xbar_n_508,xbar_n_509}),
        .m_axi_arlock({xbar_to_m01_couplers_ARLOCK,xbar_n_521}),
        .m_axi_arprot({xbar_to_m01_couplers_ARPROT,xbar_n_533,xbar_n_534,xbar_n_535}),
        .m_axi_arqos({xbar_to_m01_couplers_ARQOS,xbar_n_548,xbar_n_549,xbar_n_550,xbar_n_551}),
        .m_axi_arready({xbar_to_m01_couplers_ARREADY,xbar_to_m00_couplers_ARREADY}),
        .m_axi_arregion({xbar_to_m01_couplers_ARREGION,xbar_n_540,xbar_n_541,xbar_n_542,xbar_n_543}),
        .m_axi_arsize({xbar_to_m01_couplers_ARSIZE,xbar_n_513,xbar_n_514,xbar_n_515}),
        .m_axi_arvalid({xbar_to_m01_couplers_ARVALID,xbar_n_553}),
        .m_axi_awaddr({xbar_to_m01_couplers_AWADDR,xbar_n_186,xbar_n_187,xbar_n_188,xbar_n_189,xbar_n_190,xbar_n_191,xbar_n_192,xbar_n_193,xbar_n_194,xbar_n_195,xbar_n_196,xbar_n_197,xbar_n_198,xbar_n_199,xbar_n_200,xbar_n_201,xbar_n_202,xbar_n_203,xbar_n_204,xbar_n_205,xbar_n_206,xbar_n_207,xbar_n_208,xbar_n_209,xbar_n_210,xbar_n_211,xbar_n_212,xbar_n_213,xbar_n_214,xbar_n_215,xbar_n_216,xbar_n_217}),
        .m_axi_awburst({xbar_to_m01_couplers_AWBURST,xbar_n_242,xbar_n_243}),
        .m_axi_awcache({xbar_to_m01_couplers_AWCACHE,xbar_n_250,xbar_n_251,xbar_n_252,xbar_n_253}),
        .m_axi_awid({xbar_to_m01_couplers_AWID,xbar_n_153}),
        .m_axi_awlen({xbar_to_m01_couplers_AWLEN,xbar_n_226,xbar_n_227,xbar_n_228,xbar_n_229,xbar_n_230,xbar_n_231,xbar_n_232,xbar_n_233}),
        .m_axi_awlock({xbar_to_m01_couplers_AWLOCK,xbar_n_245}),
        .m_axi_awprot({xbar_to_m01_couplers_AWPROT,xbar_n_257,xbar_n_258,xbar_n_259}),
        .m_axi_awqos({xbar_to_m01_couplers_AWQOS,xbar_n_272,xbar_n_273,xbar_n_274,xbar_n_275}),
        .m_axi_awready({xbar_to_m01_couplers_AWREADY,xbar_to_m00_couplers_AWREADY}),
        .m_axi_awregion({xbar_to_m01_couplers_AWREGION,xbar_n_264,xbar_n_265,xbar_n_266,xbar_n_267}),
        .m_axi_awsize({xbar_to_m01_couplers_AWSIZE,xbar_n_237,xbar_n_238,xbar_n_239}),
        .m_axi_awvalid({xbar_to_m01_couplers_AWVALID,xbar_n_277}),
        .m_axi_bid({xbar_to_m01_couplers_BID,xbar_to_m00_couplers_BID}),
        .m_axi_bready({xbar_to_m01_couplers_BREADY,xbar_n_427}),
        .m_axi_bresp({xbar_to_m01_couplers_BRESP,xbar_to_m00_couplers_BRESP}),
        .m_axi_bvalid({xbar_to_m01_couplers_BVALID,xbar_to_m00_couplers_BVALID}),
        .m_axi_rdata({xbar_to_m01_couplers_RDATA,xbar_to_m00_couplers_RDATA}),
        .m_axi_rid({xbar_to_m01_couplers_RID,xbar_to_m00_couplers_RID}),
        .m_axi_rlast({xbar_to_m01_couplers_RLAST,xbar_to_m00_couplers_RLAST}),
        .m_axi_rready({xbar_to_m01_couplers_RREADY,xbar_n_555}),
        .m_axi_rresp({xbar_to_m01_couplers_RRESP,xbar_to_m00_couplers_RRESP}),
        .m_axi_rvalid({xbar_to_m01_couplers_RVALID,xbar_to_m00_couplers_RVALID}),
        .m_axi_wdata({xbar_to_m01_couplers_WDATA,xbar_n_342,xbar_n_343,xbar_n_344,xbar_n_345,xbar_n_346,xbar_n_347,xbar_n_348,xbar_n_349,xbar_n_350,xbar_n_351,xbar_n_352,xbar_n_353,xbar_n_354,xbar_n_355,xbar_n_356,xbar_n_357,xbar_n_358,xbar_n_359,xbar_n_360,xbar_n_361,xbar_n_362,xbar_n_363,xbar_n_364,xbar_n_365,xbar_n_366,xbar_n_367,xbar_n_368,xbar_n_369,xbar_n_370,xbar_n_371,xbar_n_372,xbar_n_373,xbar_n_374,xbar_n_375,xbar_n_376,xbar_n_377,xbar_n_378,xbar_n_379,xbar_n_380,xbar_n_381,xbar_n_382,xbar_n_383,xbar_n_384,xbar_n_385,xbar_n_386,xbar_n_387,xbar_n_388,xbar_n_389,xbar_n_390,xbar_n_391,xbar_n_392,xbar_n_393,xbar_n_394,xbar_n_395,xbar_n_396,xbar_n_397,xbar_n_398,xbar_n_399,xbar_n_400,xbar_n_401,xbar_n_402,xbar_n_403,xbar_n_404,xbar_n_405}),
        .m_axi_wlast({xbar_to_m01_couplers_WLAST,xbar_n_423}),
        .m_axi_wready({xbar_to_m01_couplers_WREADY,xbar_to_m00_couplers_WREADY}),
        .m_axi_wstrb({xbar_to_m01_couplers_WSTRB,xbar_n_414,xbar_n_415,xbar_n_416,xbar_n_417,xbar_n_418,xbar_n_419,xbar_n_420,xbar_n_421}),
        .m_axi_wvalid({xbar_to_m01_couplers_WVALID,xbar_n_425}),
        .s_axi_araddr({s01_couplers_to_xbar_ARADDR,s00_couplers_to_xbar_ARADDR}),
        .s_axi_arburst({s01_couplers_to_xbar_ARBURST,s00_couplers_to_xbar_ARBURST}),
        .s_axi_arcache({s01_couplers_to_xbar_ARCACHE,s00_couplers_to_xbar_ARCACHE}),
        .s_axi_arid({\<const0> ,\<const0> }),
        .s_axi_arlen({s01_couplers_to_xbar_ARLEN,s00_couplers_to_xbar_ARLEN}),
        .s_axi_arlock({s01_couplers_to_xbar_ARLOCK,s00_couplers_to_xbar_ARLOCK}),
        .s_axi_arprot({s01_couplers_to_xbar_ARPROT,s00_couplers_to_xbar_ARPROT}),
        .s_axi_arqos({s01_couplers_to_xbar_ARQOS,s00_couplers_to_xbar_ARQOS}),
        .s_axi_arready({s01_couplers_to_xbar_ARREADY,xbar_n_13}),
        .s_axi_arsize({s01_couplers_to_xbar_ARSIZE,s00_couplers_to_xbar_ARSIZE}),
        .s_axi_arvalid({s01_couplers_to_xbar_ARVALID,s00_couplers_to_xbar_ARVALID}),
        .s_axi_awaddr({s01_couplers_to_xbar_AWADDR,s00_couplers_to_xbar_AWADDR}),
        .s_axi_awburst({s01_couplers_to_xbar_AWBURST,s00_couplers_to_xbar_AWBURST}),
        .s_axi_awcache({s01_couplers_to_xbar_AWCACHE,s00_couplers_to_xbar_AWCACHE}),
        .s_axi_awid({\<const0> ,\<const0> }),
        .s_axi_awlen({s01_couplers_to_xbar_AWLEN,s00_couplers_to_xbar_AWLEN}),
        .s_axi_awlock({s01_couplers_to_xbar_AWLOCK,s00_couplers_to_xbar_AWLOCK}),
        .s_axi_awprot({s01_couplers_to_xbar_AWPROT,s00_couplers_to_xbar_AWPROT}),
        .s_axi_awqos({s01_couplers_to_xbar_AWQOS,s00_couplers_to_xbar_AWQOS}),
        .s_axi_awready({s01_couplers_to_xbar_AWREADY,xbar_n_1}),
        .s_axi_awsize({s01_couplers_to_xbar_AWSIZE,s00_couplers_to_xbar_AWSIZE}),
        .s_axi_awvalid({s01_couplers_to_xbar_AWVALID,s00_couplers_to_xbar_AWVALID}),
        .s_axi_bready({s01_couplers_to_xbar_BREADY,s00_couplers_to_xbar_BREADY}),
        .s_axi_bresp({s01_couplers_to_xbar_BRESP,xbar_n_8,xbar_n_9}),
        .s_axi_bvalid({s01_couplers_to_xbar_BVALID,xbar_n_11}),
        .s_axi_rdata({s01_couplers_to_xbar_RDATA,xbar_n_80,xbar_n_81,xbar_n_82,xbar_n_83,xbar_n_84,xbar_n_85,xbar_n_86,xbar_n_87,xbar_n_88,xbar_n_89,xbar_n_90,xbar_n_91,xbar_n_92,xbar_n_93,xbar_n_94,xbar_n_95,xbar_n_96,xbar_n_97,xbar_n_98,xbar_n_99,xbar_n_100,xbar_n_101,xbar_n_102,xbar_n_103,xbar_n_104,xbar_n_105,xbar_n_106,xbar_n_107,xbar_n_108,xbar_n_109,xbar_n_110,xbar_n_111,xbar_n_112,xbar_n_113,xbar_n_114,xbar_n_115,xbar_n_116,xbar_n_117,xbar_n_118,xbar_n_119,xbar_n_120,xbar_n_121,xbar_n_122,xbar_n_123,xbar_n_124,xbar_n_125,xbar_n_126,xbar_n_127,xbar_n_128,xbar_n_129,xbar_n_130,xbar_n_131,xbar_n_132,xbar_n_133,xbar_n_134,xbar_n_135,xbar_n_136,xbar_n_137,xbar_n_138,xbar_n_139,xbar_n_140,xbar_n_141,xbar_n_142,xbar_n_143}),
        .s_axi_rlast({s01_couplers_to_xbar_RLAST,xbar_n_149}),
        .s_axi_rready({s01_couplers_to_xbar_RREADY,s00_couplers_to_xbar_RREADY}),
        .s_axi_rresp({s01_couplers_to_xbar_RRESP,xbar_n_146,xbar_n_147}),
        .s_axi_rvalid({s01_couplers_to_xbar_RVALID,xbar_n_151}),
        .s_axi_wdata({s01_couplers_to_xbar_WDATA,s00_couplers_to_xbar_WDATA}),
        .s_axi_wlast({s01_couplers_to_xbar_WLAST,s00_couplers_to_xbar_WLAST}),
        .s_axi_wready({s01_couplers_to_xbar_WREADY,xbar_n_3}),
        .s_axi_wstrb({s01_couplers_to_xbar_WSTRB,s00_couplers_to_xbar_WSTRB}),
        .s_axi_wvalid({s01_couplers_to_xbar_WVALID,s00_couplers_to_xbar_WVALID}));
endmodule

(* CHECK_LICENSE_TYPE = "bd_1_m00_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{}" *) (* CORE_GENERATION_INFO = "bd_1_m00_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=64,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=7,C_REG_CONFIG_W=1,C_REG_CONFIG_B=7,C_REG_CONFIG_AR=7,C_REG_CONFIG_R=1,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "bd_1_m00_regslice_0" *) (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
module bd_1_bd_1_m00_regslice_0
   (aclk,
    aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN bd_1_clk, ASSOCIATED_BUSIF S_AXI:M_AXI, ASSOCIATED_RESET ARESETN" *) input aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST, POLARITY ACTIVE_LOW, TYPE INTERCONNECT" *) input aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWID" *) input [0:0]s_axi_awid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [31:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLEN" *) input [7:0]s_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWSIZE" *) input [2:0]s_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWBURST" *) input [1:0]s_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLOCK" *) input [0:0]s_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWCACHE" *) input [3:0]s_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]s_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREGION" *) input [3:0]s_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWQOS" *) input [3:0]s_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [63:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [7:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WLAST" *) input s_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BID" *) output [0:0]s_axi_bid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARID" *) input [0:0]s_axi_arid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [31:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLEN" *) input [7:0]s_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARSIZE" *) input [2:0]s_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARBURST" *) input [1:0]s_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLOCK" *) input [0:0]s_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARCACHE" *) input [3:0]s_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]s_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREGION" *) input [3:0]s_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARQOS" *) input [3:0]s_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RID" *) output [0:0]s_axi_rid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [63:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RLAST" *) output s_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWID" *) output [0:0]m_axi_awid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWADDR" *) output [31:0]m_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLEN" *) output [7:0]m_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWSIZE" *) output [2:0]m_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWBURST" *) output [1:0]m_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLOCK" *) output [0:0]m_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWCACHE" *) output [3:0]m_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWPROT" *) output [2:0]m_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREGION" *) output [3:0]m_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWQOS" *) output [3:0]m_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWVALID" *) output m_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREADY" *) input m_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WDATA" *) output [63:0]m_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WSTRB" *) output [7:0]m_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WLAST" *) output m_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WVALID" *) output m_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WREADY" *) input m_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BID" *) input [0:0]m_axi_bid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BRESP" *) input [1:0]m_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BVALID" *) input m_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BREADY" *) output m_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARID" *) output [0:0]m_axi_arid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARADDR" *) output [31:0]m_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLEN" *) output [7:0]m_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARSIZE" *) output [2:0]m_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARBURST" *) output [1:0]m_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLOCK" *) output [0:0]m_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARCACHE" *) output [3:0]m_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARPROT" *) output [2:0]m_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREGION" *) output [3:0]m_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARQOS" *) output [3:0]m_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARVALID" *) output m_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREADY" *) input m_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RID" *) input [0:0]m_axi_rid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RDATA" *) input [63:0]m_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RRESP" *) input [1:0]m_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RLAST" *) input m_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RVALID" *) input m_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output m_axi_rready;

  wire aclk;
  wire aresetn;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [0:0]m_axi_arid;
  wire [7:0]m_axi_arlen;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [0:0]m_axi_awid;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire [0:0]m_axi_bid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire [0:0]m_axi_rid;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [63:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [0:0]s_axi_arid;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire s_axi_arready;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [0:0]s_axi_awid;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire [0:0]s_axi_bid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [63:0]s_axi_rdata;
  wire [0:0]s_axi_rid;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;

  bd_1_axi_register_slice_v2_1_15_axi_register_slice_35 inst
       (.D({s_axi_awregion,s_axi_awqos,s_axi_awid,s_axi_awlock,s_axi_awlen,s_axi_awcache,s_axi_awburst,s_axi_awsize,s_axi_awprot,s_axi_awaddr}),
        .\M00_AXI_0_arregion[3] ({m_axi_arregion,m_axi_arqos,m_axi_arid,m_axi_arlock,m_axi_arlen,m_axi_arcache,m_axi_arburst,m_axi_arsize,m_axi_arprot,m_axi_araddr}),
        .M00_AXI_0_wlast({m_axi_wlast,m_axi_wstrb,m_axi_wdata}),
        .Q({m_axi_awregion,m_axi_awqos,m_axi_awid,m_axi_awlock,m_axi_awlen,m_axi_awcache,m_axi_awburst,m_axi_awsize,m_axi_awprot,m_axi_awaddr}),
        .UNCONN_IN({s_axi_arregion,s_axi_arqos,s_axi_arid,s_axi_arlock,s_axi_arlen,s_axi_arcache,s_axi_arburst,s_axi_arsize,s_axi_arprot,s_axi_araddr}),
        .aclk(aclk),
        .aresetn(aresetn),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bid(m_axi_bid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rid(m_axi_rid),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bid(s_axi_bid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[67] ({s_axi_rid,s_axi_rlast,s_axi_rresp,s_axi_rdata}));
endmodule

(* CHECK_LICENSE_TYPE = "bd_1_m01_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{}" *) (* CORE_GENERATION_INFO = "bd_1_m01_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=32,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=7,C_REG_CONFIG_W=1,C_REG_CONFIG_B=7,C_REG_CONFIG_AR=7,C_REG_CONFIG_R=1,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "bd_1_m01_regslice_0" *) (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
module bd_1_bd_1_m01_regslice_0
   (aclk,
    aresetn,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN bd_1_clk, ASSOCIATED_BUSIF S_AXI:M_AXI, ASSOCIATED_RESET ARESETN" *) input aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST, POLARITY ACTIVE_LOW, TYPE INTERCONNECT" *) input aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [31:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLEN" *) input [7:0]s_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWSIZE" *) input [2:0]s_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWBURST" *) input [1:0]s_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLOCK" *) input [0:0]s_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWCACHE" *) input [3:0]s_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]s_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREGION" *) input [3:0]s_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWQOS" *) input [3:0]s_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [31:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [3:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WLAST" *) input s_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [31:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLEN" *) input [7:0]s_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARSIZE" *) input [2:0]s_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARBURST" *) input [1:0]s_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLOCK" *) input [0:0]s_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARCACHE" *) input [3:0]s_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]s_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREGION" *) input [3:0]s_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARQOS" *) input [3:0]s_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [31:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RLAST" *) output s_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWADDR" *) output [31:0]m_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLEN" *) output [7:0]m_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWSIZE" *) output [2:0]m_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWBURST" *) output [1:0]m_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLOCK" *) output [0:0]m_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWCACHE" *) output [3:0]m_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWPROT" *) output [2:0]m_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREGION" *) output [3:0]m_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWQOS" *) output [3:0]m_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWVALID" *) output m_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREADY" *) input m_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WDATA" *) output [31:0]m_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WSTRB" *) output [3:0]m_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WLAST" *) output m_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WVALID" *) output m_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WREADY" *) input m_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BRESP" *) input [1:0]m_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BVALID" *) input m_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BREADY" *) output m_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARADDR" *) output [31:0]m_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLEN" *) output [7:0]m_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARSIZE" *) output [2:0]m_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARBURST" *) output [1:0]m_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLOCK" *) output [0:0]m_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARCACHE" *) output [3:0]m_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARPROT" *) output [2:0]m_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREGION" *) output [3:0]m_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARQOS" *) output [3:0]m_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARVALID" *) output m_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREADY" *) input m_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RDATA" *) input [31:0]m_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RRESP" *) input [1:0]m_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RLAST" *) input m_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RVALID" *) input m_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output m_axi_rready;

  wire aclk;
  wire aresetn;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [7:0]m_axi_arlen;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [31:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [3:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire s_axi_arready;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [31:0]s_axi_rdata;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;

  bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized1_11 inst
       (.D({s_axi_awregion,s_axi_awqos,s_axi_awlock,s_axi_awlen,s_axi_awcache,s_axi_awburst,s_axi_awsize,s_axi_awprot,s_axi_awaddr}),
        .\M01_AXI_0_arregion[3] ({m_axi_arregion,m_axi_arqos,m_axi_arlock,m_axi_arlen,m_axi_arcache,m_axi_arburst,m_axi_arsize,m_axi_arprot,m_axi_araddr}),
        .M01_AXI_0_wlast({m_axi_wlast,m_axi_wstrb,m_axi_wdata}),
        .Q({m_axi_awregion,m_axi_awqos,m_axi_awlock,m_axi_awlen,m_axi_awcache,m_axi_awburst,m_axi_awsize,m_axi_awprot,m_axi_awaddr}),
        .\S_AXI_AREGION_Q_reg[3] ({s_axi_arregion,s_axi_arqos,s_axi_arlock,s_axi_arlen,s_axi_arcache,s_axi_arburst,s_axi_arsize,s_axi_arprot,s_axi_araddr}),
        .aclk(aclk),
        .aresetn(aresetn),
        .first_mi_word_reg({s_axi_rlast,s_axi_rresp,s_axi_rdata}),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid));
endmodule

(* CHECK_LICENSE_TYPE = "bd_1_proc_sys_reset_0_0,proc_sys_reset,{}" *) (* CORE_GENERATION_INFO = "bd_1_proc_sys_reset_0_0,proc_sys_reset,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=proc_sys_reset,x_ipVersion=5.0,x_ipCoreRevision=12,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_EXT_RST_WIDTH=4,C_AUX_RST_WIDTH=4,C_EXT_RESET_HIGH=1,C_AUX_RESET_HIGH=0,C_NUM_BUS_RST=1,C_NUM_PERP_RST=1,C_NUM_INTERCONNECT_ARESETN=1,C_NUM_PERP_ARESETN=1}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "bd_1_proc_sys_reset_0_0" *) (* X_CORE_INFO = "proc_sys_reset,Vivado 2017.4" *) 
module bd_1_bd_1_proc_sys_reset_0_0
   (slowest_sync_clk,
    ext_reset_in,
    aux_reset_in,
    mb_debug_sys_rst,
    dcm_locked,
    mb_reset,
    bus_struct_reset,
    peripheral_reset,
    interconnect_aresetn,
    peripheral_aresetn);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 clock CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME clock, ASSOCIATED_RESET mb_reset:bus_struct_reset:interconnect_aresetn:peripheral_aresetn:peripheral_reset, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN bd_1_clk" *) input slowest_sync_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ext_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ext_reset, BOARD.ASSOCIATED_PARAM RESET_BOARD_INTERFACE, POLARITY ACTIVE_HIGH" *) input ext_reset_in;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 aux_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME aux_reset, POLARITY ACTIVE_LOW" *) input aux_reset_in;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 dbg_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME dbg_reset, POLARITY ACTIVE_HIGH" *) input mb_debug_sys_rst;
  input dcm_locked;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 mb_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME mb_rst, POLARITY ACTIVE_HIGH, TYPE PROCESSOR" *) output mb_reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 bus_struct_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME bus_struct_reset, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT" *) output [0:0]bus_struct_reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 peripheral_high_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME peripheral_high_rst, POLARITY ACTIVE_HIGH, TYPE PERIPHERAL" *) output [0:0]peripheral_reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 interconnect_low_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME interconnect_low_rst, POLARITY ACTIVE_LOW, TYPE INTERCONNECT" *) output [0:0]interconnect_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 peripheral_low_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME peripheral_low_rst, POLARITY ACTIVE_LOW, TYPE PERIPHERAL" *) output [0:0]peripheral_aresetn;

  wire aux_reset_in;
  wire [0:0]bus_struct_reset;
  wire dcm_locked;
  wire ext_reset_in;
  wire [0:0]interconnect_aresetn;
  wire mb_debug_sys_rst;
  wire mb_reset;
  wire [0:0]peripheral_aresetn;
  wire [0:0]peripheral_reset;
  wire slowest_sync_clk;

  (* C_AUX_RESET_HIGH = "1'b0" *) 
  (* C_AUX_RST_WIDTH = "4" *) 
  (* C_EXT_RESET_HIGH = "1'b1" *) 
  (* C_EXT_RST_WIDTH = "4" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_NUM_BUS_RST = "1" *) 
  (* C_NUM_INTERCONNECT_ARESETN = "1" *) 
  (* C_NUM_PERP_ARESETN = "1" *) 
  (* C_NUM_PERP_RST = "1" *) 
  bd_1_proc_sys_reset U0
       (.aux_reset_in(aux_reset_in),
        .bus_struct_reset(bus_struct_reset),
        .dcm_locked(dcm_locked),
        .ext_reset_in(ext_reset_in),
        .interconnect_aresetn(interconnect_aresetn),
        .mb_debug_sys_rst(mb_debug_sys_rst),
        .mb_reset(mb_reset),
        .peripheral_aresetn(peripheral_aresetn),
        .peripheral_reset(peripheral_reset),
        .slowest_sync_clk(slowest_sync_clk));
endmodule

(* CHECK_LICENSE_TYPE = "bd_1_s00_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{}" *) (* CORE_GENERATION_INFO = "bd_1_s00_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=64,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=7,C_REG_CONFIG_W=1,C_REG_CONFIG_B=7,C_REG_CONFIG_AR=7,C_REG_CONFIG_R=1,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "bd_1_s00_regslice_0" *) (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
module bd_1_bd_1_s00_regslice_0
   (aclk,
    aresetn,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN bd_1_clk, ASSOCIATED_BUSIF S_AXI:M_AXI, ASSOCIATED_RESET ARESETN" *) input aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST, POLARITY ACTIVE_LOW, TYPE INTERCONNECT" *) input aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [31:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLEN" *) input [7:0]s_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWSIZE" *) input [2:0]s_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWBURST" *) input [1:0]s_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLOCK" *) input [0:0]s_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWCACHE" *) input [3:0]s_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]s_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREGION" *) input [3:0]s_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWQOS" *) input [3:0]s_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [63:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [7:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WLAST" *) input s_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [31:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLEN" *) input [7:0]s_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARSIZE" *) input [2:0]s_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARBURST" *) input [1:0]s_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLOCK" *) input [0:0]s_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARCACHE" *) input [3:0]s_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]s_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREGION" *) input [3:0]s_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARQOS" *) input [3:0]s_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [63:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RLAST" *) output s_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWADDR" *) output [31:0]m_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLEN" *) output [7:0]m_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWSIZE" *) output [2:0]m_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWBURST" *) output [1:0]m_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLOCK" *) output [0:0]m_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWCACHE" *) output [3:0]m_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWPROT" *) output [2:0]m_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREGION" *) output [3:0]m_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWQOS" *) output [3:0]m_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWVALID" *) output m_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREADY" *) input m_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WDATA" *) output [63:0]m_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WSTRB" *) output [7:0]m_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WLAST" *) output m_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WVALID" *) output m_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WREADY" *) input m_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BRESP" *) input [1:0]m_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BVALID" *) input m_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BREADY" *) output m_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARADDR" *) output [31:0]m_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLEN" *) output [7:0]m_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARSIZE" *) output [2:0]m_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARBURST" *) output [1:0]m_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLOCK" *) output [0:0]m_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARCACHE" *) output [3:0]m_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARPROT" *) output [2:0]m_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREGION" *) output [3:0]m_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARQOS" *) output [3:0]m_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARVALID" *) output m_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREADY" *) input m_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RDATA" *) input [63:0]m_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RRESP" *) input [1:0]m_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RLAST" *) input m_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RVALID" *) input m_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output m_axi_rready;

  wire aclk;
  wire aresetn;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [7:0]m_axi_arlen;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [63:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [7:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire s_axi_arready;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [63:0]s_axi_rdata;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [63:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [7:0]s_axi_wstrb;
  wire s_axi_wvalid;

  bd_1_axi_register_slice_v2_1_15_axi_register_slice_5 inst
       (.D({s_axi_awregion,s_axi_awqos,s_axi_awlock,s_axi_awlen,s_axi_awcache,s_axi_awburst,s_axi_awsize,s_axi_awprot,s_axi_awaddr}),
        .Q({m_axi_awregion,m_axi_awqos,m_axi_awlock,m_axi_awlen,m_axi_awcache,m_axi_awburst,m_axi_awsize,m_axi_awprot,m_axi_awaddr}),
        .\S00_AXI_0_arregion[3] ({s_axi_arregion,s_axi_arqos,s_axi_arlock,s_axi_arlen,s_axi_arcache,s_axi_arburst,s_axi_arsize,s_axi_arprot,s_axi_araddr}),
        .S00_AXI_0_rlast({s_axi_rlast,s_axi_rresp,s_axi_rdata}),
        .UNCONN_OUT({m_axi_arregion,m_axi_arqos,m_axi_arlock,m_axi_arlen,m_axi_arcache,m_axi_arburst,m_axi_arsize,m_axi_arprot,m_axi_araddr}),
        .aclk(aclk),
        .aresetn(aresetn),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .\skid_buffer_reg[72] ({m_axi_wlast,m_axi_wstrb,m_axi_wdata}));
endmodule

(* CHECK_LICENSE_TYPE = "bd_1_s01_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{}" *) (* CORE_GENERATION_INFO = "bd_1_s01_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=32,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=7,C_REG_CONFIG_W=1,C_REG_CONFIG_B=7,C_REG_CONFIG_AR=7,C_REG_CONFIG_R=1,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "bd_1_s01_regslice_0" *) (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
module bd_1_bd_1_s01_regslice_0
   (aclk,
    aresetn,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awregion,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arregion,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN bd_1_clk, ASSOCIATED_BUSIF S_AXI:M_AXI, ASSOCIATED_RESET ARESETN" *) input aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST, POLARITY ACTIVE_LOW, TYPE INTERCONNECT" *) input aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [31:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLEN" *) input [7:0]s_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWSIZE" *) input [2:0]s_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWBURST" *) input [1:0]s_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWLOCK" *) input [0:0]s_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWCACHE" *) input [3:0]s_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]s_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREGION" *) input [3:0]s_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWQOS" *) input [3:0]s_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [31:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [3:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WLAST" *) input s_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [31:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLEN" *) input [7:0]s_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARSIZE" *) input [2:0]s_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARBURST" *) input [1:0]s_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARLOCK" *) input [0:0]s_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARCACHE" *) input [3:0]s_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]s_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREGION" *) input [3:0]s_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARQOS" *) input [3:0]s_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [31:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RLAST" *) output s_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWADDR" *) output [31:0]m_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLEN" *) output [7:0]m_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWSIZE" *) output [2:0]m_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWBURST" *) output [1:0]m_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWLOCK" *) output [0:0]m_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWCACHE" *) output [3:0]m_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWPROT" *) output [2:0]m_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREGION" *) output [3:0]m_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWQOS" *) output [3:0]m_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWVALID" *) output m_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI AWREADY" *) input m_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WDATA" *) output [31:0]m_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WSTRB" *) output [3:0]m_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WLAST" *) output m_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WVALID" *) output m_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI WREADY" *) input m_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BRESP" *) input [1:0]m_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BVALID" *) input m_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI BREADY" *) output m_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARADDR" *) output [31:0]m_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLEN" *) output [7:0]m_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARSIZE" *) output [2:0]m_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARBURST" *) output [1:0]m_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARLOCK" *) output [0:0]m_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARCACHE" *) output [3:0]m_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARPROT" *) output [2:0]m_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREGION" *) output [3:0]m_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARQOS" *) output [3:0]m_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARVALID" *) output m_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI ARREADY" *) input m_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RDATA" *) input [31:0]m_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RRESP" *) input [1:0]m_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RLAST" *) input m_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RVALID" *) input m_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output m_axi_rready;

  wire aclk;
  wire aresetn;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [7:0]m_axi_arlen;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire m_axi_arready;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire m_axi_awready;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [31:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [3:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [7:0]s_axi_arlen;
  wire [0:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire s_axi_arready;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [7:0]s_axi_awlen;
  wire [0:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire s_axi_awready;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [31:0]s_axi_rdata;
  wire s_axi_rlast;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;

  bd_1_axi_register_slice_v2_1_15_axi_register_slice__parameterized1 inst
       (.D({s_axi_awregion,s_axi_awqos,s_axi_awlock,s_axi_awlen,s_axi_awcache,s_axi_awburst,s_axi_awsize,s_axi_awprot,s_axi_awaddr}),
        .Q({m_axi_awregion,m_axi_awqos,m_axi_awlock,m_axi_awlen,m_axi_awcache,m_axi_awburst,m_axi_awsize,m_axi_awprot,m_axi_awaddr}),
        .\S01_AXI_0_arregion[3] ({s_axi_arregion,s_axi_arqos,s_axi_arlock,s_axi_arlen,s_axi_arcache,s_axi_arburst,s_axi_arsize,s_axi_arprot,s_axi_araddr}),
        .S01_AXI_0_rlast({s_axi_rlast,s_axi_rresp,s_axi_rdata}),
        .\USE_RTL_CURR_WORD.first_word_q_reg ({m_axi_wlast,m_axi_wstrb,m_axi_wdata}),
        .aclk(aclk),
        .aresetn(aresetn),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .\m_payload_i_reg[61] ({m_axi_arregion,m_axi_arqos,m_axi_arlock,m_axi_arlen,m_axi_arcache,m_axi_arburst,m_axi_arsize,m_axi_arprot,m_axi_araddr}),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid));
endmodule

(* CHECK_LICENSE_TYPE = "bd_1_xbar_0,axi_crossbar_v2_1_16_axi_crossbar,{}" *) (* CORE_GENERATION_INFO = "bd_1_xbar_0,axi_crossbar_v2_1_16_axi_crossbar,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_crossbar,x_ipVersion=2.1,x_ipCoreRevision=16,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_NUM_SLAVE_SLOTS=2,C_NUM_MASTER_SLOTS=2,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=64,C_AXI_PROTOCOL=0,C_NUM_ADDR_RANGES=1,C_M_AXI_BASE_ADDR=0x0000000044a100000000000044a00000,C_M_AXI_ADDR_WIDTH=0x0000001000000010,C_S_AXI_BASE_ID=0x0000000100000000,C_S_AXI_THREAD_ID_WIDTH=0x0000000000000000,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_M_AXI_WRITE_CONNECTIVITY=0x0000000300000003,C_M_AXI_READ_CONNECTIVITY=0x0000000300000003,C_R_REGISTER=0,C_S_AXI_SINGLE_THREAD=0x0000000000000000,C_S_AXI_WRITE_ACCEPTANCE=0x0000000200000002,C_S_AXI_READ_ACCEPTANCE=0x0000000200000002,C_M_AXI_WRITE_ISSUING=0x0000000200000002,C_M_AXI_READ_ISSUING=0x0000000200000002,C_S_AXI_ARB_PRIORITY=0x0000000000000000,C_M_AXI_SECURE=0x0000000000000000,C_CONNECTIVITY_MODE=1}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
(* ORIG_REF_NAME = "bd_1_xbar_0" *) (* X_CORE_INFO = "axi_crossbar_v2_1_16_axi_crossbar,Vivado 2017.4" *) 
module bd_1_bd_1_xbar_0
   (aclk,
    aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLKIF CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLKIF, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN bd_1_clk, ASSOCIATED_BUSIF M00_AXI:M01_AXI:M02_AXI:M03_AXI:M04_AXI:M05_AXI:M06_AXI:M07_AXI:M08_AXI:M09_AXI:M10_AXI:M11_AXI:M12_AXI:M13_AXI:M14_AXI:M15_AXI:S00_AXI:S01_AXI:S02_AXI:S03_AXI:S04_AXI:S05_AXI:S06_AXI:S07_AXI:S08_AXI:S09_AXI:S10_AXI:S11_AXI:S12_AXI:S13_AXI:S14_AXI:S15_AXI, ASSOCIATED_RESET ARESETN" *) input aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RSTIF RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RSTIF, POLARITY ACTIVE_LOW, TYPE INTERCONNECT" *) input aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWID [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI AWID [0:0] [1:1]" *) input [1:0]s_axi_awid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWADDR [31:0] [31:0], xilinx.com:interface:aximm:1.0 S01_AXI AWADDR [31:0] [63:32]" *) input [63:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWLEN [7:0] [7:0], xilinx.com:interface:aximm:1.0 S01_AXI AWLEN [7:0] [15:8]" *) input [15:0]s_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWSIZE [2:0] [2:0], xilinx.com:interface:aximm:1.0 S01_AXI AWSIZE [2:0] [5:3]" *) input [5:0]s_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWBURST [1:0] [1:0], xilinx.com:interface:aximm:1.0 S01_AXI AWBURST [1:0] [3:2]" *) input [3:0]s_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWLOCK [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI AWLOCK [0:0] [1:1]" *) input [1:0]s_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWCACHE [3:0] [3:0], xilinx.com:interface:aximm:1.0 S01_AXI AWCACHE [3:0] [7:4]" *) input [7:0]s_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWPROT [2:0] [2:0], xilinx.com:interface:aximm:1.0 S01_AXI AWPROT [2:0] [5:3]" *) input [5:0]s_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWQOS [3:0] [3:0], xilinx.com:interface:aximm:1.0 S01_AXI AWQOS [3:0] [7:4]" *) input [7:0]s_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWVALID [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI AWVALID [0:0] [1:1]" *) input [1:0]s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI AWREADY [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI AWREADY [0:0] [1:1]" *) output [1:0]s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WDATA [63:0] [63:0], xilinx.com:interface:aximm:1.0 S01_AXI WDATA [63:0] [127:64]" *) input [127:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WSTRB [7:0] [7:0], xilinx.com:interface:aximm:1.0 S01_AXI WSTRB [7:0] [15:8]" *) input [15:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WLAST [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI WLAST [0:0] [1:1]" *) input [1:0]s_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WVALID [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI WVALID [0:0] [1:1]" *) input [1:0]s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI WREADY [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI WREADY [0:0] [1:1]" *) output [1:0]s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI BID [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI BID [0:0] [1:1]" *) output [1:0]s_axi_bid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI BRESP [1:0] [1:0], xilinx.com:interface:aximm:1.0 S01_AXI BRESP [1:0] [3:2]" *) output [3:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI BVALID [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI BVALID [0:0] [1:1]" *) output [1:0]s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI BREADY [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI BREADY [0:0] [1:1]" *) input [1:0]s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARID [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI ARID [0:0] [1:1]" *) input [1:0]s_axi_arid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARADDR [31:0] [31:0], xilinx.com:interface:aximm:1.0 S01_AXI ARADDR [31:0] [63:32]" *) input [63:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARLEN [7:0] [7:0], xilinx.com:interface:aximm:1.0 S01_AXI ARLEN [7:0] [15:8]" *) input [15:0]s_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARSIZE [2:0] [2:0], xilinx.com:interface:aximm:1.0 S01_AXI ARSIZE [2:0] [5:3]" *) input [5:0]s_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARBURST [1:0] [1:0], xilinx.com:interface:aximm:1.0 S01_AXI ARBURST [1:0] [3:2]" *) input [3:0]s_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARLOCK [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI ARLOCK [0:0] [1:1]" *) input [1:0]s_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARCACHE [3:0] [3:0], xilinx.com:interface:aximm:1.0 S01_AXI ARCACHE [3:0] [7:4]" *) input [7:0]s_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARPROT [2:0] [2:0], xilinx.com:interface:aximm:1.0 S01_AXI ARPROT [2:0] [5:3]" *) input [5:0]s_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARQOS [3:0] [3:0], xilinx.com:interface:aximm:1.0 S01_AXI ARQOS [3:0] [7:4]" *) input [7:0]s_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARVALID [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI ARVALID [0:0] [1:1]" *) input [1:0]s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI ARREADY [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI ARREADY [0:0] [1:1]" *) output [1:0]s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RID [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI RID [0:0] [1:1]" *) output [1:0]s_axi_rid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RDATA [63:0] [63:0], xilinx.com:interface:aximm:1.0 S01_AXI RDATA [63:0] [127:64]" *) output [127:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RRESP [1:0] [1:0], xilinx.com:interface:aximm:1.0 S01_AXI RRESP [1:0] [3:2]" *) output [3:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RLAST [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI RLAST [0:0] [1:1]" *) output [1:0]s_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RVALID [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI RVALID [0:0] [1:1]" *) output [1:0]s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S00_AXI RREADY [0:0] [0:0], xilinx.com:interface:aximm:1.0 S01_AXI RREADY [0:0] [1:1]" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S00_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, XIL_INTERFACENAME S01_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input [1:0]s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWID [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI AWID [0:0] [1:1]" *) output [1:0]m_axi_awid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWADDR [31:0] [31:0], xilinx.com:interface:aximm:1.0 M01_AXI AWADDR [31:0] [63:32]" *) output [63:0]m_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWLEN [7:0] [7:0], xilinx.com:interface:aximm:1.0 M01_AXI AWLEN [7:0] [15:8]" *) output [15:0]m_axi_awlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWSIZE [2:0] [2:0], xilinx.com:interface:aximm:1.0 M01_AXI AWSIZE [2:0] [5:3]" *) output [5:0]m_axi_awsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWBURST [1:0] [1:0], xilinx.com:interface:aximm:1.0 M01_AXI AWBURST [1:0] [3:2]" *) output [3:0]m_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWLOCK [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI AWLOCK [0:0] [1:1]" *) output [1:0]m_axi_awlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWCACHE [3:0] [3:0], xilinx.com:interface:aximm:1.0 M01_AXI AWCACHE [3:0] [7:4]" *) output [7:0]m_axi_awcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWPROT [2:0] [2:0], xilinx.com:interface:aximm:1.0 M01_AXI AWPROT [2:0] [5:3]" *) output [5:0]m_axi_awprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWREGION [3:0] [3:0], xilinx.com:interface:aximm:1.0 M01_AXI AWREGION [3:0] [7:4]" *) output [7:0]m_axi_awregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWQOS [3:0] [3:0], xilinx.com:interface:aximm:1.0 M01_AXI AWQOS [3:0] [7:4]" *) output [7:0]m_axi_awqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWVALID [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI AWVALID [0:0] [1:1]" *) output [1:0]m_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI AWREADY [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI AWREADY [0:0] [1:1]" *) input [1:0]m_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WDATA [63:0] [63:0], xilinx.com:interface:aximm:1.0 M01_AXI WDATA [63:0] [127:64]" *) output [127:0]m_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WSTRB [7:0] [7:0], xilinx.com:interface:aximm:1.0 M01_AXI WSTRB [7:0] [15:8]" *) output [15:0]m_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WLAST [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI WLAST [0:0] [1:1]" *) output [1:0]m_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WVALID [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI WVALID [0:0] [1:1]" *) output [1:0]m_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI WREADY [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI WREADY [0:0] [1:1]" *) input [1:0]m_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI BID [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI BID [0:0] [1:1]" *) input [1:0]m_axi_bid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI BRESP [1:0] [1:0], xilinx.com:interface:aximm:1.0 M01_AXI BRESP [1:0] [3:2]" *) input [3:0]m_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI BVALID [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI BVALID [0:0] [1:1]" *) input [1:0]m_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI BREADY [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI BREADY [0:0] [1:1]" *) output [1:0]m_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARID [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI ARID [0:0] [1:1]" *) output [1:0]m_axi_arid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARADDR [31:0] [31:0], xilinx.com:interface:aximm:1.0 M01_AXI ARADDR [31:0] [63:32]" *) output [63:0]m_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARLEN [7:0] [7:0], xilinx.com:interface:aximm:1.0 M01_AXI ARLEN [7:0] [15:8]" *) output [15:0]m_axi_arlen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARSIZE [2:0] [2:0], xilinx.com:interface:aximm:1.0 M01_AXI ARSIZE [2:0] [5:3]" *) output [5:0]m_axi_arsize;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARBURST [1:0] [1:0], xilinx.com:interface:aximm:1.0 M01_AXI ARBURST [1:0] [3:2]" *) output [3:0]m_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARLOCK [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI ARLOCK [0:0] [1:1]" *) output [1:0]m_axi_arlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARCACHE [3:0] [3:0], xilinx.com:interface:aximm:1.0 M01_AXI ARCACHE [3:0] [7:4]" *) output [7:0]m_axi_arcache;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARPROT [2:0] [2:0], xilinx.com:interface:aximm:1.0 M01_AXI ARPROT [2:0] [5:3]" *) output [5:0]m_axi_arprot;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARREGION [3:0] [3:0], xilinx.com:interface:aximm:1.0 M01_AXI ARREGION [3:0] [7:4]" *) output [7:0]m_axi_arregion;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARQOS [3:0] [3:0], xilinx.com:interface:aximm:1.0 M01_AXI ARQOS [3:0] [7:4]" *) output [7:0]m_axi_arqos;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARVALID [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI ARVALID [0:0] [1:1]" *) output [1:0]m_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI ARREADY [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI ARREADY [0:0] [1:1]" *) input [1:0]m_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI RID [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI RID [0:0] [1:1]" *) input [1:0]m_axi_rid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI RDATA [63:0] [63:0], xilinx.com:interface:aximm:1.0 M01_AXI RDATA [63:0] [127:64]" *) input [127:0]m_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI RRESP [1:0] [1:0], xilinx.com:interface:aximm:1.0 M01_AXI RRESP [1:0] [3:2]" *) input [3:0]m_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI RLAST [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI RLAST [0:0] [1:1]" *) input [1:0]m_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI RVALID [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI RVALID [0:0] [1:1]" *) input [1:0]m_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M00_AXI RREADY [0:0] [0:0], xilinx.com:interface:aximm:1.0 M01_AXI RREADY [0:0] [1:1]" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M00_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, XIL_INTERFACENAME M01_AXI, DATA_WIDTH 64, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.000, CLK_DOMAIN bd_1_clk, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output [1:0]m_axi_rready;

  wire \<const0> ;
  wire aclk;
  wire aresetn;
  wire [63:32]\^m_axi_araddr ;
  wire [3:2]\^m_axi_arburst ;
  wire [7:4]\^m_axi_arcache ;
  wire [0:0]\^m_axi_arid ;
  wire [7:0]\^m_axi_arlen ;
  wire [1:1]\^m_axi_arlock ;
  wire [5:3]\^m_axi_arprot ;
  wire [7:4]\^m_axi_arqos ;
  wire [1:0]m_axi_arready;
  wire [5:3]\^m_axi_arsize ;
  wire [1:0]m_axi_arvalid;
  wire [63:32]\^m_axi_awaddr ;
  wire [3:2]\^m_axi_awburst ;
  wire [7:4]\^m_axi_awcache ;
  wire [0:0]\^m_axi_awid ;
  wire [15:8]\^m_axi_awlen ;
  wire [1:1]\^m_axi_awlock ;
  wire [5:3]\^m_axi_awprot ;
  wire [7:4]\^m_axi_awqos ;
  wire [1:0]m_axi_awready;
  wire [5:3]\^m_axi_awsize ;
  wire [1:0]m_axi_awvalid;
  wire [1:0]m_axi_bid;
  wire [1:0]m_axi_bready;
  wire [3:0]m_axi_bresp;
  wire [1:0]m_axi_bvalid;
  wire [127:0]m_axi_rdata;
  wire [1:0]m_axi_rid;
  wire [1:0]m_axi_rlast;
  wire [1:0]m_axi_rready;
  wire [3:0]m_axi_rresp;
  wire [1:0]m_axi_rvalid;
  wire [127:0]m_axi_wdata;
  wire [1:0]m_axi_wlast;
  wire [1:0]m_axi_wready;
  wire [15:0]m_axi_wstrb;
  wire [1:0]m_axi_wvalid;
  wire [63:0]s_axi_araddr;
  wire [3:0]s_axi_arburst;
  wire [7:0]s_axi_arcache;
  wire [15:0]s_axi_arlen;
  wire [1:0]s_axi_arlock;
  wire [5:0]s_axi_arprot;
  wire [7:0]s_axi_arqos;
  wire [1:0]s_axi_arready;
  wire [5:0]s_axi_arsize;
  wire [1:0]s_axi_arvalid;
  wire [63:0]s_axi_awaddr;
  wire [3:0]s_axi_awburst;
  wire [7:0]s_axi_awcache;
  wire [15:0]s_axi_awlen;
  wire [1:0]s_axi_awlock;
  wire [5:0]s_axi_awprot;
  wire [7:0]s_axi_awqos;
  wire [1:0]s_axi_awready;
  wire [5:0]s_axi_awsize;
  wire [1:0]s_axi_awvalid;
  wire [1:0]s_axi_bready;
  wire [3:0]s_axi_bresp;
  wire [1:0]s_axi_bvalid;
  wire [127:0]s_axi_rdata;
  wire [1:0]s_axi_rlast;
  wire [1:0]s_axi_rready;
  wire [3:0]s_axi_rresp;
  wire [1:0]s_axi_rvalid;
  wire [127:0]s_axi_wdata;
  wire [1:0]s_axi_wlast;
  wire [1:0]s_axi_wready;
  wire [15:0]s_axi_wstrb;
  wire [1:0]s_axi_wvalid;

  assign m_axi_araddr[63:32] = \^m_axi_araddr [63:32];
  assign m_axi_araddr[31:0] = \^m_axi_araddr [63:32];
  assign m_axi_arburst[3:2] = \^m_axi_arburst [3:2];
  assign m_axi_arburst[1:0] = \^m_axi_arburst [3:2];
  assign m_axi_arcache[7:4] = \^m_axi_arcache [7:4];
  assign m_axi_arcache[3:0] = \^m_axi_arcache [7:4];
  assign m_axi_arid[1] = \^m_axi_arid [0];
  assign m_axi_arid[0] = \^m_axi_arid [0];
  assign m_axi_arlen[15:8] = \^m_axi_arlen [7:0];
  assign m_axi_arlen[7:0] = \^m_axi_arlen [7:0];
  assign m_axi_arlock[1] = \^m_axi_arlock [1];
  assign m_axi_arlock[0] = \^m_axi_arlock [1];
  assign m_axi_arprot[5:3] = \^m_axi_arprot [5:3];
  assign m_axi_arprot[2:0] = \^m_axi_arprot [5:3];
  assign m_axi_arqos[7:4] = \^m_axi_arqos [7:4];
  assign m_axi_arqos[3:0] = \^m_axi_arqos [7:4];
  assign m_axi_arregion[7] = \<const0> ;
  assign m_axi_arregion[6] = \<const0> ;
  assign m_axi_arregion[5] = \<const0> ;
  assign m_axi_arregion[4] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[5:3] = \^m_axi_arsize [5:3];
  assign m_axi_arsize[2:0] = \^m_axi_arsize [5:3];
  assign m_axi_awaddr[63:32] = \^m_axi_awaddr [63:32];
  assign m_axi_awaddr[31:0] = \^m_axi_awaddr [63:32];
  assign m_axi_awburst[3:2] = \^m_axi_awburst [3:2];
  assign m_axi_awburst[1:0] = \^m_axi_awburst [3:2];
  assign m_axi_awcache[7:4] = \^m_axi_awcache [7:4];
  assign m_axi_awcache[3:0] = \^m_axi_awcache [7:4];
  assign m_axi_awid[1] = \^m_axi_awid [0];
  assign m_axi_awid[0] = \^m_axi_awid [0];
  assign m_axi_awlen[15:8] = \^m_axi_awlen [15:8];
  assign m_axi_awlen[7:0] = \^m_axi_awlen [15:8];
  assign m_axi_awlock[1] = \^m_axi_awlock [1];
  assign m_axi_awlock[0] = \^m_axi_awlock [1];
  assign m_axi_awprot[5:3] = \^m_axi_awprot [5:3];
  assign m_axi_awprot[2:0] = \^m_axi_awprot [5:3];
  assign m_axi_awqos[7:4] = \^m_axi_awqos [7:4];
  assign m_axi_awqos[3:0] = \^m_axi_awqos [7:4];
  assign m_axi_awregion[7] = \<const0> ;
  assign m_axi_awregion[6] = \<const0> ;
  assign m_axi_awregion[5] = \<const0> ;
  assign m_axi_awregion[4] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[5:3] = \^m_axi_awsize [5:3];
  assign m_axi_awsize[2:0] = \^m_axi_awsize [5:3];
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  bd_1_axi_crossbar_v2_1_16_axi_crossbar inst
       (.M_AXI_RREADY(m_axi_rready),
        .Q({\^m_axi_awqos ,\^m_axi_awcache ,\^m_axi_awburst ,\^m_axi_awprot ,\^m_axi_awlock ,\^m_axi_awsize ,\^m_axi_awlen ,\^m_axi_awaddr ,\^m_axi_awid }),
        .\S_AXI_AQOS_Q_reg[3] ({\^m_axi_arqos ,\^m_axi_arcache ,\^m_axi_arburst ,\^m_axi_arprot ,\^m_axi_arlock ,\^m_axi_arsize ,\^m_axi_arlen ,\^m_axi_araddr ,\^m_axi_arid }),
        .aclk(aclk),
        .aresetn(aresetn),
        .\gen_arbiter.last_rr_hot_reg[0] (s_axi_arready[1]),
        .\gen_arbiter.last_rr_hot_reg[1] (s_axi_arready[0]),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bid(m_axi_bid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rid(m_axi_rid),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wvalid(m_axi_wvalid),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arburst(s_axi_arburst),
        .s_axi_arcache(s_axi_arcache),
        .s_axi_arlen(s_axi_arlen),
        .s_axi_arlock(s_axi_arlock),
        .s_axi_arprot(s_axi_arprot),
        .s_axi_arqos(s_axi_arqos),
        .s_axi_arsize(s_axi_arsize),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awburst(s_axi_awburst),
        .s_axi_awcache(s_axi_awcache),
        .s_axi_awlen(s_axi_awlen),
        .s_axi_awlock(s_axi_awlock),
        .s_axi_awprot(s_axi_awprot),
        .s_axi_awqos(s_axi_awqos),
        .s_axi_awready(s_axi_awready),
        .s_axi_awsize(s_axi_awsize),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wlast(s_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module bd_1_cdc_sync
   (lpf_exr_reg,
    scndry_out,
    lpf_exr,
    p_3_out,
    ext_reset_in,
    mb_debug_sys_rst,
    slowest_sync_clk);
  output lpf_exr_reg;
  output scndry_out;
  input lpf_exr;
  input [2:0]p_3_out;
  input ext_reset_in;
  input mb_debug_sys_rst;
  input slowest_sync_clk;

  wire \<const0> ;
  wire VCC_1;
  wire exr_d1;
  wire ext_reset_in;
  wire lpf_exr;
  wire lpf_exr_reg;
  wire mb_debug_sys_rst;
  wire [2:0]p_3_out;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;
  wire slowest_sync_clk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(slowest_sync_clk),
        .CE(VCC_1),
        .D(exr_d1),
        .Q(s_level_out_d1_cdc_to),
        .R(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_i_1 
       (.I0(ext_reset_in),
        .I1(mb_debug_sys_rst),
        .O(exr_d1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(slowest_sync_clk),
        .CE(VCC_1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(\<const0> ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(slowest_sync_clk),
        .CE(VCC_1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(\<const0> ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(slowest_sync_clk),
        .CE(VCC_1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(\<const0> ));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(VCC_1));
  LUT5 #(
    .INIT(32'hEAAAAAA8)) 
    lpf_exr_i_1
       (.I0(lpf_exr),
        .I1(p_3_out[0]),
        .I2(scndry_out),
        .I3(p_3_out[1]),
        .I4(p_3_out[2]),
        .O(lpf_exr_reg));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module bd_1_cdc_sync_0
   (lpf_asr_reg,
    scndry_out,
    lpf_asr,
    asr_lpf,
    p_1_in,
    p_2_in,
    aux_reset_in,
    slowest_sync_clk);
  output lpf_asr_reg;
  output scndry_out;
  input lpf_asr;
  input [0:0]asr_lpf;
  input p_1_in;
  input p_2_in;
  input aux_reset_in;
  input slowest_sync_clk;

  wire \<const0> ;
  wire VCC_1;
  wire asr_d1;
  wire [0:0]asr_lpf;
  wire aux_reset_in;
  wire lpf_asr;
  wire lpf_asr_reg;
  wire p_1_in;
  wire p_2_in;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;
  wire slowest_sync_clk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(slowest_sync_clk),
        .CE(VCC_1),
        .D(asr_d1),
        .Q(s_level_out_d1_cdc_to),
        .R(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_i_1__0 
       (.I0(aux_reset_in),
        .O(asr_d1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(slowest_sync_clk),
        .CE(VCC_1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(\<const0> ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(slowest_sync_clk),
        .CE(VCC_1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(\<const0> ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(slowest_sync_clk),
        .CE(VCC_1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(\<const0> ));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(VCC_1));
  LUT5 #(
    .INIT(32'hEAAAAAA8)) 
    lpf_asr_i_1
       (.I0(lpf_asr),
        .I1(asr_lpf),
        .I2(scndry_out),
        .I3(p_1_in),
        .I4(p_2_in),
        .O(lpf_asr_reg));
endmodule

(* ORIG_REF_NAME = "generic_baseblocks_v2_1_0_command_fifo" *) 
module bd_1_generic_baseblocks_v2_1_0_command_fifo
   (wrap_buffer_available_reg,
    \USE_RTL_LENGTH.first_mi_word_q_reg ,
    SR,
    wrap_buffer_available_reg_0,
    s_axi_wready,
    Q,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_0 ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 ,
    pop_si_data,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] ,
    E,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] ,
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] ,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] ,
    D,
    \USE_RTL_CURR_WORD.current_word_q_reg[2] ,
    s_ready_i_reg,
    cmd_push_block0,
    m_axi_awvalid,
    \USE_REGISTER.M_AXI_WVALID_q_reg ,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    clk,
    s_axi_wlast,
    out,
    wrap_buffer_available,
    m_axi_wready,
    \USE_REGISTER.M_AXI_WVALID_q_reg_0 ,
    wstrb_wrap_buffer_7,
    wstrb_wrap_buffer_6,
    wstrb_wrap_buffer_5,
    wstrb_wrap_buffer_4,
    wstrb_wrap_buffer_3,
    wstrb_wrap_buffer_2,
    wstrb_wrap_buffer_1,
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] ,
    s_axi_wvalid,
    s_axi_wstrb,
    \USE_REGISTER.M_AXI_WVALID_q_reg_1 ,
    \USE_RTL_CURR_WORD.current_word_q_reg[2]_0 ,
    cmd_push_block,
    sr_awvalid,
    \USE_RTL_LENGTH.length_counter_q_reg[3] ,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19]_0 ,
    \USE_RTL_LENGTH.length_counter_q_reg[2] ,
    \USE_RTL_CURR_WORD.current_word_q_reg[2]_1 ,
    \USE_RTL_LENGTH.length_counter_q_reg[0] ,
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[2] ,
    \USE_RTL_CURR_WORD.first_word_q ,
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ,
    \USE_RTL_CURR_WORD.pre_next_word_q_reg[1] ,
    m_axi_awready,
    in);
  output wrap_buffer_available_reg;
  output \USE_RTL_LENGTH.first_mi_word_q_reg ;
  output [0:0]SR;
  output wrap_buffer_available_reg_0;
  output s_axi_wready;
  output [14:0]Q;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 ;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 ;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 ;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_0 ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 ;
  output pop_si_data;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] ;
  output \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] ;
  output [0:0]E;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] ;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] ;
  output [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] ;
  output [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] ;
  output \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] ;
  output [2:0]D;
  output [2:0]\USE_RTL_CURR_WORD.current_word_q_reg[2] ;
  output s_ready_i_reg;
  output cmd_push_block0;
  output m_axi_awvalid;
  output \USE_REGISTER.M_AXI_WVALID_q_reg ;
  input \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  input clk;
  input s_axi_wlast;
  input out;
  input wrap_buffer_available;
  input m_axi_wready;
  input \USE_REGISTER.M_AXI_WVALID_q_reg_0 ;
  input wstrb_wrap_buffer_7;
  input wstrb_wrap_buffer_6;
  input wstrb_wrap_buffer_5;
  input wstrb_wrap_buffer_4;
  input wstrb_wrap_buffer_3;
  input wstrb_wrap_buffer_2;
  input wstrb_wrap_buffer_1;
  input \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] ;
  input s_axi_wvalid;
  input [3:0]s_axi_wstrb;
  input \USE_REGISTER.M_AXI_WVALID_q_reg_1 ;
  input [2:0]\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 ;
  input cmd_push_block;
  input sr_awvalid;
  input \USE_RTL_LENGTH.length_counter_q_reg[3] ;
  input \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19]_0 ;
  input \USE_RTL_LENGTH.length_counter_q_reg[2] ;
  input \USE_RTL_CURR_WORD.current_word_q_reg[2]_1 ;
  input \USE_RTL_LENGTH.length_counter_q_reg[0] ;
  input [2:0]\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] ;
  input \USE_RTL_CURR_WORD.first_word_q ;
  input \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ;
  input \USE_RTL_CURR_WORD.pre_next_word_q_reg[1] ;
  input m_axi_awready;
  input [27:0]in;

  wire \<const1> ;
  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire [2:0]D;
  wire [0:0]E;
  wire [14:0]Q;
  wire [0:0]SR;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19]_0 ;
  wire \USE_REGISTER.M_AXI_WVALID_q_i_2_n_0 ;
  wire \USE_REGISTER.M_AXI_WVALID_q_i_3_n_0 ;
  wire \USE_REGISTER.M_AXI_WVALID_q_i_4_n_0 ;
  wire \USE_REGISTER.M_AXI_WVALID_q_reg ;
  wire \USE_REGISTER.M_AXI_WVALID_q_reg_0 ;
  wire \USE_REGISTER.M_AXI_WVALID_q_reg_1 ;
  wire \USE_RTL_ADDR.addr_q ;
  wire \USE_RTL_ADDR.addr_q[0]_i_1_n_0 ;
  wire \USE_RTL_ADDR.addr_q[1]_i_1_n_0 ;
  wire \USE_RTL_ADDR.addr_q[2]_i_1_n_0 ;
  wire \USE_RTL_ADDR.addr_q[3]_i_1_n_0 ;
  wire \USE_RTL_ADDR.addr_q[4]_i_2_n_0 ;
  wire \USE_RTL_ADDR.addr_q[4]_i_3_n_0 ;
  wire [4:0]\USE_RTL_ADDR.addr_q_reg__0 ;
  wire [2:0]\USE_RTL_CURR_WORD.current_word_q_reg[2] ;
  wire [2:0]\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 ;
  wire \USE_RTL_CURR_WORD.current_word_q_reg[2]_1 ;
  wire \USE_RTL_CURR_WORD.first_word_q ;
  wire \USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ;
  wire \USE_RTL_CURR_WORD.pre_next_word_q[2]_i_3_n_0 ;
  wire \USE_RTL_CURR_WORD.pre_next_word_q_reg[1] ;
  wire [2:0]\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] ;
  wire \USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][0]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][10]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][11]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][12]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][13]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][16]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][17]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][18]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][19]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][1]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][20]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][21]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][22]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][23]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][24]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][25]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][26]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][27]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][28]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][29]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][2]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][3]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][4]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][5]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][6]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][7]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][8]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][9]_srl32_n_0 ;
  wire \USE_RTL_LENGTH.first_mi_word_q_i_2_n_0 ;
  wire \USE_RTL_LENGTH.first_mi_word_q_i_5_n_0 ;
  wire \USE_RTL_LENGTH.first_mi_word_q_i_6_n_0 ;
  wire \USE_RTL_LENGTH.first_mi_word_q_reg ;
  wire \USE_RTL_LENGTH.length_counter_q_reg[0] ;
  wire \USE_RTL_LENGTH.length_counter_q_reg[2] ;
  wire \USE_RTL_LENGTH.length_counter_q_reg[3] ;
  wire \USE_RTL_VALID_WRITE.buffer_Full_q ;
  wire \USE_RTL_VALID_WRITE.buffer_Full_q_i_1_n_0 ;
  wire \USE_RTL_VALID_WRITE.buffer_Full_q_i_2_n_0 ;
  wire \USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst/wrap_buffer_available0 ;
  wire \USE_WRITE.wr_cmd_complete_wrap ;
  wire [1:0]\USE_WRITE.wr_cmd_first_word ;
  wire [2:0]\USE_WRITE.wr_cmd_mask ;
  wire [0:0]\USE_WRITE.wr_cmd_next_word ;
  wire [2:2]\USE_WRITE.wr_cmd_offset ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 ;
  wire \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] ;
  wire [0:0]\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_11_n_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_7_n_0 ;
  wire [0:0]\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 ;
  wire \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] ;
  wire clk;
  wire [1:0]cmd_last_word;
  wire cmd_push_block;
  wire cmd_push_block0;
  wire [2:0]cmd_step;
  wire data_Exists_I;
  wire data_Exists_I_i_2_n_0;
  wire [27:0]in;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire m_axi_wready;
  wire next_Data_Exists;
  wire out;
  wire pop_si_data;
  wire s_axi_wlast;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire s_ready_i_reg;
  wire sr_awvalid;
  wire valid_Write;
  wire wrap_buffer_available;
  wire wrap_buffer_available_reg;
  wire wrap_buffer_available_reg_0;
  wire wstrb_wrap_buffer_1;
  wire wstrb_wrap_buffer_2;
  wire wstrb_wrap_buffer_3;
  wire wstrb_wrap_buffer_4;
  wire wstrb_wrap_buffer_5;
  wire wstrb_wrap_buffer_6;
  wire wstrb_wrap_buffer_7;

  LUT3 #(
    .INIT(8'h8F)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1 
       (.I0(s_axi_wlast),
        .I1(\USE_RTL_LENGTH.first_mi_word_q_reg ),
        .I2(wrap_buffer_available_reg),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[0] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][0]_srl32_n_0 ),
        .Q(Q[0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[10] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][10]_srl32_n_0 ),
        .Q(cmd_step[2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[11] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][11]_srl32_n_0 ),
        .Q(\USE_WRITE.wr_cmd_mask [0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[12] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][12]_srl32_n_0 ),
        .Q(\USE_WRITE.wr_cmd_mask [1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][13]_srl32_n_0 ),
        .Q(\USE_WRITE.wr_cmd_mask [2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][16]_srl32_n_0 ),
        .Q(\USE_WRITE.wr_cmd_offset ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[17] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][17]_srl32_n_0 ),
        .Q(cmd_last_word[0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[18] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_n_0 ),
        .Q(cmd_last_word[1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][19]_srl32_n_0 ),
        .Q(Q[8]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[1] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][1]_srl32_n_0 ),
        .Q(Q[1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[20] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][20]_srl32_n_0 ),
        .Q(\USE_WRITE.wr_cmd_next_word ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[21] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][21]_srl32_n_0 ),
        .Q(Q[9]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[22] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][22]_srl32_n_0 ),
        .Q(Q[10]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[23] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][23]_srl32_n_0 ),
        .Q(\USE_WRITE.wr_cmd_first_word [0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[24] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][24]_srl32_n_0 ),
        .Q(\USE_WRITE.wr_cmd_first_word [1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][25]_srl32_n_0 ),
        .Q(Q[11]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[26] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][26]_srl32_n_0 ),
        .Q(Q[12]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[27] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][27]_srl32_n_0 ),
        .Q(\USE_WRITE.wr_cmd_complete_wrap ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][28]_srl32_n_0 ),
        .Q(Q[13]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][29]_srl32_n_0 ),
        .Q(Q[14]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[2] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][2]_srl32_n_0 ),
        .Q(Q[2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[3] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][3]_srl32_n_0 ),
        .Q(Q[3]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[4] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][4]_srl32_n_0 ),
        .Q(Q[4]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[5] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][5]_srl32_n_0 ),
        .Q(Q[5]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[6] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][6]_srl32_n_0 ),
        .Q(Q[6]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[7] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][7]_srl32_n_0 ),
        .Q(Q[7]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[8] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][8]_srl32_n_0 ),
        .Q(cmd_step[0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[9] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][9]_srl32_n_0 ),
        .Q(cmd_step[1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_VALID_Q_reg 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .D(data_Exists_I),
        .Q(wrap_buffer_available_reg),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT6 #(
    .INIT(64'h8000FFFF80008000)) 
    \USE_REGISTER.M_AXI_WVALID_q_i_1 
       (.I0(wrap_buffer_available_reg),
        .I1(\USE_REGISTER.M_AXI_WVALID_q_i_2_n_0 ),
        .I2(\USE_REGISTER.M_AXI_WVALID_q_i_3_n_0 ),
        .I3(s_axi_wvalid),
        .I4(m_axi_wready),
        .I5(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .O(\USE_REGISTER.M_AXI_WVALID_q_reg ));
  LUT6 #(
    .INIT(64'hAAAAAAABAAAAAAAA)) 
    \USE_REGISTER.M_AXI_WVALID_q_i_2 
       (.I0(\USE_RTL_LENGTH.first_mi_word_q_i_6_n_0 ),
        .I1(\USE_RTL_LENGTH.first_mi_word_q_i_5_n_0 ),
        .I2(\USE_REGISTER.M_AXI_WVALID_q_i_4_n_0 ),
        .I3(\USE_RTL_LENGTH.length_counter_q_reg[2] ),
        .I4(\USE_RTL_LENGTH.length_counter_q_reg[3] ),
        .I5(\USE_RTL_LENGTH.first_mi_word_q_i_2_n_0 ),
        .O(\USE_REGISTER.M_AXI_WVALID_q_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair698" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    \USE_REGISTER.M_AXI_WVALID_q_i_3 
       (.I0(wrap_buffer_available),
        .I1(Q[12]),
        .I2(wrap_buffer_available_reg),
        .O(\USE_REGISTER.M_AXI_WVALID_q_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h2220222A)) 
    \USE_REGISTER.M_AXI_WVALID_q_i_4 
       (.I0(Q[8]),
        .I1(Q[11]),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[14]),
        .I4(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .O(\USE_REGISTER.M_AXI_WVALID_q_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair696" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \USE_RTL_ADDR.addr_q[0]_i_1 
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .O(\USE_RTL_ADDR.addr_q[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAA9A55555565)) 
    \USE_RTL_ADDR.addr_q[1]_i_1 
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I1(cmd_push_block),
        .I2(sr_awvalid),
        .I3(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .I5(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .O(\USE_RTL_ADDR.addr_q[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair696" *) 
  LUT5 #(
    .INIT(32'hBF40F40B)) 
    \USE_RTL_ADDR.addr_q[2]_i_1 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .I1(valid_Write),
        .I2(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I3(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .I4(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .O(\USE_RTL_ADDR.addr_q[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hDFFF2000FFBA0045)) 
    \USE_RTL_ADDR.addr_q[3]_i_1 
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .I2(valid_Write),
        .I3(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I4(\USE_RTL_ADDR.addr_q_reg__0 [3]),
        .I5(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .O(\USE_RTL_ADDR.addr_q[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h80808080800C8080)) 
    \USE_RTL_ADDR.addr_q[4]_i_1 
       (.I0(data_Exists_I_i_2_n_0),
        .I1(data_Exists_I),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .I3(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I4(sr_awvalid),
        .I5(cmd_push_block),
        .O(\USE_RTL_ADDR.addr_q ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAA9)) 
    \USE_RTL_ADDR.addr_q[4]_i_2 
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [4]),
        .I1(\USE_RTL_ADDR.addr_q_reg__0 [3]),
        .I2(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .I3(\USE_RTL_ADDR.addr_q[4]_i_3_n_0 ),
        .I4(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I5(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .O(\USE_RTL_ADDR.addr_q[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000040004000400)) 
    \USE_RTL_ADDR.addr_q[4]_i_3 
       (.I0(cmd_push_block),
        .I1(sr_awvalid),
        .I2(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I3(wrap_buffer_available_reg),
        .I4(\USE_RTL_LENGTH.first_mi_word_q_reg ),
        .I5(s_axi_wlast),
        .O(\USE_RTL_ADDR.addr_q[4]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_ADDR.addr_q_reg[0] 
       (.C(clk),
        .CE(\USE_RTL_ADDR.addr_q ),
        .D(\USE_RTL_ADDR.addr_q[0]_i_1_n_0 ),
        .Q(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_ADDR.addr_q_reg[1] 
       (.C(clk),
        .CE(\USE_RTL_ADDR.addr_q ),
        .D(\USE_RTL_ADDR.addr_q[1]_i_1_n_0 ),
        .Q(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_ADDR.addr_q_reg[2] 
       (.C(clk),
        .CE(\USE_RTL_ADDR.addr_q ),
        .D(\USE_RTL_ADDR.addr_q[2]_i_1_n_0 ),
        .Q(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_ADDR.addr_q_reg[3] 
       (.C(clk),
        .CE(\USE_RTL_ADDR.addr_q ),
        .D(\USE_RTL_ADDR.addr_q[3]_i_1_n_0 ),
        .Q(\USE_RTL_ADDR.addr_q_reg__0 [3]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_ADDR.addr_q_reg[4] 
       (.C(clk),
        .CE(\USE_RTL_ADDR.addr_q ),
        .D(\USE_RTL_ADDR.addr_q[4]_i_2_n_0 ),
        .Q(\USE_RTL_ADDR.addr_q_reg__0 [4]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT5 #(
    .INIT(32'h888A8880)) 
    \USE_RTL_CURR_WORD.current_word_q[0]_i_1 
       (.I0(\USE_WRITE.wr_cmd_mask [0]),
        .I1(\USE_WRITE.wr_cmd_next_word ),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[14]),
        .I4(\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] [0]),
        .O(\USE_RTL_CURR_WORD.current_word_q_reg[2] [0]));
  LUT5 #(
    .INIT(32'h888A8880)) 
    \USE_RTL_CURR_WORD.current_word_q[1]_i_1 
       (.I0(\USE_WRITE.wr_cmd_mask [1]),
        .I1(Q[9]),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[14]),
        .I4(\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] [1]),
        .O(\USE_RTL_CURR_WORD.current_word_q_reg[2] [1]));
  LUT5 #(
    .INIT(32'h888A8880)) 
    \USE_RTL_CURR_WORD.current_word_q[2]_i_1 
       (.I0(\USE_WRITE.wr_cmd_mask [2]),
        .I1(Q[10]),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[14]),
        .I4(\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] [2]),
        .O(\USE_RTL_CURR_WORD.current_word_q_reg[2] [2]));
  LUT6 #(
    .INIT(64'h8088888880888088)) 
    \USE_RTL_CURR_WORD.first_word_q_i_1 
       (.I0(s_axi_wvalid),
        .I1(wrap_buffer_available_reg),
        .I2(m_axi_wready),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .I4(wrap_buffer_available),
        .I5(Q[12]),
        .O(pop_si_data));
  LUT6 #(
    .INIT(64'h0002AAA2AAA80008)) 
    \USE_RTL_CURR_WORD.pre_next_word_q[0]_i_1 
       (.I0(\USE_WRITE.wr_cmd_mask [0]),
        .I1(\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] [0]),
        .I2(Q[14]),
        .I3(\USE_RTL_CURR_WORD.first_word_q ),
        .I4(\USE_WRITE.wr_cmd_next_word ),
        .I5(cmd_step[0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h8882228222288828)) 
    \USE_RTL_CURR_WORD.pre_next_word_q[1]_i_1 
       (.I0(\USE_WRITE.wr_cmd_mask [1]),
        .I1(cmd_step[1]),
        .I2(Q[9]),
        .I3(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ),
        .I4(\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] [1]),
        .I5(\USE_RTL_CURR_WORD.pre_next_word_q[2]_i_3_n_0 ),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair697" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2 
       (.I0(Q[14]),
        .I1(\USE_RTL_CURR_WORD.first_word_q ),
        .O(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2882828228282882)) 
    \USE_RTL_CURR_WORD.pre_next_word_q[2]_i_1 
       (.I0(\USE_WRITE.wr_cmd_mask [2]),
        .I1(cmd_step[2]),
        .I2(\USE_RTL_CURR_WORD.pre_next_word_q_reg[2]_0 ),
        .I3(cmd_step[1]),
        .I4(\USE_RTL_CURR_WORD.pre_next_word_q[2]_i_3_n_0 ),
        .I5(\USE_RTL_CURR_WORD.pre_next_word_q_reg[1] ),
        .O(D[2]));
  LUT5 #(
    .INIT(32'h888A8880)) 
    \USE_RTL_CURR_WORD.pre_next_word_q[2]_i_3 
       (.I0(cmd_step[0]),
        .I1(\USE_WRITE.wr_cmd_next_word ),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[14]),
        .I4(\USE_RTL_CURR_WORD.pre_next_word_q_reg[2] [0]),
        .O(\USE_RTL_CURR_WORD.pre_next_word_q[2]_i_3_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][0]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[0]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][0]_srl32_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \USE_RTL_FIFO.data_srl_reg[31][0]_srl32_i_1 
       (.I0(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I1(sr_awvalid),
        .I2(cmd_push_block),
        .O(valid_Write));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][10]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][10]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[10]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][10]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][11]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][11]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[11]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][11]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][12]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][12]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[12]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][12]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][13]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][13]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[13]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][13]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][16]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][16]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[14]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][16]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][17]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][17]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[15]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][17]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][18]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][18]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[16]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][19]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][19]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[17]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][19]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][1]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[1]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][1]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][20]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][20]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[18]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][20]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][21]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][21]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[19]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][21]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][22]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][22]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[20]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][22]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][23]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][23]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[21]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][23]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][24]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][24]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[22]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][24]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][25]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][25]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[23]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][25]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][26]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][26]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[24]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][26]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][27]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][27]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[25]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][27]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][28]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][28]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[26]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][28]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][29]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][29]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[27]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][29]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][2]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[2]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][2]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][3]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[3]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][3]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][4]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][4]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[4]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][4]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][5]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][5]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[5]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][5]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][6]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][6]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[6]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][6]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][7]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][7]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[7]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][7]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][8]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][8]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[8]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][8]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_WRITE.write_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][9]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][9]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[9]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][9]_srl32_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF000200000000)) 
    \USE_RTL_LENGTH.first_mi_word_q_i_1 
       (.I0(\USE_RTL_LENGTH.first_mi_word_q_i_2_n_0 ),
        .I1(\USE_RTL_LENGTH.length_counter_q_reg[3] ),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19]_0 ),
        .I3(\USE_RTL_LENGTH.first_mi_word_q_i_5_n_0 ),
        .I4(\USE_RTL_LENGTH.first_mi_word_q_i_6_n_0 ),
        .I5(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .O(\USE_RTL_LENGTH.first_mi_word_q_reg ));
  LUT6 #(
    .INIT(64'hB8470000B847B847)) 
    \USE_RTL_LENGTH.first_mi_word_q_i_2 
       (.I0(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [0]),
        .I1(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ),
        .I2(\USE_WRITE.wr_cmd_first_word [0]),
        .I3(cmd_last_word[0]),
        .I4(Q[8]),
        .I5(\USE_RTL_CURR_WORD.current_word_q_reg[2]_1 ),
        .O(\USE_RTL_LENGTH.first_mi_word_q_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair697" *) 
  LUT5 #(
    .INIT(32'h6665666A)) 
    \USE_RTL_LENGTH.first_mi_word_q_i_5 
       (.I0(cmd_last_word[1]),
        .I1(\USE_WRITE.wr_cmd_first_word [1]),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[14]),
        .I4(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [1]),
        .O(\USE_RTL_LENGTH.first_mi_word_q_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0001FFFF)) 
    \USE_RTL_LENGTH.first_mi_word_q_i_6 
       (.I0(\USE_RTL_CURR_WORD.current_word_q_reg[2] [2]),
        .I1(\USE_RTL_CURR_WORD.current_word_q_reg[2] [1]),
        .I2(\USE_WRITE.wr_cmd_complete_wrap ),
        .I3(\USE_RTL_CURR_WORD.current_word_q_reg[2] [0]),
        .I4(Q[13]),
        .I5(Q[14]),
        .O(\USE_RTL_LENGTH.first_mi_word_q_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h00FFFFFF00040000)) 
    \USE_RTL_VALID_WRITE.buffer_Full_q_i_1 
       (.I0(cmd_push_block),
        .I1(sr_awvalid),
        .I2(\USE_RTL_VALID_WRITE.buffer_Full_q_i_2_n_0 ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .I4(data_Exists_I),
        .I5(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .O(\USE_RTL_VALID_WRITE.buffer_Full_q_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair699" *) 
  LUT5 #(
    .INIT(32'hFF7FFFFF)) 
    \USE_RTL_VALID_WRITE.buffer_Full_q_i_2 
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .I1(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .I2(\USE_RTL_ADDR.addr_q_reg__0 [4]),
        .I3(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I4(\USE_RTL_ADDR.addr_q_reg__0 [3]),
        .O(\USE_RTL_VALID_WRITE.buffer_Full_q_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_VALID_WRITE.buffer_Full_q_reg 
       (.C(clk),
        .CE(\<const1> ),
        .D(\USE_RTL_VALID_WRITE.buffer_Full_q_i_1_n_0 ),
        .Q(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  VCC VCC
       (.P(\<const1> ));
  LUT5 #(
    .INIT(32'hFFF4F4F4)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_1 
       (.I0(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ),
        .I1(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wstrb_wrap_buffer_q_reg[0] ),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .I4(m_axi_wready),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair703" *) 
  LUT4 #(
    .INIT(16'h8F00)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[7]_i_3 
       (.I0(s_axi_wstrb[0]),
        .I1(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I2(Q[13]),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7]_1 ));
  LUT6 #(
    .INIT(64'h0002220200000000)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[0]_i_2 
       (.I0(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .I1(\USE_WRITE.wr_cmd_offset ),
        .I2(Q[11]),
        .I3(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ),
        .I4(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .I5(s_axi_wstrb[0]),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[0] ));
  LUT4 #(
    .INIT(16'h80FF)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_1 
       (.I0(\USE_RTL_LENGTH.first_mi_word_q_reg ),
        .I1(s_axi_wlast),
        .I2(wrap_buffer_available_reg),
        .I3(out),
        .O(SR));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_2 
       (.I0(wrap_buffer_available),
        .I1(Q[12]),
        .I2(wrap_buffer_available_reg),
        .I3(s_axi_wvalid),
        .I4(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I5(s_axi_wstrb[0]),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[7] ));
  LUT5 #(
    .INIT(32'h11101115)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3 
       (.I0(\USE_WRITE.wr_cmd_offset ),
        .I1(Q[11]),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[14]),
        .I4(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFF4F4F4)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_1 
       (.I0(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ),
        .I1(wstrb_wrap_buffer_1),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .I4(m_axi_wready),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15] ));
  (* SOFT_HLUTNM = "soft_lutpair700" *) 
  LUT4 #(
    .INIT(16'hD500)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[15]_i_3 
       (.I0(Q[13]),
        .I1(s_axi_wstrb[1]),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[15]_0 ));
  LUT6 #(
    .INIT(64'h0002220200000000)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[1]_i_2 
       (.I0(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .I1(\USE_WRITE.wr_cmd_offset ),
        .I2(Q[11]),
        .I3(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ),
        .I4(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .I5(s_axi_wstrb[1]),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[1] ));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q[15]_i_1 
       (.I0(wrap_buffer_available),
        .I1(Q[12]),
        .I2(wrap_buffer_available_reg),
        .I3(s_axi_wvalid),
        .I4(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I5(s_axi_wstrb[1]),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[15] ));
  LUT5 #(
    .INIT(32'hFFF4F4F4)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_1 
       (.I0(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ),
        .I1(wstrb_wrap_buffer_2),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .I4(m_axi_wready),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23] ));
  (* SOFT_HLUTNM = "soft_lutpair701" *) 
  LUT4 #(
    .INIT(16'hD500)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[23]_i_3 
       (.I0(Q[13]),
        .I1(s_axi_wstrb[2]),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[23]_0 ));
  LUT6 #(
    .INIT(64'h0002220200000000)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[2]_i_2 
       (.I0(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .I1(\USE_WRITE.wr_cmd_offset ),
        .I2(Q[11]),
        .I3(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ),
        .I4(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .I5(s_axi_wstrb[2]),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[2] ));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q[23]_i_1 
       (.I0(wrap_buffer_available),
        .I1(Q[12]),
        .I2(wrap_buffer_available_reg),
        .I3(s_axi_wvalid),
        .I4(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I5(s_axi_wstrb[2]),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[23] ));
  LUT5 #(
    .INIT(32'hFFF4F4F4)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_1 
       (.I0(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ),
        .I1(wstrb_wrap_buffer_3),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .I4(m_axi_wready),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31] ));
  (* SOFT_HLUTNM = "soft_lutpair702" *) 
  LUT4 #(
    .INIT(16'hD500)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[31]_i_3 
       (.I0(Q[13]),
        .I1(s_axi_wstrb[3]),
        .I2(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[31]_0 ));
  LUT6 #(
    .INIT(64'h0002220200000000)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[3]_i_2 
       (.I0(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .I1(\USE_WRITE.wr_cmd_offset ),
        .I2(Q[11]),
        .I3(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ),
        .I4(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .I5(s_axi_wstrb[3]),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[3] ));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    \WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q[31]_i_1 
       (.I0(wrap_buffer_available),
        .I1(Q[12]),
        .I2(wrap_buffer_available_reg),
        .I3(s_axi_wvalid),
        .I4(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I5(s_axi_wstrb[3]),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q_reg[31] ));
  LUT5 #(
    .INIT(32'hFFF4F4F4)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_1 
       (.I0(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ),
        .I1(wstrb_wrap_buffer_4),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .I4(m_axi_wready),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39] ));
  (* SOFT_HLUTNM = "soft_lutpair703" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[39]_i_3 
       (.I0(Q[13]),
        .I1(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I2(s_axi_wstrb[0]),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[39]_0 ));
  LUT6 #(
    .INIT(64'h8888888080808880)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[4]_i_2 
       (.I0(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .I1(s_axi_wstrb[0]),
        .I2(\USE_WRITE.wr_cmd_offset ),
        .I3(Q[11]),
        .I4(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ),
        .I5(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[4] ));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[39]_i_1 
       (.I0(wrap_buffer_available),
        .I1(Q[12]),
        .I2(wrap_buffer_available_reg),
        .I3(s_axi_wvalid),
        .I4(s_axi_wstrb[0]),
        .I5(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q_reg[39] ));
  LUT5 #(
    .INIT(32'hFFF4F4F4)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_1 
       (.I0(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ),
        .I1(wstrb_wrap_buffer_5),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .I4(m_axi_wready),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47] ));
  (* SOFT_HLUTNM = "soft_lutpair700" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[47]_i_3 
       (.I0(Q[13]),
        .I1(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I2(s_axi_wstrb[1]),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[47]_0 ));
  LUT6 #(
    .INIT(64'h8888888080808880)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[5]_i_2 
       (.I0(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .I1(s_axi_wstrb[1]),
        .I2(\USE_WRITE.wr_cmd_offset ),
        .I3(Q[11]),
        .I4(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ),
        .I5(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[5] ));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q[47]_i_1 
       (.I0(wrap_buffer_available),
        .I1(Q[12]),
        .I2(wrap_buffer_available_reg),
        .I3(s_axi_wvalid),
        .I4(s_axi_wstrb[1]),
        .I5(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[1].USE_RTL_DATA.wdata_wrap_buffer_q_reg[47] ));
  LUT5 #(
    .INIT(32'hFFF4F4F4)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_1 
       (.I0(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ),
        .I1(wstrb_wrap_buffer_6),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .I4(m_axi_wready),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55] ));
  (* SOFT_HLUTNM = "soft_lutpair701" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[55]_i_3 
       (.I0(Q[13]),
        .I1(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I2(s_axi_wstrb[2]),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[55]_0 ));
  LUT6 #(
    .INIT(64'h8888888080808880)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[6]_i_2 
       (.I0(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .I1(s_axi_wstrb[2]),
        .I2(\USE_WRITE.wr_cmd_offset ),
        .I3(Q[11]),
        .I4(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ),
        .I5(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[6] ));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q[55]_i_1 
       (.I0(wrap_buffer_available),
        .I1(Q[12]),
        .I2(wrap_buffer_available_reg),
        .I3(s_axi_wvalid),
        .I4(s_axi_wstrb[2]),
        .I5(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[2].USE_RTL_DATA.wdata_wrap_buffer_q_reg[55] ));
  LUT6 #(
    .INIT(64'hFFFFFFFFBFFFFFBF)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_10 
       (.I0(\USE_RTL_LENGTH.length_counter_q_reg[0] ),
        .I1(Q[13]),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_11_n_0 ),
        .I3(Q[8]),
        .I4(\USE_RTL_CURR_WORD.current_word_q_reg[2]_1 ),
        .I5(\USE_RTL_LENGTH.first_mi_word_q_i_5_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[0] ));
  LUT5 #(
    .INIT(32'h999A9995)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_11 
       (.I0(cmd_last_word[0]),
        .I1(\USE_WRITE.wr_cmd_first_word [0]),
        .I2(\USE_RTL_CURR_WORD.first_word_q ),
        .I3(Q[14]),
        .I4(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [0]),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_11_n_0 ));
  LUT5 #(
    .INIT(32'hFFF4F4F4)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_2 
       (.I0(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ),
        .I1(wstrb_wrap_buffer_7),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 ),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .I4(m_axi_wready),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63] ));
  LUT3 #(
    .INIT(8'h7F)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_4 
       (.I0(pop_si_data),
        .I1(wrap_buffer_available),
        .I2(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_7_n_0 ),
        .O(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[7] ));
  (* SOFT_HLUTNM = "soft_lutpair702" *) 
  LUT4 #(
    .INIT(16'h7500)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_5 
       (.I0(Q[13]),
        .I1(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .I2(s_axi_wstrb[3]),
        .I3(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I_reg[63]_0 ));
  LUT6 #(
    .INIT(64'h0000000002000002)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_7 
       (.I0(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_11_n_0 ),
        .I1(\USE_RTL_LENGTH.length_counter_q_reg[3] ),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg[2] ),
        .I3(Q[8]),
        .I4(\USE_RTL_CURR_WORD.current_word_q_reg[2]_1 ),
        .I5(\USE_RTL_LENGTH.first_mi_word_q_i_5_n_0 ),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WDATA_I[63]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h8888888080808880)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I[7]_i_2 
       (.I0(\USE_REGISTER.M_AXI_WVALID_q_reg_1 ),
        .I1(s_axi_wstrb[3]),
        .I2(\USE_WRITE.wr_cmd_offset ),
        .I3(Q[11]),
        .I4(\USE_RTL_CURR_WORD.pre_next_word_q[1]_i_2_n_0 ),
        .I5(\USE_RTL_CURR_WORD.current_word_q_reg[2]_0 [2]),
        .O(\WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.USE_REGISTER.M_AXI_WSTRB_I_reg[7] ));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \WORD_LANE[1].USE_ALWAYS_PACKER.BYTE_LANE[3].USE_RTL_DATA.wdata_wrap_buffer_q[63]_i_1 
       (.I0(wrap_buffer_available),
        .I1(Q[12]),
        .I2(wrap_buffer_available_reg),
        .I3(s_axi_wvalid),
        .I4(s_axi_wstrb[3]),
        .I5(\WORD_LANE[0].USE_ALWAYS_PACKER.BYTE_LANE[0].USE_RTL_DATA.wdata_wrap_buffer_q[7]_i_3_n_0 ),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair704" *) 
  LUT4 #(
    .INIT(16'h00D0)) 
    cmd_push_block_i_1
       (.I0(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I1(cmd_push_block),
        .I2(sr_awvalid),
        .I3(m_axi_awready),
        .O(cmd_push_block0));
  LUT6 #(
    .INIT(64'hC4C4C4C4C4CFC4C4)) 
    data_Exists_I_i_1
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1_n_0 ),
        .I1(data_Exists_I),
        .I2(data_Exists_I_i_2_n_0),
        .I3(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I4(sr_awvalid),
        .I5(cmd_push_block),
        .O(next_Data_Exists));
  (* SOFT_HLUTNM = "soft_lutpair699" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    data_Exists_I_i_2
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .I1(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .I2(\USE_RTL_ADDR.addr_q_reg__0 [3]),
        .I3(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I4(\USE_RTL_ADDR.addr_q_reg__0 [4]),
        .O(data_Exists_I_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    data_Exists_I_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(next_Data_Exists),
        .Q(data_Exists_I),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT3 #(
    .INIT(8'h8A)) 
    m_axi_awvalid_INST_0
       (.I0(sr_awvalid),
        .I1(cmd_push_block),
        .I2(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .O(m_axi_awvalid));
  LUT5 #(
    .INIT(32'h8AAA8A8A)) 
    s_axi_wready_INST_0
       (.I0(wrap_buffer_available_reg),
        .I1(m_axi_wready),
        .I2(\USE_REGISTER.M_AXI_WVALID_q_reg_0 ),
        .I3(wrap_buffer_available),
        .I4(Q[12]),
        .O(s_axi_wready));
  (* SOFT_HLUTNM = "soft_lutpair704" *) 
  LUT4 #(
    .INIT(16'hB000)) 
    s_ready_i_i_2
       (.I0(cmd_push_block),
        .I1(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I2(m_axi_awready),
        .I3(out),
        .O(s_ready_i_reg));
  LUT5 #(
    .INIT(32'hFF7FFF00)) 
    wrap_buffer_available_i_1__0
       (.I0(\USE_RTL_LENGTH.first_mi_word_q_reg ),
        .I1(s_axi_wlast),
        .I2(wrap_buffer_available_reg),
        .I3(\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst/wrap_buffer_available0 ),
        .I4(wrap_buffer_available),
        .O(wrap_buffer_available_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair698" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    wrap_buffer_available_i_2
       (.I0(\USE_REGISTER.M_AXI_WVALID_q_i_2_n_0 ),
        .I1(wrap_buffer_available),
        .I2(Q[12]),
        .I3(wrap_buffer_available_reg),
        .I4(s_axi_wvalid),
        .O(\USE_WRITE.gen_non_fifo_w_upsizer.write_data_inst/wrap_buffer_available0 ));
endmodule

(* ORIG_REF_NAME = "generic_baseblocks_v2_1_0_command_fifo" *) 
module bd_1_generic_baseblocks_v2_1_0_command_fifo_4
   (\M_AXI_RDATA_I_reg[63] ,
    E,
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29]_0 ,
    \skid_buffer_reg[0] ,
    Q,
    pop_mi_data,
    \USE_RTL_LENGTH.first_mi_word_q_reg ,
    first_word_reg,
    D,
    \current_word_1_reg[2] ,
    s_axi_rvalid,
    \M_AXI_RDATA_I_reg[63]_0 ,
    s_ready_i_reg,
    cmd_push_block0,
    m_axi_arvalid,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    clk,
    wrap_buffer_available,
    \USE_RTL_LENGTH.length_counter_q_reg[7] ,
    use_wrap_buffer,
    first_word,
    \current_word_1_reg[2]_0 ,
    mr_rvalid,
    s_axi_rready,
    wrap_buffer_available_reg,
    cmd_push_block,
    sr_arvalid,
    wrap_buffer_available_reg_0,
    \pre_next_word_1_reg[2] ,
    \pre_next_word_1_reg[1] ,
    \pre_next_word_1_reg[2]_0 ,
    \USE_RTL_LENGTH.first_mi_word_q ,
    m_axi_arready,
    out,
    in);
  output \M_AXI_RDATA_I_reg[63] ;
  output [0:0]E;
  output \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29]_0 ;
  output \skid_buffer_reg[0] ;
  output [12:0]Q;
  output pop_mi_data;
  output \USE_RTL_LENGTH.first_mi_word_q_reg ;
  output first_word_reg;
  output [2:0]D;
  output [2:0]\current_word_1_reg[2] ;
  output s_axi_rvalid;
  output [0:0]\M_AXI_RDATA_I_reg[63]_0 ;
  output s_ready_i_reg;
  output cmd_push_block0;
  output m_axi_arvalid;
  input \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  input clk;
  input wrap_buffer_available;
  input \USE_RTL_LENGTH.length_counter_q_reg[7] ;
  input use_wrap_buffer;
  input first_word;
  input [2:0]\current_word_1_reg[2]_0 ;
  input mr_rvalid;
  input s_axi_rready;
  input wrap_buffer_available_reg;
  input cmd_push_block;
  input sr_arvalid;
  input wrap_buffer_available_reg_0;
  input \pre_next_word_1_reg[2] ;
  input \pre_next_word_1_reg[1] ;
  input [2:0]\pre_next_word_1_reg[2]_0 ;
  input \USE_RTL_LENGTH.first_mi_word_q ;
  input m_axi_arready;
  input out;
  input [27:0]in;

  wire \<const1> ;
  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire [2:0]D;
  wire [0:0]E;
  wire \M_AXI_RDATA_I_reg[63] ;
  wire [0:0]\M_AXI_RDATA_I_reg[63]_0 ;
  wire [12:0]Q;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29]_0 ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[10] ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[17] ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[18] ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[8] ;
  wire \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[9] ;
  wire \USE_READ.rd_cmd_complete_wrap ;
  wire [1:0]\USE_READ.rd_cmd_first_word ;
  wire [2:0]\USE_READ.rd_cmd_mask ;
  wire \USE_READ.rd_cmd_modified ;
  wire [0:0]\USE_READ.rd_cmd_next_word ;
  wire [2:2]\USE_READ.rd_cmd_offset ;
  wire \USE_READ.rd_cmd_packed_wrap ;
  wire \USE_RTL_ADDR.addr_q ;
  wire \USE_RTL_ADDR.addr_q[0]_i_1__0_n_0 ;
  wire \USE_RTL_ADDR.addr_q[1]_i_1__0_n_0 ;
  wire \USE_RTL_ADDR.addr_q[2]_i_1__0_n_0 ;
  wire \USE_RTL_ADDR.addr_q[3]_i_1__0_n_0 ;
  wire \USE_RTL_ADDR.addr_q[4]_i_2__0_n_0 ;
  wire \USE_RTL_ADDR.addr_q[4]_i_3__0_n_0 ;
  wire [4:0]\USE_RTL_ADDR.addr_q_reg__0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][0]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][10]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][11]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][12]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][13]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][16]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][17]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][18]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][19]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][1]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][20]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][21]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][22]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][23]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][24]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][25]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][26]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][27]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][28]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][29]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][2]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][3]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][4]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][5]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][6]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][7]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][8]_srl32_n_0 ;
  wire \USE_RTL_FIFO.data_srl_reg[31][9]_srl32_n_0 ;
  wire \USE_RTL_LENGTH.first_mi_word_q ;
  wire \USE_RTL_LENGTH.first_mi_word_q_reg ;
  wire \USE_RTL_LENGTH.length_counter_q_reg[7] ;
  wire \USE_RTL_VALID_WRITE.buffer_Full_q ;
  wire \USE_RTL_VALID_WRITE.buffer_Full_q_i_1__0_n_0 ;
  wire \USE_RTL_VALID_WRITE.buffer_Full_q_i_2__0_n_0 ;
  wire clk;
  wire cmd_push_block;
  wire cmd_push_block0;
  wire [2:0]\current_word_1_reg[2] ;
  wire [2:0]\current_word_1_reg[2]_0 ;
  wire data_Exists_I;
  wire data_Exists_I_i_2__0_n_0;
  wire first_word;
  wire first_word_reg;
  wire [27:0]in;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire mr_rvalid;
  wire next_Data_Exists;
  wire out;
  wire pop_mi_data;
  wire \pre_next_word_1[1]_i_2_n_0 ;
  wire \pre_next_word_1[2]_i_5_n_0 ;
  wire \pre_next_word_1_reg[1] ;
  wire \pre_next_word_1_reg[2] ;
  wire [2:0]\pre_next_word_1_reg[2]_0 ;
  wire s_axi_rlast_INST_0_i_7_n_0;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire s_ready_i_reg;
  wire \skid_buffer_reg[0] ;
  wire sr_arvalid;
  wire use_wrap_buffer;
  wire valid_Write;
  wire wrap_buffer_available;
  wire wrap_buffer_available_reg;
  wire wrap_buffer_available_reg_0;

  (* SOFT_HLUTNM = "soft_lutpair692" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    \M_AXI_RDATA_I[63]_i_1 
       (.I0(mr_rvalid),
        .I1(\M_AXI_RDATA_I_reg[63] ),
        .I2(\USE_RTL_LENGTH.first_mi_word_q ),
        .I3(use_wrap_buffer),
        .I4(\USE_READ.rd_cmd_packed_wrap ),
        .O(\M_AXI_RDATA_I_reg[63]_0 ));
  LUT6 #(
    .INIT(64'h0000AA02FFFFFFFF)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0 
       (.I0(E),
        .I1(wrap_buffer_available),
        .I2(\USE_RTL_LENGTH.length_counter_q_reg[7] ),
        .I3(use_wrap_buffer),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29]_0 ),
        .I5(\M_AXI_RDATA_I_reg[63] ),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h01FDFE02FFFFFFFF)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_2 
       (.I0(\current_word_1_reg[2]_0 [2]),
        .I1(Q[12]),
        .I2(first_word),
        .I3(Q[11]),
        .I4(Q[8]),
        .I5(first_word_reg),
        .O(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[0] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][0]_srl32_n_0 ),
        .Q(Q[0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[10] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][10]_srl32_n_0 ),
        .Q(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[10] ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[11] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][11]_srl32_n_0 ),
        .Q(\USE_READ.rd_cmd_mask [0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[12] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][12]_srl32_n_0 ),
        .Q(\USE_READ.rd_cmd_mask [1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[13] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][13]_srl32_n_0 ),
        .Q(\USE_READ.rd_cmd_mask [2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[16] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][16]_srl32_n_0 ),
        .Q(\USE_READ.rd_cmd_offset ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[17] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][17]_srl32_n_0 ),
        .Q(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[17] ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[18] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_n_0 ),
        .Q(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[18] ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[19] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][19]_srl32_n_0 ),
        .Q(Q[8]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[1] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][1]_srl32_n_0 ),
        .Q(Q[1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[20] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][20]_srl32_n_0 ),
        .Q(\USE_READ.rd_cmd_next_word ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[21] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][21]_srl32_n_0 ),
        .Q(Q[9]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[22] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][22]_srl32_n_0 ),
        .Q(Q[10]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[23] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][23]_srl32_n_0 ),
        .Q(\USE_READ.rd_cmd_first_word [0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[24] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][24]_srl32_n_0 ),
        .Q(\USE_READ.rd_cmd_first_word [1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[25] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][25]_srl32_n_0 ),
        .Q(Q[11]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[26] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][26]_srl32_n_0 ),
        .Q(\USE_READ.rd_cmd_packed_wrap ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[27] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][27]_srl32_n_0 ),
        .Q(\USE_READ.rd_cmd_complete_wrap ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[28] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][28]_srl32_n_0 ),
        .Q(\USE_READ.rd_cmd_modified ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][29]_srl32_n_0 ),
        .Q(Q[12]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[2] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][2]_srl32_n_0 ),
        .Q(Q[2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[3] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][3]_srl32_n_0 ),
        .Q(Q[3]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[4] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][4]_srl32_n_0 ),
        .Q(Q[4]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[5] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][5]_srl32_n_0 ),
        .Q(Q[5]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[6] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][6]_srl32_n_0 ),
        .Q(Q[6]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[7] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][7]_srl32_n_0 ),
        .Q(Q[7]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[8] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][8]_srl32_n_0 ),
        .Q(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[8] ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[9] 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(\USE_RTL_FIFO.data_srl_reg[31][9]_srl32_n_0 ),
        .Q(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[9] ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_VALID_Q_reg 
       (.C(clk),
        .CE(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .D(data_Exists_I),
        .Q(\M_AXI_RDATA_I_reg[63] ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  (* SOFT_HLUTNM = "soft_lutpair690" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \USE_RTL_ADDR.addr_q[0]_i_1__0 
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .O(\USE_RTL_ADDR.addr_q[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAA9A55555565)) 
    \USE_RTL_ADDR.addr_q[1]_i_1__0 
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I1(cmd_push_block),
        .I2(sr_arvalid),
        .I3(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .I5(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .O(\USE_RTL_ADDR.addr_q[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair690" *) 
  LUT5 #(
    .INIT(32'hBF40F40B)) 
    \USE_RTL_ADDR.addr_q[2]_i_1__0 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .I1(valid_Write),
        .I2(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I3(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .I4(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .O(\USE_RTL_ADDR.addr_q[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hBFFF4000FFF4000B)) 
    \USE_RTL_ADDR.addr_q[3]_i_1__0 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .I1(valid_Write),
        .I2(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I3(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .I4(\USE_RTL_ADDR.addr_q_reg__0 [3]),
        .I5(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .O(\USE_RTL_ADDR.addr_q[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h80808080800C8080)) 
    \USE_RTL_ADDR.addr_q[4]_i_1__0 
       (.I0(data_Exists_I_i_2__0_n_0),
        .I1(data_Exists_I),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .I3(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I4(sr_arvalid),
        .I5(cmd_push_block),
        .O(\USE_RTL_ADDR.addr_q ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAA9)) 
    \USE_RTL_ADDR.addr_q[4]_i_2__0 
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [4]),
        .I1(\USE_RTL_ADDR.addr_q_reg__0 [3]),
        .I2(\USE_RTL_ADDR.addr_q[4]_i_3__0_n_0 ),
        .I3(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I4(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .I5(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .O(\USE_RTL_ADDR.addr_q[4]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h8080808888888888)) 
    \USE_RTL_ADDR.addr_q[4]_i_3__0 
       (.I0(valid_Write),
        .I1(\M_AXI_RDATA_I_reg[63] ),
        .I2(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg[29]_0 ),
        .I3(use_wrap_buffer),
        .I4(wrap_buffer_available_reg_0),
        .I5(E),
        .O(\USE_RTL_ADDR.addr_q[4]_i_3__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_ADDR.addr_q_reg[0] 
       (.C(clk),
        .CE(\USE_RTL_ADDR.addr_q ),
        .D(\USE_RTL_ADDR.addr_q[0]_i_1__0_n_0 ),
        .Q(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_ADDR.addr_q_reg[1] 
       (.C(clk),
        .CE(\USE_RTL_ADDR.addr_q ),
        .D(\USE_RTL_ADDR.addr_q[1]_i_1__0_n_0 ),
        .Q(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_ADDR.addr_q_reg[2] 
       (.C(clk),
        .CE(\USE_RTL_ADDR.addr_q ),
        .D(\USE_RTL_ADDR.addr_q[2]_i_1__0_n_0 ),
        .Q(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_ADDR.addr_q_reg[3] 
       (.C(clk),
        .CE(\USE_RTL_ADDR.addr_q ),
        .D(\USE_RTL_ADDR.addr_q[3]_i_1__0_n_0 ),
        .Q(\USE_RTL_ADDR.addr_q_reg__0 [3]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_ADDR.addr_q_reg[4] 
       (.C(clk),
        .CE(\USE_RTL_ADDR.addr_q ),
        .D(\USE_RTL_ADDR.addr_q[4]_i_2__0_n_0 ),
        .Q(\USE_RTL_ADDR.addr_q_reg__0 [4]),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][0]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[0]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][0]_srl32_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \USE_RTL_FIFO.data_srl_reg[31][0]_srl32_i_1__0 
       (.I0(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I1(sr_arvalid),
        .I2(cmd_push_block),
        .O(valid_Write));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][10]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][10]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[10]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][10]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][11]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][11]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[11]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][11]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][12]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][12]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[12]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][12]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][13]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][13]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[13]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][13]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][16]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][16]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[14]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][16]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][17]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][17]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[15]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][17]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][18]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][18]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[16]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][18]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][19]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][19]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[17]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][19]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][1]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[1]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][1]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][20]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][20]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[18]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][20]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][21]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][21]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[19]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][21]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][22]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][22]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[20]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][22]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][23]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][23]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[21]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][23]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][24]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][24]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[22]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][24]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][25]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][25]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[23]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][25]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][26]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][26]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[24]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][26]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][27]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][27]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[25]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][27]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][28]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][28]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[26]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][28]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][29]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][29]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[27]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][29]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][2]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[2]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][2]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][3]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[3]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][3]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][4]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][4]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[4]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][4]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][5]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][5]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[5]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][5]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][6]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][6]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[6]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][6]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][7]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][7]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[7]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][7]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][8]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][8]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[8]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][8]_srl32_n_0 ));
  (* srl_bus_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31] " *) 
  (* srl_name = "axi_interconnect_0/\s01_couplers/auto_us /inst/\gen_upsizer.gen_full_upsizer.axi_upsizer_inst/USE_READ.read_addr_inst/GEN_CMD_QUEUE.cmd_queue/USE_RTL_FIFO.data_srl_reg[31][9]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \USE_RTL_FIFO.data_srl_reg[31][9]_srl32 
       (.A(\USE_RTL_ADDR.addr_q_reg__0 ),
        .CE(valid_Write),
        .CLK(clk),
        .D(in[9]),
        .Q(\USE_RTL_FIFO.data_srl_reg[31][9]_srl32_n_0 ));
  LUT6 #(
    .INIT(64'h8000808080008000)) 
    \USE_RTL_LENGTH.first_mi_word_q_i_1__0 
       (.I0(mr_rvalid),
        .I1(\M_AXI_RDATA_I_reg[63] ),
        .I2(s_axi_rready),
        .I3(\USE_RTL_LENGTH.first_mi_word_q_reg ),
        .I4(use_wrap_buffer),
        .I5(wrap_buffer_available_reg),
        .O(pop_mi_data));
  LUT6 #(
    .INIT(64'h00FFFFFF00040000)) 
    \USE_RTL_VALID_WRITE.buffer_Full_q_i_1__0 
       (.I0(cmd_push_block),
        .I1(sr_arvalid),
        .I2(\USE_RTL_VALID_WRITE.buffer_Full_q_i_2__0_n_0 ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .I4(data_Exists_I),
        .I5(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .O(\USE_RTL_VALID_WRITE.buffer_Full_q_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair691" *) 
  LUT5 #(
    .INIT(32'hFF7FFFFF)) 
    \USE_RTL_VALID_WRITE.buffer_Full_q_i_2__0 
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .I1(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .I2(\USE_RTL_ADDR.addr_q_reg__0 [4]),
        .I3(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I4(\USE_RTL_ADDR.addr_q_reg__0 [3]),
        .O(\USE_RTL_VALID_WRITE.buffer_Full_q_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_RTL_VALID_WRITE.buffer_Full_q_reg 
       (.C(clk),
        .CE(\<const1> ),
        .D(\USE_RTL_VALID_WRITE.buffer_Full_q_i_1__0_n_0 ),
        .Q(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair693" *) 
  LUT4 #(
    .INIT(16'h00D0)) 
    cmd_push_block_i_1__0
       (.I0(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I1(cmd_push_block),
        .I2(sr_arvalid),
        .I3(m_axi_arready),
        .O(cmd_push_block0));
  LUT5 #(
    .INIT(32'h888A8880)) 
    \current_word_1[0]_i_1 
       (.I0(\USE_READ.rd_cmd_mask [0]),
        .I1(\USE_READ.rd_cmd_next_word ),
        .I2(first_word),
        .I3(Q[12]),
        .I4(\pre_next_word_1_reg[2]_0 [0]),
        .O(\current_word_1_reg[2] [0]));
  LUT5 #(
    .INIT(32'h888A8880)) 
    \current_word_1[1]_i_1 
       (.I0(\USE_READ.rd_cmd_mask [1]),
        .I1(Q[9]),
        .I2(first_word),
        .I3(Q[12]),
        .I4(\pre_next_word_1_reg[2]_0 [1]),
        .O(\current_word_1_reg[2] [1]));
  (* SOFT_HLUTNM = "soft_lutpair689" *) 
  LUT5 #(
    .INIT(32'h888A8880)) 
    \current_word_1[2]_i_1 
       (.I0(\USE_READ.rd_cmd_mask [2]),
        .I1(Q[10]),
        .I2(first_word),
        .I3(Q[12]),
        .I4(\pre_next_word_1_reg[2]_0 [2]),
        .O(\current_word_1_reg[2] [2]));
  LUT6 #(
    .INIT(64'hC4C4C4C4C4CFC4C4)) 
    data_Exists_I_i_1__0
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q[29]_i_1__0_n_0 ),
        .I1(data_Exists_I),
        .I2(data_Exists_I_i_2__0_n_0),
        .I3(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I4(sr_arvalid),
        .I5(cmd_push_block),
        .O(next_Data_Exists));
  (* SOFT_HLUTNM = "soft_lutpair691" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    data_Exists_I_i_2__0
       (.I0(\USE_RTL_ADDR.addr_q_reg__0 [2]),
        .I1(\USE_RTL_ADDR.addr_q_reg__0 [1]),
        .I2(\USE_RTL_ADDR.addr_q_reg__0 [3]),
        .I3(\USE_RTL_ADDR.addr_q_reg__0 [0]),
        .I4(\USE_RTL_ADDR.addr_q_reg__0 [4]),
        .O(data_Exists_I_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    data_Exists_I_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(next_Data_Exists),
        .Q(data_Exists_I),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  (* SOFT_HLUTNM = "soft_lutpair693" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    m_axi_arvalid_INST_0
       (.I0(sr_arvalid),
        .I1(cmd_push_block),
        .I2(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .O(m_axi_arvalid));
  LUT6 #(
    .INIT(64'hDDDDDDDDDDDDDDDF)) 
    \m_payload_i[66]_i_3 
       (.I0(\USE_READ.rd_cmd_modified ),
        .I1(Q[12]),
        .I2(\current_word_1_reg[2] [1]),
        .I3(\current_word_1_reg[2] [0]),
        .I4(\USE_READ.rd_cmd_complete_wrap ),
        .I5(\current_word_1_reg[2] [2]),
        .O(\USE_RTL_LENGTH.first_mi_word_q_reg ));
  LUT6 #(
    .INIT(64'h0002AAA2AAA80008)) 
    \pre_next_word_1[0]_i_1 
       (.I0(\USE_READ.rd_cmd_mask [0]),
        .I1(\pre_next_word_1_reg[2]_0 [0]),
        .I2(Q[12]),
        .I3(first_word),
        .I4(\USE_READ.rd_cmd_next_word ),
        .I5(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[8] ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h8882228222288828)) 
    \pre_next_word_1[1]_i_1 
       (.I0(\USE_READ.rd_cmd_mask [1]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[9] ),
        .I2(Q[9]),
        .I3(\pre_next_word_1[1]_i_2_n_0 ),
        .I4(\pre_next_word_1_reg[2]_0 [1]),
        .I5(\pre_next_word_1[2]_i_5_n_0 ),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair689" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \pre_next_word_1[1]_i_2 
       (.I0(Q[12]),
        .I1(first_word),
        .O(\pre_next_word_1[1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hAA80)) 
    \pre_next_word_1[2]_i_1 
       (.I0(s_axi_rready),
        .I1(\M_AXI_RDATA_I_reg[63] ),
        .I2(mr_rvalid),
        .I3(use_wrap_buffer),
        .O(E));
  LUT6 #(
    .INIT(64'h2828288228828282)) 
    \pre_next_word_1[2]_i_2 
       (.I0(\USE_READ.rd_cmd_mask [2]),
        .I1(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[10] ),
        .I2(\pre_next_word_1_reg[2] ),
        .I3(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[9] ),
        .I4(\pre_next_word_1_reg[1] ),
        .I5(\pre_next_word_1[2]_i_5_n_0 ),
        .O(D[2]));
  LUT5 #(
    .INIT(32'h888A8880)) 
    \pre_next_word_1[2]_i_5 
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[8] ),
        .I1(\USE_READ.rd_cmd_next_word ),
        .I2(first_word),
        .I3(Q[12]),
        .I4(\pre_next_word_1_reg[2]_0 [0]),
        .O(\pre_next_word_1[2]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h00005457)) 
    \s_axi_rdata[31]_INST_0_i_1 
       (.I0(Q[11]),
        .I1(first_word),
        .I2(Q[12]),
        .I3(\current_word_1_reg[2]_0 [2]),
        .I4(\USE_READ.rd_cmd_offset ),
        .O(\skid_buffer_reg[0] ));
  LUT6 #(
    .INIT(64'h00000000FE0201FD)) 
    s_axi_rlast_INST_0_i_2
       (.I0(\current_word_1_reg[2]_0 [0]),
        .I1(Q[12]),
        .I2(first_word),
        .I3(\USE_READ.rd_cmd_first_word [0]),
        .I4(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[17] ),
        .I5(s_axi_rlast_INST_0_i_7_n_0),
        .O(first_word_reg));
  LUT5 #(
    .INIT(32'h6665666A)) 
    s_axi_rlast_INST_0_i_7
       (.I0(\USE_FF_OUT.USE_RTL_OUTPUT_PIPELINE.M_MESG_Q_reg_n_0_[18] ),
        .I1(\USE_READ.rd_cmd_first_word [1]),
        .I2(first_word),
        .I3(Q[12]),
        .I4(\current_word_1_reg[2]_0 [1]),
        .O(s_axi_rlast_INST_0_i_7_n_0));
  (* SOFT_HLUTNM = "soft_lutpair692" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    s_axi_rvalid_INST_0
       (.I0(\M_AXI_RDATA_I_reg[63] ),
        .I1(mr_rvalid),
        .I2(use_wrap_buffer),
        .O(s_axi_rvalid));
  LUT4 #(
    .INIT(16'hB000)) 
    s_ready_i_i_2__1
       (.I0(cmd_push_block),
        .I1(\USE_RTL_VALID_WRITE.buffer_Full_q ),
        .I2(m_axi_arready),
        .I3(out),
        .O(s_ready_i_reg));
endmodule

(* ORIG_REF_NAME = "lpf" *) 
module bd_1_lpf
   (lpf_int,
    slowest_sync_clk,
    dcm_locked,
    ext_reset_in,
    mb_debug_sys_rst,
    aux_reset_in);
  output lpf_int;
  input slowest_sync_clk;
  input dcm_locked;
  input ext_reset_in;
  input mb_debug_sys_rst;
  input aux_reset_in;

  wire \<const0> ;
  wire \<const1> ;
  wire \ACTIVE_HIGH_EXT.ACT_HI_EXT_n_0 ;
  wire \ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ;
  wire Q;
  wire VCC_2;
  wire [0:0]asr_lpf;
  wire aux_reset_in;
  wire dcm_locked;
  wire ext_reset_in;
  wire lpf_asr;
  wire lpf_exr;
  wire lpf_int;
  wire lpf_int0__0;
  wire mb_debug_sys_rst;
  wire p_1_in;
  wire p_2_in;
  wire p_3_in1_in;
  wire [3:0]p_3_out;
  wire slowest_sync_clk;

  bd_1_cdc_sync \ACTIVE_HIGH_EXT.ACT_HI_EXT 
       (.ext_reset_in(ext_reset_in),
        .lpf_exr(lpf_exr),
        .lpf_exr_reg(\ACTIVE_HIGH_EXT.ACT_HI_EXT_n_0 ),
        .mb_debug_sys_rst(mb_debug_sys_rst),
        .p_3_out(p_3_out[2:0]),
        .scndry_out(p_3_out[3]),
        .slowest_sync_clk(slowest_sync_clk));
  bd_1_cdc_sync_0 \ACTIVE_LOW_AUX.ACT_LO_AUX 
       (.asr_lpf(asr_lpf),
        .aux_reset_in(aux_reset_in),
        .lpf_asr(lpf_asr),
        .lpf_asr_reg(\ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ),
        .p_1_in(p_1_in),
        .p_2_in(p_2_in),
        .scndry_out(p_3_in1_in),
        .slowest_sync_clk(slowest_sync_clk));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[1].asr_lpf_reg[1] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(p_3_in1_in),
        .Q(p_2_in),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[2].asr_lpf_reg[2] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(p_2_in),
        .Q(p_1_in),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[3].asr_lpf_reg[3] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(p_1_in),
        .Q(asr_lpf),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[1].exr_lpf_reg[1] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(p_3_out[3]),
        .Q(p_3_out[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[2].exr_lpf_reg[2] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(p_3_out[2]),
        .Q(p_3_out[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[3].exr_lpf_reg[3] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(p_3_out[1]),
        .Q(p_3_out[0]),
        .R(\<const0> ));
  GND GND
       (.G(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "proc_sys_reset_0/U0/\EXT_LPF/POR_SRL_I " *) 
  SRL16E #(
    .INIT(16'hFFFF)) 
    POR_SRL_I
       (.A0(\<const1> ),
        .A1(\<const1> ),
        .A2(\<const1> ),
        .A3(\<const1> ),
        .CE(VCC_2),
        .CLK(slowest_sync_clk),
        .D(\<const0> ),
        .Q(Q));
  VCC VCC
       (.P(\<const1> ));
  VCC VCC_1
       (.P(VCC_2));
  FDRE #(
    .INIT(1'b0)) 
    lpf_asr_reg
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(\ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ),
        .Q(lpf_asr),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    lpf_exr_reg
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(\ACTIVE_HIGH_EXT.ACT_HI_EXT_n_0 ),
        .Q(lpf_exr),
        .R(\<const0> ));
  LUT4 #(
    .INIT(16'hFFFD)) 
    lpf_int0
       (.I0(dcm_locked),
        .I1(Q),
        .I2(lpf_exr),
        .I3(lpf_asr),
        .O(lpf_int0__0));
  FDRE #(
    .INIT(1'b0)) 
    lpf_int_reg
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(lpf_int0__0),
        .Q(lpf_int),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "m00_couplers_imp_1DK4NZ5" *) 
module bd_1_m00_couplers_imp_1DK4NZ5
   (s_axi_awready,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    M00_AXI_awid,
    M00_AXI_awaddr,
    M00_AXI_awlen,
    M00_AXI_awsize,
    M00_AXI_awburst,
    M00_AXI_awlock,
    M00_AXI_awcache,
    M00_AXI_awprot,
    M00_AXI_awregion,
    M00_AXI_awqos,
    M00_AXI_awvalid,
    M00_AXI_wdata,
    M00_AXI_wstrb,
    M00_AXI_wlast,
    M00_AXI_wvalid,
    M00_AXI_bready,
    M00_AXI_arid,
    M00_AXI_araddr,
    M00_AXI_arlen,
    M00_AXI_arsize,
    M00_AXI_arburst,
    M00_AXI_arlock,
    M00_AXI_arcache,
    M00_AXI_arprot,
    M00_AXI_arregion,
    M00_AXI_arqos,
    M00_AXI_arvalid,
    M00_AXI_rready,
    M00_ACLK,
    M00_ARESETN,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awregion,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_bready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arregion,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_rready,
    M00_AXI_awready,
    M00_AXI_wready,
    M00_AXI_bid,
    M00_AXI_bresp,
    M00_AXI_bvalid,
    M00_AXI_arready,
    M00_AXI_rid,
    M00_AXI_rdata,
    M00_AXI_rresp,
    M00_AXI_rlast,
    M00_AXI_rvalid);
  output s_axi_awready;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output s_axi_bvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output s_axi_rvalid;
  output [0:0]M00_AXI_awid;
  output [31:0]M00_AXI_awaddr;
  output [7:0]M00_AXI_awlen;
  output [2:0]M00_AXI_awsize;
  output [1:0]M00_AXI_awburst;
  output [0:0]M00_AXI_awlock;
  output [3:0]M00_AXI_awcache;
  output [2:0]M00_AXI_awprot;
  output [3:0]M00_AXI_awregion;
  output [3:0]M00_AXI_awqos;
  output M00_AXI_awvalid;
  output [63:0]M00_AXI_wdata;
  output [7:0]M00_AXI_wstrb;
  output M00_AXI_wlast;
  output M00_AXI_wvalid;
  output M00_AXI_bready;
  output [0:0]M00_AXI_arid;
  output [31:0]M00_AXI_araddr;
  output [7:0]M00_AXI_arlen;
  output [2:0]M00_AXI_arsize;
  output [1:0]M00_AXI_arburst;
  output [0:0]M00_AXI_arlock;
  output [3:0]M00_AXI_arcache;
  output [2:0]M00_AXI_arprot;
  output [3:0]M00_AXI_arregion;
  output [3:0]M00_AXI_arqos;
  output M00_AXI_arvalid;
  output M00_AXI_rready;
  input M00_ACLK;
  input M00_ARESETN;
  input [0:0]m_axi_awid;
  input [31:0]m_axi_awaddr;
  input [7:0]m_axi_awlen;
  input [2:0]m_axi_awsize;
  input [1:0]m_axi_awburst;
  input [0:0]m_axi_awlock;
  input [3:0]m_axi_awcache;
  input [2:0]m_axi_awprot;
  input [3:0]m_axi_awregion;
  input [3:0]m_axi_awqos;
  input [0:0]m_axi_awvalid;
  input [63:0]m_axi_wdata;
  input [7:0]m_axi_wstrb;
  input [0:0]m_axi_wlast;
  input [0:0]m_axi_wvalid;
  input [0:0]m_axi_bready;
  input [0:0]m_axi_arid;
  input [31:0]m_axi_araddr;
  input [7:0]m_axi_arlen;
  input [2:0]m_axi_arsize;
  input [1:0]m_axi_arburst;
  input [0:0]m_axi_arlock;
  input [3:0]m_axi_arcache;
  input [2:0]m_axi_arprot;
  input [3:0]m_axi_arregion;
  input [3:0]m_axi_arqos;
  input [0:0]m_axi_arvalid;
  input [0:0]m_axi_rready;
  input M00_AXI_awready;
  input M00_AXI_wready;
  input [0:0]M00_AXI_bid;
  input [1:0]M00_AXI_bresp;
  input M00_AXI_bvalid;
  input M00_AXI_arready;
  input [0:0]M00_AXI_rid;
  input [63:0]M00_AXI_rdata;
  input [1:0]M00_AXI_rresp;
  input M00_AXI_rlast;
  input M00_AXI_rvalid;

  wire M00_ACLK;
  wire M00_ARESETN;
  wire [31:0]M00_AXI_araddr;
  wire [1:0]M00_AXI_arburst;
  wire [3:0]M00_AXI_arcache;
  wire [0:0]M00_AXI_arid;
  wire [7:0]M00_AXI_arlen;
  wire [0:0]M00_AXI_arlock;
  wire [2:0]M00_AXI_arprot;
  wire [3:0]M00_AXI_arqos;
  wire M00_AXI_arready;
  wire [3:0]M00_AXI_arregion;
  wire [2:0]M00_AXI_arsize;
  wire M00_AXI_arvalid;
  wire [31:0]M00_AXI_awaddr;
  wire [1:0]M00_AXI_awburst;
  wire [3:0]M00_AXI_awcache;
  wire [0:0]M00_AXI_awid;
  wire [7:0]M00_AXI_awlen;
  wire [0:0]M00_AXI_awlock;
  wire [2:0]M00_AXI_awprot;
  wire [3:0]M00_AXI_awqos;
  wire M00_AXI_awready;
  wire [3:0]M00_AXI_awregion;
  wire [2:0]M00_AXI_awsize;
  wire M00_AXI_awvalid;
  wire [0:0]M00_AXI_bid;
  wire M00_AXI_bready;
  wire [1:0]M00_AXI_bresp;
  wire M00_AXI_bvalid;
  wire [63:0]M00_AXI_rdata;
  wire [0:0]M00_AXI_rid;
  wire M00_AXI_rlast;
  wire M00_AXI_rready;
  wire [1:0]M00_AXI_rresp;
  wire M00_AXI_rvalid;
  wire [63:0]M00_AXI_wdata;
  wire M00_AXI_wlast;
  wire M00_AXI_wready;
  wire [7:0]M00_AXI_wstrb;
  wire M00_AXI_wvalid;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [0:0]m_axi_arid;
  wire [7:0]m_axi_arlen;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire [3:0]m_axi_arregion;
  wire [2:0]m_axi_arsize;
  wire [0:0]m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [0:0]m_axi_awid;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire [3:0]m_axi_awregion;
  wire [2:0]m_axi_awsize;
  wire [0:0]m_axi_awvalid;
  wire [0:0]m_axi_bready;
  wire [0:0]m_axi_rready;
  wire [63:0]m_axi_wdata;
  wire [0:0]m_axi_wlast;
  wire [7:0]m_axi_wstrb;
  wire [0:0]m_axi_wvalid;
  wire s_axi_arready;
  wire s_axi_awready;
  wire [0:0]s_axi_bid;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [63:0]s_axi_rdata;
  wire [0:0]s_axi_rid;
  wire s_axi_rlast;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire s_axi_wready;

  (* CHECK_LICENSE_TYPE = "bd_1_m00_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{}" *) 
  (* CORE_GENERATION_INFO = "bd_1_m00_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=64,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=7,C_REG_CONFIG_W=1,C_REG_CONFIG_B=7,C_REG_CONFIG_AR=7,C_REG_CONFIG_R=1,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
  bd_1_bd_1_m00_regslice_0 m00_regslice
       (.aclk(M00_ACLK),
        .aresetn(M00_ARESETN),
        .m_axi_araddr(M00_AXI_araddr),
        .m_axi_arburst(M00_AXI_arburst),
        .m_axi_arcache(M00_AXI_arcache),
        .m_axi_arid(M00_AXI_arid),
        .m_axi_arlen(M00_AXI_arlen),
        .m_axi_arlock(M00_AXI_arlock),
        .m_axi_arprot(M00_AXI_arprot),
        .m_axi_arqos(M00_AXI_arqos),
        .m_axi_arready(M00_AXI_arready),
        .m_axi_arregion(M00_AXI_arregion),
        .m_axi_arsize(M00_AXI_arsize),
        .m_axi_arvalid(M00_AXI_arvalid),
        .m_axi_awaddr(M00_AXI_awaddr),
        .m_axi_awburst(M00_AXI_awburst),
        .m_axi_awcache(M00_AXI_awcache),
        .m_axi_awid(M00_AXI_awid),
        .m_axi_awlen(M00_AXI_awlen),
        .m_axi_awlock(M00_AXI_awlock),
        .m_axi_awprot(M00_AXI_awprot),
        .m_axi_awqos(M00_AXI_awqos),
        .m_axi_awready(M00_AXI_awready),
        .m_axi_awregion(M00_AXI_awregion),
        .m_axi_awsize(M00_AXI_awsize),
        .m_axi_awvalid(M00_AXI_awvalid),
        .m_axi_bid(M00_AXI_bid),
        .m_axi_bready(M00_AXI_bready),
        .m_axi_bresp(M00_AXI_bresp),
        .m_axi_bvalid(M00_AXI_bvalid),
        .m_axi_rdata(M00_AXI_rdata),
        .m_axi_rid(M00_AXI_rid),
        .m_axi_rlast(M00_AXI_rlast),
        .m_axi_rready(M00_AXI_rready),
        .m_axi_rresp(M00_AXI_rresp),
        .m_axi_rvalid(M00_AXI_rvalid),
        .m_axi_wdata(M00_AXI_wdata),
        .m_axi_wlast(M00_AXI_wlast),
        .m_axi_wready(M00_AXI_wready),
        .m_axi_wstrb(M00_AXI_wstrb),
        .m_axi_wvalid(M00_AXI_wvalid),
        .s_axi_araddr(m_axi_araddr),
        .s_axi_arburst(m_axi_arburst),
        .s_axi_arcache(m_axi_arcache),
        .s_axi_arid(m_axi_arid),
        .s_axi_arlen(m_axi_arlen),
        .s_axi_arlock(m_axi_arlock),
        .s_axi_arprot(m_axi_arprot),
        .s_axi_arqos(m_axi_arqos),
        .s_axi_arready(s_axi_arready),
        .s_axi_arregion(m_axi_arregion),
        .s_axi_arsize(m_axi_arsize),
        .s_axi_arvalid(m_axi_arvalid),
        .s_axi_awaddr(m_axi_awaddr),
        .s_axi_awburst(m_axi_awburst),
        .s_axi_awcache(m_axi_awcache),
        .s_axi_awid(m_axi_awid),
        .s_axi_awlen(m_axi_awlen),
        .s_axi_awlock(m_axi_awlock),
        .s_axi_awprot(m_axi_awprot),
        .s_axi_awqos(m_axi_awqos),
        .s_axi_awready(s_axi_awready),
        .s_axi_awregion(m_axi_awregion),
        .s_axi_awsize(m_axi_awsize),
        .s_axi_awvalid(m_axi_awvalid),
        .s_axi_bid(s_axi_bid),
        .s_axi_bready(m_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rid(s_axi_rid),
        .s_axi_rlast(s_axi_rlast),
        .s_axi_rready(m_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(m_axi_wdata),
        .s_axi_wlast(m_axi_wlast),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(m_axi_wstrb),
        .s_axi_wvalid(m_axi_wvalid));
endmodule

(* ORIG_REF_NAME = "m01_couplers_imp_D76XP3" *) 
module bd_1_m01_couplers_imp_D76XP3
   (S_AXI_awready,
    S_AXI_wready,
    S_AXI_bid,
    S_AXI_bresp,
    S_AXI_bvalid,
    S_AXI_arready,
    S_AXI_rid,
    S_AXI_rdata,
    S_AXI_rresp,
    S_AXI_rlast,
    S_AXI_rvalid,
    M01_AXI_awaddr,
    M01_AXI_awlen,
    M01_AXI_awsize,
    M01_AXI_awburst,
    M01_AXI_awlock,
    M01_AXI_awcache,
    M01_AXI_awprot,
    M01_AXI_awregion,
    M01_AXI_awqos,
    M01_AXI_awvalid,
    M01_AXI_wdata,
    M01_AXI_wstrb,
    M01_AXI_wlast,
    M01_AXI_wvalid,
    M01_AXI_bready,
    M01_AXI_araddr,
    M01_AXI_arlen,
    M01_AXI_arsize,
    M01_AXI_arburst,
    M01_AXI_arlock,
    M01_AXI_arcache,
    M01_AXI_arprot,
    M01_AXI_arregion,
    M01_AXI_arqos,
    M01_AXI_arvalid,
    M01_AXI_rready,
    ACLK,
    ARESETN,
    S_AXI_awid,
    S_AXI_awaddr,
    S_AXI_awlen,
    S_AXI_awsize,
    S_AXI_awburst,
    S_AXI_awlock,
    S_AXI_awcache,
    S_AXI_awprot,
    S_AXI_awregion,
    S_AXI_awqos,
    S_AXI_awvalid,
    S_AXI_wdata,
    S_AXI_wstrb,
    S_AXI_wlast,
    S_AXI_wvalid,
    S_AXI_bready,
    S_AXI_arid,
    S_AXI_araddr,
    S_AXI_arlen,
    S_AXI_arsize,
    S_AXI_arburst,
    S_AXI_arlock,
    S_AXI_arcache,
    S_AXI_arprot,
    S_AXI_arregion,
    S_AXI_arqos,
    S_AXI_arvalid,
    S_AXI_rready,
    M01_ACLK,
    M01_ARESETN,
    M01_AXI_awready,
    M01_AXI_wready,
    M01_AXI_bresp,
    M01_AXI_bvalid,
    M01_AXI_arready,
    M01_AXI_rdata,
    M01_AXI_rresp,
    M01_AXI_rlast,
    M01_AXI_rvalid);
  output S_AXI_awready;
  output S_AXI_wready;
  output [0:0]S_AXI_bid;
  output [1:0]S_AXI_bresp;
  output S_AXI_bvalid;
  output S_AXI_arready;
  output [0:0]S_AXI_rid;
  output [63:0]S_AXI_rdata;
  output [1:0]S_AXI_rresp;
  output S_AXI_rlast;
  output S_AXI_rvalid;
  output [31:0]M01_AXI_awaddr;
  output [7:0]M01_AXI_awlen;
  output [2:0]M01_AXI_awsize;
  output [1:0]M01_AXI_awburst;
  output [0:0]M01_AXI_awlock;
  output [3:0]M01_AXI_awcache;
  output [2:0]M01_AXI_awprot;
  output [3:0]M01_AXI_awregion;
  output [3:0]M01_AXI_awqos;
  output M01_AXI_awvalid;
  output [31:0]M01_AXI_wdata;
  output [3:0]M01_AXI_wstrb;
  output M01_AXI_wlast;
  output M01_AXI_wvalid;
  output M01_AXI_bready;
  output [31:0]M01_AXI_araddr;
  output [7:0]M01_AXI_arlen;
  output [2:0]M01_AXI_arsize;
  output [1:0]M01_AXI_arburst;
  output [0:0]M01_AXI_arlock;
  output [3:0]M01_AXI_arcache;
  output [2:0]M01_AXI_arprot;
  output [3:0]M01_AXI_arregion;
  output [3:0]M01_AXI_arqos;
  output M01_AXI_arvalid;
  output M01_AXI_rready;
  input ACLK;
  input ARESETN;
  input [0:0]S_AXI_awid;
  input [31:0]S_AXI_awaddr;
  input [7:0]S_AXI_awlen;
  input [2:0]S_AXI_awsize;
  input [1:0]S_AXI_awburst;
  input [0:0]S_AXI_awlock;
  input [3:0]S_AXI_awcache;
  input [2:0]S_AXI_awprot;
  input [3:0]S_AXI_awregion;
  input [3:0]S_AXI_awqos;
  input S_AXI_awvalid;
  input [63:0]S_AXI_wdata;
  input [7:0]S_AXI_wstrb;
  input S_AXI_wlast;
  input S_AXI_wvalid;
  input S_AXI_bready;
  input [0:0]S_AXI_arid;
  input [31:0]S_AXI_araddr;
  input [7:0]S_AXI_arlen;
  input [2:0]S_AXI_arsize;
  input [1:0]S_AXI_arburst;
  input [0:0]S_AXI_arlock;
  input [3:0]S_AXI_arcache;
  input [2:0]S_AXI_arprot;
  input [3:0]S_AXI_arregion;
  input [3:0]S_AXI_arqos;
  input S_AXI_arvalid;
  input S_AXI_rready;
  input M01_ACLK;
  input M01_ARESETN;
  input M01_AXI_awready;
  input M01_AXI_wready;
  input [1:0]M01_AXI_bresp;
  input M01_AXI_bvalid;
  input M01_AXI_arready;
  input [31:0]M01_AXI_rdata;
  input [1:0]M01_AXI_rresp;
  input M01_AXI_rlast;
  input M01_AXI_rvalid;

  wire ACLK;
  wire ARESETN;
  wire M01_ACLK;
  wire M01_ARESETN;
  wire [31:0]M01_AXI_araddr;
  wire [1:0]M01_AXI_arburst;
  wire [3:0]M01_AXI_arcache;
  wire [7:0]M01_AXI_arlen;
  wire [0:0]M01_AXI_arlock;
  wire [2:0]M01_AXI_arprot;
  wire [3:0]M01_AXI_arqos;
  wire M01_AXI_arready;
  wire [3:0]M01_AXI_arregion;
  wire [2:0]M01_AXI_arsize;
  wire M01_AXI_arvalid;
  wire [31:0]M01_AXI_awaddr;
  wire [1:0]M01_AXI_awburst;
  wire [3:0]M01_AXI_awcache;
  wire [7:0]M01_AXI_awlen;
  wire [0:0]M01_AXI_awlock;
  wire [2:0]M01_AXI_awprot;
  wire [3:0]M01_AXI_awqos;
  wire M01_AXI_awready;
  wire [3:0]M01_AXI_awregion;
  wire [2:0]M01_AXI_awsize;
  wire M01_AXI_awvalid;
  wire M01_AXI_bready;
  wire [1:0]M01_AXI_bresp;
  wire M01_AXI_bvalid;
  wire [31:0]M01_AXI_rdata;
  wire M01_AXI_rlast;
  wire M01_AXI_rready;
  wire [1:0]M01_AXI_rresp;
  wire M01_AXI_rvalid;
  wire [31:0]M01_AXI_wdata;
  wire M01_AXI_wlast;
  wire M01_AXI_wready;
  wire [3:0]M01_AXI_wstrb;
  wire M01_AXI_wvalid;
  wire [31:0]S_AXI_araddr;
  wire [1:0]S_AXI_arburst;
  wire [3:0]S_AXI_arcache;
  wire [0:0]S_AXI_arid;
  wire [7:0]S_AXI_arlen;
  wire [0:0]S_AXI_arlock;
  wire [2:0]S_AXI_arprot;
  wire [3:0]S_AXI_arqos;
  wire S_AXI_arready;
  wire [3:0]S_AXI_arregion;
  wire [2:0]S_AXI_arsize;
  wire S_AXI_arvalid;
  wire [31:0]S_AXI_awaddr;
  wire [1:0]S_AXI_awburst;
  wire [3:0]S_AXI_awcache;
  wire [0:0]S_AXI_awid;
  wire [7:0]S_AXI_awlen;
  wire [0:0]S_AXI_awlock;
  wire [2:0]S_AXI_awprot;
  wire [3:0]S_AXI_awqos;
  wire S_AXI_awready;
  wire [3:0]S_AXI_awregion;
  wire [2:0]S_AXI_awsize;
  wire S_AXI_awvalid;
  wire [0:0]S_AXI_bid;
  wire S_AXI_bready;
  wire [1:0]S_AXI_bresp;
  wire S_AXI_bvalid;
  wire [63:0]S_AXI_rdata;
  wire [0:0]S_AXI_rid;
  wire S_AXI_rlast;
  wire S_AXI_rready;
  wire [1:0]S_AXI_rresp;
  wire S_AXI_rvalid;
  wire [63:0]S_AXI_wdata;
  wire S_AXI_wlast;
  wire S_AXI_wready;
  wire [7:0]S_AXI_wstrb;
  wire S_AXI_wvalid;
  wire [31:0]auto_ds_to_m01_regslice_ARADDR;
  wire [1:0]auto_ds_to_m01_regslice_ARBURST;
  wire [3:0]auto_ds_to_m01_regslice_ARCACHE;
  wire [7:0]auto_ds_to_m01_regslice_ARLEN;
  wire auto_ds_to_m01_regslice_ARLOCK;
  wire [2:0]auto_ds_to_m01_regslice_ARPROT;
  wire [3:0]auto_ds_to_m01_regslice_ARQOS;
  wire auto_ds_to_m01_regslice_ARREADY;
  wire [3:0]auto_ds_to_m01_regslice_ARREGION;
  wire [2:0]auto_ds_to_m01_regslice_ARSIZE;
  wire auto_ds_to_m01_regslice_ARVALID;
  wire [31:0]auto_ds_to_m01_regslice_AWADDR;
  wire [1:0]auto_ds_to_m01_regslice_AWBURST;
  wire [3:0]auto_ds_to_m01_regslice_AWCACHE;
  wire [7:0]auto_ds_to_m01_regslice_AWLEN;
  wire auto_ds_to_m01_regslice_AWLOCK;
  wire [2:0]auto_ds_to_m01_regslice_AWPROT;
  wire [3:0]auto_ds_to_m01_regslice_AWQOS;
  wire auto_ds_to_m01_regslice_AWREADY;
  wire [3:0]auto_ds_to_m01_regslice_AWREGION;
  wire [2:0]auto_ds_to_m01_regslice_AWSIZE;
  wire auto_ds_to_m01_regslice_AWVALID;
  wire auto_ds_to_m01_regslice_BREADY;
  wire [1:0]auto_ds_to_m01_regslice_BRESP;
  wire auto_ds_to_m01_regslice_BVALID;
  wire [31:0]auto_ds_to_m01_regslice_RDATA;
  wire auto_ds_to_m01_regslice_RLAST;
  wire auto_ds_to_m01_regslice_RREADY;
  wire [1:0]auto_ds_to_m01_regslice_RRESP;
  wire auto_ds_to_m01_regslice_RVALID;
  wire [31:0]auto_ds_to_m01_regslice_WDATA;
  wire auto_ds_to_m01_regslice_WLAST;
  wire auto_ds_to_m01_regslice_WREADY;
  wire [3:0]auto_ds_to_m01_regslice_WSTRB;
  wire auto_ds_to_m01_regslice_WVALID;
  wire [31:0]auto_rs_w_to_auto_ds_ARADDR;
  wire [1:0]auto_rs_w_to_auto_ds_ARBURST;
  wire [3:0]auto_rs_w_to_auto_ds_ARCACHE;
  wire auto_rs_w_to_auto_ds_ARID;
  wire [7:0]auto_rs_w_to_auto_ds_ARLEN;
  wire auto_rs_w_to_auto_ds_ARLOCK;
  wire [2:0]auto_rs_w_to_auto_ds_ARPROT;
  wire [3:0]auto_rs_w_to_auto_ds_ARQOS;
  wire auto_rs_w_to_auto_ds_ARREADY;
  wire [3:0]auto_rs_w_to_auto_ds_ARREGION;
  wire [2:0]auto_rs_w_to_auto_ds_ARSIZE;
  wire auto_rs_w_to_auto_ds_ARVALID;
  wire [31:0]auto_rs_w_to_auto_ds_AWADDR;
  wire [1:0]auto_rs_w_to_auto_ds_AWBURST;
  wire [3:0]auto_rs_w_to_auto_ds_AWCACHE;
  wire auto_rs_w_to_auto_ds_AWID;
  wire [7:0]auto_rs_w_to_auto_ds_AWLEN;
  wire auto_rs_w_to_auto_ds_AWLOCK;
  wire [2:0]auto_rs_w_to_auto_ds_AWPROT;
  wire [3:0]auto_rs_w_to_auto_ds_AWQOS;
  wire auto_rs_w_to_auto_ds_AWREADY;
  wire [3:0]auto_rs_w_to_auto_ds_AWREGION;
  wire [2:0]auto_rs_w_to_auto_ds_AWSIZE;
  wire auto_rs_w_to_auto_ds_AWVALID;
  wire auto_rs_w_to_auto_ds_BID;
  wire auto_rs_w_to_auto_ds_BREADY;
  wire [1:0]auto_rs_w_to_auto_ds_BRESP;
  wire auto_rs_w_to_auto_ds_BVALID;
  wire [63:0]auto_rs_w_to_auto_ds_RDATA;
  wire auto_rs_w_to_auto_ds_RID;
  wire auto_rs_w_to_auto_ds_RLAST;
  wire auto_rs_w_to_auto_ds_RREADY;
  wire [1:0]auto_rs_w_to_auto_ds_RRESP;
  wire auto_rs_w_to_auto_ds_RVALID;
  wire [63:0]auto_rs_w_to_auto_ds_WDATA;
  wire auto_rs_w_to_auto_ds_WLAST;
  wire auto_rs_w_to_auto_ds_WREADY;
  wire [7:0]auto_rs_w_to_auto_ds_WSTRB;
  wire auto_rs_w_to_auto_ds_WVALID;

  (* CHECK_LICENSE_TYPE = "bd_1_auto_ds_0,axi_dwidth_converter_v2_1_15_top,{}" *) 
  (* CORE_GENERATION_INFO = "bd_1_auto_ds_0,axi_dwidth_converter_v2_1_15_top,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_dwidth_converter,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_S_AXI_ID_WIDTH=1,C_SUPPORTS_ID=1,C_AXI_ADDR_WIDTH=32,C_S_AXI_DATA_WIDTH=64,C_M_AXI_DATA_WIDTH=32,C_AXI_SUPPORTS_WRITE=1,C_AXI_SUPPORTS_READ=1,C_FIFO_MODE=0,C_S_AXI_ACLK_RATIO=1,C_M_AXI_ACLK_RATIO=2,C_AXI_IS_ACLK_ASYNC=0,C_MAX_SPLIT_BEATS=256,C_PACKING_LEVEL=1,C_SYNCHRONIZER_STAGE=3}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "axi_dwidth_converter_v2_1_15_top,Vivado 2017.4" *) 
  bd_1_bd_1_auto_ds_0 auto_ds
       (.m_axi_araddr(auto_ds_to_m01_regslice_ARADDR),
        .m_axi_arburst(auto_ds_to_m01_regslice_ARBURST),
        .m_axi_arcache(auto_ds_to_m01_regslice_ARCACHE),
        .m_axi_arlen(auto_ds_to_m01_regslice_ARLEN),
        .m_axi_arlock(auto_ds_to_m01_regslice_ARLOCK),
        .m_axi_arprot(auto_ds_to_m01_regslice_ARPROT),
        .m_axi_arqos(auto_ds_to_m01_regslice_ARQOS),
        .m_axi_arready(auto_ds_to_m01_regslice_ARREADY),
        .m_axi_arregion(auto_ds_to_m01_regslice_ARREGION),
        .m_axi_arsize(auto_ds_to_m01_regslice_ARSIZE),
        .m_axi_arvalid(auto_ds_to_m01_regslice_ARVALID),
        .m_axi_awaddr(auto_ds_to_m01_regslice_AWADDR),
        .m_axi_awburst(auto_ds_to_m01_regslice_AWBURST),
        .m_axi_awcache(auto_ds_to_m01_regslice_AWCACHE),
        .m_axi_awlen(auto_ds_to_m01_regslice_AWLEN),
        .m_axi_awlock(auto_ds_to_m01_regslice_AWLOCK),
        .m_axi_awprot(auto_ds_to_m01_regslice_AWPROT),
        .m_axi_awqos(auto_ds_to_m01_regslice_AWQOS),
        .m_axi_awready(auto_ds_to_m01_regslice_AWREADY),
        .m_axi_awregion(auto_ds_to_m01_regslice_AWREGION),
        .m_axi_awsize(auto_ds_to_m01_regslice_AWSIZE),
        .m_axi_awvalid(auto_ds_to_m01_regslice_AWVALID),
        .m_axi_bready(auto_ds_to_m01_regslice_BREADY),
        .m_axi_bresp(auto_ds_to_m01_regslice_BRESP),
        .m_axi_bvalid(auto_ds_to_m01_regslice_BVALID),
        .m_axi_rdata(auto_ds_to_m01_regslice_RDATA),
        .m_axi_rlast(auto_ds_to_m01_regslice_RLAST),
        .m_axi_rready(auto_ds_to_m01_regslice_RREADY),
        .m_axi_rresp(auto_ds_to_m01_regslice_RRESP),
        .m_axi_rvalid(auto_ds_to_m01_regslice_RVALID),
        .m_axi_wdata(auto_ds_to_m01_regslice_WDATA),
        .m_axi_wlast(auto_ds_to_m01_regslice_WLAST),
        .m_axi_wready(auto_ds_to_m01_regslice_WREADY),
        .m_axi_wstrb(auto_ds_to_m01_regslice_WSTRB),
        .m_axi_wvalid(auto_ds_to_m01_regslice_WVALID),
        .s_axi_aclk(ACLK),
        .s_axi_araddr(auto_rs_w_to_auto_ds_ARADDR),
        .s_axi_arburst(auto_rs_w_to_auto_ds_ARBURST),
        .s_axi_arcache(auto_rs_w_to_auto_ds_ARCACHE),
        .s_axi_aresetn(ARESETN),
        .s_axi_arid(auto_rs_w_to_auto_ds_ARID),
        .s_axi_arlen(auto_rs_w_to_auto_ds_ARLEN),
        .s_axi_arlock(auto_rs_w_to_auto_ds_ARLOCK),
        .s_axi_arprot(auto_rs_w_to_auto_ds_ARPROT),
        .s_axi_arqos(auto_rs_w_to_auto_ds_ARQOS),
        .s_axi_arready(auto_rs_w_to_auto_ds_ARREADY),
        .s_axi_arregion(auto_rs_w_to_auto_ds_ARREGION),
        .s_axi_arsize(auto_rs_w_to_auto_ds_ARSIZE),
        .s_axi_arvalid(auto_rs_w_to_auto_ds_ARVALID),
        .s_axi_awaddr(auto_rs_w_to_auto_ds_AWADDR),
        .s_axi_awburst(auto_rs_w_to_auto_ds_AWBURST),
        .s_axi_awcache(auto_rs_w_to_auto_ds_AWCACHE),
        .s_axi_awid(auto_rs_w_to_auto_ds_AWID),
        .s_axi_awlen(auto_rs_w_to_auto_ds_AWLEN),
        .s_axi_awlock(auto_rs_w_to_auto_ds_AWLOCK),
        .s_axi_awprot(auto_rs_w_to_auto_ds_AWPROT),
        .s_axi_awqos(auto_rs_w_to_auto_ds_AWQOS),
        .s_axi_awready(auto_rs_w_to_auto_ds_AWREADY),
        .s_axi_awregion(auto_rs_w_to_auto_ds_AWREGION),
        .s_axi_awsize(auto_rs_w_to_auto_ds_AWSIZE),
        .s_axi_awvalid(auto_rs_w_to_auto_ds_AWVALID),
        .s_axi_bid(auto_rs_w_to_auto_ds_BID),
        .s_axi_bready(auto_rs_w_to_auto_ds_BREADY),
        .s_axi_bresp(auto_rs_w_to_auto_ds_BRESP),
        .s_axi_bvalid(auto_rs_w_to_auto_ds_BVALID),
        .s_axi_rdata(auto_rs_w_to_auto_ds_RDATA),
        .s_axi_rid(auto_rs_w_to_auto_ds_RID),
        .s_axi_rlast(auto_rs_w_to_auto_ds_RLAST),
        .s_axi_rready(auto_rs_w_to_auto_ds_RREADY),
        .s_axi_rresp(auto_rs_w_to_auto_ds_RRESP),
        .s_axi_rvalid(auto_rs_w_to_auto_ds_RVALID),
        .s_axi_wdata(auto_rs_w_to_auto_ds_WDATA),
        .s_axi_wlast(auto_rs_w_to_auto_ds_WLAST),
        .s_axi_wready(auto_rs_w_to_auto_ds_WREADY),
        .s_axi_wstrb(auto_rs_w_to_auto_ds_WSTRB),
        .s_axi_wvalid(auto_rs_w_to_auto_ds_WVALID));
  (* CHECK_LICENSE_TYPE = "bd_1_auto_rs_w_0,axi_register_slice_v2_1_15_axi_register_slice,{}" *) 
  (* CORE_GENERATION_INFO = "bd_1_auto_rs_w_0,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=64,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=0,C_REG_CONFIG_W=1,C_REG_CONFIG_B=0,C_REG_CONFIG_AR=0,C_REG_CONFIG_R=0,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
  bd_1_bd_1_auto_rs_w_0 auto_rs_w
       (.aclk(ACLK),
        .aresetn(ARESETN),
        .m_axi_araddr(auto_rs_w_to_auto_ds_ARADDR),
        .m_axi_arburst(auto_rs_w_to_auto_ds_ARBURST),
        .m_axi_arcache(auto_rs_w_to_auto_ds_ARCACHE),
        .m_axi_arid(auto_rs_w_to_auto_ds_ARID),
        .m_axi_arlen(auto_rs_w_to_auto_ds_ARLEN),
        .m_axi_arlock(auto_rs_w_to_auto_ds_ARLOCK),
        .m_axi_arprot(auto_rs_w_to_auto_ds_ARPROT),
        .m_axi_arqos(auto_rs_w_to_auto_ds_ARQOS),
        .m_axi_arready(auto_rs_w_to_auto_ds_ARREADY),
        .m_axi_arregion(auto_rs_w_to_auto_ds_ARREGION),
        .m_axi_arsize(auto_rs_w_to_auto_ds_ARSIZE),
        .m_axi_arvalid(auto_rs_w_to_auto_ds_ARVALID),
        .m_axi_awaddr(auto_rs_w_to_auto_ds_AWADDR),
        .m_axi_awburst(auto_rs_w_to_auto_ds_AWBURST),
        .m_axi_awcache(auto_rs_w_to_auto_ds_AWCACHE),
        .m_axi_awid(auto_rs_w_to_auto_ds_AWID),
        .m_axi_awlen(auto_rs_w_to_auto_ds_AWLEN),
        .m_axi_awlock(auto_rs_w_to_auto_ds_AWLOCK),
        .m_axi_awprot(auto_rs_w_to_auto_ds_AWPROT),
        .m_axi_awqos(auto_rs_w_to_auto_ds_AWQOS),
        .m_axi_awready(auto_rs_w_to_auto_ds_AWREADY),
        .m_axi_awregion(auto_rs_w_to_auto_ds_AWREGION),
        .m_axi_awsize(auto_rs_w_to_auto_ds_AWSIZE),
        .m_axi_awvalid(auto_rs_w_to_auto_ds_AWVALID),
        .m_axi_bid(auto_rs_w_to_auto_ds_BID),
        .m_axi_bready(auto_rs_w_to_auto_ds_BREADY),
        .m_axi_bresp(auto_rs_w_to_auto_ds_BRESP),
        .m_axi_bvalid(auto_rs_w_to_auto_ds_BVALID),
        .m_axi_rdata(auto_rs_w_to_auto_ds_RDATA),
        .m_axi_rid(auto_rs_w_to_auto_ds_RID),
        .m_axi_rlast(auto_rs_w_to_auto_ds_RLAST),
        .m_axi_rready(auto_rs_w_to_auto_ds_RREADY),
        .m_axi_rresp(auto_rs_w_to_auto_ds_RRESP),
        .m_axi_rvalid(auto_rs_w_to_auto_ds_RVALID),
        .m_axi_wdata(auto_rs_w_to_auto_ds_WDATA),
        .m_axi_wlast(auto_rs_w_to_auto_ds_WLAST),
        .m_axi_wready(auto_rs_w_to_auto_ds_WREADY),
        .m_axi_wstrb(auto_rs_w_to_auto_ds_WSTRB),
        .m_axi_wvalid(auto_rs_w_to_auto_ds_WVALID),
        .s_axi_araddr(S_AXI_araddr),
        .s_axi_arburst(S_AXI_arburst),
        .s_axi_arcache(S_AXI_arcache),
        .s_axi_arid(S_AXI_arid),
        .s_axi_arlen(S_AXI_arlen),
        .s_axi_arlock(S_AXI_arlock),
        .s_axi_arprot(S_AXI_arprot),
        .s_axi_arqos(S_AXI_arqos),
        .s_axi_arready(S_AXI_arready),
        .s_axi_arregion(S_AXI_arregion),
        .s_axi_arsize(S_AXI_arsize),
        .s_axi_arvalid(S_AXI_arvalid),
        .s_axi_awaddr(S_AXI_awaddr),
        .s_axi_awburst(S_AXI_awburst),
        .s_axi_awcache(S_AXI_awcache),
        .s_axi_awid(S_AXI_awid),
        .s_axi_awlen(S_AXI_awlen),
        .s_axi_awlock(S_AXI_awlock),
        .s_axi_awprot(S_AXI_awprot),
        .s_axi_awqos(S_AXI_awqos),
        .s_axi_awready(S_AXI_awready),
        .s_axi_awregion(S_AXI_awregion),
        .s_axi_awsize(S_AXI_awsize),
        .s_axi_awvalid(S_AXI_awvalid),
        .s_axi_bid(S_AXI_bid),
        .s_axi_bready(S_AXI_bready),
        .s_axi_bresp(S_AXI_bresp),
        .s_axi_bvalid(S_AXI_bvalid),
        .s_axi_rdata(S_AXI_rdata),
        .s_axi_rid(S_AXI_rid),
        .s_axi_rlast(S_AXI_rlast),
        .s_axi_rready(S_AXI_rready),
        .s_axi_rresp(S_AXI_rresp),
        .s_axi_rvalid(S_AXI_rvalid),
        .s_axi_wdata(S_AXI_wdata),
        .s_axi_wlast(S_AXI_wlast),
        .s_axi_wready(S_AXI_wready),
        .s_axi_wstrb(S_AXI_wstrb),
        .s_axi_wvalid(S_AXI_wvalid));
  (* CHECK_LICENSE_TYPE = "bd_1_m01_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{}" *) 
  (* CORE_GENERATION_INFO = "bd_1_m01_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=32,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=7,C_REG_CONFIG_W=1,C_REG_CONFIG_B=7,C_REG_CONFIG_AR=7,C_REG_CONFIG_R=1,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
  bd_1_bd_1_m01_regslice_0 m01_regslice
       (.aclk(M01_ACLK),
        .aresetn(M01_ARESETN),
        .m_axi_araddr(M01_AXI_araddr),
        .m_axi_arburst(M01_AXI_arburst),
        .m_axi_arcache(M01_AXI_arcache),
        .m_axi_arlen(M01_AXI_arlen),
        .m_axi_arlock(M01_AXI_arlock),
        .m_axi_arprot(M01_AXI_arprot),
        .m_axi_arqos(M01_AXI_arqos),
        .m_axi_arready(M01_AXI_arready),
        .m_axi_arregion(M01_AXI_arregion),
        .m_axi_arsize(M01_AXI_arsize),
        .m_axi_arvalid(M01_AXI_arvalid),
        .m_axi_awaddr(M01_AXI_awaddr),
        .m_axi_awburst(M01_AXI_awburst),
        .m_axi_awcache(M01_AXI_awcache),
        .m_axi_awlen(M01_AXI_awlen),
        .m_axi_awlock(M01_AXI_awlock),
        .m_axi_awprot(M01_AXI_awprot),
        .m_axi_awqos(M01_AXI_awqos),
        .m_axi_awready(M01_AXI_awready),
        .m_axi_awregion(M01_AXI_awregion),
        .m_axi_awsize(M01_AXI_awsize),
        .m_axi_awvalid(M01_AXI_awvalid),
        .m_axi_bready(M01_AXI_bready),
        .m_axi_bresp(M01_AXI_bresp),
        .m_axi_bvalid(M01_AXI_bvalid),
        .m_axi_rdata(M01_AXI_rdata),
        .m_axi_rlast(M01_AXI_rlast),
        .m_axi_rready(M01_AXI_rready),
        .m_axi_rresp(M01_AXI_rresp),
        .m_axi_rvalid(M01_AXI_rvalid),
        .m_axi_wdata(M01_AXI_wdata),
        .m_axi_wlast(M01_AXI_wlast),
        .m_axi_wready(M01_AXI_wready),
        .m_axi_wstrb(M01_AXI_wstrb),
        .m_axi_wvalid(M01_AXI_wvalid),
        .s_axi_araddr(auto_ds_to_m01_regslice_ARADDR),
        .s_axi_arburst(auto_ds_to_m01_regslice_ARBURST),
        .s_axi_arcache(auto_ds_to_m01_regslice_ARCACHE),
        .s_axi_arlen(auto_ds_to_m01_regslice_ARLEN),
        .s_axi_arlock(auto_ds_to_m01_regslice_ARLOCK),
        .s_axi_arprot(auto_ds_to_m01_regslice_ARPROT),
        .s_axi_arqos(auto_ds_to_m01_regslice_ARQOS),
        .s_axi_arready(auto_ds_to_m01_regslice_ARREADY),
        .s_axi_arregion(auto_ds_to_m01_regslice_ARREGION),
        .s_axi_arsize(auto_ds_to_m01_regslice_ARSIZE),
        .s_axi_arvalid(auto_ds_to_m01_regslice_ARVALID),
        .s_axi_awaddr(auto_ds_to_m01_regslice_AWADDR),
        .s_axi_awburst(auto_ds_to_m01_regslice_AWBURST),
        .s_axi_awcache(auto_ds_to_m01_regslice_AWCACHE),
        .s_axi_awlen(auto_ds_to_m01_regslice_AWLEN),
        .s_axi_awlock(auto_ds_to_m01_regslice_AWLOCK),
        .s_axi_awprot(auto_ds_to_m01_regslice_AWPROT),
        .s_axi_awqos(auto_ds_to_m01_regslice_AWQOS),
        .s_axi_awready(auto_ds_to_m01_regslice_AWREADY),
        .s_axi_awregion(auto_ds_to_m01_regslice_AWREGION),
        .s_axi_awsize(auto_ds_to_m01_regslice_AWSIZE),
        .s_axi_awvalid(auto_ds_to_m01_regslice_AWVALID),
        .s_axi_bready(auto_ds_to_m01_regslice_BREADY),
        .s_axi_bresp(auto_ds_to_m01_regslice_BRESP),
        .s_axi_bvalid(auto_ds_to_m01_regslice_BVALID),
        .s_axi_rdata(auto_ds_to_m01_regslice_RDATA),
        .s_axi_rlast(auto_ds_to_m01_regslice_RLAST),
        .s_axi_rready(auto_ds_to_m01_regslice_RREADY),
        .s_axi_rresp(auto_ds_to_m01_regslice_RRESP),
        .s_axi_rvalid(auto_ds_to_m01_regslice_RVALID),
        .s_axi_wdata(auto_ds_to_m01_regslice_WDATA),
        .s_axi_wlast(auto_ds_to_m01_regslice_WLAST),
        .s_axi_wready(auto_ds_to_m01_regslice_WREADY),
        .s_axi_wstrb(auto_ds_to_m01_regslice_WSTRB),
        .s_axi_wvalid(auto_ds_to_m01_regslice_WVALID));
endmodule

(* C_AUX_RESET_HIGH = "1'b0" *) (* C_AUX_RST_WIDTH = "4" *) (* C_EXT_RESET_HIGH = "1'b1" *) 
(* C_EXT_RST_WIDTH = "4" *) (* C_FAMILY = "artix7" *) (* C_NUM_BUS_RST = "1" *) 
(* C_NUM_INTERCONNECT_ARESETN = "1" *) (* C_NUM_PERP_ARESETN = "1" *) (* C_NUM_PERP_RST = "1" *) 
(* ORIG_REF_NAME = "proc_sys_reset" *) 
module bd_1_proc_sys_reset
   (slowest_sync_clk,
    ext_reset_in,
    aux_reset_in,
    mb_debug_sys_rst,
    dcm_locked,
    mb_reset,
    bus_struct_reset,
    peripheral_reset,
    interconnect_aresetn,
    peripheral_aresetn);
  input slowest_sync_clk;
  input ext_reset_in;
  input aux_reset_in;
  input mb_debug_sys_rst;
  input dcm_locked;
  output mb_reset;
  (* equivalent_register_removal = "no" *) output [0:0]bus_struct_reset;
  (* equivalent_register_removal = "no" *) output [0:0]peripheral_reset;
  (* equivalent_register_removal = "no" *) output [0:0]interconnect_aresetn;
  (* equivalent_register_removal = "no" *) output [0:0]peripheral_aresetn;

  wire \<const0> ;
  wire \<const1> ;
  wire Bsr_out;
  wire MB_out;
  wire Pr_out;
  wire SEQ_n_3;
  wire SEQ_n_4;
  wire aux_reset_in;
  wire [0:0]bus_struct_reset;
  wire dcm_locked;
  wire ext_reset_in;
  wire [0:0]interconnect_aresetn;
  wire lpf_int;
  wire mb_debug_sys_rst;
  wire mb_reset;
  wire [0:0]peripheral_aresetn;
  wire [0:0]peripheral_reset;
  wire slowest_sync_clk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(SEQ_n_3),
        .Q(interconnect_aresetn),
        .R(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(SEQ_n_4),
        .Q(peripheral_aresetn),
        .R(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \BSR_OUT_DFF[0].FDRE_BSR 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(Bsr_out),
        .Q(bus_struct_reset),
        .R(\<const0> ));
  bd_1_lpf EXT_LPF
       (.aux_reset_in(aux_reset_in),
        .dcm_locked(dcm_locked),
        .ext_reset_in(ext_reset_in),
        .lpf_int(lpf_int),
        .mb_debug_sys_rst(mb_debug_sys_rst),
        .slowest_sync_clk(slowest_sync_clk));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    FDRE_inst
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(MB_out),
        .Q(mb_reset),
        .R(\<const0> ));
  GND GND
       (.G(\<const0> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \PR_OUT_DFF[0].FDRE_PER 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(Pr_out),
        .Q(peripheral_reset),
        .R(\<const0> ));
  bd_1_sequence_psr SEQ
       (.\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N (SEQ_n_3),
        .\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (SEQ_n_4),
        .Bsr_out(Bsr_out),
        .MB_out(MB_out),
        .Pr_out(Pr_out),
        .lpf_int(lpf_int),
        .slowest_sync_clk(slowest_sync_clk));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "s00_couplers_imp_W8W9XW" *) 
module bd_1_s00_couplers_imp_W8W9XW
   (S00_AXI_awready,
    S00_AXI_wready,
    S00_AXI_bresp,
    S00_AXI_bvalid,
    S00_AXI_arready,
    S00_AXI_rdata,
    S00_AXI_rresp,
    S00_AXI_rlast,
    S00_AXI_rvalid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awvalid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_bready,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arvalid,
    m_axi_rready,
    S00_ACLK,
    S00_ARESETN,
    S00_AXI_awaddr,
    S00_AXI_awlen,
    S00_AXI_awsize,
    S00_AXI_awburst,
    S00_AXI_awlock,
    S00_AXI_awcache,
    S00_AXI_awprot,
    S00_AXI_awregion,
    S00_AXI_awqos,
    S00_AXI_awvalid,
    S00_AXI_wdata,
    S00_AXI_wstrb,
    S00_AXI_wlast,
    S00_AXI_wvalid,
    S00_AXI_bready,
    S00_AXI_araddr,
    S00_AXI_arlen,
    S00_AXI_arsize,
    S00_AXI_arburst,
    S00_AXI_arlock,
    S00_AXI_arcache,
    S00_AXI_arprot,
    S00_AXI_arregion,
    S00_AXI_arqos,
    S00_AXI_arvalid,
    S00_AXI_rready,
    s_axi_awready,
    s_axi_wready,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_arready,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid);
  output S00_AXI_awready;
  output S00_AXI_wready;
  output [1:0]S00_AXI_bresp;
  output S00_AXI_bvalid;
  output S00_AXI_arready;
  output [63:0]S00_AXI_rdata;
  output [1:0]S00_AXI_rresp;
  output S00_AXI_rlast;
  output S00_AXI_rvalid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output m_axi_awvalid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output m_axi_wvalid;
  output m_axi_bready;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output m_axi_arvalid;
  output m_axi_rready;
  input S00_ACLK;
  input S00_ARESETN;
  input [31:0]S00_AXI_awaddr;
  input [7:0]S00_AXI_awlen;
  input [2:0]S00_AXI_awsize;
  input [1:0]S00_AXI_awburst;
  input [0:0]S00_AXI_awlock;
  input [3:0]S00_AXI_awcache;
  input [2:0]S00_AXI_awprot;
  input [3:0]S00_AXI_awregion;
  input [3:0]S00_AXI_awqos;
  input S00_AXI_awvalid;
  input [63:0]S00_AXI_wdata;
  input [7:0]S00_AXI_wstrb;
  input S00_AXI_wlast;
  input S00_AXI_wvalid;
  input S00_AXI_bready;
  input [31:0]S00_AXI_araddr;
  input [7:0]S00_AXI_arlen;
  input [2:0]S00_AXI_arsize;
  input [1:0]S00_AXI_arburst;
  input [0:0]S00_AXI_arlock;
  input [3:0]S00_AXI_arcache;
  input [2:0]S00_AXI_arprot;
  input [3:0]S00_AXI_arregion;
  input [3:0]S00_AXI_arqos;
  input S00_AXI_arvalid;
  input S00_AXI_rready;
  input [0:0]s_axi_awready;
  input [0:0]s_axi_wready;
  input [1:0]s_axi_bresp;
  input [0:0]s_axi_bvalid;
  input [0:0]s_axi_arready;
  input [63:0]s_axi_rdata;
  input [1:0]s_axi_rresp;
  input [0:0]s_axi_rlast;
  input [0:0]s_axi_rvalid;

  wire S00_ACLK;
  wire S00_ARESETN;
  wire [31:0]S00_AXI_araddr;
  wire [1:0]S00_AXI_arburst;
  wire [3:0]S00_AXI_arcache;
  wire [7:0]S00_AXI_arlen;
  wire [0:0]S00_AXI_arlock;
  wire [2:0]S00_AXI_arprot;
  wire [3:0]S00_AXI_arqos;
  wire S00_AXI_arready;
  wire [3:0]S00_AXI_arregion;
  wire [2:0]S00_AXI_arsize;
  wire S00_AXI_arvalid;
  wire [31:0]S00_AXI_awaddr;
  wire [1:0]S00_AXI_awburst;
  wire [3:0]S00_AXI_awcache;
  wire [7:0]S00_AXI_awlen;
  wire [0:0]S00_AXI_awlock;
  wire [2:0]S00_AXI_awprot;
  wire [3:0]S00_AXI_awqos;
  wire S00_AXI_awready;
  wire [3:0]S00_AXI_awregion;
  wire [2:0]S00_AXI_awsize;
  wire S00_AXI_awvalid;
  wire S00_AXI_bready;
  wire [1:0]S00_AXI_bresp;
  wire S00_AXI_bvalid;
  wire [63:0]S00_AXI_rdata;
  wire S00_AXI_rlast;
  wire S00_AXI_rready;
  wire [1:0]S00_AXI_rresp;
  wire S00_AXI_rvalid;
  wire [63:0]S00_AXI_wdata;
  wire S00_AXI_wlast;
  wire S00_AXI_wready;
  wire [7:0]S00_AXI_wstrb;
  wire S00_AXI_wvalid;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [3:0]m_axi_arcache;
  wire [7:0]m_axi_arlen;
  wire [0:0]m_axi_arlock;
  wire [2:0]m_axi_arprot;
  wire [3:0]m_axi_arqos;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [3:0]m_axi_awcache;
  wire [7:0]m_axi_awlen;
  wire [0:0]m_axi_awlock;
  wire [2:0]m_axi_awprot;
  wire [3:0]m_axi_awqos;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire m_axi_rready;
  wire [63:0]m_axi_wdata;
  wire m_axi_wlast;
  wire [7:0]m_axi_wstrb;
  wire m_axi_wvalid;
  wire [0:0]s_axi_arready;
  wire [0:0]s_axi_awready;
  wire [1:0]s_axi_bresp;
  wire [0:0]s_axi_bvalid;
  wire [63:0]s_axi_rdata;
  wire [0:0]s_axi_rlast;
  wire [1:0]s_axi_rresp;
  wire [0:0]s_axi_rvalid;
  wire [0:0]s_axi_wready;

  (* CHECK_LICENSE_TYPE = "bd_1_s00_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{}" *) 
  (* CORE_GENERATION_INFO = "bd_1_s00_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=64,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=7,C_REG_CONFIG_W=1,C_REG_CONFIG_B=7,C_REG_CONFIG_AR=7,C_REG_CONFIG_R=1,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
  bd_1_bd_1_s00_regslice_0 s00_regslice
       (.aclk(S00_ACLK),
        .aresetn(S00_ARESETN),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arcache(m_axi_arcache),
        .m_axi_arlen(m_axi_arlen),
        .m_axi_arlock(m_axi_arlock),
        .m_axi_arprot(m_axi_arprot),
        .m_axi_arqos(m_axi_arqos),
        .m_axi_arready(s_axi_arready),
        .m_axi_arsize(m_axi_arsize),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awcache(m_axi_awcache),
        .m_axi_awlen(m_axi_awlen),
        .m_axi_awlock(m_axi_awlock),
        .m_axi_awprot(m_axi_awprot),
        .m_axi_awqos(m_axi_awqos),
        .m_axi_awready(s_axi_awready),
        .m_axi_awsize(m_axi_awsize),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(s_axi_bresp),
        .m_axi_bvalid(s_axi_bvalid),
        .m_axi_rdata(s_axi_rdata),
        .m_axi_rlast(s_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(s_axi_rresp),
        .m_axi_rvalid(s_axi_rvalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(s_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wvalid(m_axi_wvalid),
        .s_axi_araddr(S00_AXI_araddr),
        .s_axi_arburst(S00_AXI_arburst),
        .s_axi_arcache(S00_AXI_arcache),
        .s_axi_arlen(S00_AXI_arlen),
        .s_axi_arlock(S00_AXI_arlock),
        .s_axi_arprot(S00_AXI_arprot),
        .s_axi_arqos(S00_AXI_arqos),
        .s_axi_arready(S00_AXI_arready),
        .s_axi_arregion(S00_AXI_arregion),
        .s_axi_arsize(S00_AXI_arsize),
        .s_axi_arvalid(S00_AXI_arvalid),
        .s_axi_awaddr(S00_AXI_awaddr),
        .s_axi_awburst(S00_AXI_awburst),
        .s_axi_awcache(S00_AXI_awcache),
        .s_axi_awlen(S00_AXI_awlen),
        .s_axi_awlock(S00_AXI_awlock),
        .s_axi_awprot(S00_AXI_awprot),
        .s_axi_awqos(S00_AXI_awqos),
        .s_axi_awready(S00_AXI_awready),
        .s_axi_awregion(S00_AXI_awregion),
        .s_axi_awsize(S00_AXI_awsize),
        .s_axi_awvalid(S00_AXI_awvalid),
        .s_axi_bready(S00_AXI_bready),
        .s_axi_bresp(S00_AXI_bresp),
        .s_axi_bvalid(S00_AXI_bvalid),
        .s_axi_rdata(S00_AXI_rdata),
        .s_axi_rlast(S00_AXI_rlast),
        .s_axi_rready(S00_AXI_rready),
        .s_axi_rresp(S00_AXI_rresp),
        .s_axi_rvalid(S00_AXI_rvalid),
        .s_axi_wdata(S00_AXI_wdata),
        .s_axi_wlast(S00_AXI_wlast),
        .s_axi_wready(S00_AXI_wready),
        .s_axi_wstrb(S00_AXI_wstrb),
        .s_axi_wvalid(S00_AXI_wvalid));
endmodule

(* ORIG_REF_NAME = "s01_couplers_imp_1SPJ6ZM" *) 
module bd_1_s01_couplers_imp_1SPJ6ZM
   (M_AXI_awaddr,
    M_AXI_awlen,
    M_AXI_awsize,
    M_AXI_awburst,
    M_AXI_awlock,
    M_AXI_awcache,
    M_AXI_awprot,
    M_AXI_awqos,
    M_AXI_awvalid,
    M_AXI_wdata,
    M_AXI_wstrb,
    M_AXI_wlast,
    M_AXI_wvalid,
    M_AXI_bready,
    M_AXI_araddr,
    M_AXI_arlen,
    M_AXI_arsize,
    M_AXI_arburst,
    M_AXI_arlock,
    M_AXI_arcache,
    M_AXI_arprot,
    M_AXI_arqos,
    M_AXI_arvalid,
    M_AXI_rready,
    S01_AXI_awready,
    S01_AXI_wready,
    S01_AXI_bresp,
    S01_AXI_bvalid,
    S01_AXI_arready,
    S01_AXI_rdata,
    S01_AXI_rresp,
    S01_AXI_rlast,
    S01_AXI_rvalid,
    S01_ACLK,
    S01_ARESETN,
    M_AXI_awready,
    M_AXI_wready,
    M_AXI_bresp,
    M_AXI_bvalid,
    M_AXI_arready,
    M_AXI_rdata,
    M_AXI_rresp,
    M_AXI_rlast,
    M_AXI_rvalid,
    S01_AXI_awaddr,
    S01_AXI_awlen,
    S01_AXI_awsize,
    S01_AXI_awburst,
    S01_AXI_awlock,
    S01_AXI_awcache,
    S01_AXI_awprot,
    S01_AXI_awregion,
    S01_AXI_awqos,
    S01_AXI_awvalid,
    S01_AXI_wdata,
    S01_AXI_wstrb,
    S01_AXI_wlast,
    S01_AXI_wvalid,
    S01_AXI_bready,
    S01_AXI_araddr,
    S01_AXI_arlen,
    S01_AXI_arsize,
    S01_AXI_arburst,
    S01_AXI_arlock,
    S01_AXI_arcache,
    S01_AXI_arprot,
    S01_AXI_arregion,
    S01_AXI_arqos,
    S01_AXI_arvalid,
    S01_AXI_rready);
  output [31:0]M_AXI_awaddr;
  output [7:0]M_AXI_awlen;
  output [2:0]M_AXI_awsize;
  output [1:0]M_AXI_awburst;
  output [0:0]M_AXI_awlock;
  output [3:0]M_AXI_awcache;
  output [2:0]M_AXI_awprot;
  output [3:0]M_AXI_awqos;
  output M_AXI_awvalid;
  output [63:0]M_AXI_wdata;
  output [7:0]M_AXI_wstrb;
  output M_AXI_wlast;
  output M_AXI_wvalid;
  output M_AXI_bready;
  output [31:0]M_AXI_araddr;
  output [7:0]M_AXI_arlen;
  output [2:0]M_AXI_arsize;
  output [1:0]M_AXI_arburst;
  output [0:0]M_AXI_arlock;
  output [3:0]M_AXI_arcache;
  output [2:0]M_AXI_arprot;
  output [3:0]M_AXI_arqos;
  output M_AXI_arvalid;
  output M_AXI_rready;
  output S01_AXI_awready;
  output S01_AXI_wready;
  output [1:0]S01_AXI_bresp;
  output S01_AXI_bvalid;
  output S01_AXI_arready;
  output [31:0]S01_AXI_rdata;
  output [1:0]S01_AXI_rresp;
  output S01_AXI_rlast;
  output S01_AXI_rvalid;
  input S01_ACLK;
  input S01_ARESETN;
  input M_AXI_awready;
  input M_AXI_wready;
  input [1:0]M_AXI_bresp;
  input M_AXI_bvalid;
  input M_AXI_arready;
  input [63:0]M_AXI_rdata;
  input [1:0]M_AXI_rresp;
  input M_AXI_rlast;
  input M_AXI_rvalid;
  input [31:0]S01_AXI_awaddr;
  input [7:0]S01_AXI_awlen;
  input [2:0]S01_AXI_awsize;
  input [1:0]S01_AXI_awburst;
  input [0:0]S01_AXI_awlock;
  input [3:0]S01_AXI_awcache;
  input [2:0]S01_AXI_awprot;
  input [3:0]S01_AXI_awregion;
  input [3:0]S01_AXI_awqos;
  input S01_AXI_awvalid;
  input [31:0]S01_AXI_wdata;
  input [3:0]S01_AXI_wstrb;
  input S01_AXI_wlast;
  input S01_AXI_wvalid;
  input S01_AXI_bready;
  input [31:0]S01_AXI_araddr;
  input [7:0]S01_AXI_arlen;
  input [2:0]S01_AXI_arsize;
  input [1:0]S01_AXI_arburst;
  input [0:0]S01_AXI_arlock;
  input [3:0]S01_AXI_arcache;
  input [2:0]S01_AXI_arprot;
  input [3:0]S01_AXI_arregion;
  input [3:0]S01_AXI_arqos;
  input S01_AXI_arvalid;
  input S01_AXI_rready;

  wire [31:0]M_AXI_araddr;
  wire [1:0]M_AXI_arburst;
  wire [3:0]M_AXI_arcache;
  wire [7:0]M_AXI_arlen;
  wire [0:0]M_AXI_arlock;
  wire [2:0]M_AXI_arprot;
  wire [3:0]M_AXI_arqos;
  wire M_AXI_arready;
  wire [2:0]M_AXI_arsize;
  wire M_AXI_arvalid;
  wire [31:0]M_AXI_awaddr;
  wire [1:0]M_AXI_awburst;
  wire [3:0]M_AXI_awcache;
  wire [7:0]M_AXI_awlen;
  wire [0:0]M_AXI_awlock;
  wire [2:0]M_AXI_awprot;
  wire [3:0]M_AXI_awqos;
  wire M_AXI_awready;
  wire [2:0]M_AXI_awsize;
  wire M_AXI_awvalid;
  wire M_AXI_bready;
  wire [1:0]M_AXI_bresp;
  wire M_AXI_bvalid;
  wire [63:0]M_AXI_rdata;
  wire M_AXI_rlast;
  wire M_AXI_rready;
  wire [1:0]M_AXI_rresp;
  wire M_AXI_rvalid;
  wire [63:0]M_AXI_wdata;
  wire M_AXI_wlast;
  wire M_AXI_wready;
  wire [7:0]M_AXI_wstrb;
  wire M_AXI_wvalid;
  wire S01_ACLK;
  wire S01_ARESETN;
  wire [31:0]S01_AXI_araddr;
  wire [1:0]S01_AXI_arburst;
  wire [3:0]S01_AXI_arcache;
  wire [7:0]S01_AXI_arlen;
  wire [0:0]S01_AXI_arlock;
  wire [2:0]S01_AXI_arprot;
  wire [3:0]S01_AXI_arqos;
  wire S01_AXI_arready;
  wire [3:0]S01_AXI_arregion;
  wire [2:0]S01_AXI_arsize;
  wire S01_AXI_arvalid;
  wire [31:0]S01_AXI_awaddr;
  wire [1:0]S01_AXI_awburst;
  wire [3:0]S01_AXI_awcache;
  wire [7:0]S01_AXI_awlen;
  wire [0:0]S01_AXI_awlock;
  wire [2:0]S01_AXI_awprot;
  wire [3:0]S01_AXI_awqos;
  wire S01_AXI_awready;
  wire [3:0]S01_AXI_awregion;
  wire [2:0]S01_AXI_awsize;
  wire S01_AXI_awvalid;
  wire S01_AXI_bready;
  wire [1:0]S01_AXI_bresp;
  wire S01_AXI_bvalid;
  wire [31:0]S01_AXI_rdata;
  wire S01_AXI_rlast;
  wire S01_AXI_rready;
  wire [1:0]S01_AXI_rresp;
  wire S01_AXI_rvalid;
  wire [31:0]S01_AXI_wdata;
  wire S01_AXI_wlast;
  wire S01_AXI_wready;
  wire [3:0]S01_AXI_wstrb;
  wire S01_AXI_wvalid;
  wire [31:0]auto_us_to_auto_rs_w_ARADDR;
  wire [1:0]auto_us_to_auto_rs_w_ARBURST;
  wire [3:0]auto_us_to_auto_rs_w_ARCACHE;
  wire [7:0]auto_us_to_auto_rs_w_ARLEN;
  wire auto_us_to_auto_rs_w_ARLOCK;
  wire [2:0]auto_us_to_auto_rs_w_ARPROT;
  wire [3:0]auto_us_to_auto_rs_w_ARQOS;
  wire auto_us_to_auto_rs_w_ARREADY;
  wire [3:0]auto_us_to_auto_rs_w_ARREGION;
  wire [2:0]auto_us_to_auto_rs_w_ARSIZE;
  wire auto_us_to_auto_rs_w_ARVALID;
  wire [31:0]auto_us_to_auto_rs_w_AWADDR;
  wire [1:0]auto_us_to_auto_rs_w_AWBURST;
  wire [3:0]auto_us_to_auto_rs_w_AWCACHE;
  wire [7:0]auto_us_to_auto_rs_w_AWLEN;
  wire auto_us_to_auto_rs_w_AWLOCK;
  wire [2:0]auto_us_to_auto_rs_w_AWPROT;
  wire [3:0]auto_us_to_auto_rs_w_AWQOS;
  wire auto_us_to_auto_rs_w_AWREADY;
  wire [3:0]auto_us_to_auto_rs_w_AWREGION;
  wire [2:0]auto_us_to_auto_rs_w_AWSIZE;
  wire auto_us_to_auto_rs_w_AWVALID;
  wire auto_us_to_auto_rs_w_BREADY;
  wire [1:0]auto_us_to_auto_rs_w_BRESP;
  wire auto_us_to_auto_rs_w_BVALID;
  wire [63:0]auto_us_to_auto_rs_w_RDATA;
  wire auto_us_to_auto_rs_w_RLAST;
  wire auto_us_to_auto_rs_w_RREADY;
  wire [1:0]auto_us_to_auto_rs_w_RRESP;
  wire auto_us_to_auto_rs_w_RVALID;
  wire [63:0]auto_us_to_auto_rs_w_WDATA;
  wire auto_us_to_auto_rs_w_WLAST;
  wire auto_us_to_auto_rs_w_WREADY;
  wire [7:0]auto_us_to_auto_rs_w_WSTRB;
  wire auto_us_to_auto_rs_w_WVALID;
  wire [31:0]s01_regslice_to_auto_us_ARADDR;
  wire [1:0]s01_regslice_to_auto_us_ARBURST;
  wire [3:0]s01_regslice_to_auto_us_ARCACHE;
  wire [7:0]s01_regslice_to_auto_us_ARLEN;
  wire s01_regslice_to_auto_us_ARLOCK;
  wire [2:0]s01_regslice_to_auto_us_ARPROT;
  wire [3:0]s01_regslice_to_auto_us_ARQOS;
  wire s01_regslice_to_auto_us_ARREADY;
  wire [3:0]s01_regslice_to_auto_us_ARREGION;
  wire [2:0]s01_regslice_to_auto_us_ARSIZE;
  wire s01_regslice_to_auto_us_ARVALID;
  wire [31:0]s01_regslice_to_auto_us_AWADDR;
  wire [1:0]s01_regslice_to_auto_us_AWBURST;
  wire [3:0]s01_regslice_to_auto_us_AWCACHE;
  wire [7:0]s01_regslice_to_auto_us_AWLEN;
  wire s01_regslice_to_auto_us_AWLOCK;
  wire [2:0]s01_regslice_to_auto_us_AWPROT;
  wire [3:0]s01_regslice_to_auto_us_AWQOS;
  wire s01_regslice_to_auto_us_AWREADY;
  wire [3:0]s01_regslice_to_auto_us_AWREGION;
  wire [2:0]s01_regslice_to_auto_us_AWSIZE;
  wire s01_regslice_to_auto_us_AWVALID;
  wire s01_regslice_to_auto_us_BREADY;
  wire [1:0]s01_regslice_to_auto_us_BRESP;
  wire s01_regslice_to_auto_us_BVALID;
  wire [31:0]s01_regslice_to_auto_us_RDATA;
  wire s01_regslice_to_auto_us_RLAST;
  wire s01_regslice_to_auto_us_RREADY;
  wire [1:0]s01_regslice_to_auto_us_RRESP;
  wire s01_regslice_to_auto_us_RVALID;
  wire [31:0]s01_regslice_to_auto_us_WDATA;
  wire s01_regslice_to_auto_us_WLAST;
  wire s01_regslice_to_auto_us_WREADY;
  wire [3:0]s01_regslice_to_auto_us_WSTRB;
  wire s01_regslice_to_auto_us_WVALID;

  (* CHECK_LICENSE_TYPE = "bd_1_auto_rs_w_1,axi_register_slice_v2_1_15_axi_register_slice,{}" *) 
  (* CORE_GENERATION_INFO = "bd_1_auto_rs_w_1,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=64,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=0,C_REG_CONFIG_W=1,C_REG_CONFIG_B=0,C_REG_CONFIG_AR=0,C_REG_CONFIG_R=0,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
  bd_1_bd_1_auto_rs_w_1 auto_rs_w
       (.aclk(S01_ACLK),
        .aresetn(S01_ARESETN),
        .m_axi_araddr(M_AXI_araddr),
        .m_axi_arburst(M_AXI_arburst),
        .m_axi_arcache(M_AXI_arcache),
        .m_axi_arlen(M_AXI_arlen),
        .m_axi_arlock(M_AXI_arlock),
        .m_axi_arprot(M_AXI_arprot),
        .m_axi_arqos(M_AXI_arqos),
        .m_axi_arready(M_AXI_arready),
        .m_axi_arsize(M_AXI_arsize),
        .m_axi_arvalid(M_AXI_arvalid),
        .m_axi_awaddr(M_AXI_awaddr),
        .m_axi_awburst(M_AXI_awburst),
        .m_axi_awcache(M_AXI_awcache),
        .m_axi_awlen(M_AXI_awlen),
        .m_axi_awlock(M_AXI_awlock),
        .m_axi_awprot(M_AXI_awprot),
        .m_axi_awqos(M_AXI_awqos),
        .m_axi_awready(M_AXI_awready),
        .m_axi_awsize(M_AXI_awsize),
        .m_axi_awvalid(M_AXI_awvalid),
        .m_axi_bready(M_AXI_bready),
        .m_axi_bresp(M_AXI_bresp),
        .m_axi_bvalid(M_AXI_bvalid),
        .m_axi_rdata(M_AXI_rdata),
        .m_axi_rlast(M_AXI_rlast),
        .m_axi_rready(M_AXI_rready),
        .m_axi_rresp(M_AXI_rresp),
        .m_axi_rvalid(M_AXI_rvalid),
        .m_axi_wdata(M_AXI_wdata),
        .m_axi_wlast(M_AXI_wlast),
        .m_axi_wready(M_AXI_wready),
        .m_axi_wstrb(M_AXI_wstrb),
        .m_axi_wvalid(M_AXI_wvalid),
        .s_axi_araddr(auto_us_to_auto_rs_w_ARADDR),
        .s_axi_arburst(auto_us_to_auto_rs_w_ARBURST),
        .s_axi_arcache(auto_us_to_auto_rs_w_ARCACHE),
        .s_axi_arlen(auto_us_to_auto_rs_w_ARLEN),
        .s_axi_arlock(auto_us_to_auto_rs_w_ARLOCK),
        .s_axi_arprot(auto_us_to_auto_rs_w_ARPROT),
        .s_axi_arqos(auto_us_to_auto_rs_w_ARQOS),
        .s_axi_arready(auto_us_to_auto_rs_w_ARREADY),
        .s_axi_arregion(auto_us_to_auto_rs_w_ARREGION),
        .s_axi_arsize(auto_us_to_auto_rs_w_ARSIZE),
        .s_axi_arvalid(auto_us_to_auto_rs_w_ARVALID),
        .s_axi_awaddr(auto_us_to_auto_rs_w_AWADDR),
        .s_axi_awburst(auto_us_to_auto_rs_w_AWBURST),
        .s_axi_awcache(auto_us_to_auto_rs_w_AWCACHE),
        .s_axi_awlen(auto_us_to_auto_rs_w_AWLEN),
        .s_axi_awlock(auto_us_to_auto_rs_w_AWLOCK),
        .s_axi_awprot(auto_us_to_auto_rs_w_AWPROT),
        .s_axi_awqos(auto_us_to_auto_rs_w_AWQOS),
        .s_axi_awready(auto_us_to_auto_rs_w_AWREADY),
        .s_axi_awregion(auto_us_to_auto_rs_w_AWREGION),
        .s_axi_awsize(auto_us_to_auto_rs_w_AWSIZE),
        .s_axi_awvalid(auto_us_to_auto_rs_w_AWVALID),
        .s_axi_bready(auto_us_to_auto_rs_w_BREADY),
        .s_axi_bresp(auto_us_to_auto_rs_w_BRESP),
        .s_axi_bvalid(auto_us_to_auto_rs_w_BVALID),
        .s_axi_rdata(auto_us_to_auto_rs_w_RDATA),
        .s_axi_rlast(auto_us_to_auto_rs_w_RLAST),
        .s_axi_rready(auto_us_to_auto_rs_w_RREADY),
        .s_axi_rresp(auto_us_to_auto_rs_w_RRESP),
        .s_axi_rvalid(auto_us_to_auto_rs_w_RVALID),
        .s_axi_wdata(auto_us_to_auto_rs_w_WDATA),
        .s_axi_wlast(auto_us_to_auto_rs_w_WLAST),
        .s_axi_wready(auto_us_to_auto_rs_w_WREADY),
        .s_axi_wstrb(auto_us_to_auto_rs_w_WSTRB),
        .s_axi_wvalid(auto_us_to_auto_rs_w_WVALID));
  (* CHECK_LICENSE_TYPE = "bd_1_auto_us_0,axi_dwidth_converter_v2_1_15_top,{}" *) 
  (* CORE_GENERATION_INFO = "bd_1_auto_us_0,axi_dwidth_converter_v2_1_15_top,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_dwidth_converter,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_S_AXI_ID_WIDTH=1,C_SUPPORTS_ID=0,C_AXI_ADDR_WIDTH=32,C_S_AXI_DATA_WIDTH=32,C_M_AXI_DATA_WIDTH=64,C_AXI_SUPPORTS_WRITE=1,C_AXI_SUPPORTS_READ=1,C_FIFO_MODE=0,C_S_AXI_ACLK_RATIO=1,C_M_AXI_ACLK_RATIO=2,C_AXI_IS_ACLK_ASYNC=0,C_MAX_SPLIT_BEATS=16,C_PACKING_LEVEL=1,C_SYNCHRONIZER_STAGE=3}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "axi_dwidth_converter_v2_1_15_top,Vivado 2017.4" *) 
  bd_1_bd_1_auto_us_0 auto_us
       (.m_axi_araddr(auto_us_to_auto_rs_w_ARADDR),
        .m_axi_arburst(auto_us_to_auto_rs_w_ARBURST),
        .m_axi_arcache(auto_us_to_auto_rs_w_ARCACHE),
        .m_axi_arlen(auto_us_to_auto_rs_w_ARLEN),
        .m_axi_arlock(auto_us_to_auto_rs_w_ARLOCK),
        .m_axi_arprot(auto_us_to_auto_rs_w_ARPROT),
        .m_axi_arqos(auto_us_to_auto_rs_w_ARQOS),
        .m_axi_arready(auto_us_to_auto_rs_w_ARREADY),
        .m_axi_arregion(auto_us_to_auto_rs_w_ARREGION),
        .m_axi_arsize(auto_us_to_auto_rs_w_ARSIZE),
        .m_axi_arvalid(auto_us_to_auto_rs_w_ARVALID),
        .m_axi_awaddr(auto_us_to_auto_rs_w_AWADDR),
        .m_axi_awburst(auto_us_to_auto_rs_w_AWBURST),
        .m_axi_awcache(auto_us_to_auto_rs_w_AWCACHE),
        .m_axi_awlen(auto_us_to_auto_rs_w_AWLEN),
        .m_axi_awlock(auto_us_to_auto_rs_w_AWLOCK),
        .m_axi_awprot(auto_us_to_auto_rs_w_AWPROT),
        .m_axi_awqos(auto_us_to_auto_rs_w_AWQOS),
        .m_axi_awready(auto_us_to_auto_rs_w_AWREADY),
        .m_axi_awregion(auto_us_to_auto_rs_w_AWREGION),
        .m_axi_awsize(auto_us_to_auto_rs_w_AWSIZE),
        .m_axi_awvalid(auto_us_to_auto_rs_w_AWVALID),
        .m_axi_bready(auto_us_to_auto_rs_w_BREADY),
        .m_axi_bresp(auto_us_to_auto_rs_w_BRESP),
        .m_axi_bvalid(auto_us_to_auto_rs_w_BVALID),
        .m_axi_rdata(auto_us_to_auto_rs_w_RDATA),
        .m_axi_rlast(auto_us_to_auto_rs_w_RLAST),
        .m_axi_rready(auto_us_to_auto_rs_w_RREADY),
        .m_axi_rresp(auto_us_to_auto_rs_w_RRESP),
        .m_axi_rvalid(auto_us_to_auto_rs_w_RVALID),
        .m_axi_wdata(auto_us_to_auto_rs_w_WDATA),
        .m_axi_wlast(auto_us_to_auto_rs_w_WLAST),
        .m_axi_wready(auto_us_to_auto_rs_w_WREADY),
        .m_axi_wstrb(auto_us_to_auto_rs_w_WSTRB),
        .m_axi_wvalid(auto_us_to_auto_rs_w_WVALID),
        .s_axi_aclk(S01_ACLK),
        .s_axi_araddr(s01_regslice_to_auto_us_ARADDR),
        .s_axi_arburst(s01_regslice_to_auto_us_ARBURST),
        .s_axi_arcache(s01_regslice_to_auto_us_ARCACHE),
        .s_axi_aresetn(S01_ARESETN),
        .s_axi_arlen(s01_regslice_to_auto_us_ARLEN),
        .s_axi_arlock(s01_regslice_to_auto_us_ARLOCK),
        .s_axi_arprot(s01_regslice_to_auto_us_ARPROT),
        .s_axi_arqos(s01_regslice_to_auto_us_ARQOS),
        .s_axi_arready(s01_regslice_to_auto_us_ARREADY),
        .s_axi_arregion(s01_regslice_to_auto_us_ARREGION),
        .s_axi_arsize(s01_regslice_to_auto_us_ARSIZE),
        .s_axi_arvalid(s01_regslice_to_auto_us_ARVALID),
        .s_axi_awaddr(s01_regslice_to_auto_us_AWADDR),
        .s_axi_awburst(s01_regslice_to_auto_us_AWBURST),
        .s_axi_awcache(s01_regslice_to_auto_us_AWCACHE),
        .s_axi_awlen(s01_regslice_to_auto_us_AWLEN),
        .s_axi_awlock(s01_regslice_to_auto_us_AWLOCK),
        .s_axi_awprot(s01_regslice_to_auto_us_AWPROT),
        .s_axi_awqos(s01_regslice_to_auto_us_AWQOS),
        .s_axi_awready(s01_regslice_to_auto_us_AWREADY),
        .s_axi_awregion(s01_regslice_to_auto_us_AWREGION),
        .s_axi_awsize(s01_regslice_to_auto_us_AWSIZE),
        .s_axi_awvalid(s01_regslice_to_auto_us_AWVALID),
        .s_axi_bready(s01_regslice_to_auto_us_BREADY),
        .s_axi_bresp(s01_regslice_to_auto_us_BRESP),
        .s_axi_bvalid(s01_regslice_to_auto_us_BVALID),
        .s_axi_rdata(s01_regslice_to_auto_us_RDATA),
        .s_axi_rlast(s01_regslice_to_auto_us_RLAST),
        .s_axi_rready(s01_regslice_to_auto_us_RREADY),
        .s_axi_rresp(s01_regslice_to_auto_us_RRESP),
        .s_axi_rvalid(s01_regslice_to_auto_us_RVALID),
        .s_axi_wdata(s01_regslice_to_auto_us_WDATA),
        .s_axi_wlast(s01_regslice_to_auto_us_WLAST),
        .s_axi_wready(s01_regslice_to_auto_us_WREADY),
        .s_axi_wstrb(s01_regslice_to_auto_us_WSTRB),
        .s_axi_wvalid(s01_regslice_to_auto_us_WVALID));
  (* CHECK_LICENSE_TYPE = "bd_1_s01_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{}" *) 
  (* CORE_GENERATION_INFO = "bd_1_s01_regslice_0,axi_register_slice_v2_1_15_axi_register_slice,{x_ipProduct=Vivado 2017.4,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_register_slice,x_ipVersion=2.1,x_ipCoreRevision=15,x_ipLanguage=VERILOG,x_ipSimLanguage=MIXED,C_FAMILY=artix7,C_AXI_PROTOCOL=0,C_AXI_ID_WIDTH=1,C_AXI_ADDR_WIDTH=32,C_AXI_DATA_WIDTH=32,C_AXI_SUPPORTS_USER_SIGNALS=0,C_AXI_AWUSER_WIDTH=1,C_AXI_ARUSER_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_AXI_RUSER_WIDTH=1,C_AXI_BUSER_WIDTH=1,C_REG_CONFIG_AW=7,C_REG_CONFIG_W=1,C_REG_CONFIG_B=7,C_REG_CONFIG_AR=7,C_REG_CONFIG_R=1,C_NUM_SLR_CROSSINGS=0,C_PIPELINES_MASTER_AW=0,C_PIPELINES_MASTER_W=0,C_PIPELINES_MASTER_B=0,C_PIPELINES_MASTER_AR=0,C_PIPELINES_MASTER_R=0,C_PIPELINES_SLAVE_AW=0,C_PIPELINES_SLAVE_W=0,C_PIPELINES_SLAVE_B=0,C_PIPELINES_SLAVE_AR=0,C_PIPELINES_SLAVE_R=0,C_PIPELINES_MIDDLE_AW=0,C_PIPELINES_MIDDLE_W=0,C_PIPELINES_MIDDLE_B=0,C_PIPELINES_MIDDLE_AR=0,C_PIPELINES_MIDDLE_R=0}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "axi_register_slice_v2_1_15_axi_register_slice,Vivado 2017.4" *) 
  bd_1_bd_1_s01_regslice_0 s01_regslice
       (.aclk(S01_ACLK),
        .aresetn(S01_ARESETN),
        .m_axi_araddr(s01_regslice_to_auto_us_ARADDR),
        .m_axi_arburst(s01_regslice_to_auto_us_ARBURST),
        .m_axi_arcache(s01_regslice_to_auto_us_ARCACHE),
        .m_axi_arlen(s01_regslice_to_auto_us_ARLEN),
        .m_axi_arlock(s01_regslice_to_auto_us_ARLOCK),
        .m_axi_arprot(s01_regslice_to_auto_us_ARPROT),
        .m_axi_arqos(s01_regslice_to_auto_us_ARQOS),
        .m_axi_arready(s01_regslice_to_auto_us_ARREADY),
        .m_axi_arregion(s01_regslice_to_auto_us_ARREGION),
        .m_axi_arsize(s01_regslice_to_auto_us_ARSIZE),
        .m_axi_arvalid(s01_regslice_to_auto_us_ARVALID),
        .m_axi_awaddr(s01_regslice_to_auto_us_AWADDR),
        .m_axi_awburst(s01_regslice_to_auto_us_AWBURST),
        .m_axi_awcache(s01_regslice_to_auto_us_AWCACHE),
        .m_axi_awlen(s01_regslice_to_auto_us_AWLEN),
        .m_axi_awlock(s01_regslice_to_auto_us_AWLOCK),
        .m_axi_awprot(s01_regslice_to_auto_us_AWPROT),
        .m_axi_awqos(s01_regslice_to_auto_us_AWQOS),
        .m_axi_awready(s01_regslice_to_auto_us_AWREADY),
        .m_axi_awregion(s01_regslice_to_auto_us_AWREGION),
        .m_axi_awsize(s01_regslice_to_auto_us_AWSIZE),
        .m_axi_awvalid(s01_regslice_to_auto_us_AWVALID),
        .m_axi_bready(s01_regslice_to_auto_us_BREADY),
        .m_axi_bresp(s01_regslice_to_auto_us_BRESP),
        .m_axi_bvalid(s01_regslice_to_auto_us_BVALID),
        .m_axi_rdata(s01_regslice_to_auto_us_RDATA),
        .m_axi_rlast(s01_regslice_to_auto_us_RLAST),
        .m_axi_rready(s01_regslice_to_auto_us_RREADY),
        .m_axi_rresp(s01_regslice_to_auto_us_RRESP),
        .m_axi_rvalid(s01_regslice_to_auto_us_RVALID),
        .m_axi_wdata(s01_regslice_to_auto_us_WDATA),
        .m_axi_wlast(s01_regslice_to_auto_us_WLAST),
        .m_axi_wready(s01_regslice_to_auto_us_WREADY),
        .m_axi_wstrb(s01_regslice_to_auto_us_WSTRB),
        .m_axi_wvalid(s01_regslice_to_auto_us_WVALID),
        .s_axi_araddr(S01_AXI_araddr),
        .s_axi_arburst(S01_AXI_arburst),
        .s_axi_arcache(S01_AXI_arcache),
        .s_axi_arlen(S01_AXI_arlen),
        .s_axi_arlock(S01_AXI_arlock),
        .s_axi_arprot(S01_AXI_arprot),
        .s_axi_arqos(S01_AXI_arqos),
        .s_axi_arready(S01_AXI_arready),
        .s_axi_arregion(S01_AXI_arregion),
        .s_axi_arsize(S01_AXI_arsize),
        .s_axi_arvalid(S01_AXI_arvalid),
        .s_axi_awaddr(S01_AXI_awaddr),
        .s_axi_awburst(S01_AXI_awburst),
        .s_axi_awcache(S01_AXI_awcache),
        .s_axi_awlen(S01_AXI_awlen),
        .s_axi_awlock(S01_AXI_awlock),
        .s_axi_awprot(S01_AXI_awprot),
        .s_axi_awqos(S01_AXI_awqos),
        .s_axi_awready(S01_AXI_awready),
        .s_axi_awregion(S01_AXI_awregion),
        .s_axi_awsize(S01_AXI_awsize),
        .s_axi_awvalid(S01_AXI_awvalid),
        .s_axi_bready(S01_AXI_bready),
        .s_axi_bresp(S01_AXI_bresp),
        .s_axi_bvalid(S01_AXI_bvalid),
        .s_axi_rdata(S01_AXI_rdata),
        .s_axi_rlast(S01_AXI_rlast),
        .s_axi_rready(S01_AXI_rready),
        .s_axi_rresp(S01_AXI_rresp),
        .s_axi_rvalid(S01_AXI_rvalid),
        .s_axi_wdata(S01_AXI_wdata),
        .s_axi_wlast(S01_AXI_wlast),
        .s_axi_wready(S01_AXI_wready),
        .s_axi_wstrb(S01_AXI_wstrb),
        .s_axi_wvalid(S01_AXI_wvalid));
endmodule

(* ORIG_REF_NAME = "sequence_psr" *) 
module bd_1_sequence_psr
   (MB_out,
    Bsr_out,
    Pr_out,
    \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    lpf_int,
    slowest_sync_clk);
  output MB_out;
  output Bsr_out;
  output Pr_out;
  output \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ;
  output \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  input lpf_int;
  input slowest_sync_clk;

  wire \<const0> ;
  wire \<const1> ;
  wire \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ;
  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire Bsr_out;
  wire Core_i_1_n_0;
  wire MB_out;
  wire Pr_out;
  wire \bsr_dec_reg_n_0_[0] ;
  wire \bsr_dec_reg_n_0_[2] ;
  wire bsr_i_1_n_0;
  wire \core_dec[0]_i_1_n_0 ;
  wire \core_dec[2]_i_1_n_0 ;
  wire \core_dec_reg_n_0_[0] ;
  wire \core_dec_reg_n_0_[1] ;
  wire from_sys_i_1_n_0;
  wire lpf_int;
  wire p_0_in;
  wire [2:0]p_3_out;
  wire [2:0]p_5_out;
  wire pr_dec0__0;
  wire \pr_dec_reg_n_0_[0] ;
  wire \pr_dec_reg_n_0_[2] ;
  wire pr_i_1_n_0;
  wire seq_clr;
  wire [5:0]seq_cnt;
  wire seq_cnt_en;
  wire slowest_sync_clk;

  (* SOFT_HLUTNM = "soft_lutpair783" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N_i_1 
       (.I0(Bsr_out),
        .O(\ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N ));
  (* SOFT_HLUTNM = "soft_lutpair782" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N_i_1 
       (.I0(Pr_out),
        .O(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  (* SOFT_HLUTNM = "soft_lutpair781" *) 
  LUT2 #(
    .INIT(4'h2)) 
    Core_i_1
       (.I0(MB_out),
        .I1(p_0_in),
        .O(Core_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    Core_reg
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(Core_i_1_n_0),
        .Q(MB_out),
        .S(lpf_int));
  GND GND
       (.G(\<const0> ));
  bd_1_upcnt_n SEQ_COUNTER
       (.Q(seq_cnt),
        .seq_clr(seq_clr),
        .seq_cnt_en(seq_cnt_en),
        .slowest_sync_clk(slowest_sync_clk));
  VCC VCC
       (.P(\<const1> ));
  LUT4 #(
    .INIT(16'h0804)) 
    \bsr_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[3]),
        .I2(seq_cnt[5]),
        .I3(seq_cnt[4]),
        .O(p_5_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair784" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \bsr_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\bsr_dec_reg_n_0_[0] ),
        .O(p_5_out[2]));
  FDRE #(
    .INIT(1'b0)) 
    \bsr_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(p_5_out[0]),
        .Q(\bsr_dec_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \bsr_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(p_5_out[2]),
        .Q(\bsr_dec_reg_n_0_[2] ),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair783" *) 
  LUT2 #(
    .INIT(4'h2)) 
    bsr_i_1
       (.I0(Bsr_out),
        .I1(\bsr_dec_reg_n_0_[2] ),
        .O(bsr_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    bsr_reg
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(bsr_i_1_n_0),
        .Q(Bsr_out),
        .S(lpf_int));
  (* SOFT_HLUTNM = "soft_lutpair780" *) 
  LUT4 #(
    .INIT(16'h8040)) 
    \core_dec[0]_i_1 
       (.I0(seq_cnt[4]),
        .I1(seq_cnt[3]),
        .I2(seq_cnt[5]),
        .I3(seq_cnt_en),
        .O(\core_dec[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair784" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \core_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\core_dec_reg_n_0_[0] ),
        .O(\core_dec[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(\core_dec[0]_i_1_n_0 ),
        .Q(\core_dec_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[1] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(pr_dec0__0),
        .Q(\core_dec_reg_n_0_[1] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(\core_dec[2]_i_1_n_0 ),
        .Q(p_0_in),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair781" *) 
  LUT2 #(
    .INIT(4'h8)) 
    from_sys_i_1
       (.I0(MB_out),
        .I1(seq_cnt_en),
        .O(from_sys_i_1_n_0));
  FDSE #(
    .INIT(1'b0)) 
    from_sys_reg
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(from_sys_i_1_n_0),
        .Q(seq_cnt_en),
        .S(lpf_int));
  LUT4 #(
    .INIT(16'h0210)) 
    pr_dec0
       (.I0(seq_cnt[0]),
        .I1(seq_cnt[1]),
        .I2(seq_cnt[2]),
        .I3(seq_cnt_en),
        .O(pr_dec0__0));
  (* SOFT_HLUTNM = "soft_lutpair780" *) 
  LUT4 #(
    .INIT(16'h1080)) 
    \pr_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[5]),
        .I2(seq_cnt[3]),
        .I3(seq_cnt[4]),
        .O(p_3_out[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \pr_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\pr_dec_reg_n_0_[0] ),
        .O(p_3_out[2]));
  FDRE #(
    .INIT(1'b0)) 
    \pr_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(p_3_out[0]),
        .Q(\pr_dec_reg_n_0_[0] ),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \pr_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(p_3_out[2]),
        .Q(\pr_dec_reg_n_0_[2] ),
        .R(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair782" *) 
  LUT2 #(
    .INIT(4'h2)) 
    pr_i_1
       (.I0(Pr_out),
        .I1(\pr_dec_reg_n_0_[2] ),
        .O(pr_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    pr_reg
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(pr_i_1_n_0),
        .Q(Pr_out),
        .S(lpf_int));
  FDRE #(
    .INIT(1'b0)) 
    seq_clr_reg
       (.C(slowest_sync_clk),
        .CE(\<const1> ),
        .D(\<const1> ),
        .Q(seq_clr),
        .R(lpf_int));
endmodule

(* ORIG_REF_NAME = "upcnt_n" *) 
module bd_1_upcnt_n
   (Q,
    seq_clr,
    seq_cnt_en,
    slowest_sync_clk);
  output [5:0]Q;
  input seq_clr;
  input seq_cnt_en;
  input slowest_sync_clk;

  wire [5:0]Q;
  wire clear;
  wire [5:0]q_int0;
  wire seq_clr;
  wire seq_cnt_en;
  wire slowest_sync_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \q_int[0]_i_1 
       (.I0(Q[0]),
        .O(q_int0[0]));
  (* SOFT_HLUTNM = "soft_lutpair779" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \q_int[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(q_int0[1]));
  (* SOFT_HLUTNM = "soft_lutpair779" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \q_int[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(q_int0[2]));
  (* SOFT_HLUTNM = "soft_lutpair778" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \q_int[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(q_int0[3]));
  (* SOFT_HLUTNM = "soft_lutpair778" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \q_int[4]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(q_int0[4]));
  LUT1 #(
    .INIT(2'h1)) 
    \q_int[5]_i_1 
       (.I0(seq_clr),
        .O(clear));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \q_int[5]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[5]),
        .O(q_int0[5]));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[0] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[0]),
        .Q(Q[0]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[1] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[1]),
        .Q(Q[1]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[2] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[2]),
        .Q(Q[2]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[3] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[3]),
        .Q(Q[3]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[4] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[4]),
        .Q(Q[4]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[5] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[5]),
        .Q(Q[5]),
        .R(clear));
endmodule

(* CORE_GENERATION_INFO = "xpm_cdc_async_rst,xpm_cdc_async_rst,{DEST_SYNC_FF=2,INIT_SYNC_FF=0,RST_ACTIVE_HIGH=1,VERSION=0,DEF_VAL=1'b0,INV_DEF_VAL=1'b1}" *) (* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) 
(* INIT_SYNC_FF = "0" *) (* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) 
(* RST_ACTIVE_HIGH = "1" *) (* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module bd_1_xpm_cdc_async_rst
   (src_arst,
    dest_clk,
    .dest_arst(arststages_ff[1]));
  input src_arst;
  input dest_clk;
     output [1:0]arststages_ff;

  wire \<const0> ;
  wire \<const1> ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(\<const1> ),
        .D(\<const0> ),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(\<const1> ),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* CORE_GENERATION_INFO = "xpm_cdc_async_rst,xpm_cdc_async_rst,{DEST_SYNC_FF=2,INIT_SYNC_FF=0,RST_ACTIVE_HIGH=1,VERSION=0,DEF_VAL=1'b0,INV_DEF_VAL=1'b1}" *) (* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) 
(* INIT_SYNC_FF = "0" *) (* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) 
(* RST_ACTIVE_HIGH = "1" *) (* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module bd_1_xpm_cdc_async_rst__3
   (src_arst,
    dest_clk,
    .dest_arst(arststages_ff[1]));
  input src_arst;
  input dest_clk;
     output [1:0]arststages_ff;

  wire \<const0> ;
  wire \<const1> ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(\<const1> ),
        .D(\<const0> ),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(\<const1> ),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* CORE_GENERATION_INFO = "xpm_cdc_async_rst,xpm_cdc_async_rst,{DEST_SYNC_FF=2,INIT_SYNC_FF=0,RST_ACTIVE_HIGH=1,VERSION=0,DEF_VAL=1'b0,INV_DEF_VAL=1'b1}" *) (* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) 
(* INIT_SYNC_FF = "0" *) (* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) 
(* RST_ACTIVE_HIGH = "1" *) (* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module bd_1_xpm_cdc_async_rst__4
   (src_arst,
    dest_clk,
    .dest_arst(arststages_ff[1]));
  input src_arst;
  input dest_clk;
     output [1:0]arststages_ff;

  wire \<const0> ;
  wire \<const1> ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(\<const1> ),
        .D(\<const0> ),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(\<const1> ),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_1_dmem
   (dout_i,
    clk,
    EN,
    din,
    \gc0.count_d1_reg[4] ,
    count_d10_in,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [8:0]dout_i;
  input clk;
  input EN;
  input [4:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]count_d10_in;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire \<const0> ;
  wire EN;
  wire clk;
  wire [4:0]count_d10_in;
  wire [4:0]din;
  wire [8:0]dout_i;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire [8:0]p_0_out;

  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_0_5
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(count_d10_in),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC({\<const0> ,\<const0> }),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .WCLK(clk),
        .WE(EN));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_6_8
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(count_d10_in),
        .DIA({\<const0> ,\<const0> }),
        .DIB({\<const0> ,din[4]}),
        .DIC({\<const0> ,\<const0> }),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[7:6]),
        .DOB(p_0_out[8]),
        .WCLK(clk),
        .WE(EN));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[0]),
        .Q(dout_i[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[1]),
        .Q(dout_i[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[2]),
        .Q(dout_i[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[3]),
        .Q(dout_i[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[4]),
        .Q(dout_i[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[5]),
        .Q(dout_i[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[6]),
        .Q(dout_i[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[7]),
        .Q(dout_i[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[8]),
        .Q(dout_i[8]),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_1_dmem__parameterized0
   (dout_i,
    clk,
    ram_full_fb_i_reg,
    din,
    \gc0.count_d1_reg[4] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [24:0]dout_i;
  input clk;
  input [0:0]ram_full_fb_i_reg;
  input [25:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire \<const0> ;
  wire [4:0]Q;
  wire RAM_reg_0_31_24_25_n_1;
  wire clk;
  wire [25:0]din;
  wire [24:0]dout_i;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire [25:0]p_0_out;
  wire [0:0]ram_full_fb_i_reg;

  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_0_5
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(Q),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .WCLK(clk),
        .WE(ram_full_fb_i_reg));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_12_17
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(Q),
        .DIA(din[13:12]),
        .DIB(din[15:14]),
        .DIC(din[17:16]),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[13:12]),
        .DOB(p_0_out[15:14]),
        .DOC(p_0_out[17:16]),
        .WCLK(clk),
        .WE(ram_full_fb_i_reg));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_18_23
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(Q),
        .DIA(din[19:18]),
        .DIB(din[21:20]),
        .DIC(din[23:22]),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[19:18]),
        .DOB(p_0_out[21:20]),
        .DOC(p_0_out[23:22]),
        .WCLK(clk),
        .WE(ram_full_fb_i_reg));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_24_25
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(Q),
        .DIA(din[25:24]),
        .DIB({\<const0> ,\<const0> }),
        .DIC({\<const0> ,\<const0> }),
        .DID({\<const0> ,\<const0> }),
        .DOA({p_0_out[25],RAM_reg_0_31_24_25_n_1}),
        .WCLK(clk),
        .WE(ram_full_fb_i_reg));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_6_11
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(Q),
        .DIA(din[7:6]),
        .DIB(din[9:8]),
        .DIC(din[11:10]),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[7:6]),
        .DOB(p_0_out[9:8]),
        .DOC(p_0_out[11:10]),
        .WCLK(clk),
        .WE(ram_full_fb_i_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[0]),
        .Q(dout_i[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[10]),
        .Q(dout_i[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[11]),
        .Q(dout_i[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[12] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[12]),
        .Q(dout_i[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[13] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[13]),
        .Q(dout_i[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[14] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[14]),
        .Q(dout_i[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[15] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[15]),
        .Q(dout_i[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[16] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[16]),
        .Q(dout_i[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[17] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[17]),
        .Q(dout_i[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[18] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[18]),
        .Q(dout_i[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[19] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[19]),
        .Q(dout_i[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[1]),
        .Q(dout_i[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[20] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[20]),
        .Q(dout_i[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[21] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[21]),
        .Q(dout_i[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[22] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[22]),
        .Q(dout_i[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[23] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[23]),
        .Q(dout_i[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[25] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[25]),
        .Q(dout_i[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[2]),
        .Q(dout_i[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[3]),
        .Q(dout_i[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[4]),
        .Q(dout_i[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[5]),
        .Q(dout_i[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[6]),
        .Q(dout_i[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[7]),
        .Q(dout_i[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[8]),
        .Q(dout_i[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[9]),
        .Q(dout_i[9]),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_1_dmem__parameterized0_29
   (dout_i,
    clk,
    ram_full_fb_i_reg,
    din,
    \gc0.count_d1_reg[4] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [25:0]dout_i;
  input clk;
  input [0:0]ram_full_fb_i_reg;
  input [25:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire \<const0> ;
  wire [4:0]Q;
  wire clk;
  wire [25:0]din;
  wire [25:0]dout_i;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire [25:0]p_0_out;
  wire [0:0]ram_full_fb_i_reg;

  GND GND
       (.G(\<const0> ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_0_5
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(Q),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .WCLK(clk),
        .WE(ram_full_fb_i_reg));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_12_17
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(Q),
        .DIA(din[13:12]),
        .DIB(din[15:14]),
        .DIC(din[17:16]),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[13:12]),
        .DOB(p_0_out[15:14]),
        .DOC(p_0_out[17:16]),
        .WCLK(clk),
        .WE(ram_full_fb_i_reg));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_18_23
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(Q),
        .DIA(din[19:18]),
        .DIB(din[21:20]),
        .DIC(din[23:22]),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[19:18]),
        .DOB(p_0_out[21:20]),
        .DOC(p_0_out[23:22]),
        .WCLK(clk),
        .WE(ram_full_fb_i_reg));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_24_25
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(Q),
        .DIA(din[25:24]),
        .DIB({\<const0> ,\<const0> }),
        .DIC({\<const0> ,\<const0> }),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[25:24]),
        .WCLK(clk),
        .WE(ram_full_fb_i_reg));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000)) 
    RAM_reg_0_31_6_11
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(Q),
        .DIA(din[7:6]),
        .DIB(din[9:8]),
        .DIC(din[11:10]),
        .DID({\<const0> ,\<const0> }),
        .DOA(p_0_out[7:6]),
        .DOB(p_0_out[9:8]),
        .DOC(p_0_out[11:10]),
        .WCLK(clk),
        .WE(ram_full_fb_i_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[0]),
        .Q(dout_i[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[10]),
        .Q(dout_i[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[11]),
        .Q(dout_i[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[12] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[12]),
        .Q(dout_i[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[13] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[13]),
        .Q(dout_i[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[14] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[14]),
        .Q(dout_i[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[15] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[15]),
        .Q(dout_i[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[16] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[16]),
        .Q(dout_i[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[17] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[17]),
        .Q(dout_i[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[18] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[18]),
        .Q(dout_i[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[19] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[19]),
        .Q(dout_i[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[1]),
        .Q(dout_i[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[20] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[20]),
        .Q(dout_i[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[21] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[21]),
        .Q(dout_i[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[22] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[22]),
        .Q(dout_i[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[23] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[23]),
        .Q(dout_i[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[24] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[24]),
        .Q(dout_i[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[25] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[25]),
        .Q(dout_i[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[2]),
        .Q(dout_i[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[3]),
        .Q(dout_i[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[4]),
        .Q(dout_i[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[5]),
        .Q(dout_i[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[6]),
        .Q(dout_i[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[7]),
        .Q(dout_i[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[8]),
        .Q(dout_i[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .D(p_0_out[9]),
        .Q(dout_i[9]),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_1_fifo_generator_ramfifo
   (empty,
    full,
    dout,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [8:0]dout;
  input rst;
  input clk;
  input [4:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [4:0]din;
  wire [8:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_0 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_13 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_6 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_3 ;
  wire [0:0]\gr1.gr1_int.rfwft/p_0_in ;
  wire [4:0]p_0_out_0;
  wire [4:0]p_12_out;
  wire p_19_out;
  wire ram_rd_en_i;
  wire rd_en;
  wire [2:0]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire rstblk_n_1;
  wire wr_en;

  bd_1_rd_logic_19 \gntv_or_sync_fifo.gl0.rd 
       (.AR(rstblk_n_0),
        .E(ram_rd_en_i),
        .FULL_FB(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .Q(rd_pntr_plus1),
        .clk(clk),
        .empty(empty),
        .\gcc0.gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.wr_n_3 ),
        .\gcc0.gc0.count_d1_reg[4] (p_12_out),
        .\gpr1.dout_i_reg[1] (p_0_out_0),
        .out({\gntv_or_sync_fifo.gl0.rd_n_0 ,\gr1.gr1_int.rfwft/p_0_in }),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_6 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_13 ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  bd_1_wr_logic_20 \gntv_or_sync_fifo.gl0.wr 
       (.AS(rstblk_n_0),
        .E(p_19_out),
        .FULL_FB(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .Q(p_12_out),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.rd_n_6 ),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gc0.count_reg[2] (rd_pntr_plus1),
        .\gpregsm1.curr_fwft_state_reg[0] (\gntv_or_sync_fifo.gl0.rd_n_13 ),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_3 ),
        .wr_en(wr_en));
  bd_1_memory \gntv_or_sync_fifo.mem 
       (.E(rstblk_n_1),
        .EN(p_19_out),
        .clk(clk),
        .count_d10_in(p_12_out),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gpregsm1.curr_fwft_state_reg[1] (ram_rd_en_i));
  bd_1_reset_blk_ramfifo__xdcDup__2 rstblk
       (.AS(rstblk_n_0),
        .E(rstblk_n_1),
        .clk(clk),
        .out({\gntv_or_sync_fifo.gl0.rd_n_0 ,\gr1.gr1_int.rfwft/p_0_in }),
        .rd_en(rd_en),
        .rst(rst));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_1_fifo_generator_ramfifo__parameterized0
   (empty,
    full,
    dout,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [24:0]dout;
  input rst;
  input clk;
  input [25:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [25:0]din;
  wire [24:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_0 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_13 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_6 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_3 ;
  wire [0:0]\gr1.gr1_int.rfwft/p_0_in ;
  wire [4:0]p_0_out_0;
  wire [4:0]p_12_out;
  wire p_19_out;
  wire ram_rd_en_i;
  wire rd_en;
  wire [2:0]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire rstblk_n_1;
  wire wr_en;

  bd_1_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.AR(rstblk_n_0),
        .E(ram_rd_en_i),
        .FULL_FB(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .Q(rd_pntr_plus1),
        .clk(clk),
        .empty(empty),
        .\gcc0.gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.wr_n_3 ),
        .\gcc0.gc0.count_d1_reg[4] (p_12_out),
        .\gpr1.dout_i_reg[1] (p_0_out_0),
        .out({\gntv_or_sync_fifo.gl0.rd_n_0 ,\gr1.gr1_int.rfwft/p_0_in }),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_6 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_13 ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  bd_1_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.AS(rstblk_n_0),
        .E(p_19_out),
        .FULL_FB(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .Q(p_12_out),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.rd_n_6 ),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gc0.count_reg[2] (rd_pntr_plus1),
        .\gpregsm1.curr_fwft_state_reg[0] (\gntv_or_sync_fifo.gl0.rd_n_13 ),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_3 ),
        .wr_en(wr_en));
  bd_1_memory__parameterized0 \gntv_or_sync_fifo.mem 
       (.E(rstblk_n_1),
        .Q(p_12_out),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gpregsm1.curr_fwft_state_reg[1] (ram_rd_en_i),
        .ram_full_fb_i_reg(p_19_out));
  bd_1_reset_blk_ramfifo rstblk
       (.AS(rstblk_n_0),
        .E(rstblk_n_1),
        .clk(clk),
        .out({\gntv_or_sync_fifo.gl0.rd_n_0 ,\gr1.gr1_int.rfwft/p_0_in }),
        .rd_en(rd_en),
        .rst(rst));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_1_fifo_generator_ramfifo__parameterized0__xdcDup__1
   (empty,
    full,
    dout,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [25:0]dout;
  input rst;
  input clk;
  input [25:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [25:0]din;
  wire [25:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_0 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_13 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_6 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_3 ;
  wire [0:0]\gr1.gr1_int.rfwft/p_0_in ;
  wire [4:0]p_0_out_0;
  wire [4:0]p_12_out;
  wire p_19_out;
  wire ram_rd_en_i;
  wire rd_en;
  wire [2:0]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire rstblk_n_1;
  wire wr_en;

  bd_1_rd_logic_26 \gntv_or_sync_fifo.gl0.rd 
       (.AR(rstblk_n_0),
        .E(ram_rd_en_i),
        .FULL_FB(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .Q(rd_pntr_plus1),
        .clk(clk),
        .empty(empty),
        .\gcc0.gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.wr_n_3 ),
        .\gcc0.gc0.count_d1_reg[4] (p_12_out),
        .\gpr1.dout_i_reg[1] (p_0_out_0),
        .out({\gntv_or_sync_fifo.gl0.rd_n_0 ,\gr1.gr1_int.rfwft/p_0_in }),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_6 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_13 ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  bd_1_wr_logic_27 \gntv_or_sync_fifo.gl0.wr 
       (.AS(rstblk_n_0),
        .E(p_19_out),
        .FULL_FB(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .Q(p_12_out),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.rd_n_6 ),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gc0.count_reg[2] (rd_pntr_plus1),
        .\gpregsm1.curr_fwft_state_reg[0] (\gntv_or_sync_fifo.gl0.rd_n_13 ),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_3 ),
        .wr_en(wr_en));
  bd_1_memory__parameterized0_28 \gntv_or_sync_fifo.mem 
       (.E(rstblk_n_1),
        .Q(p_12_out),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gpregsm1.curr_fwft_state_reg[1] (ram_rd_en_i),
        .ram_full_fb_i_reg(p_19_out));
  bd_1_reset_blk_ramfifo__xdcDup__1 rstblk
       (.AS(rstblk_n_0),
        .E(rstblk_n_1),
        .clk(clk),
        .out({\gntv_or_sync_fifo.gl0.rd_n_0 ,\gr1.gr1_int.rfwft/p_0_in }),
        .rd_en(rd_en),
        .rst(rst));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_1_fifo_generator_top
   (empty,
    full,
    dout,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [8:0]dout;
  input rst;
  input clk;
  input [4:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [4:0]din;
  wire [8:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;

  bd_1_fifo_generator_ramfifo \grf.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_1_fifo_generator_top__parameterized0
   (empty,
    full,
    dout,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [24:0]dout;
  input rst;
  input clk;
  input [25:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [25:0]din;
  wire [24:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;

  bd_1_fifo_generator_ramfifo__parameterized0 \grf.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_1_fifo_generator_top__parameterized0__xdcDup__1
   (empty,
    full,
    dout,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [25:0]dout;
  input rst;
  input clk;
  input [25:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [25:0]din;
  wire [25:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;

  bd_1_fifo_generator_ramfifo__parameterized0__xdcDup__1 \grf.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "64" *) (* C_AXIS_TDEST_WIDTH = "4" *) 
(* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "4" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "2" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "0" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "6" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "9" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "9" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "artix7" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "0" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "0" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "0" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "31" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "30" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "6" *) 
(* C_RD_DEPTH = "32" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "5" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "3" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "0" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "6" *) 
(* C_WR_DEPTH = "32" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "5" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_1" *) 
module bd_1_fifo_generator_v13_2_1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [8:0]din;
  input wr_en;
  input rd_en;
  input [4:0]prog_empty_thresh;
  input [4:0]prog_empty_thresh_assert;
  input [4:0]prog_empty_thresh_negate;
  input [4:0]prog_full_thresh;
  input [4:0]prog_full_thresh_assert;
  input [4:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [8:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [5:0]data_count;
  output [5:0]rd_data_count;
  output [5:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [3:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [1:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [3:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [3:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [1:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [3:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [3:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [3:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [1:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [3:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [3:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [1:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [3:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [63:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [7:0]s_axis_tid;
  input [3:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [63:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [7:0]m_axis_tid;
  output [3:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const0> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const0> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const0> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const0> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const0> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const0> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[3] = \<const0> ;
  assign m_axi_arid[2] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[3] = \<const0> ;
  assign m_axi_awid[2] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[3] = \<const0> ;
  assign m_axi_wid[2] = \<const0> ;
  assign m_axi_wid[1] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[63] = \<const0> ;
  assign m_axis_tdata[62] = \<const0> ;
  assign m_axis_tdata[61] = \<const0> ;
  assign m_axis_tdata[60] = \<const0> ;
  assign m_axis_tdata[59] = \<const0> ;
  assign m_axis_tdata[58] = \<const0> ;
  assign m_axis_tdata[57] = \<const0> ;
  assign m_axis_tdata[56] = \<const0> ;
  assign m_axis_tdata[55] = \<const0> ;
  assign m_axis_tdata[54] = \<const0> ;
  assign m_axis_tdata[53] = \<const0> ;
  assign m_axis_tdata[52] = \<const0> ;
  assign m_axis_tdata[51] = \<const0> ;
  assign m_axis_tdata[50] = \<const0> ;
  assign m_axis_tdata[49] = \<const0> ;
  assign m_axis_tdata[48] = \<const0> ;
  assign m_axis_tdata[47] = \<const0> ;
  assign m_axis_tdata[46] = \<const0> ;
  assign m_axis_tdata[45] = \<const0> ;
  assign m_axis_tdata[44] = \<const0> ;
  assign m_axis_tdata[43] = \<const0> ;
  assign m_axis_tdata[42] = \<const0> ;
  assign m_axis_tdata[41] = \<const0> ;
  assign m_axis_tdata[40] = \<const0> ;
  assign m_axis_tdata[39] = \<const0> ;
  assign m_axis_tdata[38] = \<const0> ;
  assign m_axis_tdata[37] = \<const0> ;
  assign m_axis_tdata[36] = \<const0> ;
  assign m_axis_tdata[35] = \<const0> ;
  assign m_axis_tdata[34] = \<const0> ;
  assign m_axis_tdata[33] = \<const0> ;
  assign m_axis_tdata[32] = \<const0> ;
  assign m_axis_tdata[31] = \<const0> ;
  assign m_axis_tdata[30] = \<const0> ;
  assign m_axis_tdata[29] = \<const0> ;
  assign m_axis_tdata[28] = \<const0> ;
  assign m_axis_tdata[27] = \<const0> ;
  assign m_axis_tdata[26] = \<const0> ;
  assign m_axis_tdata[25] = \<const0> ;
  assign m_axis_tdata[24] = \<const0> ;
  assign m_axis_tdata[23] = \<const0> ;
  assign m_axis_tdata[22] = \<const0> ;
  assign m_axis_tdata[21] = \<const0> ;
  assign m_axis_tdata[20] = \<const0> ;
  assign m_axis_tdata[19] = \<const0> ;
  assign m_axis_tdata[18] = \<const0> ;
  assign m_axis_tdata[17] = \<const0> ;
  assign m_axis_tdata[16] = \<const0> ;
  assign m_axis_tdata[15] = \<const0> ;
  assign m_axis_tdata[14] = \<const0> ;
  assign m_axis_tdata[13] = \<const0> ;
  assign m_axis_tdata[12] = \<const0> ;
  assign m_axis_tdata[11] = \<const0> ;
  assign m_axis_tdata[10] = \<const0> ;
  assign m_axis_tdata[9] = \<const0> ;
  assign m_axis_tdata[8] = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[3] = \<const0> ;
  assign m_axis_tdest[2] = \<const0> ;
  assign m_axis_tdest[1] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[7] = \<const0> ;
  assign m_axis_tid[6] = \<const0> ;
  assign m_axis_tid[5] = \<const0> ;
  assign m_axis_tid[4] = \<const0> ;
  assign m_axis_tid[3] = \<const0> ;
  assign m_axis_tid[2] = \<const0> ;
  assign m_axis_tid[1] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  bd_1_fifo_generator_v13_2_1_synth inst_fifo_gen
       (.clk(clk),
        .din({din[8],din[3:0]}),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "64" *) (* C_AXIS_TDEST_WIDTH = "4" *) 
(* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "4" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "2" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "0" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "6" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "26" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "26" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "artix7" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "0" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "0" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "0" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "31" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "30" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "6" *) 
(* C_RD_DEPTH = "32" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "5" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "3" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "0" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "6" *) 
(* C_WR_DEPTH = "32" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "5" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_1" *) 
module bd_1_fifo_generator_v13_2_1__parameterized0
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [25:0]din;
  input wr_en;
  input rd_en;
  input [4:0]prog_empty_thresh;
  input [4:0]prog_empty_thresh_assert;
  input [4:0]prog_empty_thresh_negate;
  input [4:0]prog_full_thresh;
  input [4:0]prog_full_thresh_assert;
  input [4:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [25:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [5:0]data_count;
  output [5:0]rd_data_count;
  output [5:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [3:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [1:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [3:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [3:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [1:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [3:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [3:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [3:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [1:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [3:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [3:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [1:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [3:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [63:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [7:0]s_axis_tid;
  input [3:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [63:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [7:0]m_axis_tid;
  output [3:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire clk;
  wire [25:0]din;
  wire [25:0]\^dout ;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const0> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const0> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const0> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const0> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const0> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const0> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[25] = \^dout [25];
  assign dout[24] = \<const0> ;
  assign dout[23:0] = \^dout [23:0];
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[3] = \<const0> ;
  assign m_axi_arid[2] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[3] = \<const0> ;
  assign m_axi_awid[2] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[3] = \<const0> ;
  assign m_axi_wid[2] = \<const0> ;
  assign m_axi_wid[1] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[63] = \<const0> ;
  assign m_axis_tdata[62] = \<const0> ;
  assign m_axis_tdata[61] = \<const0> ;
  assign m_axis_tdata[60] = \<const0> ;
  assign m_axis_tdata[59] = \<const0> ;
  assign m_axis_tdata[58] = \<const0> ;
  assign m_axis_tdata[57] = \<const0> ;
  assign m_axis_tdata[56] = \<const0> ;
  assign m_axis_tdata[55] = \<const0> ;
  assign m_axis_tdata[54] = \<const0> ;
  assign m_axis_tdata[53] = \<const0> ;
  assign m_axis_tdata[52] = \<const0> ;
  assign m_axis_tdata[51] = \<const0> ;
  assign m_axis_tdata[50] = \<const0> ;
  assign m_axis_tdata[49] = \<const0> ;
  assign m_axis_tdata[48] = \<const0> ;
  assign m_axis_tdata[47] = \<const0> ;
  assign m_axis_tdata[46] = \<const0> ;
  assign m_axis_tdata[45] = \<const0> ;
  assign m_axis_tdata[44] = \<const0> ;
  assign m_axis_tdata[43] = \<const0> ;
  assign m_axis_tdata[42] = \<const0> ;
  assign m_axis_tdata[41] = \<const0> ;
  assign m_axis_tdata[40] = \<const0> ;
  assign m_axis_tdata[39] = \<const0> ;
  assign m_axis_tdata[38] = \<const0> ;
  assign m_axis_tdata[37] = \<const0> ;
  assign m_axis_tdata[36] = \<const0> ;
  assign m_axis_tdata[35] = \<const0> ;
  assign m_axis_tdata[34] = \<const0> ;
  assign m_axis_tdata[33] = \<const0> ;
  assign m_axis_tdata[32] = \<const0> ;
  assign m_axis_tdata[31] = \<const0> ;
  assign m_axis_tdata[30] = \<const0> ;
  assign m_axis_tdata[29] = \<const0> ;
  assign m_axis_tdata[28] = \<const0> ;
  assign m_axis_tdata[27] = \<const0> ;
  assign m_axis_tdata[26] = \<const0> ;
  assign m_axis_tdata[25] = \<const0> ;
  assign m_axis_tdata[24] = \<const0> ;
  assign m_axis_tdata[23] = \<const0> ;
  assign m_axis_tdata[22] = \<const0> ;
  assign m_axis_tdata[21] = \<const0> ;
  assign m_axis_tdata[20] = \<const0> ;
  assign m_axis_tdata[19] = \<const0> ;
  assign m_axis_tdata[18] = \<const0> ;
  assign m_axis_tdata[17] = \<const0> ;
  assign m_axis_tdata[16] = \<const0> ;
  assign m_axis_tdata[15] = \<const0> ;
  assign m_axis_tdata[14] = \<const0> ;
  assign m_axis_tdata[13] = \<const0> ;
  assign m_axis_tdata[12] = \<const0> ;
  assign m_axis_tdata[11] = \<const0> ;
  assign m_axis_tdata[10] = \<const0> ;
  assign m_axis_tdata[9] = \<const0> ;
  assign m_axis_tdata[8] = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[3] = \<const0> ;
  assign m_axis_tdest[2] = \<const0> ;
  assign m_axis_tdest[1] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[7] = \<const0> ;
  assign m_axis_tid[6] = \<const0> ;
  assign m_axis_tid[5] = \<const0> ;
  assign m_axis_tid[4] = \<const0> ;
  assign m_axis_tid[3] = \<const0> ;
  assign m_axis_tid[2] = \<const0> ;
  assign m_axis_tid[1] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  bd_1_fifo_generator_v13_2_1_synth__parameterized0 inst_fifo_gen
       (.clk(clk),
        .din(din),
        .dout({\^dout [25],\^dout [23:0]}),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "64" *) (* C_AXIS_TDEST_WIDTH = "4" *) 
(* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "4" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "2" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "0" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "6" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "26" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "26" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "artix7" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "0" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "0" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "0" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "31" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "30" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "6" *) 
(* C_RD_DEPTH = "32" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "5" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "3" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "0" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "6" *) 
(* C_WR_DEPTH = "32" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "5" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_1" *) 
module bd_1_fifo_generator_v13_2_1__parameterized0__xdcDup__1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [25:0]din;
  input wr_en;
  input rd_en;
  input [4:0]prog_empty_thresh;
  input [4:0]prog_empty_thresh_assert;
  input [4:0]prog_empty_thresh_negate;
  input [4:0]prog_full_thresh;
  input [4:0]prog_full_thresh_assert;
  input [4:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [25:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [5:0]data_count;
  output [5:0]rd_data_count;
  output [5:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [3:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [1:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [3:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [3:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [1:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [3:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [3:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [3:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [1:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [3:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [3:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [1:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [3:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [63:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [7:0]s_axis_tid;
  input [3:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [63:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [7:0]m_axis_tid;
  output [3:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire clk;
  wire [25:0]din;
  wire [25:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const0> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const0> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const0> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const0> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const0> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const0> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[3] = \<const0> ;
  assign m_axi_arid[2] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[3] = \<const0> ;
  assign m_axi_awid[2] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[3] = \<const0> ;
  assign m_axi_wid[2] = \<const0> ;
  assign m_axi_wid[1] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[63] = \<const0> ;
  assign m_axis_tdata[62] = \<const0> ;
  assign m_axis_tdata[61] = \<const0> ;
  assign m_axis_tdata[60] = \<const0> ;
  assign m_axis_tdata[59] = \<const0> ;
  assign m_axis_tdata[58] = \<const0> ;
  assign m_axis_tdata[57] = \<const0> ;
  assign m_axis_tdata[56] = \<const0> ;
  assign m_axis_tdata[55] = \<const0> ;
  assign m_axis_tdata[54] = \<const0> ;
  assign m_axis_tdata[53] = \<const0> ;
  assign m_axis_tdata[52] = \<const0> ;
  assign m_axis_tdata[51] = \<const0> ;
  assign m_axis_tdata[50] = \<const0> ;
  assign m_axis_tdata[49] = \<const0> ;
  assign m_axis_tdata[48] = \<const0> ;
  assign m_axis_tdata[47] = \<const0> ;
  assign m_axis_tdata[46] = \<const0> ;
  assign m_axis_tdata[45] = \<const0> ;
  assign m_axis_tdata[44] = \<const0> ;
  assign m_axis_tdata[43] = \<const0> ;
  assign m_axis_tdata[42] = \<const0> ;
  assign m_axis_tdata[41] = \<const0> ;
  assign m_axis_tdata[40] = \<const0> ;
  assign m_axis_tdata[39] = \<const0> ;
  assign m_axis_tdata[38] = \<const0> ;
  assign m_axis_tdata[37] = \<const0> ;
  assign m_axis_tdata[36] = \<const0> ;
  assign m_axis_tdata[35] = \<const0> ;
  assign m_axis_tdata[34] = \<const0> ;
  assign m_axis_tdata[33] = \<const0> ;
  assign m_axis_tdata[32] = \<const0> ;
  assign m_axis_tdata[31] = \<const0> ;
  assign m_axis_tdata[30] = \<const0> ;
  assign m_axis_tdata[29] = \<const0> ;
  assign m_axis_tdata[28] = \<const0> ;
  assign m_axis_tdata[27] = \<const0> ;
  assign m_axis_tdata[26] = \<const0> ;
  assign m_axis_tdata[25] = \<const0> ;
  assign m_axis_tdata[24] = \<const0> ;
  assign m_axis_tdata[23] = \<const0> ;
  assign m_axis_tdata[22] = \<const0> ;
  assign m_axis_tdata[21] = \<const0> ;
  assign m_axis_tdata[20] = \<const0> ;
  assign m_axis_tdata[19] = \<const0> ;
  assign m_axis_tdata[18] = \<const0> ;
  assign m_axis_tdata[17] = \<const0> ;
  assign m_axis_tdata[16] = \<const0> ;
  assign m_axis_tdata[15] = \<const0> ;
  assign m_axis_tdata[14] = \<const0> ;
  assign m_axis_tdata[13] = \<const0> ;
  assign m_axis_tdata[12] = \<const0> ;
  assign m_axis_tdata[11] = \<const0> ;
  assign m_axis_tdata[10] = \<const0> ;
  assign m_axis_tdata[9] = \<const0> ;
  assign m_axis_tdata[8] = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[3] = \<const0> ;
  assign m_axis_tdest[2] = \<const0> ;
  assign m_axis_tdest[1] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[7] = \<const0> ;
  assign m_axis_tid[6] = \<const0> ;
  assign m_axis_tid[5] = \<const0> ;
  assign m_axis_tid[4] = \<const0> ;
  assign m_axis_tid[3] = \<const0> ;
  assign m_axis_tid[2] = \<const0> ;
  assign m_axis_tid[1] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  bd_1_fifo_generator_v13_2_1_synth__parameterized0__xdcDup__1 inst_fifo_gen
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_1_synth" *) 
module bd_1_fifo_generator_v13_2_1_synth
   (empty,
    full,
    dout,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [8:0]dout;
  input rst;
  input clk;
  input [4:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [4:0]din;
  wire [8:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;

  bd_1_fifo_generator_top \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_1_synth" *) 
module bd_1_fifo_generator_v13_2_1_synth__parameterized0
   (empty,
    full,
    dout,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [24:0]dout;
  input rst;
  input clk;
  input [25:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [25:0]din;
  wire [24:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;

  bd_1_fifo_generator_top__parameterized0 \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_1_synth" *) 
module bd_1_fifo_generator_v13_2_1_synth__parameterized0__xdcDup__1
   (empty,
    full,
    dout,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [25:0]dout;
  input rst;
  input clk;
  input [25:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [25:0]din;
  wire [25:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;

  bd_1_fifo_generator_top__parameterized0__xdcDup__1 \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_1_memory
   (dout,
    E,
    clk,
    EN,
    din,
    \gc0.count_d1_reg[4] ,
    count_d10_in,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [8:0]dout;
  input [0:0]E;
  input clk;
  input EN;
  input [4:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]count_d10_in;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire \<const0> ;
  wire [0:0]E;
  wire EN;
  wire clk;
  wire [4:0]count_d10_in;
  wire [4:0]din;
  wire [8:0]dout;
  wire [8:0]dout_i;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  GND GND
       (.G(\<const0> ));
  bd_1_dmem \gdm.dm_gen.dm 
       (.EN(EN),
        .clk(clk),
        .count_d10_in(count_d10_in),
        .din(din),
        .dout_i(dout_i),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gpregsm1.curr_fwft_state_reg[1] (\gpregsm1.curr_fwft_state_reg[1] ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[0] 
       (.C(clk),
        .CE(E),
        .D(dout_i[0]),
        .Q(dout[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[1] 
       (.C(clk),
        .CE(E),
        .D(dout_i[1]),
        .Q(dout[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[2] 
       (.C(clk),
        .CE(E),
        .D(dout_i[2]),
        .Q(dout[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[3] 
       (.C(clk),
        .CE(E),
        .D(dout_i[3]),
        .Q(dout[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[4] 
       (.C(clk),
        .CE(E),
        .D(dout_i[4]),
        .Q(dout[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[5] 
       (.C(clk),
        .CE(E),
        .D(dout_i[5]),
        .Q(dout[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[6] 
       (.C(clk),
        .CE(E),
        .D(dout_i[6]),
        .Q(dout[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[7] 
       (.C(clk),
        .CE(E),
        .D(dout_i[7]),
        .Q(dout[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[8] 
       (.C(clk),
        .CE(E),
        .D(dout_i[8]),
        .Q(dout[8]),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_1_memory__parameterized0
   (dout,
    E,
    clk,
    ram_full_fb_i_reg,
    din,
    \gc0.count_d1_reg[4] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [24:0]dout;
  input [0:0]E;
  input clk;
  input [0:0]ram_full_fb_i_reg;
  input [25:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire \<const0> ;
  wire [0:0]E;
  wire [4:0]Q;
  wire clk;
  wire [25:0]din;
  wire [24:0]dout;
  wire [25:0]dout_i;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire [0:0]ram_full_fb_i_reg;

  GND GND
       (.G(\<const0> ));
  bd_1_dmem__parameterized0 \gdm.dm_gen.dm 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout_i({dout_i[25],dout_i[23:0]}),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gpregsm1.curr_fwft_state_reg[1] (\gpregsm1.curr_fwft_state_reg[1] ),
        .ram_full_fb_i_reg(ram_full_fb_i_reg));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[0] 
       (.C(clk),
        .CE(E),
        .D(dout_i[0]),
        .Q(dout[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[10] 
       (.C(clk),
        .CE(E),
        .D(dout_i[10]),
        .Q(dout[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[11] 
       (.C(clk),
        .CE(E),
        .D(dout_i[11]),
        .Q(dout[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[12] 
       (.C(clk),
        .CE(E),
        .D(dout_i[12]),
        .Q(dout[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[13] 
       (.C(clk),
        .CE(E),
        .D(dout_i[13]),
        .Q(dout[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[14] 
       (.C(clk),
        .CE(E),
        .D(dout_i[14]),
        .Q(dout[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[15] 
       (.C(clk),
        .CE(E),
        .D(dout_i[15]),
        .Q(dout[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[16] 
       (.C(clk),
        .CE(E),
        .D(dout_i[16]),
        .Q(dout[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[17] 
       (.C(clk),
        .CE(E),
        .D(dout_i[17]),
        .Q(dout[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[18] 
       (.C(clk),
        .CE(E),
        .D(dout_i[18]),
        .Q(dout[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[19] 
       (.C(clk),
        .CE(E),
        .D(dout_i[19]),
        .Q(dout[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[1] 
       (.C(clk),
        .CE(E),
        .D(dout_i[1]),
        .Q(dout[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[20] 
       (.C(clk),
        .CE(E),
        .D(dout_i[20]),
        .Q(dout[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[21] 
       (.C(clk),
        .CE(E),
        .D(dout_i[21]),
        .Q(dout[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[22] 
       (.C(clk),
        .CE(E),
        .D(dout_i[22]),
        .Q(dout[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[23] 
       (.C(clk),
        .CE(E),
        .D(dout_i[23]),
        .Q(dout[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[25] 
       (.C(clk),
        .CE(E),
        .D(dout_i[25]),
        .Q(dout[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[2] 
       (.C(clk),
        .CE(E),
        .D(dout_i[2]),
        .Q(dout[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[3] 
       (.C(clk),
        .CE(E),
        .D(dout_i[3]),
        .Q(dout[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[4] 
       (.C(clk),
        .CE(E),
        .D(dout_i[4]),
        .Q(dout[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[5] 
       (.C(clk),
        .CE(E),
        .D(dout_i[5]),
        .Q(dout[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[6] 
       (.C(clk),
        .CE(E),
        .D(dout_i[6]),
        .Q(dout[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[7] 
       (.C(clk),
        .CE(E),
        .D(dout_i[7]),
        .Q(dout[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[8] 
       (.C(clk),
        .CE(E),
        .D(dout_i[8]),
        .Q(dout[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[9] 
       (.C(clk),
        .CE(E),
        .D(dout_i[9]),
        .Q(dout[9]),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_1_memory__parameterized0_28
   (dout,
    E,
    clk,
    ram_full_fb_i_reg,
    din,
    \gc0.count_d1_reg[4] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [25:0]dout;
  input [0:0]E;
  input clk;
  input [0:0]ram_full_fb_i_reg;
  input [25:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire \<const0> ;
  wire [0:0]E;
  wire [4:0]Q;
  wire clk;
  wire [25:0]din;
  wire [25:0]dout;
  wire [25:0]dout_i;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire [0:0]ram_full_fb_i_reg;

  GND GND
       (.G(\<const0> ));
  bd_1_dmem__parameterized0_29 \gdm.dm_gen.dm 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout_i(dout_i),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gpregsm1.curr_fwft_state_reg[1] (\gpregsm1.curr_fwft_state_reg[1] ),
        .ram_full_fb_i_reg(ram_full_fb_i_reg));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[0] 
       (.C(clk),
        .CE(E),
        .D(dout_i[0]),
        .Q(dout[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[10] 
       (.C(clk),
        .CE(E),
        .D(dout_i[10]),
        .Q(dout[10]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[11] 
       (.C(clk),
        .CE(E),
        .D(dout_i[11]),
        .Q(dout[11]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[12] 
       (.C(clk),
        .CE(E),
        .D(dout_i[12]),
        .Q(dout[12]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[13] 
       (.C(clk),
        .CE(E),
        .D(dout_i[13]),
        .Q(dout[13]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[14] 
       (.C(clk),
        .CE(E),
        .D(dout_i[14]),
        .Q(dout[14]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[15] 
       (.C(clk),
        .CE(E),
        .D(dout_i[15]),
        .Q(dout[15]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[16] 
       (.C(clk),
        .CE(E),
        .D(dout_i[16]),
        .Q(dout[16]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[17] 
       (.C(clk),
        .CE(E),
        .D(dout_i[17]),
        .Q(dout[17]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[18] 
       (.C(clk),
        .CE(E),
        .D(dout_i[18]),
        .Q(dout[18]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[19] 
       (.C(clk),
        .CE(E),
        .D(dout_i[19]),
        .Q(dout[19]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[1] 
       (.C(clk),
        .CE(E),
        .D(dout_i[1]),
        .Q(dout[1]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[20] 
       (.C(clk),
        .CE(E),
        .D(dout_i[20]),
        .Q(dout[20]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[21] 
       (.C(clk),
        .CE(E),
        .D(dout_i[21]),
        .Q(dout[21]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[22] 
       (.C(clk),
        .CE(E),
        .D(dout_i[22]),
        .Q(dout[22]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[23] 
       (.C(clk),
        .CE(E),
        .D(dout_i[23]),
        .Q(dout[23]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[24] 
       (.C(clk),
        .CE(E),
        .D(dout_i[24]),
        .Q(dout[24]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[25] 
       (.C(clk),
        .CE(E),
        .D(dout_i[25]),
        .Q(dout[25]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[2] 
       (.C(clk),
        .CE(E),
        .D(dout_i[2]),
        .Q(dout[2]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[3] 
       (.C(clk),
        .CE(E),
        .D(dout_i[3]),
        .Q(dout[3]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[4] 
       (.C(clk),
        .CE(E),
        .D(dout_i[4]),
        .Q(dout[4]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[5] 
       (.C(clk),
        .CE(E),
        .D(dout_i[5]),
        .Q(dout[5]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[6] 
       (.C(clk),
        .CE(E),
        .D(dout_i[6]),
        .Q(dout[6]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[7] 
       (.C(clk),
        .CE(E),
        .D(dout_i[7]),
        .Q(dout[7]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[8] 
       (.C(clk),
        .CE(E),
        .D(dout_i[8]),
        .Q(dout[8]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[9] 
       (.C(clk),
        .CE(E),
        .D(dout_i[9]),
        .Q(dout[9]),
        .R(\<const0> ));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_1_rd_bin_cntr
   (Q,
    ram_empty_fb_i_reg,
    ram_empty_fb_i_reg_0,
    \gpr1.dout_i_reg[1] ,
    wr_en,
    FULL_FB,
    out,
    \gcc0.gc0.count_d1_reg[4] ,
    \gpregsm1.curr_fwft_state_reg[0] ,
    \gcc0.gc0.count_d1_reg[2] ,
    E,
    clk,
    AR);
  output [2:0]Q;
  output ram_empty_fb_i_reg;
  output ram_empty_fb_i_reg_0;
  output [4:0]\gpr1.dout_i_reg[1] ;
  input wr_en;
  input FULL_FB;
  input out;
  input [4:0]\gcc0.gc0.count_d1_reg[4] ;
  input \gpregsm1.curr_fwft_state_reg[0] ;
  input \gcc0.gc0.count_d1_reg[2] ;
  input [0:0]E;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire FULL_FB;
  wire [2:0]Q;
  wire clk;
  wire \gcc0.gc0.count_d1_reg[2] ;
  wire [4:0]\gcc0.gc0.count_d1_reg[4] ;
  wire [4:0]\gpr1.dout_i_reg[1] ;
  wire \gpregsm1.curr_fwft_state_reg[0] ;
  wire out;
  wire [4:0]plusOp;
  wire ram_empty_fb_i_i_2_n_0;
  wire ram_empty_fb_i_i_6_n_0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire [4:3]rd_pntr_plus1;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair413" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair413" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair412" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair412" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(rd_pntr_plus1[4]),
        .O(plusOp[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[4]),
        .Q(\gpr1.dout_i_reg[1] [4]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[4]),
        .Q(rd_pntr_plus1[4]));
  LUT5 #(
    .INIT(32'hFFA2F3A2)) 
    ram_empty_fb_i_i_1
       (.I0(ram_empty_fb_i_i_2_n_0),
        .I1(wr_en),
        .I2(FULL_FB),
        .I3(out),
        .I4(ram_empty_fb_i_reg_0),
        .O(ram_empty_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    ram_empty_fb_i_i_2
       (.I0(rd_pntr_plus1[3]),
        .I1(\gcc0.gc0.count_d1_reg[4] [3]),
        .I2(rd_pntr_plus1[4]),
        .I3(\gcc0.gc0.count_d1_reg[4] [4]),
        .I4(\gpregsm1.curr_fwft_state_reg[0] ),
        .I5(\gcc0.gc0.count_d1_reg[2] ),
        .O(ram_empty_fb_i_i_2_n_0));
  LUT5 #(
    .INIT(32'hBEFFFFBE)) 
    ram_empty_fb_i_i_3
       (.I0(ram_empty_fb_i_i_6_n_0),
        .I1(\gpr1.dout_i_reg[1] [2]),
        .I2(\gcc0.gc0.count_d1_reg[4] [2]),
        .I3(\gpr1.dout_i_reg[1] [1]),
        .I4(\gcc0.gc0.count_d1_reg[4] [1]),
        .O(ram_empty_fb_i_reg_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ram_empty_fb_i_i_6
       (.I0(\gpr1.dout_i_reg[1] [4]),
        .I1(\gcc0.gc0.count_d1_reg[4] [4]),
        .I2(\gpr1.dout_i_reg[1] [3]),
        .I3(\gcc0.gc0.count_d1_reg[4] [3]),
        .I4(\gcc0.gc0.count_d1_reg[4] [0]),
        .I5(\gpr1.dout_i_reg[1] [0]),
        .O(ram_empty_fb_i_i_6_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_1_rd_bin_cntr_25
   (Q,
    ram_empty_fb_i_reg,
    ram_empty_fb_i_reg_0,
    \gpr1.dout_i_reg[1] ,
    wr_en,
    FULL_FB,
    out,
    \gcc0.gc0.count_d1_reg[4] ,
    \gpregsm1.curr_fwft_state_reg[0] ,
    \gcc0.gc0.count_d1_reg[2] ,
    E,
    clk,
    AR);
  output [2:0]Q;
  output ram_empty_fb_i_reg;
  output ram_empty_fb_i_reg_0;
  output [4:0]\gpr1.dout_i_reg[1] ;
  input wr_en;
  input FULL_FB;
  input out;
  input [4:0]\gcc0.gc0.count_d1_reg[4] ;
  input \gpregsm1.curr_fwft_state_reg[0] ;
  input \gcc0.gc0.count_d1_reg[2] ;
  input [0:0]E;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire FULL_FB;
  wire [2:0]Q;
  wire clk;
  wire \gcc0.gc0.count_d1_reg[2] ;
  wire [4:0]\gcc0.gc0.count_d1_reg[4] ;
  wire [4:0]\gpr1.dout_i_reg[1] ;
  wire \gpregsm1.curr_fwft_state_reg[0] ;
  wire out;
  wire [4:0]plusOp;
  wire ram_empty_fb_i_i_2_n_0;
  wire ram_empty_fb_i_i_6_n_0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire [4:3]rd_pntr_plus1;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair402" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair402" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair401" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair401" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(rd_pntr_plus1[4]),
        .O(plusOp[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[4]),
        .Q(\gpr1.dout_i_reg[1] [4]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[4]),
        .Q(rd_pntr_plus1[4]));
  LUT5 #(
    .INIT(32'hFFA2F3A2)) 
    ram_empty_fb_i_i_1
       (.I0(ram_empty_fb_i_i_2_n_0),
        .I1(wr_en),
        .I2(FULL_FB),
        .I3(out),
        .I4(ram_empty_fb_i_reg_0),
        .O(ram_empty_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    ram_empty_fb_i_i_2
       (.I0(rd_pntr_plus1[3]),
        .I1(\gcc0.gc0.count_d1_reg[4] [3]),
        .I2(rd_pntr_plus1[4]),
        .I3(\gcc0.gc0.count_d1_reg[4] [4]),
        .I4(\gpregsm1.curr_fwft_state_reg[0] ),
        .I5(\gcc0.gc0.count_d1_reg[2] ),
        .O(ram_empty_fb_i_i_2_n_0));
  LUT5 #(
    .INIT(32'hBEFFFFBE)) 
    ram_empty_fb_i_i_3
       (.I0(ram_empty_fb_i_i_6_n_0),
        .I1(\gpr1.dout_i_reg[1] [2]),
        .I2(\gcc0.gc0.count_d1_reg[4] [2]),
        .I3(\gpr1.dout_i_reg[1] [1]),
        .I4(\gcc0.gc0.count_d1_reg[4] [1]),
        .O(ram_empty_fb_i_reg_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ram_empty_fb_i_i_6
       (.I0(\gpr1.dout_i_reg[1] [4]),
        .I1(\gcc0.gc0.count_d1_reg[4] [4]),
        .I2(\gpr1.dout_i_reg[1] [3]),
        .I3(\gcc0.gc0.count_d1_reg[4] [3]),
        .I4(\gcc0.gc0.count_d1_reg[4] [0]),
        .I5(\gpr1.dout_i_reg[1] [0]),
        .O(ram_empty_fb_i_i_6_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_1_rd_bin_cntr_34
   (Q,
    ram_empty_fb_i_reg,
    ram_empty_fb_i_reg_0,
    \gpr1.dout_i_reg[1] ,
    wr_en,
    FULL_FB,
    out,
    \gcc0.gc0.count_d1_reg[4] ,
    \gpregsm1.curr_fwft_state_reg[0] ,
    \gcc0.gc0.count_d1_reg[2] ,
    E,
    clk,
    AR);
  output [2:0]Q;
  output ram_empty_fb_i_reg;
  output ram_empty_fb_i_reg_0;
  output [4:0]\gpr1.dout_i_reg[1] ;
  input wr_en;
  input FULL_FB;
  input out;
  input [4:0]\gcc0.gc0.count_d1_reg[4] ;
  input \gpregsm1.curr_fwft_state_reg[0] ;
  input \gcc0.gc0.count_d1_reg[2] ;
  input [0:0]E;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire FULL_FB;
  wire [2:0]Q;
  wire clk;
  wire \gcc0.gc0.count_d1_reg[2] ;
  wire [4:0]\gcc0.gc0.count_d1_reg[4] ;
  wire [4:0]\gpr1.dout_i_reg[1] ;
  wire \gpregsm1.curr_fwft_state_reg[0] ;
  wire out;
  wire [4:0]plusOp;
  wire ram_empty_fb_i_i_2_n_0;
  wire ram_empty_fb_i_i_6_n_0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire [4:3]rd_pntr_plus1;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair313" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair313" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair312" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair312" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(rd_pntr_plus1[4]),
        .O(plusOp[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[4]),
        .Q(\gpr1.dout_i_reg[1] [4]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[4]),
        .Q(rd_pntr_plus1[4]));
  LUT5 #(
    .INIT(32'hFFA2F3A2)) 
    ram_empty_fb_i_i_1
       (.I0(ram_empty_fb_i_i_2_n_0),
        .I1(wr_en),
        .I2(FULL_FB),
        .I3(out),
        .I4(ram_empty_fb_i_reg_0),
        .O(ram_empty_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    ram_empty_fb_i_i_2
       (.I0(rd_pntr_plus1[3]),
        .I1(\gcc0.gc0.count_d1_reg[4] [3]),
        .I2(rd_pntr_plus1[4]),
        .I3(\gcc0.gc0.count_d1_reg[4] [4]),
        .I4(\gpregsm1.curr_fwft_state_reg[0] ),
        .I5(\gcc0.gc0.count_d1_reg[2] ),
        .O(ram_empty_fb_i_i_2_n_0));
  LUT5 #(
    .INIT(32'hBEFFFFBE)) 
    ram_empty_fb_i_i_3
       (.I0(ram_empty_fb_i_i_6_n_0),
        .I1(\gpr1.dout_i_reg[1] [2]),
        .I2(\gcc0.gc0.count_d1_reg[4] [2]),
        .I3(\gpr1.dout_i_reg[1] [1]),
        .I4(\gcc0.gc0.count_d1_reg[4] [1]),
        .O(ram_empty_fb_i_reg_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ram_empty_fb_i_i_6
       (.I0(\gpr1.dout_i_reg[1] [4]),
        .I1(\gcc0.gc0.count_d1_reg[4] [4]),
        .I2(\gpr1.dout_i_reg[1] [3]),
        .I3(\gcc0.gc0.count_d1_reg[4] [3]),
        .I4(\gcc0.gc0.count_d1_reg[4] [0]),
        .I5(\gpr1.dout_i_reg[1] [0]),
        .O(ram_empty_fb_i_i_6_n_0));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_1_rd_fwft
   (.out({curr_fwft_state[1],curr_fwft_state[0]}),
    .empty(empty_fwft_i),
    E,
    ram_empty_fb_i_reg,
    ram_full_fb_i_reg,
    clk,
    AR,
    rd_en,
    ram_empty_fb_i_reg_0);
  output [0:0]E;
  output ram_empty_fb_i_reg;
  output ram_full_fb_i_reg;
  input clk;
  input [0:0]AR;
  input rd_en;
  input ram_empty_fb_i_reg_0;
     output [1:0]curr_fwft_state;
  output empty_fwft_i;

  wire \<const1> ;
  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire [1:0]next_fwft_state;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_full_fb_i_reg;
  wire rd_en;
  (* DONT_TOUCH *) wire user_valid;

  VCC VCC
       (.P(\<const1> ));
  LUT5 #(
    .INIT(32'hFAEF8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(ram_empty_fb_i_reg_0),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(curr_fwft_state[1]),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_i));
  LUT4 #(
    .INIT(16'hB2A2)) 
    empty_fwft_fb_i_i_1
       (.I0(empty_fwft_fb_i),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(rd_en),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hB2A2)) 
    empty_fwft_fb_o_i_i_1
       (.I0(empty_fwft_fb_o_i),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(rd_en),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(empty_fwft_fb_o_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h00DF)) 
    \gc0.count_d1[4]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(ram_empty_fb_i_reg_0),
        .O(E));
  LUT3 #(
    .INIT(8'hAE)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(ram_empty_fb_i_reg_0),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AR),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(user_valid));
  LUT3 #(
    .INIT(8'hDF)) 
    ram_empty_fb_i_i_4
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .O(ram_empty_fb_i_reg));
  LUT4 #(
    .INIT(16'hFF08)) 
    ram_full_fb_i_i_3
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(ram_empty_fb_i_reg_0),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_1_rd_fwft_23
   (.out({curr_fwft_state[1],curr_fwft_state[0]}),
    .empty(empty_fwft_i),
    E,
    ram_empty_fb_i_reg,
    ram_full_fb_i_reg,
    clk,
    AR,
    rd_en,
    ram_empty_fb_i_reg_0);
  output [0:0]E;
  output ram_empty_fb_i_reg;
  output ram_full_fb_i_reg;
  input clk;
  input [0:0]AR;
  input rd_en;
  input ram_empty_fb_i_reg_0;
     output [1:0]curr_fwft_state;
  output empty_fwft_i;

  wire \<const1> ;
  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire [1:0]next_fwft_state;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_full_fb_i_reg;
  wire rd_en;
  (* DONT_TOUCH *) wire user_valid;

  VCC VCC
       (.P(\<const1> ));
  LUT5 #(
    .INIT(32'hFAEF8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(ram_empty_fb_i_reg_0),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(curr_fwft_state[1]),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_i));
  LUT4 #(
    .INIT(16'hB2A2)) 
    empty_fwft_fb_i_i_1
       (.I0(empty_fwft_fb_i),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(rd_en),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hB2A2)) 
    empty_fwft_fb_o_i_i_1
       (.I0(empty_fwft_fb_o_i),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(rd_en),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(empty_fwft_fb_o_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h00DF)) 
    \gc0.count_d1[4]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(ram_empty_fb_i_reg_0),
        .O(E));
  LUT3 #(
    .INIT(8'hAE)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(ram_empty_fb_i_reg_0),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AR),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(user_valid));
  LUT3 #(
    .INIT(8'hDF)) 
    ram_empty_fb_i_i_4
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .O(ram_empty_fb_i_reg));
  LUT4 #(
    .INIT(16'hFF08)) 
    ram_full_fb_i_i_3
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(ram_empty_fb_i_reg_0),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_1_rd_fwft_32
   (.out({curr_fwft_state[1],curr_fwft_state[0]}),
    .empty(empty_fwft_i),
    E,
    ram_empty_fb_i_reg,
    ram_full_fb_i_reg,
    clk,
    AR,
    rd_en,
    ram_empty_fb_i_reg_0);
  output [0:0]E;
  output ram_empty_fb_i_reg;
  output ram_full_fb_i_reg;
  input clk;
  input [0:0]AR;
  input rd_en;
  input ram_empty_fb_i_reg_0;
     output [1:0]curr_fwft_state;
  output empty_fwft_i;

  wire \<const1> ;
  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire [1:0]next_fwft_state;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_full_fb_i_reg;
  wire rd_en;
  (* DONT_TOUCH *) wire user_valid;

  VCC VCC
       (.P(\<const1> ));
  LUT5 #(
    .INIT(32'hFAEF8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(ram_empty_fb_i_reg_0),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(curr_fwft_state[1]),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_i));
  LUT4 #(
    .INIT(16'hB2A2)) 
    empty_fwft_fb_i_i_1
       (.I0(empty_fwft_fb_i),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(rd_en),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hB2A2)) 
    empty_fwft_fb_o_i_i_1
       (.I0(empty_fwft_fb_o_i),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(rd_en),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(empty_fwft_fb_o_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h00DF)) 
    \gc0.count_d1[4]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(ram_empty_fb_i_reg_0),
        .O(E));
  LUT3 #(
    .INIT(8'hAE)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(ram_empty_fb_i_reg_0),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AR),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(user_valid));
  LUT3 #(
    .INIT(8'hDF)) 
    ram_empty_fb_i_i_4
       (.I0(curr_fwft_state[0]),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .O(ram_empty_fb_i_reg));
  LUT4 #(
    .INIT(16'hFF08)) 
    ram_full_fb_i_i_3
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(ram_empty_fb_i_reg_0),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_1_rd_logic
   (out,
    empty,
    Q,
    ram_empty_fb_i_reg,
    E,
    \gpr1.dout_i_reg[1] ,
    ram_full_fb_i_reg,
    clk,
    AR,
    rd_en,
    wr_en,
    FULL_FB,
    \gcc0.gc0.count_d1_reg[4] ,
    \gcc0.gc0.count_d1_reg[2] );
  output [1:0]out;
  output empty;
  output [2:0]Q;
  output ram_empty_fb_i_reg;
  output [0:0]E;
  output [4:0]\gpr1.dout_i_reg[1] ;
  output ram_full_fb_i_reg;
  input clk;
  input [0:0]AR;
  input rd_en;
  input wr_en;
  input FULL_FB;
  input [4:0]\gcc0.gc0.count_d1_reg[4] ;
  input \gcc0.gc0.count_d1_reg[2] ;

  wire [0:0]AR;
  wire [0:0]E;
  wire FULL_FB;
  wire [2:0]Q;
  wire clk;
  wire empty;
  wire \gcc0.gc0.count_d1_reg[2] ;
  wire [4:0]\gcc0.gc0.count_d1_reg[4] ;
  wire [4:0]\gpr1.dout_i_reg[1] ;
  wire \gr1.gr1_int.rfwft_n_4 ;
  wire [1:0]out;
  wire p_2_out;
  wire ram_empty_fb_i_reg;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire rpntr_n_3;
  wire wr_en;

  bd_1_rd_fwft \gr1.gr1_int.rfwft 
       (.AR(AR),
        .E(E),
        .clk(clk),
        .empty(empty),
        .out(out),
        .ram_empty_fb_i_reg(\gr1.gr1_int.rfwft_n_4 ),
        .ram_empty_fb_i_reg_0(p_2_out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en));
  bd_1_rd_status_flags_ss \grss.rsts 
       (.AR(AR),
        .clk(clk),
        .out(p_2_out),
        .ram_full_fb_i_reg(rpntr_n_3));
  bd_1_rd_bin_cntr rpntr
       (.AR(AR),
        .E(E),
        .FULL_FB(FULL_FB),
        .Q(Q),
        .clk(clk),
        .\gcc0.gc0.count_d1_reg[2] (\gcc0.gc0.count_d1_reg[2] ),
        .\gcc0.gc0.count_d1_reg[4] (\gcc0.gc0.count_d1_reg[4] ),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ),
        .\gpregsm1.curr_fwft_state_reg[0] (\gr1.gr1_int.rfwft_n_4 ),
        .out(p_2_out),
        .ram_empty_fb_i_reg(rpntr_n_3),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_1_rd_logic_19
   (out,
    empty,
    Q,
    ram_empty_fb_i_reg,
    E,
    \gpr1.dout_i_reg[1] ,
    ram_full_fb_i_reg,
    clk,
    AR,
    rd_en,
    wr_en,
    FULL_FB,
    \gcc0.gc0.count_d1_reg[4] ,
    \gcc0.gc0.count_d1_reg[2] );
  output [1:0]out;
  output empty;
  output [2:0]Q;
  output ram_empty_fb_i_reg;
  output [0:0]E;
  output [4:0]\gpr1.dout_i_reg[1] ;
  output ram_full_fb_i_reg;
  input clk;
  input [0:0]AR;
  input rd_en;
  input wr_en;
  input FULL_FB;
  input [4:0]\gcc0.gc0.count_d1_reg[4] ;
  input \gcc0.gc0.count_d1_reg[2] ;

  wire [0:0]AR;
  wire [0:0]E;
  wire FULL_FB;
  wire [2:0]Q;
  wire clk;
  wire empty;
  wire \gcc0.gc0.count_d1_reg[2] ;
  wire [4:0]\gcc0.gc0.count_d1_reg[4] ;
  wire [4:0]\gpr1.dout_i_reg[1] ;
  wire \gr1.gr1_int.rfwft_n_4 ;
  wire [1:0]out;
  wire p_2_out;
  wire ram_empty_fb_i_reg;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire rpntr_n_3;
  wire wr_en;

  bd_1_rd_fwft_23 \gr1.gr1_int.rfwft 
       (.AR(AR),
        .E(E),
        .clk(clk),
        .empty(empty),
        .out(out),
        .ram_empty_fb_i_reg(\gr1.gr1_int.rfwft_n_4 ),
        .ram_empty_fb_i_reg_0(p_2_out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en));
  bd_1_rd_status_flags_ss_24 \grss.rsts 
       (.AR(AR),
        .clk(clk),
        .out(p_2_out),
        .ram_full_fb_i_reg(rpntr_n_3));
  bd_1_rd_bin_cntr_25 rpntr
       (.AR(AR),
        .E(E),
        .FULL_FB(FULL_FB),
        .Q(Q),
        .clk(clk),
        .\gcc0.gc0.count_d1_reg[2] (\gcc0.gc0.count_d1_reg[2] ),
        .\gcc0.gc0.count_d1_reg[4] (\gcc0.gc0.count_d1_reg[4] ),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ),
        .\gpregsm1.curr_fwft_state_reg[0] (\gr1.gr1_int.rfwft_n_4 ),
        .out(p_2_out),
        .ram_empty_fb_i_reg(rpntr_n_3),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_1_rd_logic_26
   (out,
    empty,
    Q,
    ram_empty_fb_i_reg,
    E,
    \gpr1.dout_i_reg[1] ,
    ram_full_fb_i_reg,
    clk,
    AR,
    rd_en,
    wr_en,
    FULL_FB,
    \gcc0.gc0.count_d1_reg[4] ,
    \gcc0.gc0.count_d1_reg[2] );
  output [1:0]out;
  output empty;
  output [2:0]Q;
  output ram_empty_fb_i_reg;
  output [0:0]E;
  output [4:0]\gpr1.dout_i_reg[1] ;
  output ram_full_fb_i_reg;
  input clk;
  input [0:0]AR;
  input rd_en;
  input wr_en;
  input FULL_FB;
  input [4:0]\gcc0.gc0.count_d1_reg[4] ;
  input \gcc0.gc0.count_d1_reg[2] ;

  wire [0:0]AR;
  wire [0:0]E;
  wire FULL_FB;
  wire [2:0]Q;
  wire clk;
  wire empty;
  wire \gcc0.gc0.count_d1_reg[2] ;
  wire [4:0]\gcc0.gc0.count_d1_reg[4] ;
  wire [4:0]\gpr1.dout_i_reg[1] ;
  wire \gr1.gr1_int.rfwft_n_4 ;
  wire [1:0]out;
  wire p_2_out;
  wire ram_empty_fb_i_reg;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire rpntr_n_3;
  wire wr_en;

  bd_1_rd_fwft_32 \gr1.gr1_int.rfwft 
       (.AR(AR),
        .E(E),
        .clk(clk),
        .empty(empty),
        .out(out),
        .ram_empty_fb_i_reg(\gr1.gr1_int.rfwft_n_4 ),
        .ram_empty_fb_i_reg_0(p_2_out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en));
  bd_1_rd_status_flags_ss_33 \grss.rsts 
       (.AR(AR),
        .clk(clk),
        .out(p_2_out),
        .ram_full_fb_i_reg(rpntr_n_3));
  bd_1_rd_bin_cntr_34 rpntr
       (.AR(AR),
        .E(E),
        .FULL_FB(FULL_FB),
        .Q(Q),
        .clk(clk),
        .\gcc0.gc0.count_d1_reg[2] (\gcc0.gc0.count_d1_reg[2] ),
        .\gcc0.gc0.count_d1_reg[4] (\gcc0.gc0.count_d1_reg[4] ),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ),
        .\gpregsm1.curr_fwft_state_reg[0] (\gr1.gr1_int.rfwft_n_4 ),
        .out(p_2_out),
        .ram_empty_fb_i_reg(rpntr_n_3),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_1_rd_status_flags_ss
   (.out(ram_empty_fb_i),
    ram_full_fb_i_reg,
    clk,
    AR);
  input ram_full_fb_i_reg;
  input clk;
  input [0:0]AR;
  output ram_empty_fb_i;

  wire \<const1> ;
  wire [0:0]AR;
  wire clk;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;

  VCC VCC
       (.P(\<const1> ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(ram_full_fb_i_reg),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(ram_full_fb_i_reg),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_1_rd_status_flags_ss_24
   (.out(ram_empty_fb_i),
    ram_full_fb_i_reg,
    clk,
    AR);
  input ram_full_fb_i_reg;
  input clk;
  input [0:0]AR;
  output ram_empty_fb_i;

  wire \<const1> ;
  wire [0:0]AR;
  wire clk;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;

  VCC VCC
       (.P(\<const1> ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(ram_full_fb_i_reg),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(ram_full_fb_i_reg),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_1_rd_status_flags_ss_33
   (.out(ram_empty_fb_i),
    ram_full_fb_i_reg,
    clk,
    AR);
  input ram_full_fb_i_reg;
  input clk;
  input [0:0]AR;
  output ram_empty_fb_i;

  wire \<const1> ;
  wire [0:0]AR;
  wire clk;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;

  VCC VCC
       (.P(\<const1> ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(ram_full_fb_i_reg),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .D(ram_full_fb_i_reg),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_1_reset_blk_ramfifo
   (AS,
    E,
    rst,
    clk,
    out,
    rd_en);
  output [0:0]AS;
  output [0:0]E;
  input rst;
  input clk;
  input [1:0]out;
  input rd_en;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]AS;
  wire [0:0]E;
  wire clk;
  wire [1:0]out;
  wire rd_en;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire [1:0]sckt_wr_rst_cc;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT3 #(
    .INIT(8'hFE)) 
    \gc0.count_d1[4]_i_2 
       (.I0(sckt_wr_rst_cc[1]),
        .I1(sckt_wr_rst_cc[0]),
        .I2(rst_wr_reg2),
        .O(AS));
  LUT6 #(
    .INIT(64'h0010001000000010)) 
    \goreg_dm.dout_i[25]_i_1 
       (.I0(rst_wr_reg2),
        .I1(sckt_wr_rst_cc[0]),
        .I2(out[1]),
        .I3(sckt_wr_rst_cc[1]),
        .I4(out[0]),
        .I5(rd_en),
        .O(E));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(clk),
        .CE(\<const1> ),
        .D(rst_wr_reg2),
        .Q(sckt_wr_rst_cc[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(clk),
        .CE(\<const1> ),
        .D(sckt_wr_rst_cc[0]),
        .Q(sckt_wr_rst_cc[1]),
        .R(\<const0> ));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_1_xpm_cdc_async_rst__4 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(clk),
        .src_arst(rst));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_1_reset_blk_ramfifo__xdcDup__1
   (AS,
    E,
    rst,
    clk,
    out,
    rd_en);
  output [0:0]AS;
  output [0:0]E;
  input rst;
  input clk;
  input [1:0]out;
  input rd_en;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]AS;
  wire [0:0]E;
  wire clk;
  wire [1:0]out;
  wire rd_en;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire [1:0]sckt_wr_rst_cc;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT3 #(
    .INIT(8'hFE)) 
    \gc0.count_d1[4]_i_2 
       (.I0(sckt_wr_rst_cc[1]),
        .I1(sckt_wr_rst_cc[0]),
        .I2(rst_wr_reg2),
        .O(AS));
  LUT6 #(
    .INIT(64'h0010001000000010)) 
    \goreg_dm.dout_i[25]_i_1 
       (.I0(rst_wr_reg2),
        .I1(sckt_wr_rst_cc[0]),
        .I2(out[1]),
        .I3(sckt_wr_rst_cc[1]),
        .I4(out[0]),
        .I5(rd_en),
        .O(E));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(clk),
        .CE(\<const1> ),
        .D(rst_wr_reg2),
        .Q(sckt_wr_rst_cc[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(clk),
        .CE(\<const1> ),
        .D(sckt_wr_rst_cc[0]),
        .Q(sckt_wr_rst_cc[1]),
        .R(\<const0> ));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_1_xpm_cdc_async_rst \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(clk),
        .src_arst(rst));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_1_reset_blk_ramfifo__xdcDup__2
   (AS,
    E,
    rst,
    clk,
    out,
    rd_en);
  output [0:0]AS;
  output [0:0]E;
  input rst;
  input clk;
  input [1:0]out;
  input rd_en;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]AS;
  wire [0:0]E;
  wire clk;
  wire [1:0]out;
  wire rd_en;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire [1:0]sckt_wr_rst_cc;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT3 #(
    .INIT(8'hFE)) 
    \gc0.count_d1[4]_i_2 
       (.I0(sckt_wr_rst_cc[1]),
        .I1(sckt_wr_rst_cc[0]),
        .I2(rst_wr_reg2),
        .O(AS));
  LUT6 #(
    .INIT(64'h0010001000000010)) 
    \goreg_dm.dout_i[8]_i_1 
       (.I0(rst_wr_reg2),
        .I1(sckt_wr_rst_cc[0]),
        .I2(out[1]),
        .I3(sckt_wr_rst_cc[1]),
        .I4(out[0]),
        .I5(rd_en),
        .O(E));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(clk),
        .CE(\<const1> ),
        .D(rst_wr_reg2),
        .Q(sckt_wr_rst_cc[0]),
        .R(\<const0> ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(clk),
        .CE(\<const1> ),
        .D(sckt_wr_rst_cc[0]),
        .Q(sckt_wr_rst_cc[1]),
        .R(\<const0> ));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_1_xpm_cdc_async_rst__3 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(clk),
        .src_arst(rst));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_1_wr_bin_cntr
   (ram_full_comb,
    ram_empty_fb_i_reg,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    FULL_FB,
    \gc0.count_d1_reg[2] ,
    \gc0.count_reg[2] ,
    wr_en,
    \gc0.count_d1_reg[4] ,
    E,
    clk,
    AS);
  output ram_full_comb;
  output ram_empty_fb_i_reg;
  output [4:0]Q;
  input \gpregsm1.curr_fwft_state_reg[0] ;
  input FULL_FB;
  input \gc0.count_d1_reg[2] ;
  input [2:0]\gc0.count_reg[2] ;
  input wr_en;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [0:0]E;
  input clk;
  input [0:0]AS;

  wire [0:0]AS;
  wire [0:0]E;
  wire FULL_FB;
  wire [4:0]Q;
  wire clk;
  wire \gc0.count_d1_reg[2] ;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [2:0]\gc0.count_reg[2] ;
  wire \gpregsm1.curr_fwft_state_reg[0] ;
  wire [4:0]p_13_out;
  wire [4:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_full_comb;
  wire ram_full_fb_i_i_2_n_0;
  wire ram_full_fb_i_i_4_n_0;
  wire ram_full_fb_i_i_5_n_0;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_13_out[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair415" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(p_13_out[1]),
        .I1(p_13_out[0]),
        .I2(p_13_out[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair414" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(p_13_out[2]),
        .I1(p_13_out[0]),
        .I2(p_13_out[1]),
        .I3(p_13_out[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair414" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[4]_i_1 
       (.I0(p_13_out[3]),
        .I1(p_13_out[1]),
        .I2(p_13_out[0]),
        .I3(p_13_out[2]),
        .I4(p_13_out[4]),
        .O(plusOp__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[4]),
        .Q(Q[4]));
  FDPE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(AS),
        .Q(p_13_out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[1]),
        .Q(p_13_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[2]),
        .Q(p_13_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[3]),
        .Q(p_13_out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[4]),
        .Q(p_13_out[4]));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_fb_i_i_5
       (.I0(Q[2]),
        .I1(\gc0.count_reg[2] [2]),
        .I2(Q[1]),
        .I3(\gc0.count_reg[2] [1]),
        .I4(\gc0.count_reg[2] [0]),
        .I5(Q[0]),
        .O(ram_empty_fb_i_reg));
  LUT4 #(
    .INIT(16'hF8C8)) 
    ram_full_fb_i_i_1
       (.I0(ram_full_fb_i_i_2_n_0),
        .I1(\gpregsm1.curr_fwft_state_reg[0] ),
        .I2(FULL_FB),
        .I3(\gc0.count_d1_reg[2] ),
        .O(ram_full_comb));
  LUT5 #(
    .INIT(32'h80000080)) 
    ram_full_fb_i_i_2
       (.I0(ram_full_fb_i_i_4_n_0),
        .I1(ram_full_fb_i_i_5_n_0),
        .I2(wr_en),
        .I3(\gc0.count_d1_reg[4] [4]),
        .I4(p_13_out[4]),
        .O(ram_full_fb_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_4
       (.I0(p_13_out[2]),
        .I1(\gc0.count_d1_reg[4] [2]),
        .I2(p_13_out[3]),
        .I3(\gc0.count_d1_reg[4] [3]),
        .O(ram_full_fb_i_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair415" *) 
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_5
       (.I0(p_13_out[0]),
        .I1(\gc0.count_d1_reg[4] [0]),
        .I2(p_13_out[1]),
        .I3(\gc0.count_d1_reg[4] [1]),
        .O(ram_full_fb_i_i_5_n_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_1_wr_bin_cntr_22
   (ram_full_comb,
    ram_empty_fb_i_reg,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    FULL_FB,
    \gc0.count_d1_reg[2] ,
    \gc0.count_reg[2] ,
    wr_en,
    \gc0.count_d1_reg[4] ,
    E,
    clk,
    AS);
  output ram_full_comb;
  output ram_empty_fb_i_reg;
  output [4:0]Q;
  input \gpregsm1.curr_fwft_state_reg[0] ;
  input FULL_FB;
  input \gc0.count_d1_reg[2] ;
  input [2:0]\gc0.count_reg[2] ;
  input wr_en;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [0:0]E;
  input clk;
  input [0:0]AS;

  wire [0:0]AS;
  wire [0:0]E;
  wire FULL_FB;
  wire [4:0]Q;
  wire clk;
  wire \gc0.count_d1_reg[2] ;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [2:0]\gc0.count_reg[2] ;
  wire \gpregsm1.curr_fwft_state_reg[0] ;
  wire [4:0]p_13_out;
  wire [4:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_full_comb;
  wire ram_full_fb_i_i_2_n_0;
  wire ram_full_fb_i_i_4_n_0;
  wire ram_full_fb_i_i_5_n_0;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_13_out[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair404" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(p_13_out[1]),
        .I1(p_13_out[0]),
        .I2(p_13_out[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair403" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(p_13_out[2]),
        .I1(p_13_out[0]),
        .I2(p_13_out[1]),
        .I3(p_13_out[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair403" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[4]_i_1 
       (.I0(p_13_out[3]),
        .I1(p_13_out[1]),
        .I2(p_13_out[0]),
        .I3(p_13_out[2]),
        .I4(p_13_out[4]),
        .O(plusOp__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[4]),
        .Q(Q[4]));
  FDPE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(AS),
        .Q(p_13_out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[1]),
        .Q(p_13_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[2]),
        .Q(p_13_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[3]),
        .Q(p_13_out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[4]),
        .Q(p_13_out[4]));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_fb_i_i_5
       (.I0(Q[2]),
        .I1(\gc0.count_reg[2] [2]),
        .I2(Q[1]),
        .I3(\gc0.count_reg[2] [1]),
        .I4(\gc0.count_reg[2] [0]),
        .I5(Q[0]),
        .O(ram_empty_fb_i_reg));
  LUT4 #(
    .INIT(16'hF8C8)) 
    ram_full_fb_i_i_1
       (.I0(ram_full_fb_i_i_2_n_0),
        .I1(\gpregsm1.curr_fwft_state_reg[0] ),
        .I2(FULL_FB),
        .I3(\gc0.count_d1_reg[2] ),
        .O(ram_full_comb));
  LUT5 #(
    .INIT(32'h80000080)) 
    ram_full_fb_i_i_2
       (.I0(ram_full_fb_i_i_4_n_0),
        .I1(ram_full_fb_i_i_5_n_0),
        .I2(wr_en),
        .I3(\gc0.count_d1_reg[4] [4]),
        .I4(p_13_out[4]),
        .O(ram_full_fb_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_4
       (.I0(p_13_out[2]),
        .I1(\gc0.count_d1_reg[4] [2]),
        .I2(p_13_out[3]),
        .I3(\gc0.count_d1_reg[4] [3]),
        .O(ram_full_fb_i_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair404" *) 
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_5
       (.I0(p_13_out[0]),
        .I1(\gc0.count_d1_reg[4] [0]),
        .I2(p_13_out[1]),
        .I3(\gc0.count_d1_reg[4] [1]),
        .O(ram_full_fb_i_i_5_n_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_1_wr_bin_cntr_31
   (ram_full_comb,
    ram_empty_fb_i_reg,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    FULL_FB,
    \gc0.count_d1_reg[2] ,
    \gc0.count_reg[2] ,
    wr_en,
    \gc0.count_d1_reg[4] ,
    E,
    clk,
    AS);
  output ram_full_comb;
  output ram_empty_fb_i_reg;
  output [4:0]Q;
  input \gpregsm1.curr_fwft_state_reg[0] ;
  input FULL_FB;
  input \gc0.count_d1_reg[2] ;
  input [2:0]\gc0.count_reg[2] ;
  input wr_en;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [0:0]E;
  input clk;
  input [0:0]AS;

  wire [0:0]AS;
  wire [0:0]E;
  wire FULL_FB;
  wire [4:0]Q;
  wire clk;
  wire \gc0.count_d1_reg[2] ;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [2:0]\gc0.count_reg[2] ;
  wire \gpregsm1.curr_fwft_state_reg[0] ;
  wire [4:0]p_13_out;
  wire [4:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_full_comb;
  wire ram_full_fb_i_i_2_n_0;
  wire ram_full_fb_i_i_4_n_0;
  wire ram_full_fb_i_i_5_n_0;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_13_out[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair315" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(p_13_out[1]),
        .I1(p_13_out[0]),
        .I2(p_13_out[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair314" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(p_13_out[2]),
        .I1(p_13_out[0]),
        .I2(p_13_out[1]),
        .I3(p_13_out[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair314" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc0.count[4]_i_1 
       (.I0(p_13_out[3]),
        .I1(p_13_out[1]),
        .I2(p_13_out[0]),
        .I3(p_13_out[2]),
        .I4(p_13_out[4]),
        .O(plusOp__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[4]),
        .Q(Q[4]));
  FDPE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(AS),
        .Q(p_13_out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[1]),
        .Q(p_13_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[2]),
        .Q(p_13_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[3]),
        .Q(p_13_out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[4]),
        .Q(p_13_out[4]));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_fb_i_i_5
       (.I0(Q[2]),
        .I1(\gc0.count_reg[2] [2]),
        .I2(Q[1]),
        .I3(\gc0.count_reg[2] [1]),
        .I4(\gc0.count_reg[2] [0]),
        .I5(Q[0]),
        .O(ram_empty_fb_i_reg));
  LUT4 #(
    .INIT(16'hF8C8)) 
    ram_full_fb_i_i_1
       (.I0(ram_full_fb_i_i_2_n_0),
        .I1(\gpregsm1.curr_fwft_state_reg[0] ),
        .I2(FULL_FB),
        .I3(\gc0.count_d1_reg[2] ),
        .O(ram_full_comb));
  LUT5 #(
    .INIT(32'h80000080)) 
    ram_full_fb_i_i_2
       (.I0(ram_full_fb_i_i_4_n_0),
        .I1(ram_full_fb_i_i_5_n_0),
        .I2(wr_en),
        .I3(\gc0.count_d1_reg[4] [4]),
        .I4(p_13_out[4]),
        .O(ram_full_fb_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_4
       (.I0(p_13_out[2]),
        .I1(\gc0.count_d1_reg[4] [2]),
        .I2(p_13_out[3]),
        .I3(\gc0.count_d1_reg[4] [3]),
        .O(ram_full_fb_i_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair315" *) 
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_5
       (.I0(p_13_out[0]),
        .I1(\gc0.count_d1_reg[4] [0]),
        .I2(p_13_out[1]),
        .I3(\gc0.count_d1_reg[4] [1]),
        .O(ram_full_fb_i_i_5_n_0));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_1_wr_logic
   (FULL_FB,
    full,
    E,
    ram_empty_fb_i_reg,
    Q,
    clk,
    AS,
    wr_en,
    \gpregsm1.curr_fwft_state_reg[0] ,
    \gc0.count_d1_reg[2] ,
    \gc0.count_reg[2] ,
    \gc0.count_d1_reg[4] );
  output FULL_FB;
  output full;
  output [0:0]E;
  output ram_empty_fb_i_reg;
  output [4:0]Q;
  input clk;
  input [0:0]AS;
  input wr_en;
  input \gpregsm1.curr_fwft_state_reg[0] ;
  input \gc0.count_d1_reg[2] ;
  input [2:0]\gc0.count_reg[2] ;
  input [4:0]\gc0.count_d1_reg[4] ;

  wire [0:0]AS;
  wire [0:0]E;
  wire FULL_FB;
  wire [4:0]Q;
  wire clk;
  wire full;
  wire \gc0.count_d1_reg[2] ;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [2:0]\gc0.count_reg[2] ;
  wire \gpregsm1.curr_fwft_state_reg[0] ;
  wire ram_empty_fb_i_reg;
  wire ram_full_comb;
  wire wr_en;

  bd_1_wr_status_flags_ss \gwss.wsts 
       (.AS(AS),
        .E(E),
        .FULL_FB(FULL_FB),
        .clk(clk),
        .full(full),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
  bd_1_wr_bin_cntr wpntr
       (.AS(AS),
        .E(E),
        .FULL_FB(FULL_FB),
        .Q(Q),
        .clk(clk),
        .\gc0.count_d1_reg[2] (\gc0.count_d1_reg[2] ),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gc0.count_reg[2] (\gc0.count_reg[2] ),
        .\gpregsm1.curr_fwft_state_reg[0] (\gpregsm1.curr_fwft_state_reg[0] ),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_1_wr_logic_20
   (FULL_FB,
    full,
    E,
    ram_empty_fb_i_reg,
    Q,
    clk,
    AS,
    wr_en,
    \gpregsm1.curr_fwft_state_reg[0] ,
    \gc0.count_d1_reg[2] ,
    \gc0.count_reg[2] ,
    \gc0.count_d1_reg[4] );
  output FULL_FB;
  output full;
  output [0:0]E;
  output ram_empty_fb_i_reg;
  output [4:0]Q;
  input clk;
  input [0:0]AS;
  input wr_en;
  input \gpregsm1.curr_fwft_state_reg[0] ;
  input \gc0.count_d1_reg[2] ;
  input [2:0]\gc0.count_reg[2] ;
  input [4:0]\gc0.count_d1_reg[4] ;

  wire [0:0]AS;
  wire [0:0]E;
  wire FULL_FB;
  wire [4:0]Q;
  wire clk;
  wire full;
  wire \gc0.count_d1_reg[2] ;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [2:0]\gc0.count_reg[2] ;
  wire \gpregsm1.curr_fwft_state_reg[0] ;
  wire ram_empty_fb_i_reg;
  wire ram_full_comb;
  wire wr_en;

  bd_1_wr_status_flags_ss_21 \gwss.wsts 
       (.AS(AS),
        .E(E),
        .FULL_FB(FULL_FB),
        .clk(clk),
        .full(full),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
  bd_1_wr_bin_cntr_22 wpntr
       (.AS(AS),
        .E(E),
        .FULL_FB(FULL_FB),
        .Q(Q),
        .clk(clk),
        .\gc0.count_d1_reg[2] (\gc0.count_d1_reg[2] ),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gc0.count_reg[2] (\gc0.count_reg[2] ),
        .\gpregsm1.curr_fwft_state_reg[0] (\gpregsm1.curr_fwft_state_reg[0] ),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_1_wr_logic_27
   (FULL_FB,
    full,
    E,
    ram_empty_fb_i_reg,
    Q,
    clk,
    AS,
    wr_en,
    \gpregsm1.curr_fwft_state_reg[0] ,
    \gc0.count_d1_reg[2] ,
    \gc0.count_reg[2] ,
    \gc0.count_d1_reg[4] );
  output FULL_FB;
  output full;
  output [0:0]E;
  output ram_empty_fb_i_reg;
  output [4:0]Q;
  input clk;
  input [0:0]AS;
  input wr_en;
  input \gpregsm1.curr_fwft_state_reg[0] ;
  input \gc0.count_d1_reg[2] ;
  input [2:0]\gc0.count_reg[2] ;
  input [4:0]\gc0.count_d1_reg[4] ;

  wire [0:0]AS;
  wire [0:0]E;
  wire FULL_FB;
  wire [4:0]Q;
  wire clk;
  wire full;
  wire \gc0.count_d1_reg[2] ;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [2:0]\gc0.count_reg[2] ;
  wire \gpregsm1.curr_fwft_state_reg[0] ;
  wire ram_empty_fb_i_reg;
  wire ram_full_comb;
  wire wr_en;

  bd_1_wr_status_flags_ss_30 \gwss.wsts 
       (.AS(AS),
        .E(E),
        .FULL_FB(FULL_FB),
        .clk(clk),
        .full(full),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
  bd_1_wr_bin_cntr_31 wpntr
       (.AS(AS),
        .E(E),
        .FULL_FB(FULL_FB),
        .Q(Q),
        .clk(clk),
        .\gc0.count_d1_reg[2] (\gc0.count_d1_reg[2] ),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gc0.count_reg[2] (\gc0.count_reg[2] ),
        .\gpregsm1.curr_fwft_state_reg[0] (\gpregsm1.curr_fwft_state_reg[0] ),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_1_wr_status_flags_ss
   (.FULL_FB(ram_full_fb_i),
    .full(ram_full_i),
    E,
    ram_full_comb,
    clk,
    AS,
    wr_en);
  output [0:0]E;
  input ram_full_comb;
  input clk;
  input [0:0]AS;
  input wr_en;
  output ram_full_fb_i;
  output ram_full_i;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]AS;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_full_comb;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT2 #(
    .INIT(4'h2)) 
    \gcc0.gc0.count_d1[4]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(\<const0> ),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(\<const0> ),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_1_wr_status_flags_ss_21
   (.FULL_FB(ram_full_fb_i),
    .full(ram_full_i),
    E,
    ram_full_comb,
    clk,
    AS,
    wr_en);
  output [0:0]E;
  input ram_full_comb;
  input clk;
  input [0:0]AS;
  input wr_en;
  output ram_full_fb_i;
  output ram_full_i;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]AS;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_full_comb;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT2 #(
    .INIT(4'h2)) 
    \gcc0.gc0.count_d1[4]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(\<const0> ),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(\<const0> ),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_1_wr_status_flags_ss_30
   (.FULL_FB(ram_full_fb_i),
    .full(ram_full_i),
    E,
    ram_full_comb,
    clk,
    AS,
    wr_en);
  output [0:0]E;
  input ram_full_comb;
  input clk;
  input [0:0]AS;
  input wr_en;
  output ram_full_fb_i;
  output ram_full_i;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]AS;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_full_comb;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT2 #(
    .INIT(4'h2)) 
    \gcc0.gc0.count_d1[4]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(\<const0> ),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(\<const0> ),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(\<const1> ),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_i));
endmodule
